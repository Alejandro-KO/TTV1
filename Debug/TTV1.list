
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a010  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a48c  0800a48c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a494  0800a494  0001a494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a498  0800a498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800a49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000370  2400009c  0800a538  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400040c  0800a538  0002040c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016503  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000249b  00000000  00000000  000365cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e0  00000000  00000000  00038a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001018  00000000  00000000  00039b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a10  00000000  00000000  0003ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000167f3  00000000  00000000  0006d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c3f5  00000000  00000000  00083d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d0158  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a20  00000000  00000000  001d01a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a2c8 	.word	0x0800a2c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	0800a2c8 	.word	0x0800a2c8

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	0000      	movs	r0, r0
	...

08000618 <radianes_a_valor>:
uint16_t generateRandomAngle() {
    // Generar un número aleatorio en el rango de 0 a 180
    return rand() % 181;
}

uint32_t radianes_a_valor(float radianes) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes < 0) radianes = 0;
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062e:	d502      	bpl.n	8000636 <radianes_a_valor+0x1e>
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
    if (radianes > M_PI) radianes = M_PI;
 8000636:	edd7 7a01 	vldr	s15, [r7, #4]
 800063a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800063e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000680 <radianes_a_valor+0x68>
 8000642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	dd01      	ble.n	8000650 <radianes_a_valor+0x38>
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <radianes_a_valor+0x78>)
 800064e:	607b      	str	r3, [r7, #4]

    // Conversión lineal
    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000650:	edd7 7a01 	vldr	s15, [r7, #4]
 8000654:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000658:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000680 <radianes_a_valor+0x68>
 800065c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000660:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000688 <radianes_a_valor+0x70>
 8000664:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000668:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800066c:	ee17 3a90 	vmov	r3, s15
 8000670:	3341      	adds	r3, #65	; 0x41
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	54442d18 	.word	0x54442d18
 8000684:	400921fb 	.word	0x400921fb
 8000688:	00000000 	.word	0x00000000
 800068c:	406d6000 	.word	0x406d6000
 8000690:	40490fdb 	.word	0x40490fdb

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    char cadena[7] = "123005";
 800069a:	4a40      	ldr	r2, [pc, #256]	; (800079c <main+0x108>)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a4:	6018      	str	r0, [r3, #0]
 80006a6:	3304      	adds	r3, #4
 80006a8:	8019      	strh	r1, [r3, #0]
 80006aa:	3302      	adds	r3, #2
 80006ac:	0c0a      	lsrs	r2, r1, #16
 80006ae:	701a      	strb	r2, [r3, #0]

    // Definir dos arreglos para almacenar las partes de 3 caracteres cada una
    char parte1[4], parte2[4];

    // Copiar los primeros 3 caracteres en parte1
    strncpy(parte1, cadena, 3);
 80006b0:	f107 0108 	add.w	r1, r7, #8
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2203      	movs	r2, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f009 fd65 	bl	800a188 <strncpy>
    parte1[3] = '\0'; // Asegurarse de que parte1 sea una cadena de caracteres válida
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]

    // Copiar los últimos 3 caracteres en parte2
    strncpy(parte2, cadena + 3, 3);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	3303      	adds	r3, #3
 80006c8:	4638      	mov	r0, r7
 80006ca:	2203      	movs	r2, #3
 80006cc:	4619      	mov	r1, r3
 80006ce:	f009 fd5b 	bl	800a188 <strncpy>
    parte2[3] = '\0'; // Asegurarse de que parte2 sea una cadena de caracteres válida
 80006d2:	2300      	movs	r3, #0
 80006d4:	70fb      	strb	r3, [r7, #3]

    // Convertir las partes a números enteros
    int numero1 = atoi(parte1);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f009 fd1f 	bl	800a11c <atoi>
 80006de:	6178      	str	r0, [r7, #20]
    int numero2 = atoi(parte2);
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f009 fd1a 	bl	800a11c <atoi>
 80006e8:	6138      	str	r0, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f001 f909 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f865 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 fa2f 	bl	8000b54 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 f95d 	bl	80009b4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80006fa:	f000 f9f3 	bl	8000ae4 <MX_DMA_Init>
  MX_TIM1_Init();
 80006fe:	f000 f8bd 	bl	800087c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000702:	f000 f9a3 	bl	8000a4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000706:	210c      	movs	r1, #12
 8000708:	4825      	ldr	r0, [pc, #148]	; (80007a0 <main+0x10c>)
 800070a:	f006 f98d 	bl	8006a28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800070e:	2104      	movs	r1, #4
 8000710:	4823      	ldr	r0, [pc, #140]	; (80007a0 <main+0x10c>)
 8000712:	f006 f989 	bl	8006a28 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
 8000716:	2201      	movs	r2, #1
 8000718:	4922      	ldr	r1, [pc, #136]	; (80007a4 <main+0x110>)
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <main+0x114>)
 800071c:	f007 f978 	bl	8007a10 <HAL_UART_Receive_IT>
  TIM1->CCR4 = 183;
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <main+0x118>)
 8000722:	22b7      	movs	r2, #183	; 0xb7
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
  TIM1->CCR2 =183;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <main+0x118>)
 8000728:	22b7      	movs	r2, #183	; 0xb7
 800072a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  TIM1->CCR4 = radianes_a_valor(0);
 800072c:	4c1f      	ldr	r4, [pc, #124]	; (80007ac <main+0x118>)
 800072e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80007b0 <main+0x11c>
 8000732:	f7ff ff71 	bl	8000618 <radianes_a_valor>
 8000736:	4603      	mov	r3, r0
 8000738:	6423      	str	r3, [r4, #64]	; 0x40
	  TIM1->CCR2 = radianes_a_valor(0);
 800073a:	4c1c      	ldr	r4, [pc, #112]	; (80007ac <main+0x118>)
 800073c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80007b0 <main+0x11c>
 8000740:	f7ff ff6a 	bl	8000618 <radianes_a_valor>
 8000744:	4603      	mov	r3, r0
 8000746:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074c:	f001 f96a 	bl	8001a24 <HAL_Delay>

	  TIM1->CCR4 = radianes_a_valor(2.0944);
 8000750:	4c16      	ldr	r4, [pc, #88]	; (80007ac <main+0x118>)
 8000752:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80007b4 <main+0x120>
 8000756:	f7ff ff5f 	bl	8000618 <radianes_a_valor>
 800075a:	4603      	mov	r3, r0
 800075c:	6423      	str	r3, [r4, #64]	; 0x40
	  TIM1->CCR2 = radianes_a_valor(2.0944);
 800075e:	4c13      	ldr	r4, [pc, #76]	; (80007ac <main+0x118>)
 8000760:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80007b4 <main+0x120>
 8000764:	f7ff ff58 	bl	8000618 <radianes_a_valor>
 8000768:	4603      	mov	r3, r0
 800076a:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f001 f958 	bl	8001a24 <HAL_Delay>

	  TIM1->CCR4 = radianes_a_valor(M_PI / 2);
 8000774:	4c0d      	ldr	r4, [pc, #52]	; (80007ac <main+0x118>)
 8000776:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80007b8 <main+0x124>
 800077a:	f7ff ff4d 	bl	8000618 <radianes_a_valor>
 800077e:	4603      	mov	r3, r0
 8000780:	6423      	str	r3, [r4, #64]	; 0x40
	  TIM1->CCR2 = radianes_a_valor(M_PI / 2);
 8000782:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <main+0x118>)
 8000784:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80007b8 <main+0x124>
 8000788:	f7ff ff46 	bl	8000618 <radianes_a_valor>
 800078c:	4603      	mov	r3, r0
 800078e:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f001 f946 	bl	8001a24 <HAL_Delay>
	  TIM1->CCR4 = radianes_a_valor(0);
 8000798:	e7c8      	b.n	800072c <main+0x98>
 800079a:	bf00      	nop
 800079c:	0800a2e0 	.word	0x0800a2e0
 80007a0:	240000b8 	.word	0x240000b8
 80007a4:	24000404 	.word	0x24000404
 80007a8:	24000194 	.word	0x24000194
 80007ac:	40010000 	.word	0x40010000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	40060aa6 	.word	0x40060aa6
 80007b8:	3fc90fdb 	.word	0x3fc90fdb

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	224c      	movs	r2, #76	; 0x4c
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f009 fcd4 	bl	800a178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2220      	movs	r2, #32
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 fcce 	bl	800a178 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007dc:	2002      	movs	r0, #2
 80007de:	f003 fe3b 	bl	8004458 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <SystemClock_Config+0xbc>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <SystemClock_Config+0xbc>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SystemClock_Config+0xbc>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000802:	bf00      	nop
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <SystemClock_Config+0xbc>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000810:	d1f8      	bne.n	8000804 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000816:	2301      	movs	r3, #1
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800081e:	2300      	movs	r3, #0
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fe50 	bl	80044cc <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000832:	f000 fd59 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	233f      	movs	r3, #63	; 0x3f
 8000838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 800083e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800084c:	2340      	movs	r3, #64	; 0x40
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 f9e2 	bl	8004c28 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800086a:	f000 fd3d 	bl	80012e8 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3770      	adds	r7, #112	; 0x70
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58024800 	.word	0x58024800

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b098      	sub	sp, #96	; 0x60
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2234      	movs	r2, #52	; 0x34
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f009 fc65 	bl	800a178 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ae:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_TIM1_Init+0x130>)
 80008b0:	4a3f      	ldr	r2, [pc, #252]	; (80009b0 <MX_TIM1_Init+0x134>)
 80008b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_TIM1_Init+0x130>)
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_TIM1_Init+0x130>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_TIM1_Init+0x130>)
 80008c2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80008c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <MX_TIM1_Init+0x130>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_TIM1_Init+0x130>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <MX_TIM1_Init+0x130>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008da:	4834      	ldr	r0, [pc, #208]	; (80009ac <MX_TIM1_Init+0x130>)
 80008dc:	f006 f84c 	bl	8006978 <HAL_TIM_PWM_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fcff 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008fa:	4619      	mov	r1, r3
 80008fc:	482b      	ldr	r0, [pc, #172]	; (80009ac <MX_TIM1_Init+0x130>)
 80008fe:	f006 fe65 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000908:	f000 fcee 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800092c:	2204      	movs	r2, #4
 800092e:	4619      	mov	r1, r3
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_TIM1_Init+0x130>)
 8000932:	f006 f995 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800093c:	f000 fcd4 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000940:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000944:	220c      	movs	r2, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_TIM1_Init+0x130>)
 800094a:	f006 f989 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000954:	f000 fcc8 	bl	80012e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM1_Init+0x130>)
 800098e:	f006 feb9 	bl	8007704 <HAL_TIMEx_ConfigBreakDeadTime>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000998:	f000 fca6 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM1_Init+0x130>)
 800099e:	f000 fce5 	bl	800136c <HAL_TIM_MspPostInit>

}
 80009a2:	bf00      	nop
 80009a4:	3760      	adds	r7, #96	; 0x60
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	240000b8 	.word	0x240000b8
 80009b0:	40010000 	.word	0x40010000

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 80009fe:	f006 ff21 	bl	8007844 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 fc6e 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 8000a10:	f009 fab9 	bl	8009f86 <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 fc65 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 8000a22:	f009 faee 	bl	800a002 <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 fc5c 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_USART1_UART_Init+0x90>)
 8000a32:	f009 fa6f 	bl	8009f14 <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 fc54 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000104 	.word	0x24000104
 8000a48:	40011000 	.word	0x40011000

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <MX_USART3_UART_Init+0x94>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000a96:	f006 fed5 	bl	8007844 <HAL_UART_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 fc22 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aa8:	f009 fa6d 	bl	8009f86 <HAL_UARTEx_SetTxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 fc19 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aba:	f009 faa2 	bl	800a002 <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac4:	f000 fc10 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_USART3_UART_Init+0x90>)
 8000aca:	f009 fa23 	bl	8009f14 <HAL_UARTEx_DisableFifoMode>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fc08 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	24000194 	.word	0x24000194
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_DMA_Init+0x6c>)
 8000aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_DMA_Init+0x6c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_DMA_Init+0x6c>)
 8000afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	200b      	movs	r0, #11
 8000b0e:	f001 f888 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b12:	200b      	movs	r0, #11
 8000b14:	f001 f89f 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	200c      	movs	r0, #12
 8000b1e:	f001 f880 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b22:	200c      	movs	r0, #12
 8000b24:	f001 f897 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	200d      	movs	r0, #13
 8000b2e:	f001 f878 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b32:	200d      	movs	r0, #13
 8000b34:	f001 f88f 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	200e      	movs	r0, #14
 8000b3e:	f001 f870 	bl	8001c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b42:	200e      	movs	r0, #14
 8000b44:	f001 f887 	bl	8001c56 <HAL_NVIC_EnableIRQ>

}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024400 	.word	0x58024400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a43      	ldr	r2, [pc, #268]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	4a2c      	ldr	r2, [pc, #176]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <MX_GPIO_Init+0x148>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f640 2108 	movw	r1, #2568	; 0xa08
 8000c06:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000c08:	f003 fc0c 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	21ae      	movs	r1, #174	; 0xae
 8000c10:	4824      	ldr	r0, [pc, #144]	; (8000ca4 <MX_GPIO_Init+0x150>)
 8000c12:	f003 fc07 	bl	8004424 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0x154>)
 8000c1c:	f003 fc02 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_11;
 8000c20:	f640 2308 	movw	r3, #2568	; 0xa08
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0x14c>)
 8000c3a:	f003 fa4b 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000c3e:	23ae      	movs	r3, #174	; 0xae
 8000c40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_GPIO_Init+0x150>)
 8000c56:	f003 fa3d 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_GPIO_Init+0x154>)
 8000c72:	f003 fa2f 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c76:	2320      	movs	r3, #32
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_GPIO_Init+0x154>)
 8000c8e:	f003 fa21 	bl	80040d4 <HAL_GPIO_Init>

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58021000 	.word	0x58021000
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	58020400 	.word	0x58020400

08000cac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4ab1      	ldr	r2, [pc, #708]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	f040 8308 	bne.w	80012ce <HAL_UART_RxCpltCallback+0x622>
		received_data = rx1_buffer;
 8000cbe:	4bb0      	ldr	r3, [pc, #704]	; (8000f80 <HAL_UART_RxCpltCallback+0x2d4>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4bb0      	ldr	r3, [pc, #704]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		switch (received_data) {
 8000cc6:	4baf      	ldr	r3, [pc, #700]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3b30      	subs	r3, #48	; 0x30
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	f200 82f8 	bhi.w	80012c2 <HAL_UART_RxCpltCallback+0x616>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <HAL_UART_RxCpltCallback+0x2c>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000cfd 	.word	0x08000cfd
 8000cdc:	08000d21 	.word	0x08000d21
 8000ce0:	08000d47 	.word	0x08000d47
 8000ce4:	08000d6b 	.word	0x08000d6b
 8000ce8:	08000d8f 	.word	0x08000d8f
 8000cec:	08000db5 	.word	0x08000db5
 8000cf0:	08000dd9 	.word	0x08000dd9
 8000cf4:	08000f6d 	.word	0x08000f6d
 8000cf8:	08001121 	.word	0x08001121
			        case '0':
			          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2108      	movs	r1, #8
 8000d00:	48a1      	ldr	r0, [pc, #644]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000d02:	f003 fb8f 	bl	8004424 <HAL_GPIO_WritePin>
			          HAL_UART_Transmit(&huart3, tx1_buffer, 20, 10);
 8000d06:	230a      	movs	r3, #10
 8000d08:	2214      	movs	r2, #20
 8000d0a:	49a0      	ldr	r1, [pc, #640]	; (8000f8c <HAL_UART_RxCpltCallback+0x2e0>)
 8000d0c:	489b      	ldr	r0, [pc, #620]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000d0e:	f006 fde9 	bl	80078e4 <HAL_UART_Transmit>
			          TIM1->CCR2 = 65;
 8000d12:	4b9f      	ldr	r3, [pc, #636]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000d14:	2241      	movs	r2, #65	; 0x41
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
			          received_data=' ';
 8000d18:	4b9a      	ldr	r3, [pc, #616]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	701a      	strb	r2, [r3, #0]
			          break;
 8000d1e:	e2d1      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '1':
			          HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000d20:	230a      	movs	r3, #10
 8000d22:	2214      	movs	r2, #20
 8000d24:	499b      	ldr	r1, [pc, #620]	; (8000f94 <HAL_UART_RxCpltCallback+0x2e8>)
 8000d26:	4895      	ldr	r0, [pc, #596]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000d28:	f006 fddc 	bl	80078e4 <HAL_UART_Transmit>
			          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4895      	ldr	r0, [pc, #596]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000d32:	f003 fb77 	bl	8004424 <HAL_GPIO_WritePin>
			          TIM1->CCR2 = 300;
 8000d36:	4b96      	ldr	r3, [pc, #600]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000d38:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
			          received_data=' ';
 8000d3e:	4b91      	ldr	r3, [pc, #580]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d40:	2220      	movs	r2, #32
 8000d42:	701a      	strb	r2, [r3, #0]
			          break;
 8000d44:	e2be      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '2':
			        	HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000d46:	230a      	movs	r3, #10
 8000d48:	2214      	movs	r2, #20
 8000d4a:	4992      	ldr	r1, [pc, #584]	; (8000f94 <HAL_UART_RxCpltCallback+0x2e8>)
 8000d4c:	488b      	ldr	r0, [pc, #556]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000d4e:	f006 fdc9 	bl	80078e4 <HAL_UART_Transmit>
			        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2108      	movs	r1, #8
 8000d56:	488c      	ldr	r0, [pc, #560]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000d58:	f003 fb64 	bl	8004424 <HAL_GPIO_WritePin>
			        	TIM1->CCR2 = 182;
 8000d5c:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000d5e:	22b6      	movs	r2, #182	; 0xb6
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
			        	received_data=' ';
 8000d62:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d64:	2220      	movs	r2, #32
 8000d66:	701a      	strb	r2, [r3, #0]
			        	break;
 8000d68:	e2ac      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '3':
			        	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4886      	ldr	r0, [pc, #536]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000d70:	f003 fb58 	bl	8004424 <HAL_GPIO_WritePin>
			        	 HAL_UART_Transmit(&huart3, tx1_buffer, 20, 10);
 8000d74:	230a      	movs	r3, #10
 8000d76:	2214      	movs	r2, #20
 8000d78:	4984      	ldr	r1, [pc, #528]	; (8000f8c <HAL_UART_RxCpltCallback+0x2e0>)
 8000d7a:	4880      	ldr	r0, [pc, #512]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000d7c:	f006 fdb2 	bl	80078e4 <HAL_UART_Transmit>
			        	 TIM1->CCR4 = 65;
 8000d80:	4b83      	ldr	r3, [pc, #524]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000d82:	2241      	movs	r2, #65	; 0x41
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
			        	 received_data=' ';
 8000d86:	4b7f      	ldr	r3, [pc, #508]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d88:	2220      	movs	r2, #32
 8000d8a:	701a      	strb	r2, [r3, #0]
			        	 break;
 8000d8c:	e29a      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '4':
			        	 HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000d8e:	230a      	movs	r3, #10
 8000d90:	2214      	movs	r2, #20
 8000d92:	4980      	ldr	r1, [pc, #512]	; (8000f94 <HAL_UART_RxCpltCallback+0x2e8>)
 8000d94:	4879      	ldr	r0, [pc, #484]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000d96:	f006 fda5 	bl	80078e4 <HAL_UART_Transmit>
			             HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	487a      	ldr	r0, [pc, #488]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000da0:	f003 fb40 	bl	8004424 <HAL_GPIO_WritePin>
			             TIM1->CCR4 = 300;
 8000da4:	4b7a      	ldr	r3, [pc, #488]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
			             received_data=' ';
 8000dac:	4b75      	ldr	r3, [pc, #468]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000dae:	2220      	movs	r2, #32
 8000db0:	701a      	strb	r2, [r3, #0]
			             break;
 8000db2:	e287      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '5':
			        	HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000db4:	230a      	movs	r3, #10
 8000db6:	2214      	movs	r2, #20
 8000db8:	4976      	ldr	r1, [pc, #472]	; (8000f94 <HAL_UART_RxCpltCallback+0x2e8>)
 8000dba:	4870      	ldr	r0, [pc, #448]	; (8000f7c <HAL_UART_RxCpltCallback+0x2d0>)
 8000dbc:	f006 fd92 	bl	80078e4 <HAL_UART_Transmit>
			        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	4870      	ldr	r0, [pc, #448]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000dc6:	f003 fb2d 	bl	8004424 <HAL_GPIO_WritePin>
			        	TIM1->CCR4 = 182;
 8000dca:	4b71      	ldr	r3, [pc, #452]	; (8000f90 <HAL_UART_RxCpltCallback+0x2e4>)
 8000dcc:	22b6      	movs	r2, #182	; 0xb6
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
			        	received_data=' ';
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	701a      	strb	r2, [r3, #0]
			        	break;
 8000dd6:	e275      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '6':
			        	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2108      	movs	r1, #8
 8000ddc:	486e      	ldr	r0, [pc, #440]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000dde:	f003 fb21 	bl	8004424 <HAL_GPIO_WritePin>

			        		      for (int i = 0; i < 200; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000de6:	e012      	b.n	8000e0e <HAL_UART_RxCpltCallback+0x162>
			        		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2102      	movs	r1, #2
 8000dec:	486a      	ldr	r0, [pc, #424]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000dee:	f003 fb19 	bl	8004424 <HAL_GPIO_WritePin>
			        		          HAL_Delay(2);
 8000df2:	2002      	movs	r0, #2
 8000df4:	f000 fe16 	bl	8001a24 <HAL_Delay>
			        		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4866      	ldr	r0, [pc, #408]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000dfe:	f003 fb11 	bl	8004424 <HAL_GPIO_WritePin>
			        		          HAL_Delay(2);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f000 fe0e 	bl	8001a24 <HAL_Delay>
			        		      for (int i = 0; i < 200; i++) {
 8000e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e10:	2bc7      	cmp	r3, #199	; 0xc7
 8000e12:	dde9      	ble.n	8000de8 <HAL_UART_RxCpltCallback+0x13c>
			        		      }

			        		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	485f      	ldr	r0, [pc, #380]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e1a:	f003 fb03 	bl	8004424 <HAL_GPIO_WritePin>

			        		      	for (int i = 0; i < 400; i++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e22:	e012      	b.n	8000e4a <HAL_UART_RxCpltCallback+0x19e>
			        		      	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2120      	movs	r1, #32
 8000e28:	485b      	ldr	r0, [pc, #364]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e2a:	f003 fafb 	bl	8004424 <HAL_GPIO_WritePin>
			        		      	    HAL_Delay(0.5);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 fdf8 	bl	8001a24 <HAL_Delay>
			        		      	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2120      	movs	r1, #32
 8000e38:	4857      	ldr	r0, [pc, #348]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e3a:	f003 faf3 	bl	8004424 <HAL_GPIO_WritePin>
			        		      	    HAL_Delay(0.5);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fdf0 	bl	8001a24 <HAL_Delay>
			        		      	for (int i = 0; i < 400; i++) {
 8000e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e46:	3301      	adds	r3, #1
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e4c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e50:	dbe8      	blt.n	8000e24 <HAL_UART_RxCpltCallback+0x178>
			        		      	}

			        		      	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e58:	484b      	ldr	r0, [pc, #300]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000e5a:	f003 fae3 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		for (int i = 0; i < 600; i++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
 8000e62:	e014      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x1e2>
			        		      			// Un paso en el motor paso a paso
			        		      		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4847      	ldr	r0, [pc, #284]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000e6c:	f003 fada 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		    HAL_Delay(0.5);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 fdd7 	bl	8001a24 <HAL_Delay>
			        		      		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7c:	4842      	ldr	r0, [pc, #264]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000e7e:	f003 fad1 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		    HAL_Delay(0.5);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 fdce 	bl	8001a24 <HAL_Delay>
			        		      		for (int i = 0; i < 600; i++) {
 8000e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e90:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000e94:	dbe6      	blt.n	8000e64 <HAL_UART_RxCpltCallback+0x1b8>
			        		      		}

			        		      HAL_Delay(1000);
 8000e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9a:	f000 fdc3 	bl	8001a24 <HAL_Delay>

			        		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	483d      	ldr	r0, [pc, #244]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ea4:	f003 fabe 	bl	8004424 <HAL_GPIO_WritePin>

			        		      	for (int i = 0; i < 200; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8000eac:	e012      	b.n	8000ed4 <HAL_UART_RxCpltCallback+0x228>
			        		      		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4839      	ldr	r0, [pc, #228]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000eb4:	f003 fab6 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		HAL_Delay(2);
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 fdb3 	bl	8001a24 <HAL_Delay>
			        		      		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4835      	ldr	r0, [pc, #212]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ec4:	f003 faae 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		HAL_Delay(2);
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f000 fdab 	bl	8001a24 <HAL_Delay>
			        		      	for (int i = 0; i < 200; i++) {
 8000ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8000ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed6:	2bc7      	cmp	r3, #199	; 0xc7
 8000ed8:	dde9      	ble.n	8000eae <HAL_UART_RxCpltCallback+0x202>
			        		      	}

			        		      	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	482e      	ldr	r0, [pc, #184]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ee0:	f003 faa0 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		for (int i = 0; i < 400; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ee8:	e012      	b.n	8000f10 <HAL_UART_RxCpltCallback+0x264>
			        		      			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2120      	movs	r1, #32
 8000eee:	482a      	ldr	r0, [pc, #168]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ef0:	f003 fa98 	bl	8004424 <HAL_GPIO_WritePin>
			        		      			HAL_Delay(0.5);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fd95 	bl	8001a24 <HAL_Delay>
			        		      			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2120      	movs	r1, #32
 8000efe:	4826      	ldr	r0, [pc, #152]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f00:	f003 fa90 	bl	8004424 <HAL_GPIO_WritePin>
			        		      			HAL_Delay(0.5);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 fd8d 	bl	8001a24 <HAL_Delay>
			        		      		for (int i = 0; i < 400; i++) {
 8000f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f12:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f16:	dbe8      	blt.n	8000eea <HAL_UART_RxCpltCallback+0x23e>
			        		      		}

			        		      		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f20:	f003 fa80 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		    for (int i = 0; i < 600; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f28:	e014      	b.n	8000f54 <HAL_UART_RxCpltCallback+0x2a8>
			        		      		        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	4815      	ldr	r0, [pc, #84]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f32:	f003 fa77 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		        HAL_Delay(0.5);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 fd74 	bl	8001a24 <HAL_Delay>
			        		      		        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <HAL_UART_RxCpltCallback+0x2dc>)
 8000f44:	f003 fa6e 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		        HAL_Delay(0.5);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fd6b 	bl	8001a24 <HAL_Delay>
			        		      		    for (int i = 0; i < 600; i++) {
 8000f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f50:	3301      	adds	r3, #1
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f56:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000f5a:	dbe6      	blt.n	8000f2a <HAL_UART_RxCpltCallback+0x27e>
			        		      		    }

			        		      	HAL_Delay(1000);
 8000f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f60:	f000 fd60 	bl	8001a24 <HAL_Delay>

			          received_data=' ';
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_UART_RxCpltCallback+0x2d8>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	701a      	strb	r2, [r3, #0]
			          break;
 8000f6a:	e1ab      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '7':
			        	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f72:	f003 fa57 	bl	8004424 <HAL_GPIO_WritePin>

			        		      for (int i = 0; i < 100; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7a:	e022      	b.n	8000fc2 <HAL_UART_RxCpltCallback+0x316>
 8000f7c:	24000194 	.word	0x24000194
 8000f80:	24000404 	.word	0x24000404
 8000f84:	24000405 	.word	0x24000405
 8000f88:	58021000 	.word	0x58021000
 8000f8c:	24000000 	.word	0x24000000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	24000014 	.word	0x24000014
 8000f98:	58020000 	.word	0x58020000
			        		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	48b4      	ldr	r0, [pc, #720]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8000fa2:	f003 fa3f 	bl	8004424 <HAL_GPIO_WritePin>
			        		          HAL_Delay(2);
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fd3c 	bl	8001a24 <HAL_Delay>
			        		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2102      	movs	r1, #2
 8000fb0:	48b0      	ldr	r0, [pc, #704]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8000fb2:	f003 fa37 	bl	8004424 <HAL_GPIO_WritePin>
			        		          HAL_Delay(2);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f000 fd34 	bl	8001a24 <HAL_Delay>
			        		      for (int i = 0; i < 100; i++) {
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc4:	2b63      	cmp	r3, #99	; 0x63
 8000fc6:	dde9      	ble.n	8000f9c <HAL_UART_RxCpltCallback+0x2f0>
			        		      }

			        		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	48a9      	ldr	r0, [pc, #676]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8000fce:	f003 fa29 	bl	8004424 <HAL_GPIO_WritePin>

			        		      	for (int i = 0; i < 600; i++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd6:	e012      	b.n	8000ffe <HAL_UART_RxCpltCallback+0x352>
			        		      	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	48a5      	ldr	r0, [pc, #660]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8000fde:	f003 fa21 	bl	8004424 <HAL_GPIO_WritePin>
			        		      	    HAL_Delay(0.5);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fd1e 	bl	8001a24 <HAL_Delay>
			        		      	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2120      	movs	r1, #32
 8000fec:	48a1      	ldr	r0, [pc, #644]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8000fee:	f003 fa19 	bl	8004424 <HAL_GPIO_WritePin>
			        		      	    HAL_Delay(0.5);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fd16 	bl	8001a24 <HAL_Delay>
			        		      	for (int i = 0; i < 600; i++) {
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001004:	dbe8      	blt.n	8000fd8 <HAL_UART_RxCpltCallback+0x32c>
			        		      	}

			        		      	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100c:	489a      	ldr	r0, [pc, #616]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 800100e:	f003 fa09 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		for (int i = 0; i < 800; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001016:	e014      	b.n	8001042 <HAL_UART_RxCpltCallback+0x396>
			        		      			// Un paso en el motor paso a paso
			        		      		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101e:	4896      	ldr	r0, [pc, #600]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 8001020:	f003 fa00 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		    HAL_Delay(0.5);
 8001024:	2000      	movs	r0, #0
 8001026:	f000 fcfd 	bl	8001a24 <HAL_Delay>
			        		      		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001030:	4891      	ldr	r0, [pc, #580]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 8001032:	f003 f9f7 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		    HAL_Delay(0.5);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fcf4 	bl	8001a24 <HAL_Delay>
			        		      		for (int i = 0; i < 800; i++) {
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	3301      	adds	r3, #1
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001048:	dbe6      	blt.n	8001018 <HAL_UART_RxCpltCallback+0x36c>
			        		      		}

			        		      HAL_Delay(1000);
 800104a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104e:	f000 fce9 	bl	8001a24 <HAL_Delay>

			        		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2108      	movs	r1, #8
 8001056:	4887      	ldr	r0, [pc, #540]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001058:	f003 f9e4 	bl	8004424 <HAL_GPIO_WritePin>

			        		      	for (int i = 0; i < 100; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001060:	e012      	b.n	8001088 <HAL_UART_RxCpltCallback+0x3dc>
			        		      		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2102      	movs	r1, #2
 8001066:	4883      	ldr	r0, [pc, #524]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001068:	f003 f9dc 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		HAL_Delay(2);
 800106c:	2002      	movs	r0, #2
 800106e:	f000 fcd9 	bl	8001a24 <HAL_Delay>
			        		      		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2102      	movs	r1, #2
 8001076:	487f      	ldr	r0, [pc, #508]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001078:	f003 f9d4 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		HAL_Delay(2);
 800107c:	2002      	movs	r0, #2
 800107e:	f000 fcd1 	bl	8001a24 <HAL_Delay>
			        		      	for (int i = 0; i < 100; i++) {
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	3301      	adds	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	2b63      	cmp	r3, #99	; 0x63
 800108c:	dde9      	ble.n	8001062 <HAL_UART_RxCpltCallback+0x3b6>
			        		      	}

			        		      	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	4878      	ldr	r0, [pc, #480]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001094:	f003 f9c6 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		for (int i = 0; i < 600; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
 800109c:	e012      	b.n	80010c4 <HAL_UART_RxCpltCallback+0x418>
			        		      			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2120      	movs	r1, #32
 80010a2:	4874      	ldr	r0, [pc, #464]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 80010a4:	f003 f9be 	bl	8004424 <HAL_GPIO_WritePin>
			        		      			HAL_Delay(0.5);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 fcbb 	bl	8001a24 <HAL_Delay>
			        		      			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	4870      	ldr	r0, [pc, #448]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 80010b4:	f003 f9b6 	bl	8004424 <HAL_GPIO_WritePin>
			        		      			HAL_Delay(0.5);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fcb3 	bl	8001a24 <HAL_Delay>
			        		      		for (int i = 0; i < 600; i++) {
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80010ca:	dbe8      	blt.n	800109e <HAL_UART_RxCpltCallback+0x3f2>
			        		      		}

			        		      		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d2:	4869      	ldr	r0, [pc, #420]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 80010d4:	f003 f9a6 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		    for (int i = 0; i < 800; i++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
 80010dc:	e014      	b.n	8001108 <HAL_UART_RxCpltCallback+0x45c>
			        		      		        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	4864      	ldr	r0, [pc, #400]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 80010e6:	f003 f99d 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		        HAL_Delay(0.5);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fc9a 	bl	8001a24 <HAL_Delay>
			        		      		        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	4860      	ldr	r0, [pc, #384]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 80010f8:	f003 f994 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		        HAL_Delay(0.5);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fc91 	bl	8001a24 <HAL_Delay>
			        		      		    for (int i = 0; i < 800; i++) {
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	3301      	adds	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800110e:	dbe6      	blt.n	80010de <HAL_UART_RxCpltCallback+0x432>
			        		      		    }

			        		      	HAL_Delay(1000);
 8001110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001114:	f000 fc86 	bl	8001a24 <HAL_Delay>

			          received_data=' ';
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <HAL_UART_RxCpltCallback+0x5d0>)
 800111a:	2220      	movs	r2, #32
 800111c:	701a      	strb	r2, [r3, #0]
			          break;
 800111e:	e0d1      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>
			        case '8':
			        	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2108      	movs	r1, #8
 8001124:	4853      	ldr	r0, [pc, #332]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001126:	f003 f97d 	bl	8004424 <HAL_GPIO_WritePin>

			        		      for (int i = 0; i < 50; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e012      	b.n	8001156 <HAL_UART_RxCpltCallback+0x4aa>
			        		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2102      	movs	r1, #2
 8001134:	484f      	ldr	r0, [pc, #316]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001136:	f003 f975 	bl	8004424 <HAL_GPIO_WritePin>
			        		          HAL_Delay(2);
 800113a:	2002      	movs	r0, #2
 800113c:	f000 fc72 	bl	8001a24 <HAL_Delay>
			        		          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	484b      	ldr	r0, [pc, #300]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001146:	f003 f96d 	bl	8004424 <HAL_GPIO_WritePin>
			        		          HAL_Delay(2);
 800114a:	2002      	movs	r0, #2
 800114c:	f000 fc6a 	bl	8001a24 <HAL_Delay>
			        		      for (int i = 0; i < 50; i++) {
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3301      	adds	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b31      	cmp	r3, #49	; 0x31
 800115a:	dde9      	ble.n	8001130 <HAL_UART_RxCpltCallback+0x484>
			        		      }

			        		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	4844      	ldr	r0, [pc, #272]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001162:	f003 f95f 	bl	8004424 <HAL_GPIO_WritePin>

			        		      	for (int i = 0; i < 300; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	e012      	b.n	8001192 <HAL_UART_RxCpltCallback+0x4e6>
			        		      	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4840      	ldr	r0, [pc, #256]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001172:	f003 f957 	bl	8004424 <HAL_GPIO_WritePin>
			        		      	    HAL_Delay(0.5);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 fc54 	bl	8001a24 <HAL_Delay>
			        		      	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	483c      	ldr	r0, [pc, #240]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001182:	f003 f94f 	bl	8004424 <HAL_GPIO_WritePin>
			        		      	    HAL_Delay(0.5);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 fc4c 	bl	8001a24 <HAL_Delay>
			        		      	for (int i = 0; i < 300; i++) {
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	3301      	adds	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001198:	dbe8      	blt.n	800116c <HAL_UART_RxCpltCallback+0x4c0>
			        		      	}

			        		      	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a0:	4835      	ldr	r0, [pc, #212]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 80011a2:	f003 f93f 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		for (int i = 0; i < 500; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e014      	b.n	80011d6 <HAL_UART_RxCpltCallback+0x52a>
			        		      			// Un paso en el motor paso a paso
			        		      		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4831      	ldr	r0, [pc, #196]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 80011b4:	f003 f936 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		    HAL_Delay(0.5);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fc33 	bl	8001a24 <HAL_Delay>
			        		      		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 80011c6:	f003 f92d 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		    HAL_Delay(0.5);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fc2a 	bl	8001a24 <HAL_Delay>
			        		      		for (int i = 0; i < 500; i++) {
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011dc:	dbe6      	blt.n	80011ac <HAL_UART_RxCpltCallback+0x500>
			        		      		}

			        		      HAL_Delay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e2:	f000 fc1f 	bl	8001a24 <HAL_Delay>

			        		      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	4822      	ldr	r0, [pc, #136]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 80011ec:	f003 f91a 	bl	8004424 <HAL_GPIO_WritePin>

			        		      	for (int i = 0; i < 50; i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	e012      	b.n	800121c <HAL_UART_RxCpltCallback+0x570>
			        		      		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 80011fc:	f003 f912 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		HAL_Delay(2);
 8001200:	2002      	movs	r0, #2
 8001202:	f000 fc0f 	bl	8001a24 <HAL_Delay>
			        		      		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2102      	movs	r1, #2
 800120a:	481a      	ldr	r0, [pc, #104]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 800120c:	f003 f90a 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		HAL_Delay(2);
 8001210:	2002      	movs	r0, #2
 8001212:	f000 fc07 	bl	8001a24 <HAL_Delay>
			        		      	for (int i = 0; i < 50; i++) {
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b31      	cmp	r3, #49	; 0x31
 8001220:	dde9      	ble.n	80011f6 <HAL_UART_RxCpltCallback+0x54a>
			        		      	}

			        		      	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	4813      	ldr	r0, [pc, #76]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001228:	f003 f8fc 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		for (int i = 0; i < 300; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e012      	b.n	8001258 <HAL_UART_RxCpltCallback+0x5ac>
			        		      			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2120      	movs	r1, #32
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001238:	f003 f8f4 	bl	8004424 <HAL_GPIO_WritePin>
			        		      			HAL_Delay(0.5);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 fbf1 	bl	8001a24 <HAL_Delay>
			        		      			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <HAL_UART_RxCpltCallback+0x5c8>)
 8001248:	f003 f8ec 	bl	8004424 <HAL_GPIO_WritePin>
			        		      			HAL_Delay(0.5);
 800124c:	2000      	movs	r0, #0
 800124e:	f000 fbe9 	bl	8001a24 <HAL_Delay>
			        		      		for (int i = 0; i < 300; i++) {
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800125e:	dbe8      	blt.n	8001232 <HAL_UART_RxCpltCallback+0x586>
			        		      		}

			        		      		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <HAL_UART_RxCpltCallback+0x5cc>)
 8001268:	f003 f8dc 	bl	8004424 <HAL_GPIO_WritePin>

			        		      		    for (int i = 0; i < 500; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	e01b      	b.n	80012aa <HAL_UART_RxCpltCallback+0x5fe>
 8001272:	bf00      	nop
 8001274:	58020000 	.word	0x58020000
 8001278:	58021000 	.word	0x58021000
 800127c:	24000405 	.word	0x24000405
			        		      		        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <HAL_UART_RxCpltCallback+0x62c>)
 8001288:	f003 f8cc 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		        HAL_Delay(0.5);
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fbc9 	bl	8001a24 <HAL_Delay>
			        		      		        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <HAL_UART_RxCpltCallback+0x62c>)
 800129a:	f003 f8c3 	bl	8004424 <HAL_GPIO_WritePin>
			        		      		        HAL_Delay(0.5);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 fbc0 	bl	8001a24 <HAL_Delay>
			        		      		    for (int i = 0; i < 500; i++) {
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012b0:	dbe6      	blt.n	8001280 <HAL_UART_RxCpltCallback+0x5d4>
			        		      		    }

			        		      	HAL_Delay(1000);
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f000 fbb5 	bl	8001a24 <HAL_Delay>
			        		      	received_data=' ';
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_UART_RxCpltCallback+0x630>)
 80012bc:	2220      	movs	r2, #32
 80012be:	701a      	strb	r2, [r3, #0]
			        		      	break;
 80012c0:	e000      	b.n	80012c4 <HAL_UART_RxCpltCallback+0x618>

			        default:
			          // Handle unexpected characters (optional)
			          break;
 80012c2:	bf00      	nop
			          received_data=' ';
			      }

	    HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer)); // Restart interrupt
 80012c4:	2201      	movs	r2, #1
 80012c6:	4906      	ldr	r1, [pc, #24]	; (80012e0 <HAL_UART_RxCpltCallback+0x634>)
 80012c8:	4806      	ldr	r0, [pc, #24]	; (80012e4 <HAL_UART_RxCpltCallback+0x638>)
 80012ca:	f006 fba1 	bl	8007a10 <HAL_UART_Receive_IT>
	  }
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	; 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58021000 	.word	0x58021000
 80012dc:	24000405 	.word	0x24000405
 80012e0:	24000404 	.word	0x24000404
 80012e4:	24000194 	.word	0x24000194

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_MspInit+0x30>)
 80012fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x30>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x30>)
 800130c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	58024400 	.word	0x58024400

08001328 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_TIM_PWM_MspInit+0x3c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10e      	bne.n	8001358 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_TIM_PWM_MspInit+0x40>)
 800133c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001340:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_TIM_PWM_MspInit+0x40>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_TIM_PWM_MspInit+0x40>)
 800134c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40010000 	.word	0x40010000
 8001368:	58024400 	.word	0x58024400

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11f      	bne.n	80013ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_TIM_MspPostInit+0x70>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_TIM_MspPostInit+0x70>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_TIM_MspPostInit+0x70>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80013ac:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013be:	2301      	movs	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_TIM_MspPostInit+0x74>)
 80013ca:	f002 fe83 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40010000 	.word	0x40010000
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020000 	.word	0x58020000

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0b8      	sub	sp, #224	; 0xe0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	22b4      	movs	r2, #180	; 0xb4
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f008 feb7 	bl	800a178 <memset>
  if(huart->Instance==USART1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4aac      	ldr	r2, [pc, #688]	; (80016c0 <HAL_UART_MspInit+0x2dc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	f040 80a6 	bne.w	8001562 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4618      	mov	r0, r3
 8001426:	f003 ff8b 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001430:	f7ff ff5a 	bl	80012e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001434:	4ba3      	ldr	r3, [pc, #652]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 8001436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143a:	4aa2      	ldr	r2, [pc, #648]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001444:	4b9f      	ldr	r3, [pc, #636]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 8001446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b9c      	ldr	r3, [pc, #624]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a9a      	ldr	r2, [pc, #616]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b98      	ldr	r3, [pc, #608]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001470:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800148a:	2304      	movs	r3, #4
 800148c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001494:	4619      	mov	r1, r3
 8001496:	488c      	ldr	r0, [pc, #560]	; (80016c8 <HAL_UART_MspInit+0x2e4>)
 8001498:	f002 fe1c 	bl	80040d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800149c:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 800149e:	4a8c      	ldr	r2, [pc, #560]	; (80016d0 <HAL_UART_MspInit+0x2ec>)
 80014a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014a2:	4b8a      	ldr	r3, [pc, #552]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014a4:	2229      	movs	r2, #41	; 0x29
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b87      	ldr	r3, [pc, #540]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b85      	ldr	r3, [pc, #532]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	4b83      	ldr	r3, [pc, #524]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014c8:	4b80      	ldr	r3, [pc, #512]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014da:	487c      	ldr	r0, [pc, #496]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014dc:	f000 fbd6 	bl	8001c8c <HAL_DMA_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80014e6:	f7ff feff 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a77      	ldr	r2, [pc, #476]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80014f0:	4a76      	ldr	r2, [pc, #472]	; (80016cc <HAL_UART_MspInit+0x2e8>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 80014f8:	4a77      	ldr	r2, [pc, #476]	; (80016d8 <HAL_UART_MspInit+0x2f4>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80014fc:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 80014fe:	222a      	movs	r2, #42	; 0x2a
 8001500:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001514:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151c:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001522:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152e:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001534:	4867      	ldr	r0, [pc, #412]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001536:	f000 fba9 	bl	8001c8c <HAL_DMA_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001540:	f7ff fed2 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 8001548:	679a      	str	r2, [r3, #120]	; 0x78
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_UART_MspInit+0x2f0>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2025      	movs	r0, #37	; 0x25
 8001556:	f000 fb64 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800155a:	2025      	movs	r0, #37	; 0x25
 800155c:	f000 fb7b 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001560:	e0aa      	b.n	80016b8 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5d      	ldr	r2, [pc, #372]	; (80016dc <HAL_UART_MspInit+0x2f8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f040 80a5 	bne.w	80016b8 <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fedf 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001588:	f7ff feae 	bl	80012e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800158c:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 800158e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001592:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800159c:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <HAL_UART_MspInit+0x2e0>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e2:	2307      	movs	r3, #7
 80015e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ec:	4619      	mov	r1, r3
 80015ee:	4836      	ldr	r0, [pc, #216]	; (80016c8 <HAL_UART_MspInit+0x2e4>)
 80015f0:	f002 fd70 	bl	80040d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 80015f6:	4a3b      	ldr	r2, [pc, #236]	; (80016e4 <HAL_UART_MspInit+0x300>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 80015fc:	222d      	movs	r2, #45	; 0x2d
 80015fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001606:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 800160e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001612:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001632:	482b      	ldr	r0, [pc, #172]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001634:	f000 fb2a 	bl	8001c8c <HAL_DMA_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800163e:	f7ff fe53 	bl	80012e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 8001646:	67da      	str	r2, [r3, #124]	; 0x7c
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_UART_MspInit+0x2fc>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_UART_MspInit+0x308>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001656:	222e      	movs	r2, #46	; 0x2e
 8001658:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_UART_MspInit+0x304>)
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_UART_MspInit+0x304>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_UART_MspInit+0x304>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800168c:	4816      	ldr	r0, [pc, #88]	; (80016e8 <HAL_UART_MspInit+0x304>)
 800168e:	f000 fafd 	bl	8001c8c <HAL_DMA_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8001698:	f7ff fe26 	bl	80012e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_UART_MspInit+0x304>)
 80016a0:	679a      	str	r2, [r3, #120]	; 0x78
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_UART_MspInit+0x304>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2027      	movs	r0, #39	; 0x27
 80016ae:	f000 fab8 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016b2:	2027      	movs	r0, #39	; 0x27
 80016b4:	f000 facf 	bl	8001c56 <HAL_NVIC_EnableIRQ>
}
 80016b8:	bf00      	nop
 80016ba:	37e0      	adds	r7, #224	; 0xe0
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40011000 	.word	0x40011000
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58020400 	.word	0x58020400
 80016cc:	24000224 	.word	0x24000224
 80016d0:	40020010 	.word	0x40020010
 80016d4:	2400029c 	.word	0x2400029c
 80016d8:	40020028 	.word	0x40020028
 80016dc:	40004800 	.word	0x40004800
 80016e0:	24000314 	.word	0x24000314
 80016e4:	40020040 	.word	0x40020040
 80016e8:	2400038c 	.word	0x2400038c
 80016ec:	40020058 	.word	0x40020058

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f952 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Stream0_IRQHandler+0x10>)
 800174a:	f001 fb5d 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000224 	.word	0x24000224

08001758 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA1_Stream1_IRQHandler+0x10>)
 800175e:	f001 fb53 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2400029c 	.word	0x2400029c

0800176c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA1_Stream2_IRQHandler+0x10>)
 8001772:	f001 fb49 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000314 	.word	0x24000314

08001780 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream3_IRQHandler+0x10>)
 8001786:	f001 fb3f 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2400038c 	.word	0x2400038c

08001794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <USART1_IRQHandler+0x10>)
 800179a:	f006 f98f 	bl	8007abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	24000104 	.word	0x24000104

080017a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART3_IRQHandler+0x10>)
 80017ae:	f006 f985 	bl	8007abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24000194 	.word	0x24000194

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <SystemInit+0xd0>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a31      	ldr	r2, [pc, #196]	; (800188c <SystemInit+0xd0>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <SystemInit+0xd4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	2b06      	cmp	r3, #6
 80017da:	d807      	bhi.n	80017ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <SystemInit+0xd4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 030f 	bic.w	r3, r3, #15
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <SystemInit+0xd4>)
 80017e6:	f043 0307 	orr.w	r3, r3, #7
 80017ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <SystemInit+0xd8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <SystemInit+0xd8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <SystemInit+0xd8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <SystemInit+0xd8>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4924      	ldr	r1, [pc, #144]	; (8001894 <SystemInit+0xd8>)
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <SystemInit+0xdc>)
 8001806:	4013      	ands	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <SystemInit+0xd4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <SystemInit+0xd4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 030f 	bic.w	r3, r3, #15
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <SystemInit+0xd4>)
 8001820:	f043 0307 	orr.w	r3, r3, #7
 8001824:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <SystemInit+0xd8>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <SystemInit+0xd8>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <SystemInit+0xd8>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <SystemInit+0xd8>)
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <SystemInit+0xe0>)
 800183c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <SystemInit+0xd8>)
 8001840:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <SystemInit+0xe4>)
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <SystemInit+0xd8>)
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <SystemInit+0xe8>)
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <SystemInit+0xd8>)
 800184c:	2200      	movs	r2, #0
 800184e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <SystemInit+0xd8>)
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <SystemInit+0xe8>)
 8001854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <SystemInit+0xd8>)
 8001858:	2200      	movs	r2, #0
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <SystemInit+0xd8>)
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <SystemInit+0xe8>)
 8001860:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <SystemInit+0xd8>)
 8001864:	2200      	movs	r2, #0
 8001866:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <SystemInit+0xd8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a09      	ldr	r2, [pc, #36]	; (8001894 <SystemInit+0xd8>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <SystemInit+0xd8>)
 8001876:	2200      	movs	r2, #0
 8001878:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <SystemInit+0xec>)
 800187c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001880:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00
 8001890:	52002000 	.word	0x52002000
 8001894:	58024400 	.word	0x58024400
 8001898:	eaf6ed7f 	.word	0xeaf6ed7f
 800189c:	02020200 	.word	0x02020200
 80018a0:	01ff0000 	.word	0x01ff0000
 80018a4:	01010280 	.word	0x01010280
 80018a8:	52004000 	.word	0x52004000

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b0:	f7ff ff84 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	; (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f008 fc29 	bl	800a130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7fe fed9 	bl	8000694 <main>
  bx  lr
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018ec:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80018f0:	0800a49c 	.word	0x0800a49c
  ldr r2, =_sbss
 80018f4:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 80018f8:	2400040c 	.word	0x2400040c

080018fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC3_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001906:	2003      	movs	r0, #3
 8001908:	f000 f980 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800190c:	f003 fb42 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_Init+0x68>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	4913      	ldr	r1, [pc, #76]	; (800196c <HAL_Init+0x6c>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_Init+0x68>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_Init+0x6c>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_Init+0x70>)
 8001942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_Init+0x74>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194a:	200f      	movs	r0, #15
 800194c:	f000 f814 	bl	8001978 <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e002      	b.n	8001960 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195a:	f7ff fccb 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	58024400 	.word	0x58024400
 800196c:	0800a2e8 	.word	0x0800a2e8
 8001970:	2400002c 	.word	0x2400002c
 8001974:	24000028 	.word	0x24000028

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_InitTick+0x60>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e021      	b.n	80019d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_InitTick+0x64>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_InitTick+0x60>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f965 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f000 f92f 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <HAL_InitTick+0x68>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	24000034 	.word	0x24000034
 80019dc:	24000028 	.word	0x24000028
 80019e0:	24000030 	.word	0x24000030

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	24000034 	.word	0x24000034
 8001a08:	24000408 	.word	0x24000408

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	24000408 	.word	0x24000408

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff ffee 	bl	8001a0c <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ffde 	bl	8001a0c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	24000034 	.word	0x24000034

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	05fa0000 	.word	0x05fa0000

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff40 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff90 	bl	8001b60 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5f 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff33 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa4 	bl	8001bc8 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff feba 	bl	8001a0c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e314      	b.n	80022ce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_DMA_Init+0x1b8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d04a      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_DMA_Init+0x1bc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d045      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_DMA_Init+0x1c0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d040      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a62      	ldr	r2, [pc, #392]	; (8001e50 <HAL_DMA_Init+0x1c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d03b      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_DMA_Init+0x1c8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d036      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_DMA_Init+0x1cc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d031      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <HAL_DMA_Init+0x1d0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d02c      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <HAL_DMA_Init+0x1d4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d027      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_DMA_Init+0x1d8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a59      	ldr	r2, [pc, #356]	; (8001e68 <HAL_DMA_Init+0x1dc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01d      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_DMA_Init+0x1e0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a56      	ldr	r2, [pc, #344]	; (8001e70 <HAL_DMA_Init+0x1e4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a54      	ldr	r2, [pc, #336]	; (8001e74 <HAL_DMA_Init+0x1e8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <HAL_DMA_Init+0x1ec>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_DMA_Init+0x1f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_Init+0xb8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <HAL_DMA_Init+0x1f4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_DMA_Init+0xbc>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_DMA_Init+0xbe>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 813c 	beq.w	8001fc8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a37      	ldr	r2, [pc, #220]	; (8001e44 <HAL_DMA_Init+0x1b8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a36      	ldr	r2, [pc, #216]	; (8001e48 <HAL_DMA_Init+0x1bc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d045      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a34      	ldr	r2, [pc, #208]	; (8001e4c <HAL_DMA_Init+0x1c0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d040      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <HAL_DMA_Init+0x1c4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d03b      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_DMA_Init+0x1c8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d036      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_DMA_Init+0x1cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2e      	ldr	r2, [pc, #184]	; (8001e5c <HAL_DMA_Init+0x1d0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02c      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <HAL_DMA_Init+0x1d4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d027      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <HAL_DMA_Init+0x1d8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <HAL_DMA_Init+0x1dc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01d      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a28      	ldr	r2, [pc, #160]	; (8001e6c <HAL_DMA_Init+0x1e0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_DMA_Init+0x1e4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_DMA_Init+0x1e8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <HAL_DMA_Init+0x1ec>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_DMA_Init+0x1f0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_Init+0x174>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_DMA_Init+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d108      	bne.n	8001e12 <HAL_DMA_Init+0x186>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_DMA_Init+0x196>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e22:	e02f      	b.n	8001e84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e24:	f7ff fdf2 	bl	8001a0c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d928      	bls.n	8001e84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e244      	b.n	80022ce <HAL_DMA_Init+0x642>
 8001e44:	40020010 	.word	0x40020010
 8001e48:	40020028 	.word	0x40020028
 8001e4c:	40020040 	.word	0x40020040
 8001e50:	40020058 	.word	0x40020058
 8001e54:	40020070 	.word	0x40020070
 8001e58:	40020088 	.word	0x40020088
 8001e5c:	400200a0 	.word	0x400200a0
 8001e60:	400200b8 	.word	0x400200b8
 8001e64:	40020410 	.word	0x40020410
 8001e68:	40020428 	.word	0x40020428
 8001e6c:	40020440 	.word	0x40020440
 8001e70:	40020458 	.word	0x40020458
 8001e74:	40020470 	.word	0x40020470
 8001e78:	40020488 	.word	0x40020488
 8001e7c:	400204a0 	.word	0x400204a0
 8001e80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1c8      	bne.n	8001e24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4b84      	ldr	r3, [pc, #528]	; (80020b0 <HAL_DMA_Init+0x424>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001eaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d107      	bne.n	8001ee8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b28      	cmp	r3, #40	; 0x28
 8001eee:	d903      	bls.n	8001ef8 <HAL_DMA_Init+0x26c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ef6:	d91f      	bls.n	8001f38 <HAL_DMA_Init+0x2ac>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b3e      	cmp	r3, #62	; 0x3e
 8001efe:	d903      	bls.n	8001f08 <HAL_DMA_Init+0x27c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b42      	cmp	r3, #66	; 0x42
 8001f06:	d917      	bls.n	8001f38 <HAL_DMA_Init+0x2ac>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b46      	cmp	r3, #70	; 0x46
 8001f0e:	d903      	bls.n	8001f18 <HAL_DMA_Init+0x28c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b48      	cmp	r3, #72	; 0x48
 8001f16:	d90f      	bls.n	8001f38 <HAL_DMA_Init+0x2ac>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b4e      	cmp	r3, #78	; 0x4e
 8001f1e:	d903      	bls.n	8001f28 <HAL_DMA_Init+0x29c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b52      	cmp	r3, #82	; 0x52
 8001f26:	d907      	bls.n	8001f38 <HAL_DMA_Init+0x2ac>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b73      	cmp	r3, #115	; 0x73
 8001f2e:	d905      	bls.n	8001f3c <HAL_DMA_Init+0x2b0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b77      	cmp	r3, #119	; 0x77
 8001f36:	d801      	bhi.n	8001f3c <HAL_DMA_Init+0x2b0>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_DMA_Init+0x2b2>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f48:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f023 0307 	bic.w	r3, r3, #7
 8001f60:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d117      	bne.n	8001fa4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00e      	beq.n	8001fa4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f001 ff1a 	bl	8003dc0 <DMA_CheckFifoParam>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e194      	b.n	80022ce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f001 fe55 	bl	8003c5c <DMA_CalcBaseAndBitshift>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	223f      	movs	r2, #63	; 0x3f
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	e0ca      	b.n	800215e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_DMA_Init+0x428>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_DMA_Init+0x42c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01d      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a36      	ldr	r2, [pc, #216]	; (80020bc <HAL_DMA_Init+0x430>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a35      	ldr	r2, [pc, #212]	; (80020c0 <HAL_DMA_Init+0x434>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a33      	ldr	r2, [pc, #204]	; (80020c4 <HAL_DMA_Init+0x438>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_DMA_Init+0x43c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_DMA_Init+0x440>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_DMA_Init+0x38c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <HAL_DMA_Init+0x444>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_DMA_Init+0x390>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_DMA_Init+0x392>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8094 	beq.w	800214c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_DMA_Init+0x428>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d021      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_DMA_Init+0x42c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d01c      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_DMA_Init+0x430>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d017      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_DMA_Init+0x434>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d012      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_DMA_Init+0x438>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_DMA_Init+0x43c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_DMA_Init+0x440>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <HAL_DMA_Init+0x3e6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_DMA_Init+0x444>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_DMA_Init+0x448>)
 8002090:	4013      	ands	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d01d      	beq.n	80020d8 <HAL_DMA_Init+0x44c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b80      	cmp	r3, #128	; 0x80
 80020a2:	d102      	bne.n	80020aa <HAL_DMA_Init+0x41e>
 80020a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a8:	e017      	b.n	80020da <HAL_DMA_Init+0x44e>
 80020aa:	2300      	movs	r3, #0
 80020ac:	e015      	b.n	80020da <HAL_DMA_Init+0x44e>
 80020ae:	bf00      	nop
 80020b0:	fe10803f 	.word	0xfe10803f
 80020b4:	58025408 	.word	0x58025408
 80020b8:	5802541c 	.word	0x5802541c
 80020bc:	58025430 	.word	0x58025430
 80020c0:	58025444 	.word	0x58025444
 80020c4:	58025458 	.word	0x58025458
 80020c8:	5802546c 	.word	0x5802546c
 80020cc:	58025480 	.word	0x58025480
 80020d0:	58025494 	.word	0x58025494
 80020d4:	fffe000f 	.word	0xfffe000f
 80020d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002108:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <HAL_DMA_Init+0x64c>)
 8002120:	4413      	add	r3, r2
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_DMA_Init+0x650>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f001 fd93 	bl	8003c5c <DMA_CalcBaseAndBitshift>
 8002136:	4603      	mov	r3, r0
 8002138:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	e008      	b.n	800215e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0b7      	b.n	80022ce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5f      	ldr	r2, [pc, #380]	; (80022e0 <HAL_DMA_Init+0x654>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d072      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5d      	ldr	r2, [pc, #372]	; (80022e4 <HAL_DMA_Init+0x658>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d06d      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_DMA_Init+0x65c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d068      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_DMA_Init+0x660>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d063      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_DMA_Init+0x664>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d05e      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_DMA_Init+0x668>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d059      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_DMA_Init+0x66c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d054      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_DMA_Init+0x670>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04f      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_DMA_Init+0x674>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04a      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_DMA_Init+0x678>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d045      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_DMA_Init+0x67c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d040      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	; (800230c <HAL_DMA_Init+0x680>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03b      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_DMA_Init+0x684>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d036      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4b      	ldr	r2, [pc, #300]	; (8002314 <HAL_DMA_Init+0x688>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <HAL_DMA_Init+0x68c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_DMA_Init+0x690>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_DMA_Init+0x694>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <HAL_DMA_Init+0x698>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a44      	ldr	r2, [pc, #272]	; (8002328 <HAL_DMA_Init+0x69c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d018      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a42      	ldr	r2, [pc, #264]	; (800232c <HAL_DMA_Init+0x6a0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a41      	ldr	r2, [pc, #260]	; (8002330 <HAL_DMA_Init+0x6a4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <HAL_DMA_Init+0x6a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <HAL_DMA_Init+0x6ac>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Init+0x5c2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a3c      	ldr	r2, [pc, #240]	; (800233c <HAL_DMA_Init+0x6b0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Init+0x5c6>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_DMA_Init+0x5c8>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d032      	beq.n	80022be <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 fe2d 	bl	8003eb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d102      	bne.n	800226c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002280:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_DMA_Init+0x620>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d80c      	bhi.n	80022ac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f001 feaa 	bl	8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e008      	b.n	80022be <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	a7fdabf8 	.word	0xa7fdabf8
 80022dc:	cccccccd 	.word	0xcccccccd
 80022e0:	40020010 	.word	0x40020010
 80022e4:	40020028 	.word	0x40020028
 80022e8:	40020040 	.word	0x40020040
 80022ec:	40020058 	.word	0x40020058
 80022f0:	40020070 	.word	0x40020070
 80022f4:	40020088 	.word	0x40020088
 80022f8:	400200a0 	.word	0x400200a0
 80022fc:	400200b8 	.word	0x400200b8
 8002300:	40020410 	.word	0x40020410
 8002304:	40020428 	.word	0x40020428
 8002308:	40020440 	.word	0x40020440
 800230c:	40020458 	.word	0x40020458
 8002310:	40020470 	.word	0x40020470
 8002314:	40020488 	.word	0x40020488
 8002318:	400204a0 	.word	0x400204a0
 800231c:	400204b8 	.word	0x400204b8
 8002320:	58025408 	.word	0x58025408
 8002324:	5802541c 	.word	0x5802541c
 8002328:	58025430 	.word	0x58025430
 800232c:	58025444 	.word	0x58025444
 8002330:	58025458 	.word	0x58025458
 8002334:	5802546c 	.word	0x5802546c
 8002338:	58025480 	.word	0x58025480
 800233c:	58025494 	.word	0x58025494

08002340 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff fb60 	bl	8001a0c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e2dc      	b.n	8002912 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d008      	beq.n	8002376 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e2cd      	b.n	8002912 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a76      	ldr	r2, [pc, #472]	; (8002554 <HAL_DMA_Abort+0x214>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a74      	ldr	r2, [pc, #464]	; (8002558 <HAL_DMA_Abort+0x218>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a73      	ldr	r2, [pc, #460]	; (800255c <HAL_DMA_Abort+0x21c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a71      	ldr	r2, [pc, #452]	; (8002560 <HAL_DMA_Abort+0x220>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a70      	ldr	r2, [pc, #448]	; (8002564 <HAL_DMA_Abort+0x224>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <HAL_DMA_Abort+0x228>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6d      	ldr	r2, [pc, #436]	; (800256c <HAL_DMA_Abort+0x22c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6b      	ldr	r2, [pc, #428]	; (8002570 <HAL_DMA_Abort+0x230>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_DMA_Abort+0x234>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a68      	ldr	r2, [pc, #416]	; (8002578 <HAL_DMA_Abort+0x238>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_DMA_Abort+0x23c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_DMA_Abort+0x240>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a64      	ldr	r2, [pc, #400]	; (8002584 <HAL_DMA_Abort+0x244>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a62      	ldr	r2, [pc, #392]	; (8002588 <HAL_DMA_Abort+0x248>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a61      	ldr	r2, [pc, #388]	; (800258c <HAL_DMA_Abort+0x24c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5f      	ldr	r2, [pc, #380]	; (8002590 <HAL_DMA_Abort+0x250>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_DMA_Abort+0xda>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_DMA_Abort+0xdc>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 021e 	bic.w	r2, r2, #30
 800242e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800243e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e00a      	b.n	800245e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 020e 	bic.w	r2, r2, #14
 8002456:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <HAL_DMA_Abort+0x214>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d072      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3a      	ldr	r2, [pc, #232]	; (8002558 <HAL_DMA_Abort+0x218>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d06d      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a39      	ldr	r2, [pc, #228]	; (800255c <HAL_DMA_Abort+0x21c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d068      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a37      	ldr	r2, [pc, #220]	; (8002560 <HAL_DMA_Abort+0x220>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d063      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a36      	ldr	r2, [pc, #216]	; (8002564 <HAL_DMA_Abort+0x224>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d05e      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a34      	ldr	r2, [pc, #208]	; (8002568 <HAL_DMA_Abort+0x228>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d059      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a33      	ldr	r2, [pc, #204]	; (800256c <HAL_DMA_Abort+0x22c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d054      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a31      	ldr	r2, [pc, #196]	; (8002570 <HAL_DMA_Abort+0x230>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d04f      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a30      	ldr	r2, [pc, #192]	; (8002574 <HAL_DMA_Abort+0x234>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04a      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_DMA_Abort+0x238>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d045      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2d      	ldr	r2, [pc, #180]	; (800257c <HAL_DMA_Abort+0x23c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d040      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_DMA_Abort+0x240>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d03b      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <HAL_DMA_Abort+0x244>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d036      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a28      	ldr	r2, [pc, #160]	; (8002588 <HAL_DMA_Abort+0x248>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a27      	ldr	r2, [pc, #156]	; (800258c <HAL_DMA_Abort+0x24c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d02c      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_DMA_Abort+0x250>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d027      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_DMA_Abort+0x254>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a22      	ldr	r2, [pc, #136]	; (8002598 <HAL_DMA_Abort+0x258>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01d      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_DMA_Abort+0x25c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_DMA_Abort+0x260>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_DMA_Abort+0x264>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <HAL_DMA_Abort+0x268>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <HAL_DMA_Abort+0x26c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_DMA_Abort+0x270>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d132      	bne.n	80025b4 <HAL_DMA_Abort+0x274>
 800254e:	2301      	movs	r3, #1
 8002550:	e031      	b.n	80025b6 <HAL_DMA_Abort+0x276>
 8002552:	bf00      	nop
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	40020040 	.word	0x40020040
 8002560:	40020058 	.word	0x40020058
 8002564:	40020070 	.word	0x40020070
 8002568:	40020088 	.word	0x40020088
 800256c:	400200a0 	.word	0x400200a0
 8002570:	400200b8 	.word	0x400200b8
 8002574:	40020410 	.word	0x40020410
 8002578:	40020428 	.word	0x40020428
 800257c:	40020440 	.word	0x40020440
 8002580:	40020458 	.word	0x40020458
 8002584:	40020470 	.word	0x40020470
 8002588:	40020488 	.word	0x40020488
 800258c:	400204a0 	.word	0x400204a0
 8002590:	400204b8 	.word	0x400204b8
 8002594:	58025408 	.word	0x58025408
 8002598:	5802541c 	.word	0x5802541c
 800259c:	58025430 	.word	0x58025430
 80025a0:	58025444 	.word	0x58025444
 80025a4:	58025458 	.word	0x58025458
 80025a8:	5802546c 	.word	0x5802546c
 80025ac:	58025480 	.word	0x58025480
 80025b0:	58025494 	.word	0x58025494
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6d      	ldr	r2, [pc, #436]	; (8002784 <HAL_DMA_Abort+0x444>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d04a      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6b      	ldr	r2, [pc, #428]	; (8002788 <HAL_DMA_Abort+0x448>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d045      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6a      	ldr	r2, [pc, #424]	; (800278c <HAL_DMA_Abort+0x44c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d040      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a68      	ldr	r2, [pc, #416]	; (8002790 <HAL_DMA_Abort+0x450>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d03b      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a67      	ldr	r2, [pc, #412]	; (8002794 <HAL_DMA_Abort+0x454>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d036      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_DMA_Abort+0x458>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d031      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a64      	ldr	r2, [pc, #400]	; (800279c <HAL_DMA_Abort+0x45c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d02c      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a62      	ldr	r2, [pc, #392]	; (80027a0 <HAL_DMA_Abort+0x460>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_DMA_Abort+0x464>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d022      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5f      	ldr	r2, [pc, #380]	; (80027a8 <HAL_DMA_Abort+0x468>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01d      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5e      	ldr	r2, [pc, #376]	; (80027ac <HAL_DMA_Abort+0x46c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d018      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5c      	ldr	r2, [pc, #368]	; (80027b0 <HAL_DMA_Abort+0x470>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5b      	ldr	r2, [pc, #364]	; (80027b4 <HAL_DMA_Abort+0x474>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a59      	ldr	r2, [pc, #356]	; (80027b8 <HAL_DMA_Abort+0x478>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_DMA_Abort+0x47c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a56      	ldr	r2, [pc, #344]	; (80027c0 <HAL_DMA_Abort+0x480>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <HAL_DMA_Abort+0x33c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_DMA_Abort+0x34c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800268c:	e013      	b.n	80026b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268e:	f7ff f9bd 	bl	8001a0c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b05      	cmp	r3, #5
 800269a:	d90c      	bls.n	80026b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e12d      	b.n	8002912 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e5      	bne.n	800268e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <HAL_DMA_Abort+0x444>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d04a      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <HAL_DMA_Abort+0x448>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d045      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2c      	ldr	r2, [pc, #176]	; (800278c <HAL_DMA_Abort+0x44c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d040      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_DMA_Abort+0x450>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d03b      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_DMA_Abort+0x454>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d036      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_DMA_Abort+0x458>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d031      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_DMA_Abort+0x45c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d02c      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <HAL_DMA_Abort+0x460>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d027      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <HAL_DMA_Abort+0x464>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_DMA_Abort+0x468>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01d      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <HAL_DMA_Abort+0x46c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d018      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_DMA_Abort+0x470>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_DMA_Abort+0x474>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_DMA_Abort+0x478>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_DMA_Abort+0x47c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_DMA_Abort+0x480>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_DMA_Abort+0x426>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_DMA_Abort+0x428>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02b      	beq.n	80027c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	223f      	movs	r2, #63	; 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e02a      	b.n	80027da <HAL_DMA_Abort+0x49a>
 8002784:	40020010 	.word	0x40020010
 8002788:	40020028 	.word	0x40020028
 800278c:	40020040 	.word	0x40020040
 8002790:	40020058 	.word	0x40020058
 8002794:	40020070 	.word	0x40020070
 8002798:	40020088 	.word	0x40020088
 800279c:	400200a0 	.word	0x400200a0
 80027a0:	400200b8 	.word	0x400200b8
 80027a4:	40020410 	.word	0x40020410
 80027a8:	40020428 	.word	0x40020428
 80027ac:	40020440 	.word	0x40020440
 80027b0:	40020458 	.word	0x40020458
 80027b4:	40020470 	.word	0x40020470
 80027b8:	40020488 	.word	0x40020488
 80027bc:	400204a0 	.word	0x400204a0
 80027c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2201      	movs	r2, #1
 80027d4:	409a      	lsls	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4f      	ldr	r2, [pc, #316]	; (800291c <HAL_DMA_Abort+0x5dc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d072      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a4d      	ldr	r2, [pc, #308]	; (8002920 <HAL_DMA_Abort+0x5e0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d06d      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4c      	ldr	r2, [pc, #304]	; (8002924 <HAL_DMA_Abort+0x5e4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d068      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	; (8002928 <HAL_DMA_Abort+0x5e8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d063      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_DMA_Abort+0x5ec>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d05e      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a47      	ldr	r2, [pc, #284]	; (8002930 <HAL_DMA_Abort+0x5f0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d059      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a46      	ldr	r2, [pc, #280]	; (8002934 <HAL_DMA_Abort+0x5f4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d054      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a44      	ldr	r2, [pc, #272]	; (8002938 <HAL_DMA_Abort+0x5f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04f      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a43      	ldr	r2, [pc, #268]	; (800293c <HAL_DMA_Abort+0x5fc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04a      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a41      	ldr	r2, [pc, #260]	; (8002940 <HAL_DMA_Abort+0x600>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d045      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a40      	ldr	r2, [pc, #256]	; (8002944 <HAL_DMA_Abort+0x604>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d040      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <HAL_DMA_Abort+0x608>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d03b      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3d      	ldr	r2, [pc, #244]	; (800294c <HAL_DMA_Abort+0x60c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d036      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3b      	ldr	r2, [pc, #236]	; (8002950 <HAL_DMA_Abort+0x610>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3a      	ldr	r2, [pc, #232]	; (8002954 <HAL_DMA_Abort+0x614>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d02c      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a38      	ldr	r2, [pc, #224]	; (8002958 <HAL_DMA_Abort+0x618>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d027      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a37      	ldr	r2, [pc, #220]	; (800295c <HAL_DMA_Abort+0x61c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a35      	ldr	r2, [pc, #212]	; (8002960 <HAL_DMA_Abort+0x620>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01d      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a34      	ldr	r2, [pc, #208]	; (8002964 <HAL_DMA_Abort+0x624>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d018      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_DMA_Abort+0x628>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a31      	ldr	r2, [pc, #196]	; (800296c <HAL_DMA_Abort+0x62c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00e      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2f      	ldr	r2, [pc, #188]	; (8002970 <HAL_DMA_Abort+0x630>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2e      	ldr	r2, [pc, #184]	; (8002974 <HAL_DMA_Abort+0x634>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	; (8002978 <HAL_DMA_Abort+0x638>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Abort+0x58e>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_DMA_Abort+0x590>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40020010 	.word	0x40020010
 8002920:	40020028 	.word	0x40020028
 8002924:	40020040 	.word	0x40020040
 8002928:	40020058 	.word	0x40020058
 800292c:	40020070 	.word	0x40020070
 8002930:	40020088 	.word	0x40020088
 8002934:	400200a0 	.word	0x400200a0
 8002938:	400200b8 	.word	0x400200b8
 800293c:	40020410 	.word	0x40020410
 8002940:	40020428 	.word	0x40020428
 8002944:	40020440 	.word	0x40020440
 8002948:	40020458 	.word	0x40020458
 800294c:	40020470 	.word	0x40020470
 8002950:	40020488 	.word	0x40020488
 8002954:	400204a0 	.word	0x400204a0
 8002958:	400204b8 	.word	0x400204b8
 800295c:	58025408 	.word	0x58025408
 8002960:	5802541c 	.word	0x5802541c
 8002964:	58025430 	.word	0x58025430
 8002968:	58025444 	.word	0x58025444
 800296c:	58025458 	.word	0x58025458
 8002970:	5802546c 	.word	0x5802546c
 8002974:	58025480 	.word	0x58025480
 8002978:	58025494 	.word	0x58025494

0800297c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e237      	b.n	8002dfe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e22c      	b.n	8002dfe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5c      	ldr	r2, [pc, #368]	; (8002b1c <HAL_DMA_Abort_IT+0x1a0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d04a      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <HAL_DMA_Abort_IT+0x1a4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d045      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <HAL_DMA_Abort_IT+0x1a8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d040      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_DMA_Abort_IT+0x1ac>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d03b      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_DMA_Abort_IT+0x1b0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d036      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a55      	ldr	r2, [pc, #340]	; (8002b30 <HAL_DMA_Abort_IT+0x1b4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d031      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a53      	ldr	r2, [pc, #332]	; (8002b34 <HAL_DMA_Abort_IT+0x1b8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02c      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <HAL_DMA_Abort_IT+0x1bc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d027      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a50      	ldr	r2, [pc, #320]	; (8002b3c <HAL_DMA_Abort_IT+0x1c0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d022      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <HAL_DMA_Abort_IT+0x1c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d01d      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_DMA_Abort_IT+0x1c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <HAL_DMA_Abort_IT+0x1cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_DMA_Abort_IT+0x1d0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_DMA_Abort_IT+0x1d4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_DMA_Abort_IT+0x1d8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a46      	ldr	r2, [pc, #280]	; (8002b58 <HAL_DMA_Abort_IT+0x1dc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_DMA_Abort_IT+0xcc>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_DMA_Abort_IT+0xce>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8086 	beq.w	8002b5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <HAL_DMA_Abort_IT+0x1a0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d04a      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <HAL_DMA_Abort_IT+0x1a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d045      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_DMA_Abort_IT+0x1a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d040      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_DMA_Abort_IT+0x1ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d03b      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <HAL_DMA_Abort_IT+0x1b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d036      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <HAL_DMA_Abort_IT+0x1b4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d031      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <HAL_DMA_Abort_IT+0x1b8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02c      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <HAL_DMA_Abort_IT+0x1bc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d027      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_DMA_Abort_IT+0x1c0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d022      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <HAL_DMA_Abort_IT+0x1c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d01d      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <HAL_DMA_Abort_IT+0x1c8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <HAL_DMA_Abort_IT+0x1cc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d013      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_DMA_Abort_IT+0x1d0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_DMA_Abort_IT+0x1d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_DMA_Abort_IT+0x1d8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <HAL_DMA_Abort_IT+0x1dc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d108      	bne.n	8002b0a <HAL_DMA_Abort_IT+0x18e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e178      	b.n	8002dfc <HAL_DMA_Abort_IT+0x480>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e16f      	b.n	8002dfc <HAL_DMA_Abort_IT+0x480>
 8002b1c:	40020010 	.word	0x40020010
 8002b20:	40020028 	.word	0x40020028
 8002b24:	40020040 	.word	0x40020040
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	40020070 	.word	0x40020070
 8002b30:	40020088 	.word	0x40020088
 8002b34:	400200a0 	.word	0x400200a0
 8002b38:	400200b8 	.word	0x400200b8
 8002b3c:	40020410 	.word	0x40020410
 8002b40:	40020428 	.word	0x40020428
 8002b44:	40020440 	.word	0x40020440
 8002b48:	40020458 	.word	0x40020458
 8002b4c:	40020470 	.word	0x40020470
 8002b50:	40020488 	.word	0x40020488
 8002b54:	400204a0 	.word	0x400204a0
 8002b58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6c      	ldr	r2, [pc, #432]	; (8002d24 <HAL_DMA_Abort_IT+0x3a8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04a      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6b      	ldr	r2, [pc, #428]	; (8002d28 <HAL_DMA_Abort_IT+0x3ac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d045      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a69      	ldr	r2, [pc, #420]	; (8002d2c <HAL_DMA_Abort_IT+0x3b0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a68      	ldr	r2, [pc, #416]	; (8002d30 <HAL_DMA_Abort_IT+0x3b4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a66      	ldr	r2, [pc, #408]	; (8002d34 <HAL_DMA_Abort_IT+0x3b8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_DMA_Abort_IT+0x3bc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a63      	ldr	r2, [pc, #396]	; (8002d3c <HAL_DMA_Abort_IT+0x3c0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a62      	ldr	r2, [pc, #392]	; (8002d40 <HAL_DMA_Abort_IT+0x3c4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d027      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a60      	ldr	r2, [pc, #384]	; (8002d44 <HAL_DMA_Abort_IT+0x3c8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5f      	ldr	r2, [pc, #380]	; (8002d48 <HAL_DMA_Abort_IT+0x3cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <HAL_DMA_Abort_IT+0x3d0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <HAL_DMA_Abort_IT+0x3d4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5a      	ldr	r2, [pc, #360]	; (8002d54 <HAL_DMA_Abort_IT+0x3d8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a59      	ldr	r2, [pc, #356]	; (8002d58 <HAL_DMA_Abort_IT+0x3dc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <HAL_DMA_Abort_IT+0x3e0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_DMA_Abort_IT+0x3e4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <HAL_DMA_Abort_IT+0x2a2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e007      	b.n	8002c2e <HAL_DMA_Abort_IT+0x2b2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <HAL_DMA_Abort_IT+0x3a8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d072      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_DMA_Abort_IT+0x3ac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d06d      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <HAL_DMA_Abort_IT+0x3b0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d068      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <HAL_DMA_Abort_IT+0x3b4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d063      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a36      	ldr	r2, [pc, #216]	; (8002d34 <HAL_DMA_Abort_IT+0x3b8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d05e      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a34      	ldr	r2, [pc, #208]	; (8002d38 <HAL_DMA_Abort_IT+0x3bc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d059      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <HAL_DMA_Abort_IT+0x3c0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d054      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a31      	ldr	r2, [pc, #196]	; (8002d40 <HAL_DMA_Abort_IT+0x3c4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d04f      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_DMA_Abort_IT+0x3c8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	; (8002d48 <HAL_DMA_Abort_IT+0x3cc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <HAL_DMA_Abort_IT+0x3d0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <HAL_DMA_Abort_IT+0x3d4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <HAL_DMA_Abort_IT+0x3d8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <HAL_DMA_Abort_IT+0x3dc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_DMA_Abort_IT+0x3e0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <HAL_DMA_Abort_IT+0x3e4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <HAL_DMA_Abort_IT+0x3e8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <HAL_DMA_Abort_IT+0x3ec>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_DMA_Abort_IT+0x3f0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_DMA_Abort_IT+0x3f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_DMA_Abort_IT+0x3f8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	; (8002d78 <HAL_DMA_Abort_IT+0x3fc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_DMA_Abort_IT+0x400>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_DMA_Abort_IT+0x404>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d132      	bne.n	8002d84 <HAL_DMA_Abort_IT+0x408>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e031      	b.n	8002d86 <HAL_DMA_Abort_IT+0x40a>
 8002d22:	bf00      	nop
 8002d24:	40020010 	.word	0x40020010
 8002d28:	40020028 	.word	0x40020028
 8002d2c:	40020040 	.word	0x40020040
 8002d30:	40020058 	.word	0x40020058
 8002d34:	40020070 	.word	0x40020070
 8002d38:	40020088 	.word	0x40020088
 8002d3c:	400200a0 	.word	0x400200a0
 8002d40:	400200b8 	.word	0x400200b8
 8002d44:	40020410 	.word	0x40020410
 8002d48:	40020428 	.word	0x40020428
 8002d4c:	40020440 	.word	0x40020440
 8002d50:	40020458 	.word	0x40020458
 8002d54:	40020470 	.word	0x40020470
 8002d58:	40020488 	.word	0x40020488
 8002d5c:	400204a0 	.word	0x400204a0
 8002d60:	400204b8 	.word	0x400204b8
 8002d64:	58025408 	.word	0x58025408
 8002d68:	5802541c 	.word	0x5802541c
 8002d6c:	58025430 	.word	0x58025430
 8002d70:	58025444 	.word	0x58025444
 8002d74:	58025458 	.word	0x58025458
 8002d78:	5802546c 	.word	0x5802546c
 8002d7c:	58025480 	.word	0x58025480
 8002d80:	58025494 	.word	0x58025494
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2201      	movs	r2, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002db8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e14:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_DMA_IRQHandler+0x1ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a67      	ldr	r2, [pc, #412]	; (8002fb8 <HAL_DMA_IRQHandler+0x1b0>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5f      	ldr	r2, [pc, #380]	; (8002fbc <HAL_DMA_IRQHandler+0x1b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5d      	ldr	r2, [pc, #372]	; (8002fc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	; (8002fc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	; (8002fc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a59      	ldr	r2, [pc, #356]	; (8002fcc <HAL_DMA_IRQHandler+0x1c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	; (8002fd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a56      	ldr	r2, [pc, #344]	; (8002fd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a54      	ldr	r2, [pc, #336]	; (8002fd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a53      	ldr	r2, [pc, #332]	; (8002fdc <HAL_DMA_IRQHandler+0x1d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a51      	ldr	r2, [pc, #324]	; (8002fe0 <HAL_DMA_IRQHandler+0x1d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <HAL_DMA_IRQHandler+0x1dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a4e      	ldr	r2, [pc, #312]	; (8002fe8 <HAL_DMA_IRQHandler+0x1e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4d      	ldr	r2, [pc, #308]	; (8002fec <HAL_DMA_IRQHandler+0x1e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <HAL_DMA_IRQHandler+0x1e8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <HAL_DMA_IRQHandler+0x1ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_IRQHandler+0xd6>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 842b 	beq.w	800373c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2208      	movs	r2, #8
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a2 	beq.w	8003040 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <HAL_DMA_IRQHandler+0x1b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04a      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d045      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d040      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d03b      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_DMA_IRQHandler+0x1c4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d036      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d031      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02c      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d027      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_DMA_IRQHandler+0x1d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <HAL_DMA_IRQHandler+0x1d8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01d      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <HAL_DMA_IRQHandler+0x1dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_DMA_IRQHandler+0x1e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_DMA_IRQHandler+0x1e4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_DMA_IRQHandler+0x1e8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_DMA_IRQHandler+0x1ec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12f      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x1f4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e02e      	b.n	8003010 <HAL_DMA_IRQHandler+0x208>
 8002fb2:	bf00      	nop
 8002fb4:	24000028 	.word	0x24000028
 8002fb8:	1b4e81b5 	.word	0x1b4e81b5
 8002fbc:	40020010 	.word	0x40020010
 8002fc0:	40020028 	.word	0x40020028
 8002fc4:	40020040 	.word	0x40020040
 8002fc8:	40020058 	.word	0x40020058
 8002fcc:	40020070 	.word	0x40020070
 8002fd0:	40020088 	.word	0x40020088
 8002fd4:	400200a0 	.word	0x400200a0
 8002fd8:	400200b8 	.word	0x400200b8
 8002fdc:	40020410 	.word	0x40020410
 8002fe0:	40020428 	.word	0x40020428
 8002fe4:	40020440 	.word	0x40020440
 8002fe8:	40020458 	.word	0x40020458
 8002fec:	40020470 	.word	0x40020470
 8002ff0:	40020488 	.word	0x40020488
 8002ff4:	400204a0 	.word	0x400204a0
 8002ff8:	400204b8 	.word	0x400204b8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2208      	movs	r2, #8
 800302e:	409a      	lsls	r2, r3
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06e      	beq.n	8003134 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a69      	ldr	r2, [pc, #420]	; (8003200 <HAL_DMA_IRQHandler+0x3f8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04a      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a67      	ldr	r2, [pc, #412]	; (8003204 <HAL_DMA_IRQHandler+0x3fc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d045      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a66      	ldr	r2, [pc, #408]	; (8003208 <HAL_DMA_IRQHandler+0x400>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d040      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a64      	ldr	r2, [pc, #400]	; (800320c <HAL_DMA_IRQHandler+0x404>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03b      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a63      	ldr	r2, [pc, #396]	; (8003210 <HAL_DMA_IRQHandler+0x408>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d036      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a61      	ldr	r2, [pc, #388]	; (8003214 <HAL_DMA_IRQHandler+0x40c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d031      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a60      	ldr	r2, [pc, #384]	; (8003218 <HAL_DMA_IRQHandler+0x410>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d02c      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a5e      	ldr	r2, [pc, #376]	; (800321c <HAL_DMA_IRQHandler+0x414>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d027      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a5d      	ldr	r2, [pc, #372]	; (8003220 <HAL_DMA_IRQHandler+0x418>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5b      	ldr	r2, [pc, #364]	; (8003224 <HAL_DMA_IRQHandler+0x41c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5a      	ldr	r2, [pc, #360]	; (8003228 <HAL_DMA_IRQHandler+0x420>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d018      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_DMA_IRQHandler+0x424>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a57      	ldr	r2, [pc, #348]	; (8003230 <HAL_DMA_IRQHandler+0x428>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a55      	ldr	r2, [pc, #340]	; (8003234 <HAL_DMA_IRQHandler+0x42c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_DMA_IRQHandler+0x430>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_DMA_IRQHandler+0x434>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10a      	bne.n	800310c <HAL_DMA_IRQHandler+0x304>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e003      	b.n	8003114 <HAL_DMA_IRQHandler+0x30c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f043 0202 	orr.w	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2204      	movs	r2, #4
 800313e:	409a      	lsls	r2, r3
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 808f 	beq.w	8003268 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <HAL_DMA_IRQHandler+0x3f8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04a      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <HAL_DMA_IRQHandler+0x3fc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d045      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_DMA_IRQHandler+0x400>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d040      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a27      	ldr	r2, [pc, #156]	; (800320c <HAL_DMA_IRQHandler+0x404>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d03b      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_DMA_IRQHandler+0x408>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a24      	ldr	r2, [pc, #144]	; (8003214 <HAL_DMA_IRQHandler+0x40c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d031      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_DMA_IRQHandler+0x410>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02c      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <HAL_DMA_IRQHandler+0x414>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d027      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_DMA_IRQHandler+0x418>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_DMA_IRQHandler+0x41c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_DMA_IRQHandler+0x420>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_DMA_IRQHandler+0x424>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_DMA_IRQHandler+0x428>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_DMA_IRQHandler+0x42c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <HAL_DMA_IRQHandler+0x430>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_DMA_IRQHandler+0x434>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d12a      	bne.n	8003240 <HAL_DMA_IRQHandler+0x438>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e023      	b.n	8003248 <HAL_DMA_IRQHandler+0x440>
 8003200:	40020010 	.word	0x40020010
 8003204:	40020028 	.word	0x40020028
 8003208:	40020040 	.word	0x40020040
 800320c:	40020058 	.word	0x40020058
 8003210:	40020070 	.word	0x40020070
 8003214:	40020088 	.word	0x40020088
 8003218:	400200a0 	.word	0x400200a0
 800321c:	400200b8 	.word	0x400200b8
 8003220:	40020410 	.word	0x40020410
 8003224:	40020428 	.word	0x40020428
 8003228:	40020440 	.word	0x40020440
 800322c:	40020458 	.word	0x40020458
 8003230:	40020470 	.word	0x40020470
 8003234:	40020488 	.word	0x40020488
 8003238:	400204a0 	.word	0x400204a0
 800323c:	400204b8 	.word	0x400204b8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2204      	movs	r2, #4
 8003256:	409a      	lsls	r2, r3
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2210      	movs	r2, #16
 8003272:	409a      	lsls	r2, r3
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a6 	beq.w	80033ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a85      	ldr	r2, [pc, #532]	; (8003498 <HAL_DMA_IRQHandler+0x690>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a83      	ldr	r2, [pc, #524]	; (800349c <HAL_DMA_IRQHandler+0x694>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a82      	ldr	r2, [pc, #520]	; (80034a0 <HAL_DMA_IRQHandler+0x698>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a80      	ldr	r2, [pc, #512]	; (80034a4 <HAL_DMA_IRQHandler+0x69c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7f      	ldr	r2, [pc, #508]	; (80034a8 <HAL_DMA_IRQHandler+0x6a0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_DMA_IRQHandler+0x6a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7c      	ldr	r2, [pc, #496]	; (80034b0 <HAL_DMA_IRQHandler+0x6a8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7a      	ldr	r2, [pc, #488]	; (80034b4 <HAL_DMA_IRQHandler+0x6ac>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a79      	ldr	r2, [pc, #484]	; (80034b8 <HAL_DMA_IRQHandler+0x6b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a77      	ldr	r2, [pc, #476]	; (80034bc <HAL_DMA_IRQHandler+0x6b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a76      	ldr	r2, [pc, #472]	; (80034c0 <HAL_DMA_IRQHandler+0x6b8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a74      	ldr	r2, [pc, #464]	; (80034c4 <HAL_DMA_IRQHandler+0x6bc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a73      	ldr	r2, [pc, #460]	; (80034c8 <HAL_DMA_IRQHandler+0x6c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a71      	ldr	r2, [pc, #452]	; (80034cc <HAL_DMA_IRQHandler+0x6c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a70      	ldr	r2, [pc, #448]	; (80034d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6e      	ldr	r2, [pc, #440]	; (80034d4 <HAL_DMA_IRQHandler+0x6cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10a      	bne.n	8003334 <HAL_DMA_IRQHandler+0x52c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e009      	b.n	8003348 <HAL_DMA_IRQHandler+0x540>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03e      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2210      	movs	r2, #16
 8003356:	409a      	lsls	r2, r3
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d024      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e01f      	b.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
 800339a:	e016      	b.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0208 	bic.w	r2, r2, #8
 80033b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2220      	movs	r2, #32
 80033d4:	409a      	lsls	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8110 	beq.w	8003600 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <HAL_DMA_IRQHandler+0x690>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d04a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	; (800349c <HAL_DMA_IRQHandler+0x694>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d045      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <HAL_DMA_IRQHandler+0x698>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d040      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <HAL_DMA_IRQHandler+0x69c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d03b      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <HAL_DMA_IRQHandler+0x6a0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d036      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_DMA_IRQHandler+0x6a4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d031      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02c      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_DMA_IRQHandler+0x6ac>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d027      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_DMA_IRQHandler+0x6b4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01d      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_DMA_IRQHandler+0x6b8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_DMA_IRQHandler+0x6c0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_DMA_IRQHandler+0x6c4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_DMA_IRQHandler+0x6cc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d12b      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x6d0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e02a      	b.n	80034ec <HAL_DMA_IRQHandler+0x6e4>
 8003496:	bf00      	nop
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8087 	beq.w	8003600 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2220      	movs	r2, #32
 80034fc:	409a      	lsls	r2, r3
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b04      	cmp	r3, #4
 800350c:	d139      	bne.n	8003582 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0216 	bic.w	r2, r2, #22
 800351c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <HAL_DMA_IRQHandler+0x736>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0208 	bic.w	r2, r2, #8
 800354c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 834a 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
          }
          return;
 8003580:	e344      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d018      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02c      	beq.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
 80035ae:	e027      	b.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
 80035c0:	e01e      	b.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10f      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0210 	bic.w	r2, r2, #16
 80035de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8306 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8088 	beq.w	8003728 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2204      	movs	r2, #4
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7a      	ldr	r2, [pc, #488]	; (8003810 <HAL_DMA_IRQHandler+0xa08>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a79      	ldr	r2, [pc, #484]	; (8003814 <HAL_DMA_IRQHandler+0xa0c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a77      	ldr	r2, [pc, #476]	; (8003818 <HAL_DMA_IRQHandler+0xa10>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a76      	ldr	r2, [pc, #472]	; (800381c <HAL_DMA_IRQHandler+0xa14>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a74      	ldr	r2, [pc, #464]	; (8003820 <HAL_DMA_IRQHandler+0xa18>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a73      	ldr	r2, [pc, #460]	; (8003824 <HAL_DMA_IRQHandler+0xa1c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a71      	ldr	r2, [pc, #452]	; (8003828 <HAL_DMA_IRQHandler+0xa20>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a70      	ldr	r2, [pc, #448]	; (800382c <HAL_DMA_IRQHandler+0xa24>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6e      	ldr	r2, [pc, #440]	; (8003830 <HAL_DMA_IRQHandler+0xa28>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6d      	ldr	r2, [pc, #436]	; (8003834 <HAL_DMA_IRQHandler+0xa2c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6b      	ldr	r2, [pc, #428]	; (8003838 <HAL_DMA_IRQHandler+0xa30>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6a      	ldr	r2, [pc, #424]	; (800383c <HAL_DMA_IRQHandler+0xa34>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a68      	ldr	r2, [pc, #416]	; (8003840 <HAL_DMA_IRQHandler+0xa38>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a67      	ldr	r2, [pc, #412]	; (8003844 <HAL_DMA_IRQHandler+0xa3c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a65      	ldr	r2, [pc, #404]	; (8003848 <HAL_DMA_IRQHandler+0xa40>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a64      	ldr	r2, [pc, #400]	; (800384c <HAL_DMA_IRQHandler+0xa44>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_DMA_IRQHandler+0x8ca>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e007      	b.n	80036e2 <HAL_DMA_IRQHandler+0x8da>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d307      	bcc.n	80036fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f2      	bne.n	80036e2 <HAL_DMA_IRQHandler+0x8da>
 80036fc:	e000      	b.n	8003700 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003716:	e003      	b.n	8003720 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8272 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
 800373a:	e26c      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_DMA_IRQHandler+0xa48>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a42      	ldr	r2, [pc, #264]	; (8003854 <HAL_DMA_IRQHandler+0xa4c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d01d      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a40      	ldr	r2, [pc, #256]	; (8003858 <HAL_DMA_IRQHandler+0xa50>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3f      	ldr	r2, [pc, #252]	; (800385c <HAL_DMA_IRQHandler+0xa54>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3d      	ldr	r2, [pc, #244]	; (8003860 <HAL_DMA_IRQHandler+0xa58>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_DMA_IRQHandler+0xa5c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3a      	ldr	r2, [pc, #232]	; (8003868 <HAL_DMA_IRQHandler+0xa60>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a39      	ldr	r2, [pc, #228]	; (800386c <HAL_DMA_IRQHandler+0xa64>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_DMA_IRQHandler+0x988>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_DMA_IRQHandler+0x98a>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 823f 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2204      	movs	r2, #4
 80037aa:	409a      	lsls	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80cd 	beq.w	8003950 <HAL_DMA_IRQHandler+0xb48>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80c7 	beq.w	8003950 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2204      	movs	r2, #4
 80037cc:	409a      	lsls	r2, r3
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d049      	beq.n	8003870 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8210 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f8:	e20a      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8206 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800380c:	e200      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe08>
 800380e:	bf00      	nop
 8003810:	40020010 	.word	0x40020010
 8003814:	40020028 	.word	0x40020028
 8003818:	40020040 	.word	0x40020040
 800381c:	40020058 	.word	0x40020058
 8003820:	40020070 	.word	0x40020070
 8003824:	40020088 	.word	0x40020088
 8003828:	400200a0 	.word	0x400200a0
 800382c:	400200b8 	.word	0x400200b8
 8003830:	40020410 	.word	0x40020410
 8003834:	40020428 	.word	0x40020428
 8003838:	40020440 	.word	0x40020440
 800383c:	40020458 	.word	0x40020458
 8003840:	40020470 	.word	0x40020470
 8003844:	40020488 	.word	0x40020488
 8003848:	400204a0 	.word	0x400204a0
 800384c:	400204b8 	.word	0x400204b8
 8003850:	58025408 	.word	0x58025408
 8003854:	5802541c 	.word	0x5802541c
 8003858:	58025430 	.word	0x58025430
 800385c:	58025444 	.word	0x58025444
 8003860:	58025458 	.word	0x58025458
 8003864:	5802546c 	.word	0x5802546c
 8003868:	58025480 	.word	0x58025480
 800386c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d160      	bne.n	800393c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7f      	ldr	r2, [pc, #508]	; (8003a7c <HAL_DMA_IRQHandler+0xc74>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7d      	ldr	r2, [pc, #500]	; (8003a80 <HAL_DMA_IRQHandler+0xc78>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7c      	ldr	r2, [pc, #496]	; (8003a84 <HAL_DMA_IRQHandler+0xc7c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_DMA_IRQHandler+0xc80>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a79      	ldr	r2, [pc, #484]	; (8003a8c <HAL_DMA_IRQHandler+0xc84>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a77      	ldr	r2, [pc, #476]	; (8003a90 <HAL_DMA_IRQHandler+0xc88>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a76      	ldr	r2, [pc, #472]	; (8003a94 <HAL_DMA_IRQHandler+0xc8c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a74      	ldr	r2, [pc, #464]	; (8003a98 <HAL_DMA_IRQHandler+0xc90>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a73      	ldr	r2, [pc, #460]	; (8003a9c <HAL_DMA_IRQHandler+0xc94>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a71      	ldr	r2, [pc, #452]	; (8003aa0 <HAL_DMA_IRQHandler+0xc98>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a70      	ldr	r2, [pc, #448]	; (8003aa4 <HAL_DMA_IRQHandler+0xc9c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6e      	ldr	r2, [pc, #440]	; (8003aa8 <HAL_DMA_IRQHandler+0xca0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6d      	ldr	r2, [pc, #436]	; (8003aac <HAL_DMA_IRQHandler+0xca4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6b      	ldr	r2, [pc, #428]	; (8003ab0 <HAL_DMA_IRQHandler+0xca8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <HAL_DMA_IRQHandler+0xcac>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a68      	ldr	r2, [pc, #416]	; (8003ab8 <HAL_DMA_IRQHandler+0xcb0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <HAL_DMA_IRQHandler+0xb24>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0208 	bic.w	r2, r2, #8
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e007      	b.n	800393c <HAL_DMA_IRQHandler+0xb34>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8165 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394e:	e15f      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2202      	movs	r2, #2
 800395a:	409a      	lsls	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80c5 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xce8>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80bf 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2202      	movs	r2, #2
 800397c:	409a      	lsls	r2, r3
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 813a 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a8:	e134      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8130 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039bc:	e12a      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 8089 	bne.w	8003adc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <HAL_DMA_IRQHandler+0xc74>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04a      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a29      	ldr	r2, [pc, #164]	; (8003a80 <HAL_DMA_IRQHandler+0xc78>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d045      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <HAL_DMA_IRQHandler+0xc7c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d040      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <HAL_DMA_IRQHandler+0xc80>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d03b      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <HAL_DMA_IRQHandler+0xc84>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d036      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <HAL_DMA_IRQHandler+0xc88>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_DMA_IRQHandler+0xc8c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d02c      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a20      	ldr	r2, [pc, #128]	; (8003a98 <HAL_DMA_IRQHandler+0xc90>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d027      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_DMA_IRQHandler+0xc94>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_DMA_IRQHandler+0xc98>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <HAL_DMA_IRQHandler+0xca0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_DMA_IRQHandler+0xca4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_DMA_IRQHandler+0xca8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <HAL_DMA_IRQHandler+0xcac>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_DMA_IRQHandler+0xcb0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d128      	bne.n	8003abc <HAL_DMA_IRQHandler+0xcb4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0214 	bic.w	r2, r2, #20
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e027      	b.n	8003acc <HAL_DMA_IRQHandler+0xcc4>
 8003a7c:	40020010 	.word	0x40020010
 8003a80:	40020028 	.word	0x40020028
 8003a84:	40020040 	.word	0x40020040
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	40020070 	.word	0x40020070
 8003a90:	40020088 	.word	0x40020088
 8003a94:	400200a0 	.word	0x400200a0
 8003a98:	400200b8 	.word	0x400200b8
 8003a9c:	40020410 	.word	0x40020410
 8003aa0:	40020428 	.word	0x40020428
 8003aa4:	40020440 	.word	0x40020440
 8003aa8:	40020458 	.word	0x40020458
 8003aac:	40020470 	.word	0x40020470
 8003ab0:	40020488 	.word	0x40020488
 8003ab4:	400204a0 	.word	0x400204a0
 8003ab8:	400204b8 	.word	0x400204b8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020a 	bic.w	r2, r2, #10
 8003aca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8097 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aee:	e091      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2208      	movs	r2, #8
 8003afa:	409a      	lsls	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8088 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8082 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a41      	ldr	r2, [pc, #260]	; (8003c1c <HAL_DMA_IRQHandler+0xe14>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d04a      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3f      	ldr	r2, [pc, #252]	; (8003c20 <HAL_DMA_IRQHandler+0xe18>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d045      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3e      	ldr	r2, [pc, #248]	; (8003c24 <HAL_DMA_IRQHandler+0xe1c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d040      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3c      	ldr	r2, [pc, #240]	; (8003c28 <HAL_DMA_IRQHandler+0xe20>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d03b      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	; (8003c2c <HAL_DMA_IRQHandler+0xe24>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d036      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a39      	ldr	r2, [pc, #228]	; (8003c30 <HAL_DMA_IRQHandler+0xe28>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d031      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a38      	ldr	r2, [pc, #224]	; (8003c34 <HAL_DMA_IRQHandler+0xe2c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d02c      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <HAL_DMA_IRQHandler+0xe30>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d027      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a35      	ldr	r2, [pc, #212]	; (8003c3c <HAL_DMA_IRQHandler+0xe34>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d022      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a33      	ldr	r2, [pc, #204]	; (8003c40 <HAL_DMA_IRQHandler+0xe38>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a32      	ldr	r2, [pc, #200]	; (8003c44 <HAL_DMA_IRQHandler+0xe3c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <HAL_DMA_IRQHandler+0xe40>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <HAL_DMA_IRQHandler+0xe44>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <HAL_DMA_IRQHandler+0xe48>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <HAL_DMA_IRQHandler+0xe4c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <HAL_DMA_IRQHandler+0xe50>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0xdbc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 021c 	bic.w	r2, r2, #28
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e007      	b.n	8003bd4 <HAL_DMA_IRQHandler+0xdcc>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020e 	bic.w	r2, r2, #14
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e004      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c0c:	bf00      	nop
 8003c0e:	e002      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40020010 	.word	0x40020010
 8003c20:	40020028 	.word	0x40020028
 8003c24:	40020040 	.word	0x40020040
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	40020070 	.word	0x40020070
 8003c30:	40020088 	.word	0x40020088
 8003c34:	400200a0 	.word	0x400200a0
 8003c38:	400200b8 	.word	0x400200b8
 8003c3c:	40020410 	.word	0x40020410
 8003c40:	40020428 	.word	0x40020428
 8003c44:	40020440 	.word	0x40020440
 8003c48:	40020458 	.word	0x40020458
 8003c4c:	40020470 	.word	0x40020470
 8003c50:	40020488 	.word	0x40020488
 8003c54:	400204a0 	.word	0x400204a0
 8003c58:	400204b8 	.word	0x400204b8

08003c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <DMA_CalcBaseAndBitshift+0x118>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d04a      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d045      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <DMA_CalcBaseAndBitshift+0x120>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d040      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <DMA_CalcBaseAndBitshift+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d03b      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <DMA_CalcBaseAndBitshift+0x128>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d036      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d031      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <DMA_CalcBaseAndBitshift+0x130>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d02c      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a38      	ldr	r2, [pc, #224]	; (8003d90 <DMA_CalcBaseAndBitshift+0x134>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d027      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <DMA_CalcBaseAndBitshift+0x138>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a35      	ldr	r2, [pc, #212]	; (8003d98 <DMA_CalcBaseAndBitshift+0x13c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01d      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a33      	ldr	r2, [pc, #204]	; (8003d9c <DMA_CalcBaseAndBitshift+0x140>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a32      	ldr	r2, [pc, #200]	; (8003da0 <DMA_CalcBaseAndBitshift+0x144>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a30      	ldr	r2, [pc, #192]	; (8003da4 <DMA_CalcBaseAndBitshift+0x148>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <DMA_CalcBaseAndBitshift+0x150>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2c      	ldr	r2, [pc, #176]	; (8003db0 <DMA_CalcBaseAndBitshift+0x154>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <DMA_CalcBaseAndBitshift+0xac>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <DMA_CalcBaseAndBitshift+0xae>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d024      	beq.n	8003d58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3b10      	subs	r3, #16
 8003d16:	4a27      	ldr	r2, [pc, #156]	; (8003db4 <DMA_CalcBaseAndBitshift+0x158>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d28:	5cd3      	ldrb	r3, [r2, r3]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d908      	bls.n	8003d48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <DMA_CalcBaseAndBitshift+0x160>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	1d1a      	adds	r2, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	659a      	str	r2, [r3, #88]	; 0x58
 8003d46:	e00d      	b.n	8003d64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <DMA_CalcBaseAndBitshift+0x160>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6593      	str	r3, [r2, #88]	; 0x58
 8003d56:	e005      	b.n	8003d64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40020010 	.word	0x40020010
 8003d78:	40020028 	.word	0x40020028
 8003d7c:	40020040 	.word	0x40020040
 8003d80:	40020058 	.word	0x40020058
 8003d84:	40020070 	.word	0x40020070
 8003d88:	40020088 	.word	0x40020088
 8003d8c:	400200a0 	.word	0x400200a0
 8003d90:	400200b8 	.word	0x400200b8
 8003d94:	40020410 	.word	0x40020410
 8003d98:	40020428 	.word	0x40020428
 8003d9c:	40020440 	.word	0x40020440
 8003da0:	40020458 	.word	0x40020458
 8003da4:	40020470 	.word	0x40020470
 8003da8:	40020488 	.word	0x40020488
 8003dac:	400204a0 	.word	0x400204a0
 8003db0:	400204b8 	.word	0x400204b8
 8003db4:	aaaaaaab 	.word	0xaaaaaaab
 8003db8:	0800a2f8 	.word	0x0800a2f8
 8003dbc:	fffffc00 	.word	0xfffffc00

08003dc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d120      	bne.n	8003e16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d858      	bhi.n	8003e8e <DMA_CheckFifoParam+0xce>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <DMA_CheckFifoParam+0x24>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e07 	.word	0x08003e07
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e8f 	.word	0x08003e8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d048      	beq.n	8003e92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e04:	e045      	b.n	8003e92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0e:	d142      	bne.n	8003e96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e14:	e03f      	b.n	8003e96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	d123      	bne.n	8003e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d838      	bhi.n	8003e9a <DMA_CheckFifoParam+0xda>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <DMA_CheckFifoParam+0x70>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e47 	.word	0x08003e47
 8003e38:	08003e41 	.word	0x08003e41
 8003e3c:	08003e59 	.word	0x08003e59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
        break;
 8003e44:	e030      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d025      	beq.n	8003e9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e56:	e022      	b.n	8003e9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e60:	d11f      	bne.n	8003ea2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e66:	e01c      	b.n	8003ea2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d902      	bls.n	8003e76 <DMA_CheckFifoParam+0xb6>
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d003      	beq.n	8003e7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e74:	e018      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7a:	e015      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00e      	beq.n	8003ea6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8003e8c:	e00b      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e00a      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8003e92:	bf00      	nop
 8003e94:	e008      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8003e96:	bf00      	nop
 8003e98:	e006      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e004      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <DMA_CheckFifoParam+0xe8>
    break;
 8003ea6:	bf00      	nop
    }
  }

  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop

08003eb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a38      	ldr	r2, [pc, #224]	; (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a36      	ldr	r2, [pc, #216]	; (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a33      	ldr	r2, [pc, #204]	; (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a30      	ldr	r2, [pc, #192]	; (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2d      	ldr	r2, [pc, #180]	; (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3b08      	subs	r3, #8
 8003f28:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f54:	e024      	b.n	8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3b10      	subs	r3, #16
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d806      	bhi.n	8003f7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d902      	bls.n	8003f7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2201      	movs	r2, #1
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	58025408 	.word	0x58025408
 8003fb0:	5802541c 	.word	0x5802541c
 8003fb4:	58025430 	.word	0x58025430
 8003fb8:	58025444 	.word	0x58025444
 8003fbc:	58025458 	.word	0x58025458
 8003fc0:	5802546c 	.word	0x5802546c
 8003fc4:	58025480 	.word	0x58025480
 8003fc8:	58025494 	.word	0x58025494
 8003fcc:	cccccccd 	.word	0xcccccccd
 8003fd0:	16009600 	.word	0x16009600
 8003fd4:	58025880 	.word	0x58025880
 8003fd8:	aaaaaaab 	.word	0xaaaaaaab
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	4002040f 	.word	0x4002040f
 8003fe4:	10008200 	.word	0x10008200
 8003fe8:	40020880 	.word	0x40020880

08003fec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d04a      	beq.n	8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d847      	bhi.n	8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004074:	671a      	str	r2, [r3, #112]	; 0x70
 8004076:	e009      	b.n	800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800408a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b01      	subs	r3, #1
 8004090:	2201      	movs	r2, #1
 8004092:	409a      	lsls	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	58025408 	.word	0x58025408
 80040a8:	5802541c 	.word	0x5802541c
 80040ac:	58025430 	.word	0x58025430
 80040b0:	58025444 	.word	0x58025444
 80040b4:	58025458 	.word	0x58025458
 80040b8:	5802546c 	.word	0x5802546c
 80040bc:	58025480 	.word	0x58025480
 80040c0:	58025494 	.word	0x58025494
 80040c4:	1600963f 	.word	0x1600963f
 80040c8:	58025940 	.word	0x58025940
 80040cc:	1000823f 	.word	0x1000823f
 80040d0:	40020940 	.word	0x40020940

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040e2:	4b86      	ldr	r3, [pc, #536]	; (80042fc <HAL_GPIO_Init+0x228>)
 80040e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040e6:	e18c      	b.n	8004402 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 817e 	beq.w	80043fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d005      	beq.n	8004118 <HAL_GPIO_Init+0x44>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d130      	bne.n	800417a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800414e:	2201      	movs	r2, #1
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0201 	and.w	r2, r3, #1
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b03      	cmp	r3, #3
 8004184:	d017      	beq.n	80041b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	2203      	movs	r2, #3
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d123      	bne.n	800420a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	08da      	lsrs	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3208      	adds	r2, #8
 80041ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	220f      	movs	r2, #15
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	08da      	lsrs	r2, r3, #3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3208      	adds	r2, #8
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2203      	movs	r2, #3
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80d8 	beq.w	80043fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <HAL_GPIO_Init+0x22c>)
 800424e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004252:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_GPIO_Init+0x22c>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <HAL_GPIO_Init+0x22c>)
 800425e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_GPIO_Init+0x230>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_GPIO_Init+0x234>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04a      	beq.n	800432c <HAL_GPIO_Init+0x258>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_GPIO_Init+0x238>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02b      	beq.n	80042f6 <HAL_GPIO_Init+0x222>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_GPIO_Init+0x23c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x21e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <HAL_GPIO_Init+0x240>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x21a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <HAL_GPIO_Init+0x244>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x216>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_GPIO_Init+0x248>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x212>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_GPIO_Init+0x24c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x20e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_GPIO_Init+0x250>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x20a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a15      	ldr	r2, [pc, #84]	; (8004328 <HAL_GPIO_Init+0x254>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x206>
 80042d6:	2309      	movs	r3, #9
 80042d8:	e029      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042da:	230a      	movs	r3, #10
 80042dc:	e027      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042de:	2307      	movs	r3, #7
 80042e0:	e025      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042e2:	2306      	movs	r3, #6
 80042e4:	e023      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042e6:	2305      	movs	r3, #5
 80042e8:	e021      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042ea:	2304      	movs	r3, #4
 80042ec:	e01f      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042ee:	2303      	movs	r3, #3
 80042f0:	e01d      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e01b      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e019      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042fa:	bf00      	nop
 80042fc:	58000080 	.word	0x58000080
 8004300:	58024400 	.word	0x58024400
 8004304:	58000400 	.word	0x58000400
 8004308:	58020000 	.word	0x58020000
 800430c:	58020400 	.word	0x58020400
 8004310:	58020800 	.word	0x58020800
 8004314:	58020c00 	.word	0x58020c00
 8004318:	58021000 	.word	0x58021000
 800431c:	58021400 	.word	0x58021400
 8004320:	58021800 	.word	0x58021800
 8004324:	58021c00 	.word	0x58021c00
 8004328:	58022400 	.word	0x58022400
 800432c:	2300      	movs	r3, #0
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	f002 0203 	and.w	r2, r2, #3
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	4093      	lsls	r3, r2
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800433e:	4938      	ldr	r1, [pc, #224]	; (8004420 <HAL_GPIO_Init+0x34c>)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	3302      	adds	r3, #2
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f ae6b 	bne.w	80040e8 <HAL_GPIO_Init+0x14>
  }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3724      	adds	r7, #36	; 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	58000400 	.word	0x58000400

08004424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
 8004430:	4613      	mov	r3, r2
 8004432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004434:	787b      	ldrb	r3, [r7, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004440:	e003      	b.n	800444a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	041a      	lsls	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d00a      	beq.n	8004482 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <HAL_PWREx_ConfigSupply+0x70>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e01f      	b.n	80044be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e01d      	b.n	80044be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_PWREx_ConfigSupply+0x70>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 0207 	bic.w	r2, r3, #7
 800448a:	490f      	ldr	r1, [pc, #60]	; (80044c8 <HAL_PWREx_ConfigSupply+0x70>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004492:	f7fd fabb 	bl	8001a0c <HAL_GetTick>
 8004496:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004498:	e009      	b.n	80044ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800449a:	f7fd fab7 	bl	8001a0c <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a8:	d901      	bls.n	80044ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e007      	b.n	80044be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_PWREx_ConfigSupply+0x70>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ba:	d1ee      	bne.n	800449a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	58024800 	.word	0x58024800

080044cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08c      	sub	sp, #48	; 0x30
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e39d      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8087 	beq.w	80045fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ec:	4b88      	ldr	r3, [pc, #544]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044f6:	4b86      	ldr	r3, [pc, #536]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d007      	beq.n	8004512 <HAL_RCC_OscConfig+0x46>
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	2b18      	cmp	r3, #24
 8004506:	d110      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d10b      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	4b7f      	ldr	r3, [pc, #508]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x12c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d168      	bne.n	80045f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e377      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x76>
 8004534:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a75      	ldr	r2, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e02e      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x98>
 800454a:	4b71      	ldr	r3, [pc, #452]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a70      	ldr	r2, [pc, #448]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6d      	ldr	r2, [pc, #436]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0xbc>
 800456e:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a67      	ldr	r2, [pc, #412]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a64      	ldr	r2, [pc, #400]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004588:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a60      	ldr	r2, [pc, #384]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b5e      	ldr	r3, [pc, #376]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5d      	ldr	r2, [pc, #372]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fa30 	bl	8001a0c <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd fa2c 	bl	8001a0c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e32b      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c2:	4b53      	ldr	r3, [pc, #332]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe4>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fa1c 	bl	8001a0c <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd fa18 	bl	8001a0c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e317      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045ea:	4b49      	ldr	r3, [pc, #292]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x10c>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 808c 	beq.w	8004720 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004608:	4b41      	ldr	r3, [pc, #260]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004610:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004612:	4b3f      	ldr	r3, [pc, #252]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_RCC_OscConfig+0x162>
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	2b18      	cmp	r3, #24
 8004622:	d137      	bne.n	8004694 <HAL_RCC_OscConfig+0x1c8>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d132      	bne.n	8004694 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x17a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e2e9      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 0219 	bic.w	r2, r3, #25
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	492f      	ldr	r1, [pc, #188]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004658:	f7fd f9d8 	bl	8001a0c <HAL_GetTick>
 800465c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004660:	f7fd f9d4 	bl	8001a0c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e2d3      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004672:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	4920      	ldr	r1, [pc, #128]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004692:	e045      	b.n	8004720 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d026      	beq.n	80046ea <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800469c:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 0219 	bic.w	r2, r3, #25
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4919      	ldr	r1, [pc, #100]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fd f9ad 	bl	8001a0c <HAL_GetTick>
 80046b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fd f9a9 	bl	8001a0c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e2a8      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	490b      	ldr	r1, [pc, #44]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
 80046e8:	e01a      	b.n	8004720 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fd f989 	bl	8001a0c <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fd f985 	bl	8001a0c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d903      	bls.n	8004714 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e284      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
 8004710:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004714:	4b96      	ldr	r3, [pc, #600]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ee      	bne.n	80046fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d06a      	beq.n	8004802 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800472c:	4b90      	ldr	r3, [pc, #576]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004734:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004736:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d007      	beq.n	8004752 <HAL_RCC_OscConfig+0x286>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b18      	cmp	r3, #24
 8004746:	d11b      	bne.n	8004780 <HAL_RCC_OscConfig+0x2b4>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d116      	bne.n	8004780 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004752:	4b87      	ldr	r3, [pc, #540]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_RCC_OscConfig+0x29e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d001      	beq.n	800476a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e257      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800476a:	4b81      	ldr	r3, [pc, #516]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	497d      	ldr	r1, [pc, #500]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800477e:	e040      	b.n	8004802 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d023      	beq.n	80047d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004788:	4b79      	ldr	r3, [pc, #484]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a78      	ldr	r2, [pc, #480]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd f93a 	bl	8001a0c <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800479c:	f7fd f936 	bl	8001a0c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e235      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ae:	4b70      	ldr	r3, [pc, #448]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ba:	4b6d      	ldr	r3, [pc, #436]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	4969      	ldr	r1, [pc, #420]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60cb      	str	r3, [r1, #12]
 80047ce:	e018      	b.n	8004802 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047d0:	4b67      	ldr	r3, [pc, #412]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80047d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd f916 	bl	8001a0c <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047e4:	f7fd f912 	bl	8001a0c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e211      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047f6:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b56      	ldr	r3, [pc, #344]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	4a55      	ldr	r2, [pc, #340]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fd f8f3 	bl	8001a0c <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482a:	f7fd f8ef 	bl	8001a0c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e1ee      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800483c:	4b4c      	ldr	r3, [pc, #304]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x35e>
 8004848:	e018      	b.n	800487c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484a:	4b49      	ldr	r3, [pc, #292]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	4a48      	ldr	r2, [pc, #288]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd f8d9 	bl	8001a0c <HAL_GetTick>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485e:	f7fd f8d5 	bl	8001a0c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e1d4      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004870:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d036      	beq.n	80048f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d019      	beq.n	80048c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004890:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a36      	ldr	r2, [pc, #216]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800489a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800489c:	f7fd f8b6 	bl	8001a0c <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048a4:	f7fd f8b2 	bl	8001a0c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1b1      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x3d8>
 80048c2:	e018      	b.n	80048f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048c4:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80048ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048d0:	f7fd f89c 	bl	8001a0c <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048d8:	f7fd f898 	bl	8001a0c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e197      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8086 	beq.w	8004a10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x4a8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_RCC_OscConfig+0x4a8>)
 800490a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004910:	f7fd f87c 	bl	8001a0c <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004918:	f7fd f878 	bl	8001a0c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e177      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <HAL_RCC_OscConfig+0x4a8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d106      	bne.n	800494c <HAL_RCC_OscConfig+0x480>
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	e032      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d111      	bne.n	8004978 <HAL_RCC_OscConfig+0x4ac>
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a05      	ldr	r2, [pc, #20]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	4a02      	ldr	r2, [pc, #8]	; (8004970 <HAL_RCC_OscConfig+0x4a4>)
 8004966:	f023 0304 	bic.w	r3, r3, #4
 800496a:	6713      	str	r3, [r2, #112]	; 0x70
 800496c:	e021      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e6>
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	58024800 	.word	0x58024800
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d10c      	bne.n	800499a <HAL_RCC_OscConfig+0x4ce>
 8004980:	4b83      	ldr	r3, [pc, #524]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	4a82      	ldr	r2, [pc, #520]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	6713      	str	r3, [r2, #112]	; 0x70
 800498c:	4b80      	ldr	r3, [pc, #512]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a7f      	ldr	r2, [pc, #508]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	e00b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4e6>
 800499a:	4b7d      	ldr	r3, [pc, #500]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a7c      	ldr	r2, [pc, #496]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a79      	ldr	r2, [pc, #484]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 80049ac:	f023 0304 	bic.w	r3, r3, #4
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d015      	beq.n	80049e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ba:	f7fd f827 	bl	8001a0c <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd f823 	bl	8001a0c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e120      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d8:	4b6d      	ldr	r3, [pc, #436]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ee      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
 80049e4:	e014      	b.n	8004a10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fd f811 	bl	8001a0c <HAL_GetTick>
 80049ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd f80d 	bl	8001a0c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e10a      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a04:	4b62      	ldr	r3, [pc, #392]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ee      	bne.n	80049ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80ff 	beq.w	8004c18 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a1a:	4b5d      	ldr	r3, [pc, #372]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a22:	2b18      	cmp	r3, #24
 8004a24:	f000 80ba 	beq.w	8004b9c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	f040 8095 	bne.w	8004b5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b57      	ldr	r3, [pc, #348]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a56      	ldr	r2, [pc, #344]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fc ffe5 	bl	8001a0c <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fc ffe1 	bl	8001a0c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0e0      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a58:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a64:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a68:	4b4a      	ldr	r3, [pc, #296]	; (8004b94 <HAL_RCC_OscConfig+0x6c8>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	430a      	orrs	r2, r1
 8004a78:	4945      	ldr	r1, [pc, #276]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	628b      	str	r3, [r1, #40]	; 0x28
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	3b01      	subs	r3, #1
 8004a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	025b      	lsls	r3, r3, #9
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aae:	4938      	ldr	r1, [pc, #224]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ab4:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4a35      	ldr	r2, [pc, #212]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac4:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <HAL_RCC_OscConfig+0x6cc>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004acc:	00d2      	lsls	r2, r2, #3
 8004ace:	4930      	ldr	r1, [pc, #192]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f023 020c 	bic.w	r2, r3, #12
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	492b      	ldr	r1, [pc, #172]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f023 0202 	bic.w	r2, r3, #2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	4927      	ldr	r1, [pc, #156]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b04:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fc ff6a 	bl	8001a0c <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc ff66 	bl	8001a0c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e065      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x670>
 8004b5a:	e05d      	b.n	8004c18 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc ff50 	bl	8001a0c <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fc ff4c 	bl	8001a0c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e04b      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b82:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_OscConfig+0x6c4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x6a4>
 8004b8e:	e043      	b.n	8004c18 <HAL_RCC_OscConfig+0x74c>
 8004b90:	58024400 	.word	0x58024400
 8004b94:	fffffc0c 	.word	0xfffffc0c
 8004b98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCC_OscConfig+0x758>)
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_RCC_OscConfig+0x758>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d031      	beq.n	8004c14 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d12a      	bne.n	8004c14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d122      	bne.n	8004c14 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d11a      	bne.n	8004c14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	0a5b      	lsrs	r3, r3, #9
 8004be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d111      	bne.n	8004c14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3730      	adds	r7, #48	; 0x30
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400

08004c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e19c      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b8a      	ldr	r3, [pc, #552]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d910      	bls.n	8004c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b87      	ldr	r3, [pc, #540]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 020f 	bic.w	r2, r3, #15
 8004c52:	4985      	ldr	r1, [pc, #532]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b83      	ldr	r3, [pc, #524]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e184      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	4b7b      	ldr	r3, [pc, #492]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d908      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c88:	4b78      	ldr	r3, [pc, #480]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	4975      	ldr	r1, [pc, #468]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d908      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	496a      	ldr	r1, [pc, #424]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	4b64      	ldr	r3, [pc, #400]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d908      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ce4:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	495e      	ldr	r1, [pc, #376]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d010      	beq.n	8004d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d908      	bls.n	8004d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d12:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	4953      	ldr	r1, [pc, #332]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d010      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d908      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d40:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f023 020f 	bic.w	r2, r3, #15
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4947      	ldr	r1, [pc, #284]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d055      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d5e:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4940      	ldr	r1, [pc, #256]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d78:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d121      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0f6      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d90:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d115      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0ea      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0de      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db8:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0d6      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f023 0207 	bic.w	r2, r3, #7
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4925      	ldr	r1, [pc, #148]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fc fe17 	bl	8001a0c <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de2:	f7fc fe13 	bl	8001a0c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e0be      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d1eb      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d208      	bcs.n	8004e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f023 020f 	bic.w	r2, r3, #15
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	490e      	ldr	r1, [pc, #56]	; (8004e6c <HAL_RCC_ClockConfig+0x244>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d214      	bcs.n	8004e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	4906      	ldr	r1, [pc, #24]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_RCC_ClockConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e086      	b.n	8004f76 <HAL_RCC_ClockConfig+0x34e>
 8004e68:	52002000 	.word	0x52002000
 8004e6c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d208      	bcs.n	8004e9e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e8c:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	4939      	ldr	r1, [pc, #228]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d010      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d208      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	492e      	ldr	r1, [pc, #184]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d208      	bcs.n	8004efa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	4922      	ldr	r1, [pc, #136]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d208      	bcs.n	8004f28 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	4917      	ldr	r1, [pc, #92]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f28:	f000 f834 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	4912      	ldr	r1, [pc, #72]	; (8004f84 <HAL_RCC_ClockConfig+0x35c>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <HAL_RCC_ClockConfig+0x358>)
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <HAL_RCC_ClockConfig+0x35c>)
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x360>)
 8004f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x364>)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCC_ClockConfig+0x368>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc fd04 	bl	8001978 <HAL_InitTick>
 8004f70:	4603      	mov	r3, r0
 8004f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400
 8004f84:	0800a2e8 	.word	0x0800a2e8
 8004f88:	2400002c 	.word	0x2400002c
 8004f8c:	24000028 	.word	0x24000028
 8004f90:	24000030 	.word	0x24000030

08004f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	; 0x24
 8004f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9a:	4bb3      	ldr	r3, [pc, #716]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa2:	2b18      	cmp	r3, #24
 8004fa4:	f200 8155 	bhi.w	8005252 <HAL_RCC_GetSysClockFreq+0x2be>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08005015 	.word	0x08005015
 8004fb4:	08005253 	.word	0x08005253
 8004fb8:	08005253 	.word	0x08005253
 8004fbc:	08005253 	.word	0x08005253
 8004fc0:	08005253 	.word	0x08005253
 8004fc4:	08005253 	.word	0x08005253
 8004fc8:	08005253 	.word	0x08005253
 8004fcc:	08005253 	.word	0x08005253
 8004fd0:	0800503b 	.word	0x0800503b
 8004fd4:	08005253 	.word	0x08005253
 8004fd8:	08005253 	.word	0x08005253
 8004fdc:	08005253 	.word	0x08005253
 8004fe0:	08005253 	.word	0x08005253
 8004fe4:	08005253 	.word	0x08005253
 8004fe8:	08005253 	.word	0x08005253
 8004fec:	08005253 	.word	0x08005253
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	08005253 	.word	0x08005253
 8004ff8:	08005253 	.word	0x08005253
 8004ffc:	08005253 	.word	0x08005253
 8005000:	08005253 	.word	0x08005253
 8005004:	08005253 	.word	0x08005253
 8005008:	08005253 	.word	0x08005253
 800500c:	08005253 	.word	0x08005253
 8005010:	08005047 	.word	0x08005047
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005014:	4b94      	ldr	r3, [pc, #592]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005020:	4b91      	ldr	r3, [pc, #580]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	08db      	lsrs	r3, r3, #3
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	4a90      	ldr	r2, [pc, #576]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
 8005030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005032:	e111      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005034:	4b8d      	ldr	r3, [pc, #564]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005036:	61bb      	str	r3, [r7, #24]
    break;
 8005038:	e10e      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800503a:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800503c:	61bb      	str	r3, [r7, #24]
    break;
 800503e:	e10b      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005040:	4b8c      	ldr	r3, [pc, #560]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005042:	61bb      	str	r3, [r7, #24]
    break;
 8005044:	e108      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005046:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005050:	4b85      	ldr	r3, [pc, #532]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800505a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800505c:	4b82      	ldr	r3, [pc, #520]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005066:	4b80      	ldr	r3, [pc, #512]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	08db      	lsrs	r3, r3, #3
 800506c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80e1 	beq.w	800524c <HAL_RCC_GetSysClockFreq+0x2b8>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b02      	cmp	r3, #2
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCC_GetSysClockFreq+0x204>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b02      	cmp	r3, #2
 8005096:	f200 80a1 	bhi.w	80051dc <HAL_RCC_GetSysClockFreq+0x248>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x114>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d056      	beq.n	8005154 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050a6:	e099      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a8:	4b6f      	ldr	r3, [pc, #444]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02d      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b4:	4b6c      	ldr	r3, [pc, #432]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	4a6b      	ldr	r2, [pc, #428]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b62      	ldr	r3, [pc, #392]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800510e:	e087      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e8>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b51      	ldr	r3, [pc, #324]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a02 	vldr	s12, [r7, #8]
 8005136:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005152:	e065      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a02 	vldr	s12, [r7, #8]
 800517a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005196:	e043      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005284 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80051be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051da:	e021      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005202:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005278 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	3301      	adds	r3, #1
 800522c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005238:	edd7 6a07 	vldr	s13, [r7, #28]
 800523c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005244:	ee17 3a90 	vmov	r3, s15
 8005248:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800524a:	e005      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
    break;
 8005250:	e002      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005254:	61bb      	str	r3, [r7, #24]
    break;
 8005256:	bf00      	nop
  }

  return sysclockfreq;
 8005258:	69bb      	ldr	r3, [r7, #24]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	58024400 	.word	0x58024400
 800526c:	03d09000 	.word	0x03d09000
 8005270:	003d0900 	.word	0x003d0900
 8005274:	017d7840 	.word	0x017d7840
 8005278:	46000000 	.word	0x46000000
 800527c:	4c742400 	.word	0x4c742400
 8005280:	4a742400 	.word	0x4a742400
 8005284:	4bbebc20 	.word	0x4bbebc20

08005288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800528e:	f7ff fe81 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8005292:	4602      	mov	r2, r0
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	490f      	ldr	r1, [pc, #60]	; (80052dc <HAL_RCC_GetHCLKFreq+0x54>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_GetHCLKFreq+0x54>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	fa22 f303 	lsr.w	r3, r2, r3
 80052c2:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80052c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052c6:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58024400 	.word	0x58024400
 80052dc:	0800a2e8 	.word	0x0800a2e8
 80052e0:	2400002c 	.word	0x2400002c
 80052e4:	24000028 	.word	0x24000028

080052e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052ec:	f7ff ffcc 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	58024400 	.word	0x58024400
 8005310:	0800a2e8 	.word	0x0800a2e8

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005318:	f7ff ffb6 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4904      	ldr	r1, [pc, #16]	; (800533c <HAL_RCC_GetPCLK2Freq+0x28>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58024400 	.word	0x58024400
 800533c:	0800a2e8 	.word	0x0800a2e8

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005348:	2300      	movs	r3, #0
 800534a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800534c:	2300      	movs	r3, #0
 800534e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d03f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005364:	d02a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005366:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800536a:	d824      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800536c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005370:	d018      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005376:	d81e      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800537c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005380:	d007      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005382:	e018      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4ba4      	ldr	r3, [pc, #656]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	4aa3      	ldr	r2, [pc, #652]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005390:	e015      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	2102      	movs	r1, #2
 8005398:	4618      	mov	r0, r3
 800539a:	f001 f989 	bl	80066b0 <RCCEx_PLL2_Config>
 800539e:	4603      	mov	r3, r0
 80053a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053a2:	e00c      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3324      	adds	r3, #36	; 0x24
 80053a8:	2102      	movs	r1, #2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 fa32 	bl	8006814 <RCCEx_PLL3_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053b4:	e003      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	75fb      	strb	r3, [r7, #23]
      break;
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053c4:	4b94      	ldr	r3, [pc, #592]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	4991      	ldr	r1, [pc, #580]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	650b      	str	r3, [r1, #80]	; 0x50
 80053d6:	e001      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03d      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d826      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800540d 	.word	0x0800540d
 80053fc:	0800541b 	.word	0x0800541b
 8005400:	0800542d 	.word	0x0800542d
 8005404:	08005445 	.word	0x08005445
 8005408:	08005445 	.word	0x08005445
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540c:	4b82      	ldr	r3, [pc, #520]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a81      	ldr	r2, [pc, #516]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005418:	e015      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f001 f945 	bl	80066b0 <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f001 f9ee 	bl	8006814 <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
      break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800544c:	4b72      	ldr	r3, [pc, #456]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	f023 0207 	bic.w	r2, r3, #7
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	496f      	ldr	r1, [pc, #444]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800545a:	4313      	orrs	r3, r2
 800545c:	650b      	str	r3, [r1, #80]	; 0x50
 800545e:	e001      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d051      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005476:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800547a:	d036      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800547c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005480:	d830      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005486:	d032      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005488:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800548c:	d82a      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800548e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005492:	d02e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005494:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005498:	d824      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549e:	d018      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80054a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a4:	d81e      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80054aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ae:	d007      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80054b0:	e018      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b2:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	4a58      	ldr	r2, [pc, #352]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054be:	e019      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 f8f2 	bl	80066b0 <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054d0:	e010      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3324      	adds	r3, #36	; 0x24
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 f99b 	bl	8006814 <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054e2:	e007      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
      break;
 80054e8:	e004      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005508:	4943      	ldr	r1, [pc, #268]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800550a:	4313      	orrs	r3, r2
 800550c:	658b      	str	r3, [r1, #88]	; 0x58
 800550e:	e001      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551c:	2b00      	cmp	r3, #0
 800551e:	d051      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005526:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800552a:	d036      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800552c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005530:	d830      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005536:	d032      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800553c:	d82a      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800553e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005542:	d02e      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005548:	d824      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800554a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800554e:	d018      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005554:	d81e      	bhi.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800555a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800555e:	d007      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005560:	e018      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005562:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800556e:	e019      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f001 f89a 	bl	80066b0 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005580:	e010      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3324      	adds	r3, #36	; 0x24
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f943 	bl	8006814 <RCCEx_PLL3_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005592:	e007      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	75fb      	strb	r3, [r7, #23]
      break;
 8005598:	e004      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800559a:	bf00      	nop
 800559c:	e002      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800559e:	bf00      	nop
 80055a0:	e000      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80055a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055aa:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055b8:	4917      	ldr	r1, [pc, #92]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	658b      	str	r3, [r1, #88]	; 0x58
 80055be:	e001      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d035      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d01c      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d817      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d00c      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d813      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d10f      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4a09      	ldr	r2, [pc, #36]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80055f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80055f8:	e011      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3304      	adds	r3, #4
 80055fe:	2102      	movs	r1, #2
 8005600:	4618      	mov	r0, r3
 8005602:	f001 f855 	bl	80066b0 <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800560a:	e008      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
      break;
 8005610:	e005      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005612:	bf00      	nop
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
      break;
 800561c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005624:	4ba3      	ldr	r3, [pc, #652]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005630:	49a0      	ldr	r1, [pc, #640]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005632:	4313      	orrs	r3, r2
 8005634:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005636:	e001      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d047      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005650:	d030      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005656:	d82a      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800565c:	d02c      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800565e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005662:	d824      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005668:	d018      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800566a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566e:	d81e      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005678:	d007      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800567a:	e018      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800567c:	4b8d      	ldr	r3, [pc, #564]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4a8c      	ldr	r2, [pc, #560]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005688:	e017      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f80d 	bl	80066b0 <RCCEx_PLL2_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800569a:	e00e      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3324      	adds	r3, #36	; 0x24
 80056a0:	2100      	movs	r1, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 f8b6 	bl	8006814 <RCCEx_PLL3_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056ac:	e005      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80056b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056c0:	4b7c      	ldr	r3, [pc, #496]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	4979      	ldr	r1, [pc, #484]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	650b      	str	r3, [r1, #80]	; 0x50
 80056d2:	e001      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d049      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ec:	d02e      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80056ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f2:	d828      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80056f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056f8:	d02a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80056fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056fe:	d822      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005704:	d026      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800570a:	d81c      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800570c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005710:	d010      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005716:	d816      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01d      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d111      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	2101      	movs	r1, #1
 8005728:	4618      	mov	r0, r3
 800572a:	f000 ffc1 	bl	80066b0 <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005732:	e012      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	2101      	movs	r1, #1
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f86a 	bl	8006814 <RCCEx_PLL3_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005744:	e009      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	75fb      	strb	r3, [r7, #23]
      break;
 800574a:	e006      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800574c:	bf00      	nop
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005750:	bf00      	nop
 8005752:	e002      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005760:	4b54      	ldr	r3, [pc, #336]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	4951      	ldr	r1, [pc, #324]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800576e:	4313      	orrs	r3, r2
 8005770:	650b      	str	r3, [r1, #80]	; 0x50
 8005772:	e001      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d04b      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800578a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800578e:	d02e      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005794:	d828      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d02a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d822      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057a6:	d026      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80057a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ac:	d81c      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b2:	d010      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80057b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b8:	d816      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01d      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80057be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c2:	d111      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	2101      	movs	r1, #1
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 ff70 	bl	80066b0 <RCCEx_PLL2_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057d4:	e012      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3324      	adds	r3, #36	; 0x24
 80057da:	2101      	movs	r1, #1
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 f819 	bl	8006814 <RCCEx_PLL3_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80057e6:	e009      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
      break;
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80057ee:	bf00      	nop
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80057fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005802:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005810:	4928      	ldr	r1, [pc, #160]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005812:	4313      	orrs	r3, r2
 8005814:	658b      	str	r3, [r1, #88]	; 0x58
 8005816:	e001      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d02f      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005830:	d00e      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005836:	d814      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800583c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005840:	d10f      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800584e:	e00c      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	2101      	movs	r1, #1
 8005856:	4618      	mov	r0, r3
 8005858:	f000 ff2a 	bl	80066b0 <RCCEx_PLL2_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
      break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005870:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800587c:	490d      	ldr	r1, [pc, #52]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800587e:	4313      	orrs	r3, r2
 8005880:	650b      	str	r3, [r1, #80]	; 0x50
 8005882:	e001      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d034      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	2b03      	cmp	r3, #3
 800589a:	d81d      	bhi.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058df 	.word	0x080058df
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058c7 	.word	0x080058c7
 80058b0:	080058df 	.word	0x080058df
 80058b4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4bb1      	ldr	r3, [pc, #708]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4ab0      	ldr	r2, [pc, #704]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058c4:	e00c      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2102      	movs	r1, #2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 feef 	bl	80066b0 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80058d6:	e003      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	e000      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80058de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058e6:	4ba6      	ldr	r3, [pc, #664]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	49a3      	ldr	r1, [pc, #652]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058f8:	e001      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8086 	beq.w	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800590c:	4b9d      	ldr	r3, [pc, #628]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a9c      	ldr	r2, [pc, #624]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005918:	f7fc f878 	bl	8001a0c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800591e:	e009      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005920:	f7fc f874 	bl	8001a0c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d902      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	75fb      	strb	r3, [r7, #23]
        break;
 8005932:	e005      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005934:	4b93      	ldr	r3, [pc, #588]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ef      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d166      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005946:	4b8e      	ldr	r3, [pc, #568]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005948:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005950:	4053      	eors	r3, r2
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800595a:	4b89      	ldr	r3, [pc, #548]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005964:	4b86      	ldr	r3, [pc, #536]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a85      	ldr	r2, [pc, #532]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800596a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005970:	4b83      	ldr	r3, [pc, #524]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a82      	ldr	r2, [pc, #520]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800597c:	4a80      	ldr	r2, [pc, #512]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598c:	d115      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fc f83d 	bl	8001a0c <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005994:	e00b      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fc f839 	bl	8001a0c <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d902      	bls.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	75fb      	strb	r3, [r7, #23]
            break;
 80059ac:	e005      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ae:	4b74      	ldr	r3, [pc, #464]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0ed      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d126      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ce:	d10d      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80059d0:	4b6b      	ldr	r3, [pc, #428]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059de:	0919      	lsrs	r1, r3, #4
 80059e0:	4b69      	ldr	r3, [pc, #420]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059e2:	400b      	ands	r3, r1
 80059e4:	4966      	ldr	r1, [pc, #408]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	610b      	str	r3, [r1, #16]
 80059ea:	e005      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80059ec:	4b64      	ldr	r3, [pc, #400]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	4a63      	ldr	r2, [pc, #396]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80059f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059f6:	6113      	str	r3, [r2, #16]
 80059f8:	4b61      	ldr	r3, [pc, #388]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80059fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a06:	495e      	ldr	r1, [pc, #376]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	670b      	str	r3, [r1, #112]	; 0x70
 8005a0c:	e004      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	75bb      	strb	r3, [r7, #22]
 8005a12:	e001      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d07e      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	2b28      	cmp	r3, #40	; 0x28
 8005a2a:	d867      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005a2c:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005b03 	.word	0x08005b03
 8005a38:	08005afd 	.word	0x08005afd
 8005a3c:	08005afd 	.word	0x08005afd
 8005a40:	08005afd 	.word	0x08005afd
 8005a44:	08005afd 	.word	0x08005afd
 8005a48:	08005afd 	.word	0x08005afd
 8005a4c:	08005afd 	.word	0x08005afd
 8005a50:	08005afd 	.word	0x08005afd
 8005a54:	08005ad9 	.word	0x08005ad9
 8005a58:	08005afd 	.word	0x08005afd
 8005a5c:	08005afd 	.word	0x08005afd
 8005a60:	08005afd 	.word	0x08005afd
 8005a64:	08005afd 	.word	0x08005afd
 8005a68:	08005afd 	.word	0x08005afd
 8005a6c:	08005afd 	.word	0x08005afd
 8005a70:	08005afd 	.word	0x08005afd
 8005a74:	08005aeb 	.word	0x08005aeb
 8005a78:	08005afd 	.word	0x08005afd
 8005a7c:	08005afd 	.word	0x08005afd
 8005a80:	08005afd 	.word	0x08005afd
 8005a84:	08005afd 	.word	0x08005afd
 8005a88:	08005afd 	.word	0x08005afd
 8005a8c:	08005afd 	.word	0x08005afd
 8005a90:	08005afd 	.word	0x08005afd
 8005a94:	08005b03 	.word	0x08005b03
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005afd 	.word	0x08005afd
 8005aa0:	08005afd 	.word	0x08005afd
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005afd 	.word	0x08005afd
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	08005afd 	.word	0x08005afd
 8005ab4:	08005b03 	.word	0x08005b03
 8005ab8:	08005afd 	.word	0x08005afd
 8005abc:	08005afd 	.word	0x08005afd
 8005ac0:	08005afd 	.word	0x08005afd
 8005ac4:	08005afd 	.word	0x08005afd
 8005ac8:	08005afd 	.word	0x08005afd
 8005acc:	08005afd 	.word	0x08005afd
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005b03 	.word	0x08005b03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fde6 	bl	80066b0 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e00c      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fe8f 	bl	8006814 <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b16:	491a      	ldr	r1, [pc, #104]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8005b1c:	e001      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d03e      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d820      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b8d 	.word	0x08005b8d
 8005b40:	08005b55 	.word	0x08005b55
 8005b44:	08005b67 	.word	0x08005b67
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b8d 	.word	0x08005b8d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fda8 	bl	80066b0 <RCCEx_PLL2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b64:	e013      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3324      	adds	r3, #36	; 0x24
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fe51 	bl	8006814 <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b76:	e00a      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7c:	e007      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005b7e:	bf00      	nop
 8005b80:	58024400 	.word	0x58024400
 8005b84:	58024800 	.word	0x58024800
 8005b88:	00ffffcf 	.word	0x00ffffcf
      break;
 8005b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b94:	4b9f      	ldr	r3, [pc, #636]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	f023 0207 	bic.w	r2, r3, #7
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	499c      	ldr	r1, [pc, #624]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	654b      	str	r3, [r1, #84]	; 0x54
 8005ba6:	e001      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d039      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d820      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005c0b 	.word	0x08005c0b
 8005bcc:	08005be1 	.word	0x08005be1
 8005bd0:	08005bf3 	.word	0x08005bf3
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005c0b 	.word	0x08005c0b
 8005bdc:	08005c0b 	.word	0x08005c0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fd62 	bl	80066b0 <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e00c      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	; 0x24
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fe0b 	bl	8006814 <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c02:	e003      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
      break;
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c12:	4b80      	ldr	r3, [pc, #512]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	f023 0207 	bic.w	r2, r3, #7
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c20:	497c      	ldr	r1, [pc, #496]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	658b      	str	r3, [r1, #88]	; 0x58
 8005c26:	e001      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d04b      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c42:	d02e      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c48:	d828      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4e:	d02a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c54:	d822      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005c56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c5a:	d026      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005c5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c60:	d81c      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c66:	d010      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c6c:	d816      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01d      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c76:	d111      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fd16 	bl	80066b0 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c88:	e012      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3324      	adds	r3, #36	; 0x24
 8005c8e:	2102      	movs	r1, #2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fdbf 	bl	8006814 <RCCEx_PLL3_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c9a:	e009      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca0:	e006      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cb6:	4b57      	ldr	r3, [pc, #348]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	4953      	ldr	r1, [pc, #332]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	654b      	str	r3, [r1, #84]	; 0x54
 8005cca:	e001      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d04b      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ce6:	d02e      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005ce8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005cec:	d828      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d02a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d822      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cfe:	d026      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005d00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d04:	d81c      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0a:	d010      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d10:	d816      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01d      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d111      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fcc4 	bl	80066b0 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d2c:	e012      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	2102      	movs	r1, #2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fd6d 	bl	8006814 <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005d3e:	e009      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
      break;
 8005d44:	e006      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005d46:	bf00      	nop
 8005d48:	e004      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d5a:	4b2e      	ldr	r3, [pc, #184]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d68:	492a      	ldr	r1, [pc, #168]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	658b      	str	r3, [r1, #88]	; 0x58
 8005d6e:	e001      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d04d      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d8a:	d02e      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005d8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d90:	d828      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d96:	d02a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9c:	d822      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005d9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005da2:	d026      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005da4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005da8:	d81c      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dae:	d010      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db4:	d816      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01d      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbe:	d111      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fc72 	bl	80066b0 <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005dd0:	e012      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3324      	adds	r3, #36	; 0x24
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fd1b 	bl	8006814 <RCCEx_PLL3_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005de2:	e009      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e0c:	4901      	ldr	r1, [pc, #4]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	658b      	str	r3, [r1, #88]	; 0x58
 8005e12:	e003      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e30:	d10a      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3324      	adds	r3, #36	; 0x24
 8005e36:	2102      	movs	r1, #2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fceb 	bl	8006814 <RCCEx_PLL3_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005e48:	4b8a      	ldr	r3, [pc, #552]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e54:	4987      	ldr	r1, [pc, #540]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e70:	d10a      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3324      	adds	r3, #36	; 0x24
 8005e76:	2102      	movs	r1, #2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fccb 	bl	8006814 <RCCEx_PLL3_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e88:	4b7a      	ldr	r3, [pc, #488]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	4977      	ldr	r1, [pc, #476]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d034      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb8:	d817      	bhi.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d009      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ec4:	e011      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fbef 	bl	80066b0 <RCCEx_PLL2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ed6:	e00c      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3324      	adds	r3, #36	; 0x24
 8005edc:	2102      	movs	r1, #2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc98 	bl	8006814 <RCCEx_PLL3_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ee8:	e003      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
      break;
 8005eee:	e000      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ef8:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f06:	495b      	ldr	r1, [pc, #364]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8005f0c:	e001      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d033      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f28:	d01c      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f2e:	d816      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f34:	d003      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f3a:	d007      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005f3c:	e00f      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3e:	4b4d      	ldr	r3, [pc, #308]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	4a4c      	ldr	r2, [pc, #304]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f4a:	e00c      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3324      	adds	r3, #36	; 0x24
 8005f50:	2101      	movs	r1, #1
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fc5e 	bl	8006814 <RCCEx_PLL3_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f5c:	e003      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
      break;
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f6c:	4b41      	ldr	r3, [pc, #260]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7a:	493e      	ldr	r1, [pc, #248]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	654b      	str	r3, [r1, #84]	; 0x54
 8005f80:	e001      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
 8005f84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d029      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9e:	d007      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005fa0:	e00f      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa2:	4b34      	ldr	r3, [pc, #208]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	4a33      	ldr	r2, [pc, #204]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fb7a 	bl	80066b0 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	4926      	ldr	r1, [pc, #152]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005fe0:	e001      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3324      	adds	r3, #36	; 0x24
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fc0b 	bl	8006814 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d033      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601c:	d017      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800601e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006022:	d811      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d013      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800602a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602e:	d80b      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8006034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006038:	d106      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4a0d      	ldr	r2, [pc, #52]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006046:	e007      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606a:	4902      	ldr	r1, [pc, #8]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800606c:	4313      	orrs	r3, r2
 800606e:	654b      	str	r3, [r1, #84]	; 0x54
 8006070:	e004      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8006072:	bf00      	nop
 8006074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006088:	4b29      	ldr	r3, [pc, #164]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006094:	4926      	ldr	r1, [pc, #152]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006096:	4313      	orrs	r3, r2
 8006098:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060a6:	4b22      	ldr	r3, [pc, #136]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b2:	491f      	ldr	r1, [pc, #124]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ce:	6113      	str	r3, [r2, #16]
 80060d0:	4b17      	ldr	r3, [pc, #92]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060da:	4915      	ldr	r1, [pc, #84]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da08      	bge.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f4:	490e      	ldr	r1, [pc, #56]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006114:	4906      	ldr	r1, [pc, #24]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006116:	4313      	orrs	r3, r2
 8006118:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800611a:	7dbb      	ldrb	r3, [r7, #22]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	58024400 	.word	0x58024400

08006134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006138:	f7ff f8a6 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b06      	ldr	r3, [pc, #24]	; (8006158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4904      	ldr	r1, [pc, #16]	; (800615c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	58024400 	.word	0x58024400
 800615c:	0800a2e8 	.word	0x0800a2e8

08006160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	; 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006168:	4ba1      	ldr	r3, [pc, #644]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006172:	4b9f      	ldr	r3, [pc, #636]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	0b1b      	lsrs	r3, r3, #12
 8006178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800617c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800617e:	4b9c      	ldr	r3, [pc, #624]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800618a:	4b99      	ldr	r3, [pc, #612]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	08db      	lsrs	r3, r3, #3
 8006190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8111 	beq.w	80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	f000 8083 	beq.w	80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	f200 80a1 	bhi.w	8006300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d056      	beq.n	8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061ca:	e099      	b.n	8006300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061cc:	4b88      	ldr	r3, [pc, #544]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d02d      	beq.n	8006234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061d8:	4b85      	ldr	r3, [pc, #532]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	08db      	lsrs	r3, r3, #3
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	4a84      	ldr	r2, [pc, #528]	; (80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061e4:	fa22 f303 	lsr.w	r3, r2, r3
 80061e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	ee07 3a90 	vmov	s15, r3
 80061f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006202:	4b7b      	ldr	r3, [pc, #492]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006212:	ed97 6a03 	vldr	s12, [r7, #12]
 8006216:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006232:	e087      	b.n	8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006246:	4b6a      	ldr	r3, [pc, #424]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006256:	ed97 6a03 	vldr	s12, [r7, #12]
 800625a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800625e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006276:	e065      	b.n	8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628a:	4b59      	ldr	r3, [pc, #356]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629a:	ed97 6a03 	vldr	s12, [r7, #12]
 800629e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ba:	e043      	b.n	8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ce:	4b48      	ldr	r3, [pc, #288]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062de:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062fe:	e021      	b.n	8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800630e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006312:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006322:	ed97 6a03 	vldr	s12, [r7, #12]
 8006326:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800632a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006344:	4b2a      	ldr	r3, [pc, #168]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	0a5b      	lsrs	r3, r3, #9
 800634a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800635a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800635e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800636a:	ee17 2a90 	vmov	r2, s15
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006372:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800638c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006398:	ee17 2a90 	vmov	r2, s15
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80063a0:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	0e1b      	lsrs	r3, r3, #24
 80063a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80063be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c6:	ee17 2a90 	vmov	r2, s15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063ce:	e008      	b.n	80063e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	609a      	str	r2, [r3, #8]
}
 80063e2:	bf00      	nop
 80063e4:	3724      	adds	r7, #36	; 0x24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	58024400 	.word	0x58024400
 80063f4:	03d09000 	.word	0x03d09000
 80063f8:	46000000 	.word	0x46000000
 80063fc:	4c742400 	.word	0x4c742400
 8006400:	4a742400 	.word	0x4a742400
 8006404:	4bbebc20 	.word	0x4bbebc20

08006408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006408:	b480      	push	{r7}
 800640a:	b089      	sub	sp, #36	; 0x24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006410:	4ba1      	ldr	r3, [pc, #644]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800641a:	4b9f      	ldr	r3, [pc, #636]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	0d1b      	lsrs	r3, r3, #20
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006426:	4b9c      	ldr	r3, [pc, #624]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006432:	4b99      	ldr	r3, [pc, #612]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	08db      	lsrs	r3, r3, #3
 8006438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8111 	beq.w	8006678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b02      	cmp	r3, #2
 800645a:	f000 8083 	beq.w	8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f200 80a1 	bhi.w	80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d056      	beq.n	8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006472:	e099      	b.n	80065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006474:	4b88      	ldr	r3, [pc, #544]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d02d      	beq.n	80064dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006480:	4b85      	ldr	r3, [pc, #532]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	4a84      	ldr	r2, [pc, #528]	; (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064aa:	4b7b      	ldr	r3, [pc, #492]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80064be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064da:	e087      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ee:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006502:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800651e:	e065      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800652e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006532:	4b59      	ldr	r3, [pc, #356]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006542:	ed97 6a03 	vldr	s12, [r7, #12]
 8006546:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800654a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006562:	e043      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006576:	4b48      	ldr	r3, [pc, #288]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006586:	ed97 6a03 	vldr	s12, [r7, #12]
 800658a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800658e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065a6:	e021      	b.n	80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	0a5b      	lsrs	r3, r3, #9
 80065f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006606:	edd7 6a07 	vldr	s13, [r7, #28]
 800660a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006612:	ee17 2a90 	vmov	r2, s15
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800661a:	4b1f      	ldr	r3, [pc, #124]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	0c1b      	lsrs	r3, r3, #16
 8006620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006634:	edd7 6a07 	vldr	s13, [r7, #28]
 8006638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800663c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006640:	ee17 2a90 	vmov	r2, s15
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006648:	4b13      	ldr	r3, [pc, #76]	; (8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800665e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006662:	edd7 6a07 	vldr	s13, [r7, #28]
 8006666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666e:	ee17 2a90 	vmov	r2, s15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006676:	e008      	b.n	800668a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	609a      	str	r2, [r3, #8]
}
 800668a:	bf00      	nop
 800668c:	3724      	adds	r7, #36	; 0x24
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	03d09000 	.word	0x03d09000
 80066a0:	46000000 	.word	0x46000000
 80066a4:	4c742400 	.word	0x4c742400
 80066a8:	4a742400 	.word	0x4a742400
 80066ac:	4bbebc20 	.word	0x4bbebc20

080066b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066be:	4b53      	ldr	r3, [pc, #332]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d101      	bne.n	80066ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e099      	b.n	8006802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066ce:	4b4f      	ldr	r3, [pc, #316]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a4e      	ldr	r2, [pc, #312]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80066d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066da:	f7fb f997 	bl	8001a0c <HAL_GetTick>
 80066de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066e0:	e008      	b.n	80066f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066e2:	f7fb f993 	bl	8001a0c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e086      	b.n	8006802 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066f4:	4b45      	ldr	r3, [pc, #276]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f0      	bne.n	80066e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006700:	4b42      	ldr	r3, [pc, #264]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	493f      	ldr	r1, [pc, #252]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006710:	4313      	orrs	r3, r2
 8006712:	628b      	str	r3, [r1, #40]	; 0x28
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	3b01      	subs	r3, #1
 800671a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	3b01      	subs	r3, #1
 8006724:	025b      	lsls	r3, r3, #9
 8006726:	b29b      	uxth	r3, r3
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	3b01      	subs	r3, #1
 8006730:	041b      	lsls	r3, r3, #16
 8006732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	3b01      	subs	r3, #1
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006744:	4931      	ldr	r1, [pc, #196]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006746:	4313      	orrs	r3, r2
 8006748:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800674a:	4b30      	ldr	r3, [pc, #192]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	492d      	ldr	r1, [pc, #180]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800675c:	4b2b      	ldr	r3, [pc, #172]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f023 0220 	bic.w	r2, r3, #32
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	4928      	ldr	r1, [pc, #160]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 800676a:	4313      	orrs	r3, r2
 800676c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800676e:	4b27      	ldr	r3, [pc, #156]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	4a26      	ldr	r2, [pc, #152]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006774:	f023 0310 	bic.w	r3, r3, #16
 8006778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 800677c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677e:	4b24      	ldr	r3, [pc, #144]	; (8006810 <RCCEx_PLL2_Config+0x160>)
 8006780:	4013      	ands	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	69d2      	ldr	r2, [r2, #28]
 8006786:	00d2      	lsls	r2, r2, #3
 8006788:	4920      	ldr	r1, [pc, #128]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 800678a:	4313      	orrs	r3, r2
 800678c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	4a1e      	ldr	r2, [pc, #120]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 8006794:	f043 0310 	orr.w	r3, r3, #16
 8006798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d106      	bne.n	80067ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80067a0:	4b1a      	ldr	r3, [pc, #104]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	4a19      	ldr	r2, [pc, #100]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067ac:	e00f      	b.n	80067ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d106      	bne.n	80067c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80067b4:	4b15      	ldr	r3, [pc, #84]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067c0:	e005      	b.n	80067ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067c2:	4b12      	ldr	r3, [pc, #72]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	4a11      	ldr	r2, [pc, #68]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a0e      	ldr	r2, [pc, #56]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067da:	f7fb f917 	bl	8001a0c <HAL_GetTick>
 80067de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067e0:	e008      	b.n	80067f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067e2:	f7fb f913 	bl	8001a0c <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e006      	b.n	8006802 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <RCCEx_PLL2_Config+0x15c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0f0      	beq.n	80067e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	58024400 	.word	0x58024400
 8006810:	ffff0007 	.word	0xffff0007

08006814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006822:	4b53      	ldr	r3, [pc, #332]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b03      	cmp	r3, #3
 800682c:	d101      	bne.n	8006832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e099      	b.n	8006966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006832:	4b4f      	ldr	r3, [pc, #316]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a4e      	ldr	r2, [pc, #312]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800683c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683e:	f7fb f8e5 	bl	8001a0c <HAL_GetTick>
 8006842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006844:	e008      	b.n	8006858 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006846:	f7fb f8e1 	bl	8001a0c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e086      	b.n	8006966 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006858:	4b45      	ldr	r3, [pc, #276]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1f0      	bne.n	8006846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006864:	4b42      	ldr	r3, [pc, #264]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	051b      	lsls	r3, r3, #20
 8006872:	493f      	ldr	r1, [pc, #252]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006874:	4313      	orrs	r3, r2
 8006876:	628b      	str	r3, [r1, #40]	; 0x28
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	3b01      	subs	r3, #1
 800687e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	3b01      	subs	r3, #1
 8006888:	025b      	lsls	r3, r3, #9
 800688a:	b29b      	uxth	r3, r3
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	3b01      	subs	r3, #1
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	061b      	lsls	r3, r3, #24
 80068a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068a8:	4931      	ldr	r1, [pc, #196]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80068ae:	4b30      	ldr	r3, [pc, #192]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	492d      	ldr	r1, [pc, #180]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068c0:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	4928      	ldr	r1, [pc, #160]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068d2:	4b27      	ldr	r3, [pc, #156]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	4a26      	ldr	r2, [pc, #152]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e2:	4b24      	ldr	r3, [pc, #144]	; (8006974 <RCCEx_PLL3_Config+0x160>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	69d2      	ldr	r2, [r2, #28]
 80068ea:	00d2      	lsls	r2, r2, #3
 80068ec:	4920      	ldr	r1, [pc, #128]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068f2:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006904:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a19      	ldr	r2, [pc, #100]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 800690a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006910:	e00f      	b.n	8006932 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d106      	bne.n	8006926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006918:	4b15      	ldr	r3, [pc, #84]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	4a14      	ldr	r2, [pc, #80]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 800691e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006924:	e005      	b.n	8006932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	4a11      	ldr	r2, [pc, #68]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 800692c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006932:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a0e      	ldr	r2, [pc, #56]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 8006938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800693e:	f7fb f865 	bl	8001a0c <HAL_GetTick>
 8006942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006944:	e008      	b.n	8006958 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006946:	f7fb f861 	bl	8001a0c <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <RCCEx_PLL3_Config+0x15c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0f0      	beq.n	8006946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	58024400 	.word	0x58024400
 8006974:	ffff0007 	.word	0xffff0007

08006978 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e049      	b.n	8006a1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fa fcc2 	bl	8001328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f000 fa66 	bl	8006e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <HAL_TIM_PWM_Start+0x24>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	e03c      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d109      	bne.n	8006a66 <HAL_TIM_PWM_Start+0x3e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	bf14      	ite	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	2300      	moveq	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	e02f      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d109      	bne.n	8006a80 <HAL_TIM_PWM_Start+0x58>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	e022      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b0c      	cmp	r3, #12
 8006a84:	d109      	bne.n	8006a9a <HAL_TIM_PWM_Start+0x72>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	e015      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d109      	bne.n	8006ab4 <HAL_TIM_PWM_Start+0x8c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e008      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x9e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e0ab      	b.n	8006c26 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start+0xb6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006adc:	e023      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_PWM_Start+0xc6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aec:	e01b      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d104      	bne.n	8006afe <HAL_TIM_PWM_Start+0xd6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	e013      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d104      	bne.n	8006b0e <HAL_TIM_PWM_Start+0xe6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b0c:	e00b      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_PWM_Start+0xf6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b1c:	e003      	b.n	8006b26 <HAL_TIM_PWM_Start+0xfe>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd26 	bl	8007580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a3d      	ldr	r2, [pc, #244]	; (8006c30 <HAL_TIM_PWM_Start+0x208>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <HAL_TIM_PWM_Start+0x13e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <HAL_TIM_PWM_Start+0x20c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00e      	beq.n	8006b66 <HAL_TIM_PWM_Start+0x13e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a3a      	ldr	r2, [pc, #232]	; (8006c38 <HAL_TIM_PWM_Start+0x210>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d009      	beq.n	8006b66 <HAL_TIM_PWM_Start+0x13e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a39      	ldr	r2, [pc, #228]	; (8006c3c <HAL_TIM_PWM_Start+0x214>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d004      	beq.n	8006b66 <HAL_TIM_PWM_Start+0x13e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <HAL_TIM_PWM_Start+0x218>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_PWM_Start+0x142>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <HAL_TIM_PWM_Start+0x144>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a2a      	ldr	r2, [pc, #168]	; (8006c30 <HAL_TIM_PWM_Start+0x208>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d02c      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d027      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <HAL_TIM_PWM_Start+0x21c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d022      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <HAL_TIM_PWM_Start+0x220>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d01d      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <HAL_TIM_PWM_Start+0x224>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <HAL_TIM_PWM_Start+0x20c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <HAL_TIM_PWM_Start+0x228>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <HAL_TIM_PWM_Start+0x210>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <HAL_TIM_PWM_Start+0x22c>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1bc>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_TIM_PWM_Start+0x230>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d115      	bne.n	8006c10 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <HAL_TIM_PWM_Start+0x234>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b06      	cmp	r3, #6
 8006bf4:	d015      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x1fa>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfc:	d011      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0201 	orr.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0e:	e008      	b.n	8006c22 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e000      	b.n	8006c24 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40010400 	.word	0x40010400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40014400 	.word	0x40014400
 8006c40:	40014800 	.word	0x40014800
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40000800 	.word	0x40000800
 8006c4c:	40000c00 	.word	0x40000c00
 8006c50:	40001800 	.word	0x40001800
 8006c54:	4000e000 	.word	0x4000e000
 8006c58:	4000e400 	.word	0x4000e400
 8006c5c:	00010007 	.word	0x00010007

08006c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e0ff      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b14      	cmp	r3, #20
 8006c8a:	f200 80f0 	bhi.w	8006e6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006e6f 	.word	0x08006e6f
 8006c9c:	08006e6f 	.word	0x08006e6f
 8006ca0:	08006e6f 	.word	0x08006e6f
 8006ca4:	08006d29 	.word	0x08006d29
 8006ca8:	08006e6f 	.word	0x08006e6f
 8006cac:	08006e6f 	.word	0x08006e6f
 8006cb0:	08006e6f 	.word	0x08006e6f
 8006cb4:	08006d6b 	.word	0x08006d6b
 8006cb8:	08006e6f 	.word	0x08006e6f
 8006cbc:	08006e6f 	.word	0x08006e6f
 8006cc0:	08006e6f 	.word	0x08006e6f
 8006cc4:	08006dab 	.word	0x08006dab
 8006cc8:	08006e6f 	.word	0x08006e6f
 8006ccc:	08006e6f 	.word	0x08006e6f
 8006cd0:	08006e6f 	.word	0x08006e6f
 8006cd4:	08006ded 	.word	0x08006ded
 8006cd8:	08006e6f 	.word	0x08006e6f
 8006cdc:	08006e6f 	.word	0x08006e6f
 8006ce0:	08006e6f 	.word	0x08006e6f
 8006ce4:	08006e2d 	.word	0x08006e2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f970 	bl	8006fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0208 	orr.w	r2, r2, #8
 8006d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0204 	bic.w	r2, r2, #4
 8006d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6999      	ldr	r1, [r3, #24]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	619a      	str	r2, [r3, #24]
      break;
 8006d26:	e0a5      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f9e0 	bl	80070f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6999      	ldr	r1, [r3, #24]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	021a      	lsls	r2, r3, #8
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	619a      	str	r2, [r3, #24]
      break;
 8006d68:	e084      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fa49 	bl	8007208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0208 	orr.w	r2, r2, #8
 8006d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0204 	bic.w	r2, r2, #4
 8006d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	61da      	str	r2, [r3, #28]
      break;
 8006da8:	e064      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fab1 	bl	8007318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69d9      	ldr	r1, [r3, #28]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	021a      	lsls	r2, r3, #8
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	61da      	str	r2, [r3, #28]
      break;
 8006dea:	e043      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fafa 	bl	80073ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0208 	orr.w	r2, r2, #8
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0204 	bic.w	r2, r2, #4
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e2a:	e023      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fb3e 	bl	80074b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	021a      	lsls	r2, r3, #8
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e6c:	e002      	b.n	8006e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75fb      	strb	r3, [r7, #23]
      break;
 8006e72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop

08006e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a44      	ldr	r2, [pc, #272]	; (8006fac <TIM_Base_SetConfig+0x124>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d013      	beq.n	8006ec8 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea6:	d00f      	beq.n	8006ec8 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a41      	ldr	r2, [pc, #260]	; (8006fb0 <TIM_Base_SetConfig+0x128>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00b      	beq.n	8006ec8 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a40      	ldr	r2, [pc, #256]	; (8006fb4 <TIM_Base_SetConfig+0x12c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d007      	beq.n	8006ec8 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3f      	ldr	r2, [pc, #252]	; (8006fb8 <TIM_Base_SetConfig+0x130>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d003      	beq.n	8006ec8 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3e      	ldr	r2, [pc, #248]	; (8006fbc <TIM_Base_SetConfig+0x134>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d108      	bne.n	8006eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a33      	ldr	r2, [pc, #204]	; (8006fac <TIM_Base_SetConfig+0x124>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee8:	d023      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a30      	ldr	r2, [pc, #192]	; (8006fb0 <TIM_Base_SetConfig+0x128>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01f      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2f      	ldr	r2, [pc, #188]	; (8006fb4 <TIM_Base_SetConfig+0x12c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01b      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2e      	ldr	r2, [pc, #184]	; (8006fb8 <TIM_Base_SetConfig+0x130>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d017      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2d      	ldr	r2, [pc, #180]	; (8006fbc <TIM_Base_SetConfig+0x134>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2c      	ldr	r2, [pc, #176]	; (8006fc0 <TIM_Base_SetConfig+0x138>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00f      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2b      	ldr	r2, [pc, #172]	; (8006fc4 <TIM_Base_SetConfig+0x13c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <TIM_Base_SetConfig+0x140>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <TIM_Base_SetConfig+0x144>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0xaa>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <TIM_Base_SetConfig+0x148>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a10      	ldr	r2, [pc, #64]	; (8006fac <TIM_Base_SetConfig+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00f      	beq.n	8006f90 <TIM_Base_SetConfig+0x108>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a12      	ldr	r2, [pc, #72]	; (8006fbc <TIM_Base_SetConfig+0x134>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <TIM_Base_SetConfig+0x108>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a11      	ldr	r2, [pc, #68]	; (8006fc0 <TIM_Base_SetConfig+0x138>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d007      	beq.n	8006f90 <TIM_Base_SetConfig+0x108>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a10      	ldr	r2, [pc, #64]	; (8006fc4 <TIM_Base_SetConfig+0x13c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0x108>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a0f      	ldr	r2, [pc, #60]	; (8006fc8 <TIM_Base_SetConfig+0x140>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d103      	bne.n	8006f98 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	615a      	str	r2, [r3, #20]
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800
 8006fcc:	4000e000 	.word	0x4000e000
 8006fd0:	4000e400 	.word	0x4000e400

08006fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f023 0201 	bic.w	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4b37      	ldr	r3, [pc, #220]	; (80070dc <TIM_OC1_SetConfig+0x108>)
 8007000:	4013      	ands	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0302 	bic.w	r3, r3, #2
 800701c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a2d      	ldr	r2, [pc, #180]	; (80070e0 <TIM_OC1_SetConfig+0x10c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00f      	beq.n	8007050 <TIM_OC1_SetConfig+0x7c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <TIM_OC1_SetConfig+0x110>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00b      	beq.n	8007050 <TIM_OC1_SetConfig+0x7c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <TIM_OC1_SetConfig+0x114>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d007      	beq.n	8007050 <TIM_OC1_SetConfig+0x7c>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_OC1_SetConfig+0x118>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_OC1_SetConfig+0x7c>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <TIM_OC1_SetConfig+0x11c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10c      	bne.n	800706a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0308 	bic.w	r3, r3, #8
 8007056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1c      	ldr	r2, [pc, #112]	; (80070e0 <TIM_OC1_SetConfig+0x10c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00f      	beq.n	8007092 <TIM_OC1_SetConfig+0xbe>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <TIM_OC1_SetConfig+0x110>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00b      	beq.n	8007092 <TIM_OC1_SetConfig+0xbe>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <TIM_OC1_SetConfig+0x114>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d007      	beq.n	8007092 <TIM_OC1_SetConfig+0xbe>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <TIM_OC1_SetConfig+0x118>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_OC1_SetConfig+0xbe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <TIM_OC1_SetConfig+0x11c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d111      	bne.n	80070b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	bf00      	nop
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	fffeff8f 	.word	0xfffeff8f
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40010400 	.word	0x40010400
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800

080070f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0210 	bic.w	r2, r3, #16
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4b34      	ldr	r3, [pc, #208]	; (80071f0 <TIM_OC2_SetConfig+0xfc>)
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0320 	bic.w	r3, r3, #32
 800713e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <TIM_OC2_SetConfig+0x100>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC2_SetConfig+0x68>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a28      	ldr	r2, [pc, #160]	; (80071f8 <TIM_OC2_SetConfig+0x104>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10d      	bne.n	8007178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a1e      	ldr	r2, [pc, #120]	; (80071f4 <TIM_OC2_SetConfig+0x100>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00f      	beq.n	80071a0 <TIM_OC2_SetConfig+0xac>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a1d      	ldr	r2, [pc, #116]	; (80071f8 <TIM_OC2_SetConfig+0x104>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_OC2_SetConfig+0xac>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <TIM_OC2_SetConfig+0x108>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_OC2_SetConfig+0xac>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a1b      	ldr	r2, [pc, #108]	; (8007200 <TIM_OC2_SetConfig+0x10c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC2_SetConfig+0xac>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <TIM_OC2_SetConfig+0x110>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d113      	bne.n	80071c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	feff8fff 	.word	0xfeff8fff
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40010400 	.word	0x40010400
 80071fc:	40014000 	.word	0x40014000
 8007200:	40014400 	.word	0x40014400
 8007204:	40014800 	.word	0x40014800

08007208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4b33      	ldr	r3, [pc, #204]	; (8007300 <TIM_OC3_SetConfig+0xf8>)
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a28      	ldr	r2, [pc, #160]	; (8007304 <TIM_OC3_SetConfig+0xfc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC3_SetConfig+0x66>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a27      	ldr	r2, [pc, #156]	; (8007308 <TIM_OC3_SetConfig+0x100>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d10d      	bne.n	800728a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <TIM_OC3_SetConfig+0xfc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_OC3_SetConfig+0xaa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <TIM_OC3_SetConfig+0x100>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_OC3_SetConfig+0xaa>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a1b      	ldr	r2, [pc, #108]	; (800730c <TIM_OC3_SetConfig+0x104>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_OC3_SetConfig+0xaa>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <TIM_OC3_SetConfig+0x108>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_OC3_SetConfig+0xaa>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a19      	ldr	r2, [pc, #100]	; (8007314 <TIM_OC3_SetConfig+0x10c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d113      	bne.n	80072da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	621a      	str	r2, [r3, #32]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	fffeff8f 	.word	0xfffeff8f
 8007304:	40010000 	.word	0x40010000
 8007308:	40010400 	.word	0x40010400
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800

08007318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <TIM_OC4_SetConfig+0xbc>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	031b      	lsls	r3, r3, #12
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <TIM_OC4_SetConfig+0xc0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00f      	beq.n	8007398 <TIM_OC4_SetConfig+0x80>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a18      	ldr	r2, [pc, #96]	; (80073dc <TIM_OC4_SetConfig+0xc4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00b      	beq.n	8007398 <TIM_OC4_SetConfig+0x80>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a17      	ldr	r2, [pc, #92]	; (80073e0 <TIM_OC4_SetConfig+0xc8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d007      	beq.n	8007398 <TIM_OC4_SetConfig+0x80>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <TIM_OC4_SetConfig+0xcc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d003      	beq.n	8007398 <TIM_OC4_SetConfig+0x80>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <TIM_OC4_SetConfig+0xd0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d109      	bne.n	80073ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	019b      	lsls	r3, r3, #6
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	feff8fff 	.word	0xfeff8fff
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40010400 	.word	0x40010400
 80073e0:	40014000 	.word	0x40014000
 80073e4:	40014400 	.word	0x40014400
 80073e8:	40014800 	.word	0x40014800

080073ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4b21      	ldr	r3, [pc, #132]	; (800749c <TIM_OC5_SetConfig+0xb0>)
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800742c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <TIM_OC5_SetConfig+0xb4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00f      	beq.n	8007462 <TIM_OC5_SetConfig+0x76>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a17      	ldr	r2, [pc, #92]	; (80074a4 <TIM_OC5_SetConfig+0xb8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00b      	beq.n	8007462 <TIM_OC5_SetConfig+0x76>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <TIM_OC5_SetConfig+0xbc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d007      	beq.n	8007462 <TIM_OC5_SetConfig+0x76>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a15      	ldr	r2, [pc, #84]	; (80074ac <TIM_OC5_SetConfig+0xc0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d003      	beq.n	8007462 <TIM_OC5_SetConfig+0x76>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a14      	ldr	r2, [pc, #80]	; (80074b0 <TIM_OC5_SetConfig+0xc4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d109      	bne.n	8007476 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	fffeff8f 	.word	0xfffeff8f
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40010400 	.word	0x40010400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800

080074b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4b22      	ldr	r3, [pc, #136]	; (8007568 <TIM_OC6_SetConfig+0xb4>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	051b      	lsls	r3, r3, #20
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a19      	ldr	r2, [pc, #100]	; (800756c <TIM_OC6_SetConfig+0xb8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00f      	beq.n	800752c <TIM_OC6_SetConfig+0x78>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a18      	ldr	r2, [pc, #96]	; (8007570 <TIM_OC6_SetConfig+0xbc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00b      	beq.n	800752c <TIM_OC6_SetConfig+0x78>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a17      	ldr	r2, [pc, #92]	; (8007574 <TIM_OC6_SetConfig+0xc0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d007      	beq.n	800752c <TIM_OC6_SetConfig+0x78>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a16      	ldr	r2, [pc, #88]	; (8007578 <TIM_OC6_SetConfig+0xc4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_OC6_SetConfig+0x78>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a15      	ldr	r2, [pc, #84]	; (800757c <TIM_OC6_SetConfig+0xc8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d109      	bne.n	8007540 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	029b      	lsls	r3, r3, #10
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	feff8fff 	.word	0xfeff8fff
 800756c:	40010000 	.word	0x40010000
 8007570:	40010400 	.word	0x40010400
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800

08007580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2201      	movs	r2, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	fa01 f303 	lsl.w	r3, r1, r3
 80075b8:	431a      	orrs	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e077      	b.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a35      	ldr	r2, [pc, #212]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a34      	ldr	r2, [pc, #208]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d108      	bne.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800761e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a25      	ldr	r2, [pc, #148]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d02c      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d027      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d022      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a21      	ldr	r2, [pc, #132]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d01d      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00e      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a17      	ldr	r2, [pc, #92]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d10c      	bne.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40001800 	.word	0x40001800
 80076f8:	40014000 	.word	0x40014000
 80076fc:	4000e000 	.word	0x4000e000
 8007700:	4000e400 	.word	0x4000e400

08007704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800771c:	2302      	movs	r3, #2
 800771e:	e087      	b.n	8007830 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a27      	ldr	r2, [pc, #156]	; (800783c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a25      	ldr	r2, [pc, #148]	; (8007840 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d106      	bne.n	80077bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1e      	ldr	r2, [pc, #120]	; (800783c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d126      	bne.n	800781e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	051b      	lsls	r3, r3, #20
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a0e      	ldr	r2, [pc, #56]	; (800783c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d106      	bne.n	800781e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	40010000 	.word	0x40010000
 8007840:	40010400 	.word	0x40010400

08007844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e042      	b.n	80078dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7f9 fdbb 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2224      	movs	r2, #36	; 0x24
 8007872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0201 	bic.w	r2, r2, #1
 8007884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fcd6 	bl	8008238 <UART_SetConfig>
 800788c:	4603      	mov	r3, r0
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e022      	b.n	80078dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fb36 	bl	8008f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 fbbd 	bl	8009054 <UART_CheckIdleState>
 80078da:	4603      	mov	r3, r0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	f040 8083 	bne.w	8007a06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_UART_Transmit+0x28>
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e07b      	b.n	8007a08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_UART_Transmit+0x3a>
 800791a:	2302      	movs	r3, #2
 800791c:	e074      	b.n	8007a08 <HAL_UART_Transmit+0x124>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007936:	f7fa f869 	bl	8001a0c <HAL_GetTick>
 800793a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	88fa      	ldrh	r2, [r7, #6]
 8007948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007954:	d108      	bne.n	8007968 <HAL_UART_Transmit+0x84>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	e003      	b.n	8007970 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007978:	e02c      	b.n	80079d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2200      	movs	r2, #0
 8007982:	2180      	movs	r1, #128	; 0x80
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 fbb0 	bl	80090ea <UART_WaitOnFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e039      	b.n	8007a08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	3302      	adds	r3, #2
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	e007      	b.n	80079c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	781a      	ldrb	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	3301      	adds	r3, #1
 80079c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1cc      	bne.n	800797a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2200      	movs	r2, #0
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f001 fb7d 	bl	80090ea <UART_WaitOnFlagUntilTimeout>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e006      	b.n	8007a08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e000      	b.n	8007a08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a06:	2302      	movs	r3, #2
  }
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d142      	bne.n	8007aae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_UART_Receive_IT+0x24>
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e03b      	b.n	8007ab0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_UART_Receive_IT+0x36>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e034      	b.n	8007ab0 <HAL_UART_Receive_IT+0xa0>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <HAL_UART_Receive_IT+0xa8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01f      	beq.n	8007a9e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d018      	beq.n	8007a9e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	613b      	str	r3, [r7, #16]
   return(result);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	623b      	str	r3, [r7, #32]
 8007a8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	69f9      	ldr	r1, [r7, #28]
 8007a90:	6a3a      	ldr	r2, [r7, #32]
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e6      	bne.n	8007a6c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f001 fbe9 	bl	800927c <UART_Start_Receive_IT>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	e000      	b.n	8007ab0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007aae:	2302      	movs	r3, #2
  }
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3728      	adds	r7, #40	; 0x28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	58000c00 	.word	0x58000c00

08007abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b0ba      	sub	sp, #232	; 0xe8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ae2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ae6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007aea:	4013      	ands	r3, r2
 8007aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11b      	bne.n	8007b30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d015      	beq.n	8007b30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d105      	bne.n	8007b1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d009      	beq.n	8007b30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 835a 	beq.w	80081da <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
      }
      return;
 8007b2e:	e354      	b.n	80081da <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 811f 	beq.w	8007d78 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b3e:	4b8b      	ldr	r3, [pc, #556]	; (8007d6c <HAL_UART_IRQHandler+0x2b0>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b4a:	4b89      	ldr	r3, [pc, #548]	; (8007d70 <HAL_UART_IRQHandler+0x2b4>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8112 	beq.w	8007d78 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d011      	beq.n	8007b84 <HAL_UART_IRQHandler+0xc8>
 8007b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2201      	movs	r2, #1
 8007b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b7a:	f043 0201 	orr.w	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d011      	beq.n	8007bb4 <HAL_UART_IRQHandler+0xf8>
 8007b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007baa:	f043 0204 	orr.w	r2, r3, #4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d011      	beq.n	8007be4 <HAL_UART_IRQHandler+0x128>
 8007bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bda:	f043 0202 	orr.w	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d017      	beq.n	8007c20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d105      	bne.n	8007c08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bfc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c00:	4b5a      	ldr	r3, [pc, #360]	; (8007d6c <HAL_UART_IRQHandler+0x2b0>)
 8007c02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2208      	movs	r2, #8
 8007c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c16:	f043 0208 	orr.w	r2, r3, #8
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d012      	beq.n	8007c52 <HAL_UART_IRQHandler+0x196>
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00c      	beq.n	8007c52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 82c0 	beq.w	80081de <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d013      	beq.n	8007c92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	d005      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04f      	beq.n	8007d56 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fc0a 	bl	80094d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d141      	bne.n	8007d4e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1d9      	bne.n	8007cca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d013      	beq.n	8007d46 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d22:	4a14      	ldr	r2, [pc, #80]	; (8007d74 <HAL_UART_IRQHandler+0x2b8>)
 8007d24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fa fe26 	bl	800297c <HAL_DMA_Abort_IT>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d017      	beq.n	8007d66 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d44:	e00f      	b.n	8007d66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa60 	bl	800820c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	e00b      	b.n	8007d66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa5c 	bl	800820c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d54:	e007      	b.n	8007d66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa58 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007d64:	e23b      	b.n	80081de <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d66:	bf00      	nop
    return;
 8007d68:	e239      	b.n	80081de <HAL_UART_IRQHandler+0x722>
 8007d6a:	bf00      	nop
 8007d6c:	10000001 	.word	0x10000001
 8007d70:	04000120 	.word	0x04000120
 8007d74:	0800959d 	.word	0x0800959d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	f040 81ce 	bne.w	800811e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 81c7 	beq.w	800811e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 81c0 	beq.w	800811e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2210      	movs	r2, #16
 8007da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	f040 813b 	bne.w	800802c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a8b      	ldr	r2, [pc, #556]	; (8007fec <HAL_UART_IRQHandler+0x530>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d059      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a89      	ldr	r2, [pc, #548]	; (8007ff0 <HAL_UART_IRQHandler+0x534>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d053      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a87      	ldr	r2, [pc, #540]	; (8007ff4 <HAL_UART_IRQHandler+0x538>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d04d      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a85      	ldr	r2, [pc, #532]	; (8007ff8 <HAL_UART_IRQHandler+0x53c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d047      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a83      	ldr	r2, [pc, #524]	; (8007ffc <HAL_UART_IRQHandler+0x540>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d041      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a81      	ldr	r2, [pc, #516]	; (8008000 <HAL_UART_IRQHandler+0x544>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d03b      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7f      	ldr	r2, [pc, #508]	; (8008004 <HAL_UART_IRQHandler+0x548>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d035      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a7d      	ldr	r2, [pc, #500]	; (8008008 <HAL_UART_IRQHandler+0x54c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02f      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a7b      	ldr	r2, [pc, #492]	; (800800c <HAL_UART_IRQHandler+0x550>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d029      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a79      	ldr	r2, [pc, #484]	; (8008010 <HAL_UART_IRQHandler+0x554>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d023      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a77      	ldr	r2, [pc, #476]	; (8008014 <HAL_UART_IRQHandler+0x558>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01d      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a75      	ldr	r2, [pc, #468]	; (8008018 <HAL_UART_IRQHandler+0x55c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d017      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a73      	ldr	r2, [pc, #460]	; (800801c <HAL_UART_IRQHandler+0x560>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d011      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a71      	ldr	r2, [pc, #452]	; (8008020 <HAL_UART_IRQHandler+0x564>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6f      	ldr	r2, [pc, #444]	; (8008024 <HAL_UART_IRQHandler+0x568>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d005      	beq.n	8007e76 <HAL_UART_IRQHandler+0x3ba>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a6d      	ldr	r2, [pc, #436]	; (8008028 <HAL_UART_IRQHandler+0x56c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d105      	bne.n	8007e82 <HAL_UART_IRQHandler+0x3c6>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	e004      	b.n	8007e8c <HAL_UART_IRQHandler+0x3d0>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 81a4 	beq.w	80081e2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ea0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	f080 819c 	bcs.w	80081e2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebe:	f000 8086 	beq.w	8007fce <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007eec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ef0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ef8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1da      	bne.n	8007ec2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f1e:	f023 0301 	bic.w	r3, r3, #1
 8007f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e1      	bne.n	8007f0c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e3      	bne.n	8007f48 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9e:	f023 0310 	bic.w	r3, r3, #16
 8007fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fb2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e4      	bne.n	8007f8e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fa f9b9 	bl	8002340 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f91c 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fe8:	e0fb      	b.n	80081e2 <HAL_UART_IRQHandler+0x726>
 8007fea:	bf00      	nop
 8007fec:	40020010 	.word	0x40020010
 8007ff0:	40020028 	.word	0x40020028
 8007ff4:	40020040 	.word	0x40020040
 8007ff8:	40020058 	.word	0x40020058
 8007ffc:	40020070 	.word	0x40020070
 8008000:	40020088 	.word	0x40020088
 8008004:	400200a0 	.word	0x400200a0
 8008008:	400200b8 	.word	0x400200b8
 800800c:	40020410 	.word	0x40020410
 8008010:	40020428 	.word	0x40020428
 8008014:	40020440 	.word	0x40020440
 8008018:	40020458 	.word	0x40020458
 800801c:	40020470 	.word	0x40020470
 8008020:	40020488 	.word	0x40020488
 8008024:	400204a0 	.word	0x400204a0
 8008028:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008038:	b29b      	uxth	r3, r3
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80cc 	beq.w	80081e6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800804e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80c7 	beq.w	80081e6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800806c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800807a:	647b      	str	r3, [r7, #68]	; 0x44
 800807c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e4      	bne.n	8008058 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	623b      	str	r3, [r7, #32]
   return(result);
 800809e:	6a3a      	ldr	r2, [r7, #32]
 80080a0:	4b54      	ldr	r3, [pc, #336]	; (80081f4 <HAL_UART_IRQHandler+0x738>)
 80080a2:	4013      	ands	r3, r2
 80080a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080b2:	633a      	str	r2, [r7, #48]	; 0x30
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e3      	bne.n	800808e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0310 	bic.w	r3, r3, #16
 80080ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	69b9      	ldr	r1, [r7, #24]
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	617b      	str	r3, [r7, #20]
   return(result);
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f882 	bl	8008220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800811c:	e063      	b.n	80081e6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800811e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <HAL_UART_IRQHandler+0x68c>
 800812a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d008      	beq.n	8008148 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800813e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 fec9 	bl	8009ed8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008146:	e051      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008150:	2b00      	cmp	r3, #0
 8008152:	d014      	beq.n	800817e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008170:	2b00      	cmp	r3, #0
 8008172:	d03a      	beq.n	80081ea <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
    }
    return;
 800817c:	e035      	b.n	80081ea <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_UART_IRQHandler+0x6e2>
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fa16 	bl	80095c8 <UART_EndTransmit_IT>
    return;
 800819c:	e026      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d009      	beq.n	80081be <HAL_UART_IRQHandler+0x702>
 80081aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fea2 	bl	8009f00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081bc:	e016      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80081be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d010      	beq.n	80081ec <HAL_UART_IRQHandler+0x730>
 80081ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da0c      	bge.n	80081ec <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fe8a 	bl	8009eec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081d8:	e008      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
      return;
 80081da:	bf00      	nop
 80081dc:	e006      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
    return;
 80081de:	bf00      	nop
 80081e0:	e004      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
      return;
 80081e2:	bf00      	nop
 80081e4:	e002      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
      return;
 80081e6:	bf00      	nop
 80081e8:	e000      	b.n	80081ec <HAL_UART_IRQHandler+0x730>
    return;
 80081ea:	bf00      	nop
  }
}
 80081ec:	37e8      	adds	r7, #232	; 0xe8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	effffffe 	.word	0xeffffffe

080081f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800823c:	b092      	sub	sp, #72	; 0x48
 800823e:	af00      	add	r7, sp, #0
 8008240:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	431a      	orrs	r2, r3
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	431a      	orrs	r2, r3
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	4313      	orrs	r3, r2
 800825e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4bbe      	ldr	r3, [pc, #760]	; (8008560 <UART_SetConfig+0x328>)
 8008268:	4013      	ands	r3, r2
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008270:	430b      	orrs	r3, r1
 8008272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4ab3      	ldr	r2, [pc, #716]	; (8008564 <UART_SetConfig+0x32c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082a0:	4313      	orrs	r3, r2
 80082a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	4baf      	ldr	r3, [pc, #700]	; (8008568 <UART_SetConfig+0x330>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082b4:	430b      	orrs	r3, r1
 80082b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	f023 010f 	bic.w	r1, r3, #15
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4aa6      	ldr	r2, [pc, #664]	; (800856c <UART_SetConfig+0x334>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d177      	bne.n	80083c8 <UART_SetConfig+0x190>
 80082d8:	4ba5      	ldr	r3, [pc, #660]	; (8008570 <UART_SetConfig+0x338>)
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082e0:	2b28      	cmp	r3, #40	; 0x28
 80082e2:	d86d      	bhi.n	80083c0 <UART_SetConfig+0x188>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0xb4>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008391 	.word	0x08008391
 80082f0:	080083c1 	.word	0x080083c1
 80082f4:	080083c1 	.word	0x080083c1
 80082f8:	080083c1 	.word	0x080083c1
 80082fc:	080083c1 	.word	0x080083c1
 8008300:	080083c1 	.word	0x080083c1
 8008304:	080083c1 	.word	0x080083c1
 8008308:	080083c1 	.word	0x080083c1
 800830c:	08008399 	.word	0x08008399
 8008310:	080083c1 	.word	0x080083c1
 8008314:	080083c1 	.word	0x080083c1
 8008318:	080083c1 	.word	0x080083c1
 800831c:	080083c1 	.word	0x080083c1
 8008320:	080083c1 	.word	0x080083c1
 8008324:	080083c1 	.word	0x080083c1
 8008328:	080083c1 	.word	0x080083c1
 800832c:	080083a1 	.word	0x080083a1
 8008330:	080083c1 	.word	0x080083c1
 8008334:	080083c1 	.word	0x080083c1
 8008338:	080083c1 	.word	0x080083c1
 800833c:	080083c1 	.word	0x080083c1
 8008340:	080083c1 	.word	0x080083c1
 8008344:	080083c1 	.word	0x080083c1
 8008348:	080083c1 	.word	0x080083c1
 800834c:	080083a9 	.word	0x080083a9
 8008350:	080083c1 	.word	0x080083c1
 8008354:	080083c1 	.word	0x080083c1
 8008358:	080083c1 	.word	0x080083c1
 800835c:	080083c1 	.word	0x080083c1
 8008360:	080083c1 	.word	0x080083c1
 8008364:	080083c1 	.word	0x080083c1
 8008368:	080083c1 	.word	0x080083c1
 800836c:	080083b1 	.word	0x080083b1
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	080083c1 	.word	0x080083c1
 8008384:	080083c1 	.word	0x080083c1
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083b9 	.word	0x080083b9
 8008390:	2301      	movs	r3, #1
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e326      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e322      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e31e      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ae:	e31a      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80083b0:	2320      	movs	r3, #32
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e316      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80083b8:	2340      	movs	r3, #64	; 0x40
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e312      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80083c0:	2380      	movs	r3, #128	; 0x80
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e30e      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a69      	ldr	r2, [pc, #420]	; (8008574 <UART_SetConfig+0x33c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d130      	bne.n	8008434 <UART_SetConfig+0x1fc>
 80083d2:	4b67      	ldr	r3, [pc, #412]	; (8008570 <UART_SetConfig+0x338>)
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d826      	bhi.n	800842c <UART_SetConfig+0x1f4>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <UART_SetConfig+0x1ac>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	08008405 	.word	0x08008405
 80083ec:	0800840d 	.word	0x0800840d
 80083f0:	08008415 	.word	0x08008415
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	08008425 	.word	0x08008425
 80083fc:	2300      	movs	r3, #0
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e2f0      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008404:	2304      	movs	r3, #4
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e2ec      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800840c:	2308      	movs	r3, #8
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e2e8      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008414:	2310      	movs	r3, #16
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841a:	e2e4      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800841c:	2320      	movs	r3, #32
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008422:	e2e0      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842a:	e2dc      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800842c:	2380      	movs	r3, #128	; 0x80
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e2d8      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a4f      	ldr	r2, [pc, #316]	; (8008578 <UART_SetConfig+0x340>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d130      	bne.n	80084a0 <UART_SetConfig+0x268>
 800843e:	4b4c      	ldr	r3, [pc, #304]	; (8008570 <UART_SetConfig+0x338>)
 8008440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	2b05      	cmp	r3, #5
 8008448:	d826      	bhi.n	8008498 <UART_SetConfig+0x260>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <UART_SetConfig+0x218>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008469 	.word	0x08008469
 8008454:	08008471 	.word	0x08008471
 8008458:	08008479 	.word	0x08008479
 800845c:	08008481 	.word	0x08008481
 8008460:	08008489 	.word	0x08008489
 8008464:	08008491 	.word	0x08008491
 8008468:	2300      	movs	r3, #0
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e2ba      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008470:	2304      	movs	r3, #4
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e2b6      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008478:	2308      	movs	r3, #8
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e2b2      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008480:	2310      	movs	r3, #16
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008486:	e2ae      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008488:	2320      	movs	r3, #32
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848e:	e2aa      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008496:	e2a6      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e2a2      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a35      	ldr	r2, [pc, #212]	; (800857c <UART_SetConfig+0x344>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d130      	bne.n	800850c <UART_SetConfig+0x2d4>
 80084aa:	4b31      	ldr	r3, [pc, #196]	; (8008570 <UART_SetConfig+0x338>)
 80084ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d826      	bhi.n	8008504 <UART_SetConfig+0x2cc>
 80084b6:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <UART_SetConfig+0x284>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	080084d5 	.word	0x080084d5
 80084c0:	080084dd 	.word	0x080084dd
 80084c4:	080084e5 	.word	0x080084e5
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	2300      	movs	r3, #0
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e284      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80084dc:	2304      	movs	r3, #4
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e280      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80084e4:	2308      	movs	r3, #8
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e27c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80084ec:	2310      	movs	r3, #16
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e278      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80084f4:	2320      	movs	r3, #32
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e274      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80084fc:	2340      	movs	r3, #64	; 0x40
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008502:	e270      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e26c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1b      	ldr	r2, [pc, #108]	; (8008580 <UART_SetConfig+0x348>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d142      	bne.n	800859c <UART_SetConfig+0x364>
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <UART_SetConfig+0x338>)
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	2b05      	cmp	r3, #5
 8008520:	d838      	bhi.n	8008594 <UART_SetConfig+0x35c>
 8008522:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <UART_SetConfig+0x2f0>)
 8008524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008528:	08008541 	.word	0x08008541
 800852c:	08008549 	.word	0x08008549
 8008530:	08008551 	.word	0x08008551
 8008534:	08008559 	.word	0x08008559
 8008538:	08008585 	.word	0x08008585
 800853c:	0800858d 	.word	0x0800858d
 8008540:	2300      	movs	r3, #0
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e24e      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e24a      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e246      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855e:	e242      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008560:	cfff69f3 	.word	0xcfff69f3
 8008564:	58000c00 	.word	0x58000c00
 8008568:	11fff4ff 	.word	0x11fff4ff
 800856c:	40011000 	.word	0x40011000
 8008570:	58024400 	.word	0x58024400
 8008574:	40004400 	.word	0x40004400
 8008578:	40004800 	.word	0x40004800
 800857c:	40004c00 	.word	0x40004c00
 8008580:	40005000 	.word	0x40005000
 8008584:	2320      	movs	r3, #32
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e22c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800858c:	2340      	movs	r3, #64	; 0x40
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e228      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e224      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4ab1      	ldr	r2, [pc, #708]	; (8008868 <UART_SetConfig+0x630>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d176      	bne.n	8008694 <UART_SetConfig+0x45c>
 80085a6:	4bb1      	ldr	r3, [pc, #708]	; (800886c <UART_SetConfig+0x634>)
 80085a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ae:	2b28      	cmp	r3, #40	; 0x28
 80085b0:	d86c      	bhi.n	800868c <UART_SetConfig+0x454>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <UART_SetConfig+0x380>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	0800865d 	.word	0x0800865d
 80085bc:	0800868d 	.word	0x0800868d
 80085c0:	0800868d 	.word	0x0800868d
 80085c4:	0800868d 	.word	0x0800868d
 80085c8:	0800868d 	.word	0x0800868d
 80085cc:	0800868d 	.word	0x0800868d
 80085d0:	0800868d 	.word	0x0800868d
 80085d4:	0800868d 	.word	0x0800868d
 80085d8:	08008665 	.word	0x08008665
 80085dc:	0800868d 	.word	0x0800868d
 80085e0:	0800868d 	.word	0x0800868d
 80085e4:	0800868d 	.word	0x0800868d
 80085e8:	0800868d 	.word	0x0800868d
 80085ec:	0800868d 	.word	0x0800868d
 80085f0:	0800868d 	.word	0x0800868d
 80085f4:	0800868d 	.word	0x0800868d
 80085f8:	0800866d 	.word	0x0800866d
 80085fc:	0800868d 	.word	0x0800868d
 8008600:	0800868d 	.word	0x0800868d
 8008604:	0800868d 	.word	0x0800868d
 8008608:	0800868d 	.word	0x0800868d
 800860c:	0800868d 	.word	0x0800868d
 8008610:	0800868d 	.word	0x0800868d
 8008614:	0800868d 	.word	0x0800868d
 8008618:	08008675 	.word	0x08008675
 800861c:	0800868d 	.word	0x0800868d
 8008620:	0800868d 	.word	0x0800868d
 8008624:	0800868d 	.word	0x0800868d
 8008628:	0800868d 	.word	0x0800868d
 800862c:	0800868d 	.word	0x0800868d
 8008630:	0800868d 	.word	0x0800868d
 8008634:	0800868d 	.word	0x0800868d
 8008638:	0800867d 	.word	0x0800867d
 800863c:	0800868d 	.word	0x0800868d
 8008640:	0800868d 	.word	0x0800868d
 8008644:	0800868d 	.word	0x0800868d
 8008648:	0800868d 	.word	0x0800868d
 800864c:	0800868d 	.word	0x0800868d
 8008650:	0800868d 	.word	0x0800868d
 8008654:	0800868d 	.word	0x0800868d
 8008658:	08008685 	.word	0x08008685
 800865c:	2301      	movs	r3, #1
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008662:	e1c0      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008664:	2304      	movs	r3, #4
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866a:	e1bc      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800866c:	2308      	movs	r3, #8
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008672:	e1b8      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008674:	2310      	movs	r3, #16
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867a:	e1b4      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800867c:	2320      	movs	r3, #32
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008682:	e1b0      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008684:	2340      	movs	r3, #64	; 0x40
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e1ac      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800868c:	2380      	movs	r3, #128	; 0x80
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e1a8      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a75      	ldr	r2, [pc, #468]	; (8008870 <UART_SetConfig+0x638>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d130      	bne.n	8008700 <UART_SetConfig+0x4c8>
 800869e:	4b73      	ldr	r3, [pc, #460]	; (800886c <UART_SetConfig+0x634>)
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d826      	bhi.n	80086f8 <UART_SetConfig+0x4c0>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <UART_SetConfig+0x478>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086d1 	.word	0x080086d1
 80086b8:	080086d9 	.word	0x080086d9
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	080086e9 	.word	0x080086e9
 80086c4:	080086f1 	.word	0x080086f1
 80086c8:	2300      	movs	r3, #0
 80086ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ce:	e18a      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80086d0:	2304      	movs	r3, #4
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d6:	e186      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80086d8:	2308      	movs	r3, #8
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086de:	e182      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80086e0:	2310      	movs	r3, #16
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e6:	e17e      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80086e8:	2320      	movs	r3, #32
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ee:	e17a      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f6:	e176      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80086f8:	2380      	movs	r3, #128	; 0x80
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fe:	e172      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a5b      	ldr	r2, [pc, #364]	; (8008874 <UART_SetConfig+0x63c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d130      	bne.n	800876c <UART_SetConfig+0x534>
 800870a:	4b58      	ldr	r3, [pc, #352]	; (800886c <UART_SetConfig+0x634>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	2b05      	cmp	r3, #5
 8008714:	d826      	bhi.n	8008764 <UART_SetConfig+0x52c>
 8008716:	a201      	add	r2, pc, #4	; (adr r2, 800871c <UART_SetConfig+0x4e4>)
 8008718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871c:	08008735 	.word	0x08008735
 8008720:	0800873d 	.word	0x0800873d
 8008724:	08008745 	.word	0x08008745
 8008728:	0800874d 	.word	0x0800874d
 800872c:	08008755 	.word	0x08008755
 8008730:	0800875d 	.word	0x0800875d
 8008734:	2300      	movs	r3, #0
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e154      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800873c:	2304      	movs	r3, #4
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008742:	e150      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008744:	2308      	movs	r3, #8
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874a:	e14c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800874c:	2310      	movs	r3, #16
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008752:	e148      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008754:	2320      	movs	r3, #32
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875a:	e144      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800875c:	2340      	movs	r3, #64	; 0x40
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008762:	e140      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e13c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a41      	ldr	r2, [pc, #260]	; (8008878 <UART_SetConfig+0x640>)
 8008772:	4293      	cmp	r3, r2
 8008774:	f040 8082 	bne.w	800887c <UART_SetConfig+0x644>
 8008778:	4b3c      	ldr	r3, [pc, #240]	; (800886c <UART_SetConfig+0x634>)
 800877a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008780:	2b28      	cmp	r3, #40	; 0x28
 8008782:	d86d      	bhi.n	8008860 <UART_SetConfig+0x628>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0x554>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	08008831 	.word	0x08008831
 8008790:	08008861 	.word	0x08008861
 8008794:	08008861 	.word	0x08008861
 8008798:	08008861 	.word	0x08008861
 800879c:	08008861 	.word	0x08008861
 80087a0:	08008861 	.word	0x08008861
 80087a4:	08008861 	.word	0x08008861
 80087a8:	08008861 	.word	0x08008861
 80087ac:	08008839 	.word	0x08008839
 80087b0:	08008861 	.word	0x08008861
 80087b4:	08008861 	.word	0x08008861
 80087b8:	08008861 	.word	0x08008861
 80087bc:	08008861 	.word	0x08008861
 80087c0:	08008861 	.word	0x08008861
 80087c4:	08008861 	.word	0x08008861
 80087c8:	08008861 	.word	0x08008861
 80087cc:	08008841 	.word	0x08008841
 80087d0:	08008861 	.word	0x08008861
 80087d4:	08008861 	.word	0x08008861
 80087d8:	08008861 	.word	0x08008861
 80087dc:	08008861 	.word	0x08008861
 80087e0:	08008861 	.word	0x08008861
 80087e4:	08008861 	.word	0x08008861
 80087e8:	08008861 	.word	0x08008861
 80087ec:	08008849 	.word	0x08008849
 80087f0:	08008861 	.word	0x08008861
 80087f4:	08008861 	.word	0x08008861
 80087f8:	08008861 	.word	0x08008861
 80087fc:	08008861 	.word	0x08008861
 8008800:	08008861 	.word	0x08008861
 8008804:	08008861 	.word	0x08008861
 8008808:	08008861 	.word	0x08008861
 800880c:	08008851 	.word	0x08008851
 8008810:	08008861 	.word	0x08008861
 8008814:	08008861 	.word	0x08008861
 8008818:	08008861 	.word	0x08008861
 800881c:	08008861 	.word	0x08008861
 8008820:	08008861 	.word	0x08008861
 8008824:	08008861 	.word	0x08008861
 8008828:	08008861 	.word	0x08008861
 800882c:	08008859 	.word	0x08008859
 8008830:	2301      	movs	r3, #1
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e0d6      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008838:	2304      	movs	r3, #4
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e0d2      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008840:	2308      	movs	r3, #8
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e0ce      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008848:	2310      	movs	r3, #16
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e0ca      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008850:	2320      	movs	r3, #32
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e0c6      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e0c2      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e0be      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008868:	40011400 	.word	0x40011400
 800886c:	58024400 	.word	0x58024400
 8008870:	40007800 	.word	0x40007800
 8008874:	40007c00 	.word	0x40007c00
 8008878:	40011800 	.word	0x40011800
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4aad      	ldr	r2, [pc, #692]	; (8008b38 <UART_SetConfig+0x900>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d176      	bne.n	8008974 <UART_SetConfig+0x73c>
 8008886:	4bad      	ldr	r3, [pc, #692]	; (8008b3c <UART_SetConfig+0x904>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800888e:	2b28      	cmp	r3, #40	; 0x28
 8008890:	d86c      	bhi.n	800896c <UART_SetConfig+0x734>
 8008892:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <UART_SetConfig+0x660>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	0800893d 	.word	0x0800893d
 800889c:	0800896d 	.word	0x0800896d
 80088a0:	0800896d 	.word	0x0800896d
 80088a4:	0800896d 	.word	0x0800896d
 80088a8:	0800896d 	.word	0x0800896d
 80088ac:	0800896d 	.word	0x0800896d
 80088b0:	0800896d 	.word	0x0800896d
 80088b4:	0800896d 	.word	0x0800896d
 80088b8:	08008945 	.word	0x08008945
 80088bc:	0800896d 	.word	0x0800896d
 80088c0:	0800896d 	.word	0x0800896d
 80088c4:	0800896d 	.word	0x0800896d
 80088c8:	0800896d 	.word	0x0800896d
 80088cc:	0800896d 	.word	0x0800896d
 80088d0:	0800896d 	.word	0x0800896d
 80088d4:	0800896d 	.word	0x0800896d
 80088d8:	0800894d 	.word	0x0800894d
 80088dc:	0800896d 	.word	0x0800896d
 80088e0:	0800896d 	.word	0x0800896d
 80088e4:	0800896d 	.word	0x0800896d
 80088e8:	0800896d 	.word	0x0800896d
 80088ec:	0800896d 	.word	0x0800896d
 80088f0:	0800896d 	.word	0x0800896d
 80088f4:	0800896d 	.word	0x0800896d
 80088f8:	08008955 	.word	0x08008955
 80088fc:	0800896d 	.word	0x0800896d
 8008900:	0800896d 	.word	0x0800896d
 8008904:	0800896d 	.word	0x0800896d
 8008908:	0800896d 	.word	0x0800896d
 800890c:	0800896d 	.word	0x0800896d
 8008910:	0800896d 	.word	0x0800896d
 8008914:	0800896d 	.word	0x0800896d
 8008918:	0800895d 	.word	0x0800895d
 800891c:	0800896d 	.word	0x0800896d
 8008920:	0800896d 	.word	0x0800896d
 8008924:	0800896d 	.word	0x0800896d
 8008928:	0800896d 	.word	0x0800896d
 800892c:	0800896d 	.word	0x0800896d
 8008930:	0800896d 	.word	0x0800896d
 8008934:	0800896d 	.word	0x0800896d
 8008938:	08008965 	.word	0x08008965
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e050      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008944:	2304      	movs	r3, #4
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894a:	e04c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800894c:	2308      	movs	r3, #8
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008952:	e048      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008954:	2310      	movs	r3, #16
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e044      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800895c:	2320      	movs	r3, #32
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e040      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008964:	2340      	movs	r3, #64	; 0x40
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e03c      	b.n	80089e6 <UART_SetConfig+0x7ae>
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e038      	b.n	80089e6 <UART_SetConfig+0x7ae>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a71      	ldr	r2, [pc, #452]	; (8008b40 <UART_SetConfig+0x908>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d130      	bne.n	80089e0 <UART_SetConfig+0x7a8>
 800897e:	4b6f      	ldr	r3, [pc, #444]	; (8008b3c <UART_SetConfig+0x904>)
 8008980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b05      	cmp	r3, #5
 8008988:	d826      	bhi.n	80089d8 <UART_SetConfig+0x7a0>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <UART_SetConfig+0x758>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089a9 	.word	0x080089a9
 8008994:	080089b1 	.word	0x080089b1
 8008998:	080089b9 	.word	0x080089b9
 800899c:	080089c1 	.word	0x080089c1
 80089a0:	080089c9 	.word	0x080089c9
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e01a      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e016      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e012      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e00e      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089c8:	2320      	movs	r3, #32
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e00a      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089d0:	2340      	movs	r3, #64	; 0x40
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e006      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e002      	b.n	80089e6 <UART_SetConfig+0x7ae>
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a55      	ldr	r2, [pc, #340]	; (8008b40 <UART_SetConfig+0x908>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	f040 80f8 	bne.w	8008be2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	dc46      	bgt.n	8008a88 <UART_SetConfig+0x850>
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	db75      	blt.n	8008aea <UART_SetConfig+0x8b2>
 80089fe:	3b02      	subs	r3, #2
 8008a00:	2b1e      	cmp	r3, #30
 8008a02:	d872      	bhi.n	8008aea <UART_SetConfig+0x8b2>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <UART_SetConfig+0x7d4>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a8f 	.word	0x08008a8f
 8008a10:	08008aeb 	.word	0x08008aeb
 8008a14:	08008a97 	.word	0x08008a97
 8008a18:	08008aeb 	.word	0x08008aeb
 8008a1c:	08008aeb 	.word	0x08008aeb
 8008a20:	08008aeb 	.word	0x08008aeb
 8008a24:	08008aa7 	.word	0x08008aa7
 8008a28:	08008aeb 	.word	0x08008aeb
 8008a2c:	08008aeb 	.word	0x08008aeb
 8008a30:	08008aeb 	.word	0x08008aeb
 8008a34:	08008aeb 	.word	0x08008aeb
 8008a38:	08008aeb 	.word	0x08008aeb
 8008a3c:	08008aeb 	.word	0x08008aeb
 8008a40:	08008aeb 	.word	0x08008aeb
 8008a44:	08008ab7 	.word	0x08008ab7
 8008a48:	08008aeb 	.word	0x08008aeb
 8008a4c:	08008aeb 	.word	0x08008aeb
 8008a50:	08008aeb 	.word	0x08008aeb
 8008a54:	08008aeb 	.word	0x08008aeb
 8008a58:	08008aeb 	.word	0x08008aeb
 8008a5c:	08008aeb 	.word	0x08008aeb
 8008a60:	08008aeb 	.word	0x08008aeb
 8008a64:	08008aeb 	.word	0x08008aeb
 8008a68:	08008aeb 	.word	0x08008aeb
 8008a6c:	08008aeb 	.word	0x08008aeb
 8008a70:	08008aeb 	.word	0x08008aeb
 8008a74:	08008aeb 	.word	0x08008aeb
 8008a78:	08008aeb 	.word	0x08008aeb
 8008a7c:	08008aeb 	.word	0x08008aeb
 8008a80:	08008aeb 	.word	0x08008aeb
 8008a84:	08008add 	.word	0x08008add
 8008a88:	2b40      	cmp	r3, #64	; 0x40
 8008a8a:	d02a      	beq.n	8008ae2 <UART_SetConfig+0x8aa>
 8008a8c:	e02d      	b.n	8008aea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a8e:	f7fd fb51 	bl	8006134 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a94:	e02f      	b.n	8008af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fd fb60 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa4:	e027      	b.n	8008af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa6:	f107 0318 	add.w	r3, r7, #24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fd fcac 	bl	8006408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab4:	e01f      	b.n	8008af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <UART_SetConfig+0x904>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0320 	and.w	r3, r3, #32
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <UART_SetConfig+0x904>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	08db      	lsrs	r3, r3, #3
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <UART_SetConfig+0x90c>)
 8008ace:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ad4:	e00f      	b.n	8008af6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ad6:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <UART_SetConfig+0x90c>)
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ada:	e00c      	b.n	8008af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008adc:	4b1a      	ldr	r3, [pc, #104]	; (8008b48 <UART_SetConfig+0x910>)
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae0:	e009      	b.n	8008af6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae8:	e005      	b.n	8008af6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 81ee 	beq.w	8008eda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	4a12      	ldr	r2, [pc, #72]	; (8008b4c <UART_SetConfig+0x914>)
 8008b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b10:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	4613      	mov	r3, r2
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	4413      	add	r3, r2
 8008b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d305      	bcc.n	8008b2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d910      	bls.n	8008b50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b34:	e1d1      	b.n	8008eda <UART_SetConfig+0xca2>
 8008b36:	bf00      	nop
 8008b38:	40011c00 	.word	0x40011c00
 8008b3c:	58024400 	.word	0x58024400
 8008b40:	58000c00 	.word	0x58000c00
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	003d0900 	.word	0x003d0900
 8008b4c:	0800a300 	.word	0x0800a300
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b52:	2200      	movs	r2, #0
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	60fa      	str	r2, [r7, #12]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	4ac0      	ldr	r2, [pc, #768]	; (8008e60 <UART_SetConfig+0xc28>)
 8008b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2200      	movs	r2, #0
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b72:	f7f7 fbcd 	bl	8000310 <__aeabi_uldivmod>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	020b      	lsls	r3, r1, #8
 8008b88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b8c:	0202      	lsls	r2, r0, #8
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	6849      	ldr	r1, [r1, #4]
 8008b92:	0849      	lsrs	r1, r1, #1
 8008b94:	2000      	movs	r0, #0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4605      	mov	r5, r0
 8008b9a:	eb12 0804 	adds.w	r8, r2, r4
 8008b9e:	eb43 0905 	adc.w	r9, r3, r5
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	469a      	mov	sl, r3
 8008baa:	4693      	mov	fp, r2
 8008bac:	4652      	mov	r2, sl
 8008bae:	465b      	mov	r3, fp
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	f7f7 fbac 	bl	8000310 <__aeabi_uldivmod>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bc6:	d308      	bcc.n	8008bda <UART_SetConfig+0x9a2>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bce:	d204      	bcs.n	8008bda <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bd6:	60da      	str	r2, [r3, #12]
 8008bd8:	e17f      	b.n	8008eda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008be0:	e17b      	b.n	8008eda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bea:	f040 80bd 	bne.w	8008d68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008bee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	dc48      	bgt.n	8008c88 <UART_SetConfig+0xa50>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	db7b      	blt.n	8008cf2 <UART_SetConfig+0xaba>
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d879      	bhi.n	8008cf2 <UART_SetConfig+0xaba>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0x9cc>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c8f 	.word	0x08008c8f
 8008c08:	08008c97 	.word	0x08008c97
 8008c0c:	08008cf3 	.word	0x08008cf3
 8008c10:	08008cf3 	.word	0x08008cf3
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008cf3 	.word	0x08008cf3
 8008c1c:	08008cf3 	.word	0x08008cf3
 8008c20:	08008cf3 	.word	0x08008cf3
 8008c24:	08008caf 	.word	0x08008caf
 8008c28:	08008cf3 	.word	0x08008cf3
 8008c2c:	08008cf3 	.word	0x08008cf3
 8008c30:	08008cf3 	.word	0x08008cf3
 8008c34:	08008cf3 	.word	0x08008cf3
 8008c38:	08008cf3 	.word	0x08008cf3
 8008c3c:	08008cf3 	.word	0x08008cf3
 8008c40:	08008cf3 	.word	0x08008cf3
 8008c44:	08008cbf 	.word	0x08008cbf
 8008c48:	08008cf3 	.word	0x08008cf3
 8008c4c:	08008cf3 	.word	0x08008cf3
 8008c50:	08008cf3 	.word	0x08008cf3
 8008c54:	08008cf3 	.word	0x08008cf3
 8008c58:	08008cf3 	.word	0x08008cf3
 8008c5c:	08008cf3 	.word	0x08008cf3
 8008c60:	08008cf3 	.word	0x08008cf3
 8008c64:	08008cf3 	.word	0x08008cf3
 8008c68:	08008cf3 	.word	0x08008cf3
 8008c6c:	08008cf3 	.word	0x08008cf3
 8008c70:	08008cf3 	.word	0x08008cf3
 8008c74:	08008cf3 	.word	0x08008cf3
 8008c78:	08008cf3 	.word	0x08008cf3
 8008c7c:	08008cf3 	.word	0x08008cf3
 8008c80:	08008cf3 	.word	0x08008cf3
 8008c84:	08008ce5 	.word	0x08008ce5
 8008c88:	2b40      	cmp	r3, #64	; 0x40
 8008c8a:	d02e      	beq.n	8008cea <UART_SetConfig+0xab2>
 8008c8c:	e031      	b.n	8008cf2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c8e:	f7fc fb2b 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8008c92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c94:	e033      	b.n	8008cfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c96:	f7fc fb3d 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8008c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c9c:	e02f      	b.n	8008cfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fa5c 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cac:	e027      	b.n	8008cfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cae:	f107 0318 	add.w	r3, r7, #24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd fba8 	bl	8006408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cbc:	e01f      	b.n	8008cfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cbe:	4b69      	ldr	r3, [pc, #420]	; (8008e64 <UART_SetConfig+0xc2c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d009      	beq.n	8008cde <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cca:	4b66      	ldr	r3, [pc, #408]	; (8008e64 <UART_SetConfig+0xc2c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	08db      	lsrs	r3, r3, #3
 8008cd0:	f003 0303 	and.w	r3, r3, #3
 8008cd4:	4a64      	ldr	r2, [pc, #400]	; (8008e68 <UART_SetConfig+0xc30>)
 8008cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cdc:	e00f      	b.n	8008cfe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008cde:	4b62      	ldr	r3, [pc, #392]	; (8008e68 <UART_SetConfig+0xc30>)
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce2:	e00c      	b.n	8008cfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ce4:	4b61      	ldr	r3, [pc, #388]	; (8008e6c <UART_SetConfig+0xc34>)
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce8:	e009      	b.n	8008cfe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf0:	e005      	b.n	8008cfe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 80ea 	beq.w	8008eda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	4a55      	ldr	r2, [pc, #340]	; (8008e60 <UART_SetConfig+0xc28>)
 8008d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d18:	005a      	lsls	r2, r3, #1
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	085b      	lsrs	r3, r3, #1
 8008d20:	441a      	add	r2, r3
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d916      	bls.n	8008d60 <UART_SetConfig+0xb28>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d38:	d212      	bcs.n	8008d60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f023 030f 	bic.w	r3, r3, #15
 8008d42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d52:	4313      	orrs	r3, r2
 8008d54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	e0bc      	b.n	8008eda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d66:	e0b8      	b.n	8008eda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	dc4b      	bgt.n	8008e08 <UART_SetConfig+0xbd0>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f2c0 8087 	blt.w	8008e84 <UART_SetConfig+0xc4c>
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	f200 8084 	bhi.w	8008e84 <UART_SetConfig+0xc4c>
 8008d7c:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <UART_SetConfig+0xb4c>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008e0f 	.word	0x08008e0f
 8008d88:	08008e17 	.word	0x08008e17
 8008d8c:	08008e85 	.word	0x08008e85
 8008d90:	08008e85 	.word	0x08008e85
 8008d94:	08008e1f 	.word	0x08008e1f
 8008d98:	08008e85 	.word	0x08008e85
 8008d9c:	08008e85 	.word	0x08008e85
 8008da0:	08008e85 	.word	0x08008e85
 8008da4:	08008e2f 	.word	0x08008e2f
 8008da8:	08008e85 	.word	0x08008e85
 8008dac:	08008e85 	.word	0x08008e85
 8008db0:	08008e85 	.word	0x08008e85
 8008db4:	08008e85 	.word	0x08008e85
 8008db8:	08008e85 	.word	0x08008e85
 8008dbc:	08008e85 	.word	0x08008e85
 8008dc0:	08008e85 	.word	0x08008e85
 8008dc4:	08008e3f 	.word	0x08008e3f
 8008dc8:	08008e85 	.word	0x08008e85
 8008dcc:	08008e85 	.word	0x08008e85
 8008dd0:	08008e85 	.word	0x08008e85
 8008dd4:	08008e85 	.word	0x08008e85
 8008dd8:	08008e85 	.word	0x08008e85
 8008ddc:	08008e85 	.word	0x08008e85
 8008de0:	08008e85 	.word	0x08008e85
 8008de4:	08008e85 	.word	0x08008e85
 8008de8:	08008e85 	.word	0x08008e85
 8008dec:	08008e85 	.word	0x08008e85
 8008df0:	08008e85 	.word	0x08008e85
 8008df4:	08008e85 	.word	0x08008e85
 8008df8:	08008e85 	.word	0x08008e85
 8008dfc:	08008e85 	.word	0x08008e85
 8008e00:	08008e85 	.word	0x08008e85
 8008e04:	08008e77 	.word	0x08008e77
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d037      	beq.n	8008e7c <UART_SetConfig+0xc44>
 8008e0c:	e03a      	b.n	8008e84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e0e:	f7fc fa6b 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8008e12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e14:	e03c      	b.n	8008e90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e16:	f7fc fa7d 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8008e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e1c:	e038      	b.n	8008e90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd f99c 	bl	8006160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e2c:	e030      	b.n	8008e90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2e:	f107 0318 	add.w	r3, r7, #24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd fae8 	bl	8006408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3c:	e028      	b.n	8008e90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <UART_SetConfig+0xc2c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d012      	beq.n	8008e70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e4a:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <UART_SetConfig+0xc2c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	08db      	lsrs	r3, r3, #3
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <UART_SetConfig+0xc30>)
 8008e56:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e5c:	e018      	b.n	8008e90 <UART_SetConfig+0xc58>
 8008e5e:	bf00      	nop
 8008e60:	0800a300 	.word	0x0800a300
 8008e64:	58024400 	.word	0x58024400
 8008e68:	03d09000 	.word	0x03d09000
 8008e6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008e70:	4b24      	ldr	r3, [pc, #144]	; (8008f04 <UART_SetConfig+0xccc>)
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e00c      	b.n	8008e90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e76:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <UART_SetConfig+0xcd0>)
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e7a:	e009      	b.n	8008e90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e82:	e005      	b.n	8008e90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e8e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d021      	beq.n	8008eda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	4a1c      	ldr	r2, [pc, #112]	; (8008f0c <UART_SetConfig+0xcd4>)
 8008e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	085b      	lsrs	r3, r3, #1
 8008eae:	441a      	add	r2, r3
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	2b0f      	cmp	r3, #15
 8008ebe:	d909      	bls.n	8008ed4 <UART_SetConfig+0xc9c>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec6:	d205      	bcs.n	8008ed4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60da      	str	r2, [r3, #12]
 8008ed2:	e002      	b.n	8008eda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2200      	movs	r2, #0
 8008eee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ef6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3748      	adds	r7, #72	; 0x48
 8008efe:	46bd      	mov	sp, r7
 8008f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f04:	03d09000 	.word	0x03d09000
 8008f08:	003d0900 	.word	0x003d0900
 8008f0c:	0800a300 	.word	0x0800a300

08008f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01a      	beq.n	8009026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800900e:	d10a      	bne.n	8009026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	605a      	str	r2, [r3, #4]
  }
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af02      	add	r7, sp, #8
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009064:	f7f8 fcd2 	bl	8001a0c <HAL_GetTick>
 8009068:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b08      	cmp	r3, #8
 8009076:	d10e      	bne.n	8009096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f82f 	bl	80090ea <UART_WaitOnFlagUntilTimeout>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e025      	b.n	80090e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d10e      	bne.n	80090c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f819 	bl	80090ea <UART_WaitOnFlagUntilTimeout>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e00f      	b.n	80090e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b09c      	sub	sp, #112	; 0x70
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	4613      	mov	r3, r2
 80090f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090fa:	e0a9      	b.n	8009250 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	f000 80a5 	beq.w	8009250 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009106:	f7f8 fc81 	bl	8001a0c <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009112:	429a      	cmp	r2, r3
 8009114:	d302      	bcc.n	800911c <UART_WaitOnFlagUntilTimeout+0x32>
 8009116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009118:	2b00      	cmp	r3, #0
 800911a:	d140      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800912a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009130:	667b      	str	r3, [r7, #100]	; 0x64
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800913a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800913c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e6      	bne.n	800911c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	f023 0301 	bic.w	r3, r3, #1
 8009164:	663b      	str	r3, [r7, #96]	; 0x60
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800916e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800917c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e5      	bne.n	800914e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2220      	movs	r2, #32
 8009186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e069      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0304 	and.w	r3, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d051      	beq.n	8009250 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ba:	d149      	bne.n	8009250 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34
 80091e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e6      	bne.n	80091c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3308      	adds	r3, #8
 80091fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	613b      	str	r3, [r7, #16]
   return(result);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f023 0301 	bic.w	r3, r3, #1
 800920e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3308      	adds	r3, #8
 8009216:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009218:	623a      	str	r2, [r7, #32]
 800921a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	69f9      	ldr	r1, [r7, #28]
 800921e:	6a3a      	ldr	r2, [r7, #32]
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	61bb      	str	r3, [r7, #24]
   return(result);
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e5      	bne.n	80091f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2220      	movs	r2, #32
 8009230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2220      	movs	r2, #32
 8009238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e010      	b.n	8009272 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69da      	ldr	r2, [r3, #28]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4013      	ands	r3, r2
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	429a      	cmp	r2, r3
 800925e:	bf0c      	ite	eq
 8009260:	2301      	moveq	r3, #1
 8009262:	2300      	movne	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	429a      	cmp	r2, r3
 800926c:	f43f af46 	beq.w	80090fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3770      	adds	r7, #112	; 0x70
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800927c:	b480      	push	{r7}
 800927e:	b0a3      	sub	sp, #140	; 0x8c
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ae:	d10e      	bne.n	80092ce <UART_Start_Receive_IT+0x52>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d105      	bne.n	80092c4 <UART_Start_Receive_IT+0x48>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092c2:	e02d      	b.n	8009320 <UART_Start_Receive_IT+0xa4>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	22ff      	movs	r2, #255	; 0xff
 80092c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092cc:	e028      	b.n	8009320 <UART_Start_Receive_IT+0xa4>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10d      	bne.n	80092f2 <UART_Start_Receive_IT+0x76>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <UART_Start_Receive_IT+0x6c>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	22ff      	movs	r2, #255	; 0xff
 80092e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092e6:	e01b      	b.n	8009320 <UART_Start_Receive_IT+0xa4>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	227f      	movs	r2, #127	; 0x7f
 80092ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092f0:	e016      	b.n	8009320 <UART_Start_Receive_IT+0xa4>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092fa:	d10d      	bne.n	8009318 <UART_Start_Receive_IT+0x9c>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d104      	bne.n	800930e <UART_Start_Receive_IT+0x92>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	227f      	movs	r2, #127	; 0x7f
 8009308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800930c:	e008      	b.n	8009320 <UART_Start_Receive_IT+0xa4>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	223f      	movs	r2, #63	; 0x3f
 8009312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009316:	e003      	b.n	8009320 <UART_Start_Receive_IT+0xa4>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2222      	movs	r2, #34	; 0x22
 800932c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3308      	adds	r3, #8
 8009336:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009354:	673a      	str	r2, [r7, #112]	; 0x70
 8009356:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800935a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e3      	bne.n	8009330 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800936c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009370:	d153      	bne.n	800941a <UART_Start_Receive_IT+0x19e>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009378:	88fa      	ldrh	r2, [r7, #6]
 800937a:	429a      	cmp	r2, r3
 800937c:	d34d      	bcc.n	800941a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	d107      	bne.n	8009398 <UART_Start_Receive_IT+0x11c>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a4b      	ldr	r2, [pc, #300]	; (80094c0 <UART_Start_Receive_IT+0x244>)
 8009394:	671a      	str	r2, [r3, #112]	; 0x70
 8009396:	e002      	b.n	800939e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4a4a      	ldr	r2, [pc, #296]	; (80094c4 <UART_Start_Receive_IT+0x248>)
 800939c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01a      	beq.n	80093e4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80093de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e4      	bne.n	80093ae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3308      	adds	r3, #8
 8009402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009404:	64ba      	str	r2, [r7, #72]	; 0x48
 8009406:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800940a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e5      	bne.n	80093e4 <UART_Start_Receive_IT+0x168>
 8009418:	e04a      	b.n	80094b0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009422:	d107      	bne.n	8009434 <UART_Start_Receive_IT+0x1b8>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d103      	bne.n	8009434 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4a26      	ldr	r2, [pc, #152]	; (80094c8 <UART_Start_Receive_IT+0x24c>)
 8009430:	671a      	str	r2, [r3, #112]	; 0x70
 8009432:	e002      	b.n	800943a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a25      	ldr	r2, [pc, #148]	; (80094cc <UART_Start_Receive_IT+0x250>)
 8009438:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d019      	beq.n	800947e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800945e:	677b      	str	r3, [r7, #116]	; 0x74
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
 800946a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800946e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e6      	bne.n	800944a <UART_Start_Receive_IT+0x1ce>
 800947c:	e018      	b.n	80094b0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	613b      	str	r3, [r7, #16]
   return(result);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f043 0320 	orr.w	r3, r3, #32
 8009492:	67bb      	str	r3, [r7, #120]	; 0x78
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800949c:	623b      	str	r3, [r7, #32]
 800949e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	69f9      	ldr	r1, [r7, #28]
 80094a2:	6a3a      	ldr	r2, [r7, #32]
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	378c      	adds	r7, #140	; 0x8c
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	08009bd9 	.word	0x08009bd9
 80094c4:	080098e1 	.word	0x080098e1
 80094c8:	0800977f 	.word	0x0800977f
 80094cc:	0800961f 	.word	0x0800961f

080094d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b095      	sub	sp, #84	; 0x54
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f6:	643b      	str	r3, [r7, #64]	; 0x40
 80094f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	61fb      	str	r3, [r7, #28]
   return(result);
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <UART_EndRxTransfer+0xc8>)
 800951e:	4013      	ands	r3, r2
 8009520:	64bb      	str	r3, [r7, #72]	; 0x48
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800952a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e5      	bne.n	800950a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009542:	2b01      	cmp	r3, #1
 8009544:	d118      	bne.n	8009578 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	60bb      	str	r3, [r7, #8]
   return(result);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f023 0310 	bic.w	r3, r3, #16
 800955a:	647b      	str	r3, [r7, #68]	; 0x44
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009564:	61bb      	str	r3, [r7, #24]
 8009566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6979      	ldr	r1, [r7, #20]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	613b      	str	r3, [r7, #16]
   return(result);
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e6      	bne.n	8009546 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800958c:	bf00      	nop
 800958e:	3754      	adds	r7, #84	; 0x54
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	effffffe 	.word	0xeffffffe

0800959c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7fe fe26 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	61bb      	str	r3, [r7, #24]
 80095f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6979      	ldr	r1, [r7, #20]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	613b      	str	r3, [r7, #16]
   return(result);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e6      	bne.n	80095d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7fe fdf1 	bl	80081f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009616:	bf00      	nop
 8009618:	3720      	adds	r7, #32
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b096      	sub	sp, #88	; 0x58
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800962c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009636:	2b22      	cmp	r3, #34	; 0x22
 8009638:	f040 8095 	bne.w	8009766 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800964a:	b2d9      	uxtb	r1, r3
 800964c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009650:	b2da      	uxtb	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	400a      	ands	r2, r1
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d178      	bne.n	8009776 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009698:	653b      	str	r3, [r7, #80]	; 0x50
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a2:	647b      	str	r3, [r7, #68]	; 0x44
 80096a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e6      	bne.n	8009684 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3308      	adds	r3, #8
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	623b      	str	r3, [r7, #32]
   return(result);
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	f023 0301 	bic.w	r3, r3, #1
 80096cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096d6:	633a      	str	r2, [r7, #48]	; 0x30
 80096d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e5      	bne.n	80096b6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d12e      	bne.n	800975e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	e853 3f00 	ldrex	r3, [r3]
 8009712:	60fb      	str	r3, [r7, #12]
   return(result);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0310 	bic.w	r3, r3, #16
 800971a:	64bb      	str	r3, [r7, #72]	; 0x48
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009724:	61fb      	str	r3, [r7, #28]
 8009726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	69b9      	ldr	r1, [r7, #24]
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	617b      	str	r3, [r7, #20]
   return(result);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e6      	bne.n	8009706 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f003 0310 	and.w	r3, r3, #16
 8009742:	2b10      	cmp	r3, #16
 8009744:	d103      	bne.n	800974e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2210      	movs	r2, #16
 800974c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7fe fd62 	bl	8008220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800975c:	e00b      	b.n	8009776 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7f7 faa4 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 8009764:	e007      	b.n	8009776 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	699a      	ldr	r2, [r3, #24]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0208 	orr.w	r2, r2, #8
 8009774:	619a      	str	r2, [r3, #24]
}
 8009776:	bf00      	nop
 8009778:	3758      	adds	r7, #88	; 0x58
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b096      	sub	sp, #88	; 0x58
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800978c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009796:	2b22      	cmp	r3, #34	; 0x22
 8009798:	f040 8095 	bne.w	80098c6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80097ac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80097b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80097b4:	4013      	ands	r3, r2
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	1c9a      	adds	r2, r3, #2
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d178      	bne.n	80098d6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009802:	643b      	str	r3, [r7, #64]	; 0x40
 8009804:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e6      	bne.n	80097e4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	61fb      	str	r3, [r7, #28]
   return(result);
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	64bb      	str	r3, [r7, #72]	; 0x48
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800983c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d12e      	bne.n	80098be <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	60bb      	str	r3, [r7, #8]
   return(result);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f023 0310 	bic.w	r3, r3, #16
 800987a:	647b      	str	r3, [r7, #68]	; 0x44
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6979      	ldr	r1, [r7, #20]
 800988a:	69ba      	ldr	r2, [r7, #24]
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	613b      	str	r3, [r7, #16]
   return(result);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e6      	bne.n	8009866 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f003 0310 	and.w	r3, r3, #16
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d103      	bne.n	80098ae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2210      	movs	r2, #16
 80098ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fe fcb2 	bl	8008220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098bc:	e00b      	b.n	80098d6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7f7 f9f4 	bl	8000cac <HAL_UART_RxCpltCallback>
}
 80098c4:	e007      	b.n	80098d6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699a      	ldr	r2, [r3, #24]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0208 	orr.w	r2, r2, #8
 80098d4:	619a      	str	r2, [r3, #24]
}
 80098d6:	bf00      	nop
 80098d8:	3758      	adds	r7, #88	; 0x58
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b0a6      	sub	sp, #152	; 0x98
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009916:	2b22      	cmp	r3, #34	; 0x22
 8009918:	f040 814d 	bne.w	8009bb6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009922:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009926:	e0f4      	b.n	8009b12 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009932:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009936:	b2d9      	uxtb	r1, r3
 8009938:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800993c:	b2da      	uxtb	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009942:	400a      	ands	r2, r1
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800996e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	2b00      	cmp	r3, #0
 8009978:	d053      	beq.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800997a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d011      	beq.n	80099aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8009986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800998a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2201      	movs	r2, #1
 8009998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a0:	f043 0201 	orr.w	r2, r3, #1
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d011      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00b      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2202      	movs	r2, #2
 80099c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d0:	f043 0204 	orr.w	r2, r3, #4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099de:	f003 0304 	and.w	r3, r3, #4
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d011      	beq.n	8009a0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80099e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2204      	movs	r2, #4
 80099f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a00:	f043 0202 	orr.w	r2, r3, #2
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fe fbf9 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d171      	bne.n	8009b12 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a52:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009a56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e4      	bne.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3308      	adds	r3, #8
 8009a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a76:	4b56      	ldr	r3, [pc, #344]	; (8009bd0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3308      	adds	r3, #8
 8009a82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a84:	657a      	str	r2, [r7, #84]	; 0x54
 8009a86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e5      	bne.n	8009a64 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d12e      	bne.n	8009b0c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	f023 0310 	bic.w	r3, r3, #16
 8009ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ad8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1e6      	bne.n	8009ab4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	f003 0310 	and.w	r3, r3, #16
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d103      	bne.n	8009afc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2210      	movs	r2, #16
 8009afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7fe fb8b 	bl	8008220 <HAL_UARTEx_RxEventCallback>
 8009b0a:	e002      	b.n	8009b12 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7f7 f8cd 	bl	8000cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d006      	beq.n	8009b28 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f47f af00 	bne.w	8009928 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b32:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d045      	beq.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d23e      	bcs.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009b80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f043 0320 	orr.w	r3, r3, #32
 8009b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6979      	ldr	r1, [r7, #20]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	613b      	str	r3, [r7, #16]
   return(result);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e6      	bne.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bb4:	e007      	b.n	8009bc6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	699a      	ldr	r2, [r3, #24]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0208 	orr.w	r2, r2, #8
 8009bc4:	619a      	str	r2, [r3, #24]
}
 8009bc6:	bf00      	nop
 8009bc8:	3798      	adds	r7, #152	; 0x98
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	effffffe 	.word	0xeffffffe
 8009bd4:	0800961f 	.word	0x0800961f

08009bd8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b0a8      	sub	sp, #160	; 0xa0
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009be6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0e:	2b22      	cmp	r3, #34	; 0x22
 8009c10:	f040 8151 	bne.w	8009eb6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c1e:	e0f8      	b.n	8009e12 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c32:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009c36:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c48:	1c9a      	adds	r2, r3, #2
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d053      	beq.n	8009d1e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d011      	beq.n	8009ca6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2201      	movs	r2, #1
 8009c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c9c:	f043 0201 	orr.w	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d011      	beq.n	8009cd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00b      	beq.n	8009cd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ccc:	f043 0204 	orr.w	r2, r3, #4
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cda:	f003 0304 	and.w	r3, r3, #4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d011      	beq.n	8009d06 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2204      	movs	r2, #4
 8009cf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cfc:	f043 0202 	orr.w	r2, r3, #2
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7fe fa7b 	bl	800820c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d173      	bne.n	8009e12 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d32:	e853 3f00 	ldrex	r3, [r3]
 8009d36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d4e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e4      	bne.n	8009d2a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3308      	adds	r3, #8
 8009d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d72:	4b57      	ldr	r3, [pc, #348]	; (8009ed0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009d74:	4013      	ands	r3, r2
 8009d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d84:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e3      	bne.n	8009d60 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d12e      	bne.n	8009e0c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	f023 0310 	bic.w	r3, r3, #16
 8009dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8009dd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e6      	bne.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	f003 0310 	and.w	r3, r3, #16
 8009df0:	2b10      	cmp	r3, #16
 8009df2:	d103      	bne.n	8009dfc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2210      	movs	r2, #16
 8009dfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7fe fa0b 	bl	8008220 <HAL_UARTEx_RxEventCallback>
 8009e0a:	e002      	b.n	8009e12 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7f6 ff4d 	bl	8000cac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d006      	beq.n	8009e28 <UART_RxISR_16BIT_FIFOEN+0x250>
 8009e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f47f aefc 	bne.w	8009c20 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e2e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e32:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d045      	beq.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e40:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d23e      	bcs.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	623b      	str	r3, [r7, #32]
   return(result);
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e5e:	677b      	str	r3, [r7, #116]	; 0x74
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3308      	adds	r3, #8
 8009e66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009e68:	633a      	str	r2, [r7, #48]	; 0x30
 8009e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e70:	e841 2300 	strex	r3, r2, [r1]
 8009e74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1e5      	bne.n	8009e48 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a15      	ldr	r2, [pc, #84]	; (8009ed4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009e80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f043 0320 	orr.w	r3, r3, #32
 8009e96:	673b      	str	r3, [r7, #112]	; 0x70
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	69b9      	ldr	r1, [r7, #24]
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	617b      	str	r3, [r7, #20]
   return(result);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e6      	bne.n	8009e82 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eb4:	e007      	b.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699a      	ldr	r2, [r3, #24]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0208 	orr.w	r2, r2, #8
 8009ec4:	619a      	str	r2, [r3, #24]
}
 8009ec6:	bf00      	nop
 8009ec8:	37a0      	adds	r7, #160	; 0xa0
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	effffffe 	.word	0xeffffffe
 8009ed4:	0800977f 	.word	0x0800977f

08009ed8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_UARTEx_DisableFifoMode+0x16>
 8009f26:	2302      	movs	r3, #2
 8009f28:	e027      	b.n	8009f7a <HAL_UARTEx_DisableFifoMode+0x66>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2224      	movs	r2, #36	; 0x24
 8009f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0201 	bic.w	r2, r2, #1
 8009f50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d101      	bne.n	8009f9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e02d      	b.n	8009ffa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2224      	movs	r2, #36	; 0x24
 8009faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 0201 	bic.w	r2, r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f850 	bl	800a080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a012:	2b01      	cmp	r3, #1
 800a014:	d101      	bne.n	800a01a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a016:	2302      	movs	r3, #2
 800a018:	e02d      	b.n	800a076 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2224      	movs	r2, #36	; 0x24
 800a026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f022 0201 	bic.w	r2, r2, #1
 800a040:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f812 	bl	800a080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d108      	bne.n	800a0a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0a0:	e031      	b.n	800a106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0a2:	2310      	movs	r3, #16
 800a0a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0a6:	2310      	movs	r3, #16
 800a0a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	0e5b      	lsrs	r3, r3, #25
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 0307 	and.w	r3, r3, #7
 800a0b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	0f5b      	lsrs	r3, r3, #29
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0307 	and.w	r3, r3, #7
 800a0c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	7b3a      	ldrb	r2, [r7, #12]
 800a0ce:	4911      	ldr	r1, [pc, #68]	; (800a114 <UARTEx_SetNbDataToProcess+0x94>)
 800a0d0:	5c8a      	ldrb	r2, [r1, r2]
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0d6:	7b3a      	ldrb	r2, [r7, #12]
 800a0d8:	490f      	ldr	r1, [pc, #60]	; (800a118 <UARTEx_SetNbDataToProcess+0x98>)
 800a0da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	7b7a      	ldrb	r2, [r7, #13]
 800a0ec:	4909      	ldr	r1, [pc, #36]	; (800a114 <UARTEx_SetNbDataToProcess+0x94>)
 800a0ee:	5c8a      	ldrb	r2, [r1, r2]
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0f4:	7b7a      	ldrb	r2, [r7, #13]
 800a0f6:	4908      	ldr	r1, [pc, #32]	; (800a118 <UARTEx_SetNbDataToProcess+0x98>)
 800a0f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	0800a318 	.word	0x0800a318
 800a118:	0800a320 	.word	0x0800a320

0800a11c <atoi>:
 800a11c:	220a      	movs	r2, #10
 800a11e:	2100      	movs	r1, #0
 800a120:	f000 b8c8 	b.w	800a2b4 <strtol>

0800a124 <__errno>:
 800a124:	4b01      	ldr	r3, [pc, #4]	; (800a12c <__errno+0x8>)
 800a126:	6818      	ldr	r0, [r3, #0]
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	24000038 	.word	0x24000038

0800a130 <__libc_init_array>:
 800a130:	b570      	push	{r4, r5, r6, lr}
 800a132:	4d0d      	ldr	r5, [pc, #52]	; (800a168 <__libc_init_array+0x38>)
 800a134:	4c0d      	ldr	r4, [pc, #52]	; (800a16c <__libc_init_array+0x3c>)
 800a136:	1b64      	subs	r4, r4, r5
 800a138:	10a4      	asrs	r4, r4, #2
 800a13a:	2600      	movs	r6, #0
 800a13c:	42a6      	cmp	r6, r4
 800a13e:	d109      	bne.n	800a154 <__libc_init_array+0x24>
 800a140:	4d0b      	ldr	r5, [pc, #44]	; (800a170 <__libc_init_array+0x40>)
 800a142:	4c0c      	ldr	r4, [pc, #48]	; (800a174 <__libc_init_array+0x44>)
 800a144:	f000 f8c0 	bl	800a2c8 <_init>
 800a148:	1b64      	subs	r4, r4, r5
 800a14a:	10a4      	asrs	r4, r4, #2
 800a14c:	2600      	movs	r6, #0
 800a14e:	42a6      	cmp	r6, r4
 800a150:	d105      	bne.n	800a15e <__libc_init_array+0x2e>
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	f855 3b04 	ldr.w	r3, [r5], #4
 800a158:	4798      	blx	r3
 800a15a:	3601      	adds	r6, #1
 800a15c:	e7ee      	b.n	800a13c <__libc_init_array+0xc>
 800a15e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a162:	4798      	blx	r3
 800a164:	3601      	adds	r6, #1
 800a166:	e7f2      	b.n	800a14e <__libc_init_array+0x1e>
 800a168:	0800a494 	.word	0x0800a494
 800a16c:	0800a494 	.word	0x0800a494
 800a170:	0800a494 	.word	0x0800a494
 800a174:	0800a498 	.word	0x0800a498

0800a178 <memset>:
 800a178:	4402      	add	r2, r0
 800a17a:	4603      	mov	r3, r0
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d100      	bne.n	800a182 <memset+0xa>
 800a180:	4770      	bx	lr
 800a182:	f803 1b01 	strb.w	r1, [r3], #1
 800a186:	e7f9      	b.n	800a17c <memset+0x4>

0800a188 <strncpy>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	3901      	subs	r1, #1
 800a18c:	4603      	mov	r3, r0
 800a18e:	b132      	cbz	r2, 800a19e <strncpy+0x16>
 800a190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a194:	f803 4b01 	strb.w	r4, [r3], #1
 800a198:	3a01      	subs	r2, #1
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	d1f7      	bne.n	800a18e <strncpy+0x6>
 800a19e:	441a      	add	r2, r3
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d100      	bne.n	800a1a8 <strncpy+0x20>
 800a1a6:	bd10      	pop	{r4, pc}
 800a1a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ac:	e7f9      	b.n	800a1a2 <strncpy+0x1a>
	...

0800a1b0 <_strtol_l.constprop.0>:
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b6:	d001      	beq.n	800a1bc <_strtol_l.constprop.0+0xc>
 800a1b8:	2b24      	cmp	r3, #36	; 0x24
 800a1ba:	d906      	bls.n	800a1ca <_strtol_l.constprop.0+0x1a>
 800a1bc:	f7ff ffb2 	bl	800a124 <__errno>
 800a1c0:	2316      	movs	r3, #22
 800a1c2:	6003      	str	r3, [r0, #0]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2b0 <_strtol_l.constprop.0+0x100>
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	462e      	mov	r6, r5
 800a1d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1da:	f017 0708 	ands.w	r7, r7, #8
 800a1de:	d1f7      	bne.n	800a1d0 <_strtol_l.constprop.0+0x20>
 800a1e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a1e2:	d132      	bne.n	800a24a <_strtol_l.constprop.0+0x9a>
 800a1e4:	782c      	ldrb	r4, [r5, #0]
 800a1e6:	2701      	movs	r7, #1
 800a1e8:	1cb5      	adds	r5, r6, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d05b      	beq.n	800a2a6 <_strtol_l.constprop.0+0xf6>
 800a1ee:	2b10      	cmp	r3, #16
 800a1f0:	d109      	bne.n	800a206 <_strtol_l.constprop.0+0x56>
 800a1f2:	2c30      	cmp	r4, #48	; 0x30
 800a1f4:	d107      	bne.n	800a206 <_strtol_l.constprop.0+0x56>
 800a1f6:	782c      	ldrb	r4, [r5, #0]
 800a1f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a1fc:	2c58      	cmp	r4, #88	; 0x58
 800a1fe:	d14d      	bne.n	800a29c <_strtol_l.constprop.0+0xec>
 800a200:	786c      	ldrb	r4, [r5, #1]
 800a202:	2310      	movs	r3, #16
 800a204:	3502      	adds	r5, #2
 800a206:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a20a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a20e:	f04f 0c00 	mov.w	ip, #0
 800a212:	fbb8 f9f3 	udiv	r9, r8, r3
 800a216:	4666      	mov	r6, ip
 800a218:	fb03 8a19 	mls	sl, r3, r9, r8
 800a21c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a220:	f1be 0f09 	cmp.w	lr, #9
 800a224:	d816      	bhi.n	800a254 <_strtol_l.constprop.0+0xa4>
 800a226:	4674      	mov	r4, lr
 800a228:	42a3      	cmp	r3, r4
 800a22a:	dd24      	ble.n	800a276 <_strtol_l.constprop.0+0xc6>
 800a22c:	f1bc 0f00 	cmp.w	ip, #0
 800a230:	db1e      	blt.n	800a270 <_strtol_l.constprop.0+0xc0>
 800a232:	45b1      	cmp	r9, r6
 800a234:	d31c      	bcc.n	800a270 <_strtol_l.constprop.0+0xc0>
 800a236:	d101      	bne.n	800a23c <_strtol_l.constprop.0+0x8c>
 800a238:	45a2      	cmp	sl, r4
 800a23a:	db19      	blt.n	800a270 <_strtol_l.constprop.0+0xc0>
 800a23c:	fb06 4603 	mla	r6, r6, r3, r4
 800a240:	f04f 0c01 	mov.w	ip, #1
 800a244:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a248:	e7e8      	b.n	800a21c <_strtol_l.constprop.0+0x6c>
 800a24a:	2c2b      	cmp	r4, #43	; 0x2b
 800a24c:	bf04      	itt	eq
 800a24e:	782c      	ldrbeq	r4, [r5, #0]
 800a250:	1cb5      	addeq	r5, r6, #2
 800a252:	e7ca      	b.n	800a1ea <_strtol_l.constprop.0+0x3a>
 800a254:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a258:	f1be 0f19 	cmp.w	lr, #25
 800a25c:	d801      	bhi.n	800a262 <_strtol_l.constprop.0+0xb2>
 800a25e:	3c37      	subs	r4, #55	; 0x37
 800a260:	e7e2      	b.n	800a228 <_strtol_l.constprop.0+0x78>
 800a262:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a266:	f1be 0f19 	cmp.w	lr, #25
 800a26a:	d804      	bhi.n	800a276 <_strtol_l.constprop.0+0xc6>
 800a26c:	3c57      	subs	r4, #87	; 0x57
 800a26e:	e7db      	b.n	800a228 <_strtol_l.constprop.0+0x78>
 800a270:	f04f 3cff 	mov.w	ip, #4294967295
 800a274:	e7e6      	b.n	800a244 <_strtol_l.constprop.0+0x94>
 800a276:	f1bc 0f00 	cmp.w	ip, #0
 800a27a:	da05      	bge.n	800a288 <_strtol_l.constprop.0+0xd8>
 800a27c:	2322      	movs	r3, #34	; 0x22
 800a27e:	6003      	str	r3, [r0, #0]
 800a280:	4646      	mov	r6, r8
 800a282:	b942      	cbnz	r2, 800a296 <_strtol_l.constprop.0+0xe6>
 800a284:	4630      	mov	r0, r6
 800a286:	e79e      	b.n	800a1c6 <_strtol_l.constprop.0+0x16>
 800a288:	b107      	cbz	r7, 800a28c <_strtol_l.constprop.0+0xdc>
 800a28a:	4276      	negs	r6, r6
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	d0f9      	beq.n	800a284 <_strtol_l.constprop.0+0xd4>
 800a290:	f1bc 0f00 	cmp.w	ip, #0
 800a294:	d000      	beq.n	800a298 <_strtol_l.constprop.0+0xe8>
 800a296:	1e69      	subs	r1, r5, #1
 800a298:	6011      	str	r1, [r2, #0]
 800a29a:	e7f3      	b.n	800a284 <_strtol_l.constprop.0+0xd4>
 800a29c:	2430      	movs	r4, #48	; 0x30
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1b1      	bne.n	800a206 <_strtol_l.constprop.0+0x56>
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	e7af      	b.n	800a206 <_strtol_l.constprop.0+0x56>
 800a2a6:	2c30      	cmp	r4, #48	; 0x30
 800a2a8:	d0a5      	beq.n	800a1f6 <_strtol_l.constprop.0+0x46>
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	e7ab      	b.n	800a206 <_strtol_l.constprop.0+0x56>
 800a2ae:	bf00      	nop
 800a2b0:	0800a329 	.word	0x0800a329

0800a2b4 <strtol>:
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	460a      	mov	r2, r1
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	4802      	ldr	r0, [pc, #8]	; (800a2c4 <strtol+0x10>)
 800a2bc:	6800      	ldr	r0, [r0, #0]
 800a2be:	f7ff bf77 	b.w	800a1b0 <_strtol_l.constprop.0>
 800a2c2:	bf00      	nop
 800a2c4:	24000038 	.word	0x24000038

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
