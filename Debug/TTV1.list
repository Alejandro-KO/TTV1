
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a40  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d6c  08009d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08009d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000874  24000014  08009d88  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000888  08009d88  00020888  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165d3  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024cb  00000000  00000000  00036615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001028  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a3a  00000000  00000000  0003abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000165a6  00000000  00000000  0006d632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c502  00000000  00000000  00083bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d00da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000048a0  00000000  00000000  001d012c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009cf8 	.word	0x08009cf8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	08009cf8 	.word	0x08009cf8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	0000      	movs	r0, r0
	...

08000628 <radianes_a_valor>:
char q4[BUFFER_SIZE] = {0};

volatile uint8_t UASART = 0;


uint32_t radianes_a_valor(float radianes) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ajusta los radianes negativos a su equivalente positivo en el rango de 0 a 2PI
    if (radianes < 0) {
 8000632:	edd7 7a01 	vldr	s15, [r7, #4]
 8000636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d502      	bpl.n	8000646 <radianes_a_valor+0x1e>
        //radianes +=2.87979;
    	radianes = 0;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
    }

    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes > M_PI) {
 8000646:	edd7 7a01 	vldr	s15, [r7, #4]
 800064a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800064e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000690 <radianes_a_valor+0x68>
 8000652:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065a:	dd01      	ble.n	8000660 <radianes_a_valor+0x38>
        radianes = M_PI;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <radianes_a_valor+0x78>)
 800065e:	607b      	str	r3, [r7, #4]
    }

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000660:	edd7 7a01 	vldr	s15, [r7, #4]
 8000664:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000668:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000690 <radianes_a_valor+0x68>
 800066c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000670:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000698 <radianes_a_valor+0x70>
 8000674:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000678:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800067c:	ee17 3a90 	vmov	r3, s15
 8000680:	3341      	adds	r3, #65	; 0x41
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	54442d18 	.word	0x54442d18
 8000694:	400921fb 	.word	0x400921fb
 8000698:	00000000 	.word	0x00000000
 800069c:	406cc000 	.word	0x406cc000
 80006a0:	40490fdb 	.word	0x40490fdb

080006a4 <HAL_GPIO_EXTI_Callback>:
volatile uint8_t motor_running = 1;// Variable to control motor state
volatile uint8_t motor_running1 = 1;

volatile int pasos_retroceso = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006b4:	d102      	bne.n	80006bc <HAL_GPIO_EXTI_Callback+0x18>
        motor_running = 0; // Stop the motor when the interrupt occurs
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_13) {
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c2:	d102      	bne.n	80006ca <HAL_GPIO_EXTI_Callback+0x26>
    	motor_running1 = 0; // Stop the motor when the interrupt occurs
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_GPIO_EXTI_Callback+0x38>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
    }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	24000000 	.word	0x24000000
 80006dc:	24000001 	.word	0x24000001

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b598      	push	{r3, r4, r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 feb0 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f834 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f9fe 	bl	8000aec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 f92c 	bl	800094c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80006f4:	f000 f9c2 	bl	8000a7c <MX_DMA_Init>
  MX_TIM1_Init();
 80006f8:	f000 f88c 	bl	8000814 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80006fc:	f000 f972 	bl	80009e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000700:	210c      	movs	r1, #12
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <main+0x5c>)
 8000704:	f005 ff2a 	bl	800655c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000708:	2104      	movs	r1, #4
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <main+0x5c>)
 800070c:	f005 ff26 	bl	800655c <HAL_TIM_PWM_Start>
  //HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
  HAL_UART_Receive_IT(&huart1,&byte,bufersize);
 8000710:	2201      	movs	r2, #1
 8000712:	490b      	ldr	r1, [pc, #44]	; (8000740 <main+0x60>)
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <main+0x64>)
 8000716:	f006 ff15 	bl	8007544 <HAL_UART_Receive_IT>

  A4988_Setup();
 800071a:	f000 fb61 	bl	8000de0 <A4988_Setup>
//
//
//  mover_motorq1(0);
//  mover_motorq2_mm(100);
//  mover_motorq3_mm(100);
  TIM1->CCR2 = radianes_a_valor(M_PI/2);
 800071e:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <main+0x68>)
 8000720:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800074c <main+0x6c>
 8000724:	f7ff ff80 	bl	8000628 <radianes_a_valor>
 8000728:	4603      	mov	r3, r0
 800072a:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM1->CCR4 = radianes_a_valor(M_PI/4);
 800072c:	4c06      	ldr	r4, [pc, #24]	; (8000748 <main+0x68>)
 800072e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000750 <main+0x70>
 8000732:	f7ff ff79 	bl	8000628 <radianes_a_valor>
 8000736:	4603      	mov	r3, r0
 8000738:	6423      	str	r3, [r4, #64]	; 0x40
//  TIM1->CCR2 = 304;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0x5a>
 800073c:	24000030 	.word	0x24000030
 8000740:	2400037c 	.word	0x2400037c
 8000744:	2400007c 	.word	0x2400007c
 8000748:	40010000 	.word	0x40010000
 800074c:	3fc90fdb 	.word	0x3fc90fdb
 8000750:	3f490fdb 	.word	0x3f490fdb

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	; 0x70
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	224c      	movs	r2, #76	; 0x4c
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f009 fa98 	bl	8009c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2220      	movs	r2, #32
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f009 fa92 	bl	8009c98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000774:	2002      	movs	r0, #2
 8000776:	f003 fc09 	bl	8003f8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <SystemClock_Config+0xbc>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <SystemClock_Config+0xbc>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <SystemClock_Config+0xbc>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079a:	bf00      	nop
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <SystemClock_Config+0xbc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a8:	d1f8      	bne.n	800079c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fc1e 	bl	8004000 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007ca:	f000 fb25 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	233f      	movs	r3, #63	; 0x3f
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 80007d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e0:	2340      	movs	r3, #64	; 0x40
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 ffb0 	bl	800475c <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000802:	f000 fb09 	bl	8000e18 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3770      	adds	r7, #112	; 0x70
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	58024800 	.word	0x58024800

08000814 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b098      	sub	sp, #96	; 0x60
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2234      	movs	r2, #52	; 0x34
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f009 fa29 	bl	8009c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000846:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <MX_TIM1_Init+0x130>)
 8000848:	4a3f      	ldr	r2, [pc, #252]	; (8000948 <MX_TIM1_Init+0x134>)
 800084a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MX_TIM1_Init+0x130>)
 800084e:	2240      	movs	r2, #64	; 0x40
 8000850:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_TIM1_Init+0x130>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8000858:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <MX_TIM1_Init+0x130>)
 800085a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800085e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b38      	ldr	r3, [pc, #224]	; (8000944 <MX_TIM1_Init+0x130>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <MX_TIM1_Init+0x130>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <MX_TIM1_Init+0x130>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000872:	4834      	ldr	r0, [pc, #208]	; (8000944 <MX_TIM1_Init+0x130>)
 8000874:	f005 fe1a 	bl	80064ac <HAL_TIM_PWM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 facb 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000892:	4619      	mov	r1, r3
 8000894:	482b      	ldr	r0, [pc, #172]	; (8000944 <MX_TIM1_Init+0x130>)
 8000896:	f006 fc33 	bl	8007100 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 faba 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a4:	2360      	movs	r3, #96	; 0x60
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b0:	2300      	movs	r3, #0
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c4:	2204      	movs	r2, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	481e      	ldr	r0, [pc, #120]	; (8000944 <MX_TIM1_Init+0x130>)
 80008ca:	f005 ff63 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008d4:	f000 faa0 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008dc:	220c      	movs	r2, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4818      	ldr	r0, [pc, #96]	; (8000944 <MX_TIM1_Init+0x130>)
 80008e2:	f005 ff57 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80008ec:	f000 fa94 	bl	8000e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM1_Init+0x130>)
 8000926:	f006 fc87 	bl	8007238 <HAL_TIMEx_ConfigBreakDeadTime>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000930:	f000 fa72 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM1_Init+0x130>)
 8000936:	f000 fab1 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3760      	adds	r7, #96	; 0x60
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	24000030 	.word	0x24000030
 8000948:	40010000 	.word	0x40010000

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART1_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000996:	f006 fcef 	bl	8007378 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 fa3a 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009a8:	f009 f887 	bl	8009aba <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 fa31 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ba:	f009 f8bc 	bl	8009b36 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 fa28 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ca:	f009 f83d 	bl	8009a48 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 fa20 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2400007c 	.word	0x2400007c
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_USART3_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f006 fca3 	bl	8007378 <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f9ee 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a40:	f009 f83b 	bl	8009aba <HAL_UARTEx_SetTxFifoThreshold>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 f9e5 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a52:	f009 f870 	bl	8009b36 <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 f9dc 	bl	8000e18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a62:	f008 fff1 	bl	8009a48 <HAL_UARTEx_DisableFifoMode>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 f9d4 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2400010c 	.word	0x2400010c
 8000a78:	40004800 	.word	0x40004800

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_DMA_Init+0x6c>)
 8000a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <MX_DMA_Init+0x6c>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_DMA_Init+0x6c>)
 8000a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	200b      	movs	r0, #11
 8000aa6:	f000 fe3c 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aaa:	200b      	movs	r0, #11
 8000aac:	f000 fe53 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	200c      	movs	r0, #12
 8000ab6:	f000 fe34 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aba:	200c      	movs	r0, #12
 8000abc:	f000 fe4b 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	200d      	movs	r0, #13
 8000ac6:	f000 fe2c 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000aca:	200d      	movs	r0, #13
 8000acc:	f000 fe43 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	200e      	movs	r0, #14
 8000ad6:	f000 fe24 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ada:	200e      	movs	r0, #14
 8000adc:	f000 fe3b 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58024400 	.word	0x58024400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	4b59      	ldr	r3, [pc, #356]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a50      	ldr	r2, [pc, #320]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b4d      	ldr	r3, [pc, #308]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a48      	ldr	r2, [pc, #288]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a41      	ldr	r2, [pc, #260]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <MX_GPIO_Init+0x17c>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f640 2128 	movw	r1, #2600	; 0xa28
 8000b9e:	4833      	ldr	r0, [pc, #204]	; (8000c6c <MX_GPIO_Init+0x180>)
 8000ba0:	f003 f9c0 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	4831      	ldr	r0, [pc, #196]	; (8000c70 <MX_GPIO_Init+0x184>)
 8000baa:	f003 f9bb 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000bae:	2200      	movs	r2, #0
 8000bb0:	21ae      	movs	r1, #174	; 0xae
 8000bb2:	4830      	ldr	r0, [pc, #192]	; (8000c74 <MX_GPIO_Init+0x188>)
 8000bb4:	f003 f9b6 	bl	8003f24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2120      	movs	r1, #32
 8000bbc:	482e      	ldr	r0, [pc, #184]	; (8000c78 <MX_GPIO_Init+0x18c>)
 8000bbe:	f003 f9b1 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8000bc2:	f640 2328 	movw	r3, #2600	; 0xa28
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <MX_GPIO_Init+0x180>)
 8000bdc:	f002 fffa 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000be0:	230a      	movs	r3, #10
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481e      	ldr	r0, [pc, #120]	; (8000c70 <MX_GPIO_Init+0x184>)
 8000bf8:	f002 ffec 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000bfc:	23ae      	movs	r3, #174	; 0xae
 8000bfe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <MX_GPIO_Init+0x188>)
 8000c14:	f002 ffde 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_GPIO_Init+0x18c>)
 8000c30:	f002 ffd0 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c34:	2320      	movs	r3, #32
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480b      	ldr	r0, [pc, #44]	; (8000c78 <MX_GPIO_Init+0x18c>)
 8000c4c:	f002 ffc2 	bl	8003bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f000 fd64 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5a:	2028      	movs	r0, #40	; 0x28
 8000c5c:	f000 fd7b 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58021000 	.word	0x58021000
 8000c70:	58020800 	.word	0x58020800
 8000c74:	58020000 	.word	0x58020000
 8000c78:	58020400 	.word	0x58020400

08000c7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_RxCpltCallback+0x6c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d128      	bne.n	8000ce0 <HAL_UART_RxCpltCallback+0x64>
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_LED, GPIO_PIN_SET); // Enciende el LED
        //HAL_UART_Transmit(&huart1,&byte,1, 100); // Envía la cadena a través de UART


        // Almacenar el byte recibido en el buffer si no es '>'
        if (byte != 62) // 62 es el código ASCII para '>'
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b3e      	cmp	r3, #62	; 0x3e
 8000c94:	d016      	beq.n	8000cc4 <HAL_UART_RxCpltCallback+0x48>
        {

            if (bufferIndex < BUFFER_SIZE)
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d80b      	bhi.n	8000cb6 <HAL_UART_RxCpltCallback+0x3a>
            {

                buffer[bufferIndex++] = byte;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	b291      	uxth	r1, r2
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000ca8:	8011      	strh	r1, [r2, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cae:	7819      	ldrb	r1, [r3, #0]
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_UART_RxCpltCallback+0x78>)
 8000cb2:	5499      	strb	r1, [r3, r2]
 8000cb4:	e00f      	b.n	8000cd6 <HAL_UART_RxCpltCallback+0x5a>

            }
            else
            {
                // Manejar el caso de desbordamiento del buffer
                bufferOverflowFlag = 1; // Establecer la bandera de desbordamiento
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_UART_RxCpltCallback+0x7c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
                bufferIndex = 0; // Opcional: restablecer el índice del buffer
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
 8000cc2:	e008      	b.n	8000cd6 <HAL_UART_RxCpltCallback+0x5a>
        {
            // Aquí puedes manejar el caso cuando se recibe '>'
            // Por ejemplo, procesar el buffer y restablecer bufferIndex
        	 //HAL_UART_Transmit(&huart1, prueba_1, sizeof(prueba_1) - 1, 100);
        	 //HAL_UART_Transmit(&huart1, buffer,bufferIndex, 100);// Envía la cadena a través de UART
            processBuffer(buffer, bufferIndex);
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <HAL_UART_RxCpltCallback+0x78>)
 8000ccc:	f000 f818 	bl	8000d00 <processBuffer>
            bufferIndex = 0;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_UART_RxCpltCallback+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, &byte, 1);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4904      	ldr	r1, [pc, #16]	; (8000cec <HAL_UART_RxCpltCallback+0x70>)
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <HAL_UART_RxCpltCallback+0x80>)
 8000cdc:	f006 fc32 	bl	8007544 <HAL_UART_Receive_IT>


        // Vuelve a habilitar la recepción por interrupción

    }
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	2400037c 	.word	0x2400037c
 8000cf0:	24000480 	.word	0x24000480
 8000cf4:	24000380 	.word	0x24000380
 8000cf8:	24000482 	.word	0x24000482
 8000cfc:	2400007c 	.word	0x2400007c

08000d00 <processBuffer>:

void processBuffer(uint8_t *buffer, uint16_t length)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
    if (bufferOverflowFlag)
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <processBuffer+0xc4>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d009      	beq.n	8000d28 <processBuffer+0x28>
    {
        // Manejar el desbordamiento del buffer
        // Por ejemplo, enviar un mensaje de error o realizar acciones correctivas
        HAL_UART_Transmit(&huart1, (uint8_t *)"Buffer overflow\n", 16, 100);
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2210      	movs	r2, #16
 8000d18:	492b      	ldr	r1, [pc, #172]	; (8000dc8 <processBuffer+0xc8>)
 8000d1a:	482c      	ldr	r0, [pc, #176]	; (8000dcc <processBuffer+0xcc>)
 8000d1c:	f006 fb7c 	bl	8007418 <HAL_UART_Transmit>
        bufferOverflowFlag = 0; // Restablecer la bandera de desbordamiento
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <processBuffer+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
        return;
 8000d26:	e04a      	b.n	8000dbe <processBuffer+0xbe>
//    char q2[BUFFER_SIZE] = {0};
//    char q3[BUFFER_SIZE] = {0};
//    char q4[BUFFER_SIZE] = {0};

    // Punteros para la división de la cadena
    char *ptr = (char *)buffer;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	617b      	str	r3, [r7, #20]
    char *start = ptr;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
    char *end = strchr(start, 'a');
 8000d30:	2161      	movs	r1, #97	; 0x61
 8000d32:	6938      	ldr	r0, [r7, #16]
 8000d34:	f008 ffb8 	bl	8009ca8 <strchr>
 8000d38:	60f8      	str	r0, [r7, #12]

    if (end != NULL)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d034      	beq.n	8000daa <processBuffer+0xaa>
    {
        strncpy(q1, start, end - start);
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	6939      	ldr	r1, [r7, #16]
 8000d4a:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <processBuffer+0xd0>)
 8000d4c:	f008 ffc1 	bl	8009cd2 <strncpy>
        start = end + 1;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3301      	adds	r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
        end = strchr(start, 'b');
 8000d56:	2162      	movs	r1, #98	; 0x62
 8000d58:	6938      	ldr	r0, [r7, #16]
 8000d5a:	f008 ffa5 	bl	8009ca8 <strchr>
 8000d5e:	60f8      	str	r0, [r7, #12]

        if (end != NULL)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d021      	beq.n	8000daa <processBuffer+0xaa>
        {
            strncpy(q2, start, end - start);
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <processBuffer+0xd4>)
 8000d72:	f008 ffae 	bl	8009cd2 <strncpy>
            start = end + 1;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
            end = strchr(start, 'c');
 8000d7c:	2163      	movs	r1, #99	; 0x63
 8000d7e:	6938      	ldr	r0, [r7, #16]
 8000d80:	f008 ff92 	bl	8009ca8 <strchr>
 8000d84:	60f8      	str	r0, [r7, #12]

            if (end != NULL)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00e      	beq.n	8000daa <processBuffer+0xaa>
            {
                strncpy(q3, start, end - start);
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	6939      	ldr	r1, [r7, #16]
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <processBuffer+0xd8>)
 8000d98:	f008 ff9b 	bl	8009cd2 <strncpy>
                start = end + 1;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
                strcpy(q4, start);
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <processBuffer+0xdc>)
 8000da6:	f008 ff8c 	bl	8009cc2 <strcpy>
    }



    // Enviar cada parte a través de UART para verificar
    HAL_UART_Transmit(&huart1, (uint8_t *)q1, strlen(q1), 100); // 0 puntos desfazados
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <processBuffer+0xd0>)
 8000dac:	f7ff fab0 	bl	8000310 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <processBuffer+0xd0>)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <processBuffer+0xcc>)
 8000dba:	f006 fb2d 	bl	8007418 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); // 5 puntos desfazados
    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); // 2 puntos malos
    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100); // Enviar q4 si hay datos
}
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000482 	.word	0x24000482
 8000dc8:	08009d10 	.word	0x08009d10
 8000dcc:	2400007c 	.word	0x2400007c
 8000dd0:	24000484 	.word	0x24000484
 8000dd4:	24000584 	.word	0x24000584
 8000dd8:	24000684 	.word	0x24000684
 8000ddc:	24000784 	.word	0x24000784

08000de0 <A4988_Setup>:



void A4988_Setup() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    // Configurar pines de modo (MS0, MS1, MS2) para medio paso
    HAL_GPIO_WritePin(GPIOE, MS0_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2120      	movs	r1, #32
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <A4988_Setup+0x30>)
 8000dea:	f003 f89b 	bl	8003f24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS1_PIN, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2102      	movs	r1, #2
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <A4988_Setup+0x34>)
 8000df4:	f003 f896 	bl	8003f24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS2_PIN, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <A4988_Setup+0x34>)
 8000dfe:	f003 f891 	bl	8003f24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, ENABLE_PIN, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2108      	movs	r1, #8
 8000e06:	4802      	ldr	r0, [pc, #8]	; (8000e10 <A4988_Setup+0x30>)
 8000e08:	f003 f88c 	bl	8003f24 <HAL_GPIO_WritePin>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	58021000 	.word	0x58021000
 8000e14:	58020800 	.word	0x58020800

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x30>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x30>)
 8000e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	58024400 	.word	0x58024400

08000e58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10e      	bne.n	8000e88 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40010000 	.word	0x40010000
 8000e98:	58024400 	.word	0x58024400

08000e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_TIM_MspPostInit+0x6c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d11f      	bne.n	8000efe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_TIM_MspPostInit+0x70>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <HAL_TIM_MspPostInit+0x70>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_TIM_MspPostInit+0x70>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000edc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_TIM_MspPostInit+0x74>)
 8000efa:	f002 fe6b 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58020000 	.word	0x58020000

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b8      	sub	sp, #224	; 0xe0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22b4      	movs	r2, #180	; 0xb4
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 feaf 	bl	8009c98 <memset>
  if(huart->Instance==USART1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4aac      	ldr	r2, [pc, #688]	; (80011f0 <HAL_UART_MspInit+0x2dc>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	f040 80a6 	bne.w	8001092 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f003 ff8d 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000f60:	f7ff ff5a 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f64:	4ba3      	ldr	r3, [pc, #652]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f6a:	4aa2      	ldr	r2, [pc, #648]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f74:	4b9f      	ldr	r3, [pc, #636]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b9c      	ldr	r3, [pc, #624]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a9a      	ldr	r2, [pc, #616]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b98      	ldr	r3, [pc, #608]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000fa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	488c      	ldr	r0, [pc, #560]	; (80011f8 <HAL_UART_MspInit+0x2e4>)
 8000fc8:	f002 fe04 	bl	8003bd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000fcc:	4b8b      	ldr	r3, [pc, #556]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000fce:	4a8c      	ldr	r2, [pc, #560]	; (8001200 <HAL_UART_MspInit+0x2ec>)
 8000fd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000fd2:	4b8a      	ldr	r3, [pc, #552]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000fd4:	2229      	movs	r2, #41	; 0x29
 8000fd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd8:	4b88      	ldr	r3, [pc, #544]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fde:	4b87      	ldr	r3, [pc, #540]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe4:	4b85      	ldr	r3, [pc, #532]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fec:	4b83      	ldr	r3, [pc, #524]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff2:	4b82      	ldr	r3, [pc, #520]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffe:	4b7f      	ldr	r3, [pc, #508]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001004:	4b7d      	ldr	r3, [pc, #500]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800100a:	487c      	ldr	r0, [pc, #496]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 800100c:	f000 fbbe 	bl	800178c <HAL_DMA_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001016:	f7ff feff 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a77      	ldr	r2, [pc, #476]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 800101e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001020:	4a76      	ldr	r2, [pc, #472]	; (80011fc <HAL_UART_MspInit+0x2e8>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001026:	4b77      	ldr	r3, [pc, #476]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001028:	4a77      	ldr	r2, [pc, #476]	; (8001208 <HAL_UART_MspInit+0x2f4>)
 800102a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800102c:	4b75      	ldr	r3, [pc, #468]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 800102e:	222a      	movs	r2, #42	; 0x2a
 8001030:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001032:	4b74      	ldr	r3, [pc, #464]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001038:	4b72      	ldr	r3, [pc, #456]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800103e:	4b71      	ldr	r3, [pc, #452]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001044:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001046:	4b6f      	ldr	r3, [pc, #444]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104c:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001052:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105e:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001064:	4867      	ldr	r0, [pc, #412]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001066:	f000 fb91 	bl	800178c <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001070:	f7ff fed2 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a63      	ldr	r2, [pc, #396]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 8001078:	679a      	str	r2, [r3, #120]	; 0x78
 800107a:	4a62      	ldr	r2, [pc, #392]	; (8001204 <HAL_UART_MspInit+0x2f0>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2025      	movs	r0, #37	; 0x25
 8001086:	f000 fb4c 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108a:	2025      	movs	r0, #37	; 0x25
 800108c:	f000 fb63 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001090:	e0aa      	b.n	80011e8 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a5d      	ldr	r2, [pc, #372]	; (800120c <HAL_UART_MspInit+0x2f8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	f040 80a5 	bne.w	80011e8 <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fee1 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80010b8:	f7ff feae 	bl	8000e18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 80010be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c2:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 80010ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_UART_MspInit+0x2e0>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001112:	2307      	movs	r3, #7
 8001114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800111c:	4619      	mov	r1, r3
 800111e:	4836      	ldr	r0, [pc, #216]	; (80011f8 <HAL_UART_MspInit+0x2e4>)
 8001120:	f002 fd58 	bl	8003bd4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001126:	4a3b      	ldr	r2, [pc, #236]	; (8001214 <HAL_UART_MspInit+0x300>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 800112c:	222d      	movs	r2, #45	; 0x2d
 800112e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113c:	4b34      	ldr	r3, [pc, #208]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001142:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001144:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001162:	482b      	ldr	r0, [pc, #172]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001164:	f000 fb12 	bl	800178c <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800116e:	f7ff fe53 	bl	8000e18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 8001176:	67da      	str	r2, [r3, #124]	; 0x7c
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_UART_MspInit+0x2fc>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_UART_MspInit+0x304>)
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_UART_MspInit+0x308>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_UART_MspInit+0x304>)
 8001186:	222e      	movs	r2, #46	; 0x2e
 8001188:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_UART_MspInit+0x304>)
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_UART_MspInit+0x304>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_UART_MspInit+0x304>)
 8001198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011be:	f000 fae5 	bl	800178c <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 80011c8:	f7ff fe26 	bl	8000e18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011d0:	679a      	str	r2, [r3, #120]	; 0x78
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_UART_MspInit+0x304>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2027      	movs	r0, #39	; 0x27
 80011de:	f000 faa0 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e2:	2027      	movs	r0, #39	; 0x27
 80011e4:	f000 fab7 	bl	8001756 <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	37e0      	adds	r7, #224	; 0xe0
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40011000 	.word	0x40011000
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020400 	.word	0x58020400
 80011fc:	2400019c 	.word	0x2400019c
 8001200:	40020010 	.word	0x40020010
 8001204:	24000214 	.word	0x24000214
 8001208:	40020028 	.word	0x40020028
 800120c:	40004800 	.word	0x40004800
 8001210:	2400028c 	.word	0x2400028c
 8001214:	40020040 	.word	0x40020040
 8001218:	24000304 	.word	0x24000304
 800121c:	40020058 	.word	0x40020058

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f95e 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA1_Stream0_IRQHandler+0x10>)
 800127a:	f001 fb45 	bl	8002908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400019c 	.word	0x2400019c

08001288 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA1_Stream1_IRQHandler+0x10>)
 800128e:	f001 fb3b 	bl	8002908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24000214 	.word	0x24000214

0800129c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <DMA1_Stream2_IRQHandler+0x10>)
 80012a2:	f001 fb31 	bl	8002908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400028c 	.word	0x2400028c

080012b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA1_Stream3_IRQHandler+0x10>)
 80012b6:	f001 fb27 	bl	8002908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000304 	.word	0x24000304

080012c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART1_IRQHandler+0x10>)
 80012ca:	f006 f991 	bl	80075f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400007c 	.word	0x2400007c

080012d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USART3_IRQHandler+0x10>)
 80012de:	f006 f987 	bl	80075f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400010c 	.word	0x2400010c

080012ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80012f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012f4:	f002 fe2f 	bl	8003f56 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012fc:	f002 fe2b 	bl	8003f56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <SystemInit+0xd0>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <SystemInit+0xd0>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <SystemInit+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	2b06      	cmp	r3, #6
 8001322:	d807      	bhi.n	8001334 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <SystemInit+0xd4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 030f 	bic.w	r3, r3, #15
 800132c:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <SystemInit+0xd4>)
 800132e:	f043 0307 	orr.w	r3, r3, #7
 8001332:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <SystemInit+0xd8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a28      	ldr	r2, [pc, #160]	; (80013dc <SystemInit+0xd8>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <SystemInit+0xd8>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <SystemInit+0xd8>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	4924      	ldr	r1, [pc, #144]	; (80013dc <SystemInit+0xd8>)
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <SystemInit+0xdc>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <SystemInit+0xd4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <SystemInit+0xd4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 030f 	bic.w	r3, r3, #15
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <SystemInit+0xd4>)
 8001368:	f043 0307 	orr.w	r3, r3, #7
 800136c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <SystemInit+0xd8>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <SystemInit+0xd8>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <SystemInit+0xd8>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <SystemInit+0xd8>)
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <SystemInit+0xe0>)
 8001384:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <SystemInit+0xd8>)
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <SystemInit+0xe4>)
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <SystemInit+0xd8>)
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <SystemInit+0xe8>)
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <SystemInit+0xd8>)
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <SystemInit+0xd8>)
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <SystemInit+0xe8>)
 800139c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <SystemInit+0xd8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <SystemInit+0xd8>)
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <SystemInit+0xe8>)
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <SystemInit+0xd8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <SystemInit+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a09      	ldr	r2, [pc, #36]	; (80013dc <SystemInit+0xd8>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <SystemInit+0xd8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <SystemInit+0xec>)
 80013c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	52002000 	.word	0x52002000
 80013dc:	58024400 	.word	0x58024400
 80013e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e4:	02020200 	.word	0x02020200
 80013e8:	01ff0000 	.word	0x01ff0000
 80013ec:	01010280 	.word	0x01010280
 80013f0:	52004000 	.word	0x52004000

080013f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f8:	f7ff ff84 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f008 fc15 	bl	8009c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001426:	f7ff f95b 	bl	80006e0 <main>
  bx  lr
 800142a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001430:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001434:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001438:	08009d74 	.word	0x08009d74
  ldr r2, =_sbss
 800143c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001440:	24000888 	.word	0x24000888

08001444 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC3_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144e:	2003      	movs	r0, #3
 8001450:	f000 f95c 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001454:	f003 fb38 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_Init+0x68>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	4913      	ldr	r1, [pc, #76]	; (80014b4 <HAL_Init+0x6c>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_Init+0x68>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_Init+0x6c>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_Init+0x70>)
 800148a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_Init+0x74>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f814 	bl	80014c0 <HAL_InitTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e002      	b.n	80014a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014a2:	f7ff fcbf 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	58024400 	.word	0x58024400
 80014b4:	08009d24 	.word	0x08009d24
 80014b8:	24000008 	.word	0x24000008
 80014bc:	24000004 	.word	0x24000004

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_InitTick+0x60>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e021      	b.n	8001518 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_InitTick+0x64>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_InitTick+0x60>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f941 	bl	8001772 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f90b 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x68>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24000010 	.word	0x24000010
 8001524:	24000004 	.word	0x24000004
 8001528:	2400000c 	.word	0x2400000c

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	24000010 	.word	0x24000010
 8001550:	24000884 	.word	0x24000884

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	24000884 	.word	0x24000884

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	05fa0000 	.word	0x05fa0000

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff40 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff90 	bl	8001660 <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5f 	bl	800160c <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff33 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa4 	bl	80016c8 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fede 	bl	8001554 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e314      	b.n	8001dce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a66      	ldr	r2, [pc, #408]	; (8001944 <HAL_DMA_Init+0x1b8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d04a      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_DMA_Init+0x1bc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d045      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a63      	ldr	r2, [pc, #396]	; (800194c <HAL_DMA_Init+0x1c0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d040      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a62      	ldr	r2, [pc, #392]	; (8001950 <HAL_DMA_Init+0x1c4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d03b      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_DMA_Init+0x1c8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d036      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a5f      	ldr	r2, [pc, #380]	; (8001958 <HAL_DMA_Init+0x1cc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d031      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a5d      	ldr	r2, [pc, #372]	; (800195c <HAL_DMA_Init+0x1d0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d02c      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a5c      	ldr	r2, [pc, #368]	; (8001960 <HAL_DMA_Init+0x1d4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d027      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a5a      	ldr	r2, [pc, #360]	; (8001964 <HAL_DMA_Init+0x1d8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a59      	ldr	r2, [pc, #356]	; (8001968 <HAL_DMA_Init+0x1dc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01d      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a57      	ldr	r2, [pc, #348]	; (800196c <HAL_DMA_Init+0x1e0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d018      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a56      	ldr	r2, [pc, #344]	; (8001970 <HAL_DMA_Init+0x1e4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_DMA_Init+0x1e8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00e      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a53      	ldr	r2, [pc, #332]	; (8001978 <HAL_DMA_Init+0x1ec>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a51      	ldr	r2, [pc, #324]	; (800197c <HAL_DMA_Init+0x1f0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a50      	ldr	r2, [pc, #320]	; (8001980 <HAL_DMA_Init+0x1f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Init+0xbc>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_DMA_Init+0xbe>
 8001848:	2300      	movs	r3, #0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 813c 	beq.w	8001ac8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_DMA_Init+0x1b8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a36      	ldr	r2, [pc, #216]	; (8001948 <HAL_DMA_Init+0x1bc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d045      	beq.n	8001900 <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <HAL_DMA_Init+0x1c0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d040      	beq.n	8001900 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_DMA_Init+0x1c4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d03b      	beq.n	8001900 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a31      	ldr	r2, [pc, #196]	; (8001954 <HAL_DMA_Init+0x1c8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d036      	beq.n	8001900 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_DMA_Init+0x1cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d031      	beq.n	8001900 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2e      	ldr	r2, [pc, #184]	; (800195c <HAL_DMA_Init+0x1d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <HAL_DMA_Init+0x1d4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_DMA_Init+0x1d8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d022      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_DMA_Init+0x1dc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01d      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_DMA_Init+0x1e0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_DMA_Init+0x1e4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a25      	ldr	r2, [pc, #148]	; (8001974 <HAL_DMA_Init+0x1e8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_DMA_Init+0x1ec>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_DMA_Init+0x1f0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_DMA_Init+0x1f4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d108      	bne.n	8001912 <HAL_DMA_Init+0x186>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e007      	b.n	8001922 <HAL_DMA_Init+0x196>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001922:	e02f      	b.n	8001984 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001924:	f7ff fe16 	bl	8001554 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b05      	cmp	r3, #5
 8001930:	d928      	bls.n	8001984 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2203      	movs	r2, #3
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e244      	b.n	8001dce <HAL_DMA_Init+0x642>
 8001944:	40020010 	.word	0x40020010
 8001948:	40020028 	.word	0x40020028
 800194c:	40020040 	.word	0x40020040
 8001950:	40020058 	.word	0x40020058
 8001954:	40020070 	.word	0x40020070
 8001958:	40020088 	.word	0x40020088
 800195c:	400200a0 	.word	0x400200a0
 8001960:	400200b8 	.word	0x400200b8
 8001964:	40020410 	.word	0x40020410
 8001968:	40020428 	.word	0x40020428
 800196c:	40020440 	.word	0x40020440
 8001970:	40020458 	.word	0x40020458
 8001974:	40020470 	.word	0x40020470
 8001978:	40020488 	.word	0x40020488
 800197c:	400204a0 	.word	0x400204a0
 8001980:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1c8      	bne.n	8001924 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4b84      	ldr	r3, [pc, #528]	; (8001bb0 <HAL_DMA_Init+0x424>)
 800199e:	4013      	ands	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d107      	bne.n	80019e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4313      	orrs	r3, r2
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b28      	cmp	r3, #40	; 0x28
 80019ee:	d903      	bls.n	80019f8 <HAL_DMA_Init+0x26c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b2e      	cmp	r3, #46	; 0x2e
 80019f6:	d91f      	bls.n	8001a38 <HAL_DMA_Init+0x2ac>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b3e      	cmp	r3, #62	; 0x3e
 80019fe:	d903      	bls.n	8001a08 <HAL_DMA_Init+0x27c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b42      	cmp	r3, #66	; 0x42
 8001a06:	d917      	bls.n	8001a38 <HAL_DMA_Init+0x2ac>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b46      	cmp	r3, #70	; 0x46
 8001a0e:	d903      	bls.n	8001a18 <HAL_DMA_Init+0x28c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b48      	cmp	r3, #72	; 0x48
 8001a16:	d90f      	bls.n	8001a38 <HAL_DMA_Init+0x2ac>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b4e      	cmp	r3, #78	; 0x4e
 8001a1e:	d903      	bls.n	8001a28 <HAL_DMA_Init+0x29c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b52      	cmp	r3, #82	; 0x52
 8001a26:	d907      	bls.n	8001a38 <HAL_DMA_Init+0x2ac>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b73      	cmp	r3, #115	; 0x73
 8001a2e:	d905      	bls.n	8001a3c <HAL_DMA_Init+0x2b0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b77      	cmp	r3, #119	; 0x77
 8001a36:	d801      	bhi.n	8001a3c <HAL_DMA_Init+0x2b0>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_DMA_Init+0x2b2>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a48:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f023 0307 	bic.w	r3, r3, #7
 8001a60:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d117      	bne.n	8001aa4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00e      	beq.n	8001aa4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f001 ff1a 	bl	80038c0 <DMA_CheckFifoParam>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e194      	b.n	8001dce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f001 fe55 	bl	800375c <DMA_CalcBaseAndBitshift>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	223f      	movs	r2, #63	; 0x3f
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	e0ca      	b.n	8001c5e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a39      	ldr	r2, [pc, #228]	; (8001bb4 <HAL_DMA_Init+0x428>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d022      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <HAL_DMA_Init+0x42c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d01d      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <HAL_DMA_Init+0x430>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d018      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a35      	ldr	r2, [pc, #212]	; (8001bc0 <HAL_DMA_Init+0x434>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <HAL_DMA_Init+0x438>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_DMA_Init+0x43c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <HAL_DMA_Init+0x440>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_DMA_Init+0x38c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <HAL_DMA_Init+0x444>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_DMA_Init+0x390>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_DMA_Init+0x392>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8094 	beq.w	8001c4c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_DMA_Init+0x428>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d021      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <HAL_DMA_Init+0x42c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d01c      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_DMA_Init+0x430>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d017      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_DMA_Init+0x434>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d012      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_DMA_Init+0x438>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_DMA_Init+0x43c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d008      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_DMA_Init+0x440>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d003      	beq.n	8001b72 <HAL_DMA_Init+0x3e6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <HAL_DMA_Init+0x444>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_DMA_Init+0x448>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b40      	cmp	r3, #64	; 0x40
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_DMA_Init+0x44c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b80      	cmp	r3, #128	; 0x80
 8001ba2:	d102      	bne.n	8001baa <HAL_DMA_Init+0x41e>
 8001ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ba8:	e017      	b.n	8001bda <HAL_DMA_Init+0x44e>
 8001baa:	2300      	movs	r3, #0
 8001bac:	e015      	b.n	8001bda <HAL_DMA_Init+0x44e>
 8001bae:	bf00      	nop
 8001bb0:	fe10803f 	.word	0xfe10803f
 8001bb4:	58025408 	.word	0x58025408
 8001bb8:	5802541c 	.word	0x5802541c
 8001bbc:	58025430 	.word	0x58025430
 8001bc0:	58025444 	.word	0x58025444
 8001bc4:	58025458 	.word	0x58025458
 8001bc8:	5802546c 	.word	0x5802546c
 8001bcc:	58025480 	.word	0x58025480
 8001bd0:	58025494 	.word	0x58025494
 8001bd4:	fffe000f 	.word	0xfffe000f
 8001bd8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c08:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b6e      	ldr	r3, [pc, #440]	; (8001dd8 <HAL_DMA_Init+0x64c>)
 8001c20:	4413      	add	r3, r2
 8001c22:	4a6e      	ldr	r2, [pc, #440]	; (8001ddc <HAL_DMA_Init+0x650>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	009a      	lsls	r2, r3, #2
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f001 fd93 	bl	800375c <DMA_CalcBaseAndBitshift>
 8001c36:	4603      	mov	r3, r0
 8001c38:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2201      	movs	r2, #1
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	e008      	b.n	8001c5e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0b7      	b.n	8001dce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5f      	ldr	r2, [pc, #380]	; (8001de0 <HAL_DMA_Init+0x654>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d072      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a5d      	ldr	r2, [pc, #372]	; (8001de4 <HAL_DMA_Init+0x658>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d06d      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a5c      	ldr	r2, [pc, #368]	; (8001de8 <HAL_DMA_Init+0x65c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d068      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_DMA_Init+0x660>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d063      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a59      	ldr	r2, [pc, #356]	; (8001df0 <HAL_DMA_Init+0x664>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05e      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a57      	ldr	r2, [pc, #348]	; (8001df4 <HAL_DMA_Init+0x668>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d059      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_DMA_Init+0x66c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d054      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	; (8001dfc <HAL_DMA_Init+0x670>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d04f      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_DMA_Init+0x674>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d04a      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_DMA_Init+0x678>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d045      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <HAL_DMA_Init+0x67c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d040      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a4e      	ldr	r2, [pc, #312]	; (8001e0c <HAL_DMA_Init+0x680>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d03b      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4d      	ldr	r2, [pc, #308]	; (8001e10 <HAL_DMA_Init+0x684>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d036      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <HAL_DMA_Init+0x688>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <HAL_DMA_Init+0x68c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d02c      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_DMA_Init+0x690>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d027      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a47      	ldr	r2, [pc, #284]	; (8001e20 <HAL_DMA_Init+0x694>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <HAL_DMA_Init+0x698>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01d      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <HAL_DMA_Init+0x69c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d018      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a42      	ldr	r2, [pc, #264]	; (8001e2c <HAL_DMA_Init+0x6a0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a41      	ldr	r2, [pc, #260]	; (8001e30 <HAL_DMA_Init+0x6a4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a3f      	ldr	r2, [pc, #252]	; (8001e34 <HAL_DMA_Init+0x6a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <HAL_DMA_Init+0x6ac>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Init+0x5c2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3c      	ldr	r2, [pc, #240]	; (8001e3c <HAL_DMA_Init+0x6b0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_Init+0x5c8>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d032      	beq.n	8001dbe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 fe2d 	bl	80039b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b80      	cmp	r3, #128	; 0x80
 8001d64:	d102      	bne.n	8001d6c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d010      	beq.n	8001dac <HAL_DMA_Init+0x620>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d80c      	bhi.n	8001dac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f001 feaa 	bl	8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	e008      	b.n	8001dbe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	a7fdabf8 	.word	0xa7fdabf8
 8001ddc:	cccccccd 	.word	0xcccccccd
 8001de0:	40020010 	.word	0x40020010
 8001de4:	40020028 	.word	0x40020028
 8001de8:	40020040 	.word	0x40020040
 8001dec:	40020058 	.word	0x40020058
 8001df0:	40020070 	.word	0x40020070
 8001df4:	40020088 	.word	0x40020088
 8001df8:	400200a0 	.word	0x400200a0
 8001dfc:	400200b8 	.word	0x400200b8
 8001e00:	40020410 	.word	0x40020410
 8001e04:	40020428 	.word	0x40020428
 8001e08:	40020440 	.word	0x40020440
 8001e0c:	40020458 	.word	0x40020458
 8001e10:	40020470 	.word	0x40020470
 8001e14:	40020488 	.word	0x40020488
 8001e18:	400204a0 	.word	0x400204a0
 8001e1c:	400204b8 	.word	0x400204b8
 8001e20:	58025408 	.word	0x58025408
 8001e24:	5802541c 	.word	0x5802541c
 8001e28:	58025430 	.word	0x58025430
 8001e2c:	58025444 	.word	0x58025444
 8001e30:	58025458 	.word	0x58025458
 8001e34:	5802546c 	.word	0x5802546c
 8001e38:	58025480 	.word	0x58025480
 8001e3c:	58025494 	.word	0x58025494

08001e40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff fb84 	bl	8001554 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e2dc      	b.n	8002412 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d008      	beq.n	8001e76 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e2cd      	b.n	8002412 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a76      	ldr	r2, [pc, #472]	; (8002054 <HAL_DMA_Abort+0x214>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04a      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a74      	ldr	r2, [pc, #464]	; (8002058 <HAL_DMA_Abort+0x218>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d045      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a73      	ldr	r2, [pc, #460]	; (800205c <HAL_DMA_Abort+0x21c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_DMA_Abort+0x220>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03b      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a70      	ldr	r2, [pc, #448]	; (8002064 <HAL_DMA_Abort+0x224>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d036      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_DMA_Abort+0x228>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6d      	ldr	r2, [pc, #436]	; (800206c <HAL_DMA_Abort+0x22c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02c      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6b      	ldr	r2, [pc, #428]	; (8002070 <HAL_DMA_Abort+0x230>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d027      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <HAL_DMA_Abort+0x234>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a68      	ldr	r2, [pc, #416]	; (8002078 <HAL_DMA_Abort+0x238>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a67      	ldr	r2, [pc, #412]	; (800207c <HAL_DMA_Abort+0x23c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a65      	ldr	r2, [pc, #404]	; (8002080 <HAL_DMA_Abort+0x240>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a64      	ldr	r2, [pc, #400]	; (8002084 <HAL_DMA_Abort+0x244>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a62      	ldr	r2, [pc, #392]	; (8002088 <HAL_DMA_Abort+0x248>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a61      	ldr	r2, [pc, #388]	; (800208c <HAL_DMA_Abort+0x24c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort+0xd6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <HAL_DMA_Abort+0x250>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Abort+0xda>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_Abort+0xdc>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 021e 	bic.w	r2, r2, #30
 8001f2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e00a      	b.n	8001f5e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 020e 	bic.w	r2, r2, #14
 8001f56:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a3c      	ldr	r2, [pc, #240]	; (8002054 <HAL_DMA_Abort+0x214>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d072      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_DMA_Abort+0x218>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d06d      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a39      	ldr	r2, [pc, #228]	; (800205c <HAL_DMA_Abort+0x21c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d068      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a37      	ldr	r2, [pc, #220]	; (8002060 <HAL_DMA_Abort+0x220>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d063      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a36      	ldr	r2, [pc, #216]	; (8002064 <HAL_DMA_Abort+0x224>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d05e      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_DMA_Abort+0x228>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d059      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_DMA_Abort+0x22c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d054      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a31      	ldr	r2, [pc, #196]	; (8002070 <HAL_DMA_Abort+0x230>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d04f      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a30      	ldr	r2, [pc, #192]	; (8002074 <HAL_DMA_Abort+0x234>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04a      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <HAL_DMA_Abort+0x238>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d045      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_DMA_Abort+0x23c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d040      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <HAL_DMA_Abort+0x240>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d03b      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2a      	ldr	r2, [pc, #168]	; (8002084 <HAL_DMA_Abort+0x244>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d036      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_DMA_Abort+0x248>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a27      	ldr	r2, [pc, #156]	; (800208c <HAL_DMA_Abort+0x24c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d02c      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_DMA_Abort+0x250>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d027      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_DMA_Abort+0x254>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_DMA_Abort+0x258>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01d      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_DMA_Abort+0x25c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d018      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_DMA_Abort+0x260>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_DMA_Abort+0x264>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_DMA_Abort+0x268>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_DMA_Abort+0x26c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_DMA_Abort+0x20e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_DMA_Abort+0x270>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d132      	bne.n	80020b4 <HAL_DMA_Abort+0x274>
 800204e:	2301      	movs	r3, #1
 8002050:	e031      	b.n	80020b6 <HAL_DMA_Abort+0x276>
 8002052:	bf00      	nop
 8002054:	40020010 	.word	0x40020010
 8002058:	40020028 	.word	0x40020028
 800205c:	40020040 	.word	0x40020040
 8002060:	40020058 	.word	0x40020058
 8002064:	40020070 	.word	0x40020070
 8002068:	40020088 	.word	0x40020088
 800206c:	400200a0 	.word	0x400200a0
 8002070:	400200b8 	.word	0x400200b8
 8002074:	40020410 	.word	0x40020410
 8002078:	40020428 	.word	0x40020428
 800207c:	40020440 	.word	0x40020440
 8002080:	40020458 	.word	0x40020458
 8002084:	40020470 	.word	0x40020470
 8002088:	40020488 	.word	0x40020488
 800208c:	400204a0 	.word	0x400204a0
 8002090:	400204b8 	.word	0x400204b8
 8002094:	58025408 	.word	0x58025408
 8002098:	5802541c 	.word	0x5802541c
 800209c:	58025430 	.word	0x58025430
 80020a0:	58025444 	.word	0x58025444
 80020a4:	58025458 	.word	0x58025458
 80020a8:	5802546c 	.word	0x5802546c
 80020ac:	58025480 	.word	0x58025480
 80020b0:	58025494 	.word	0x58025494
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <HAL_DMA_Abort+0x444>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04a      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6b      	ldr	r2, [pc, #428]	; (8002288 <HAL_DMA_Abort+0x448>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d045      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_DMA_Abort+0x44c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d040      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a68      	ldr	r2, [pc, #416]	; (8002290 <HAL_DMA_Abort+0x450>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d03b      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_DMA_Abort+0x454>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d036      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_DMA_Abort+0x458>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d031      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a64      	ldr	r2, [pc, #400]	; (800229c <HAL_DMA_Abort+0x45c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d02c      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a62      	ldr	r2, [pc, #392]	; (80022a0 <HAL_DMA_Abort+0x460>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d027      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a61      	ldr	r2, [pc, #388]	; (80022a4 <HAL_DMA_Abort+0x464>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_DMA_Abort+0x468>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01d      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5e      	ldr	r2, [pc, #376]	; (80022ac <HAL_DMA_Abort+0x46c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d018      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5c      	ldr	r2, [pc, #368]	; (80022b0 <HAL_DMA_Abort+0x470>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a5b      	ldr	r2, [pc, #364]	; (80022b4 <HAL_DMA_Abort+0x474>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00e      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a59      	ldr	r2, [pc, #356]	; (80022b8 <HAL_DMA_Abort+0x478>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a58      	ldr	r2, [pc, #352]	; (80022bc <HAL_DMA_Abort+0x47c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_DMA_Abort+0x32a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_DMA_Abort+0x480>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <HAL_DMA_Abort+0x33c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e007      	b.n	800218c <HAL_DMA_Abort+0x34c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800218c:	e013      	b.n	80021b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218e:	f7ff f9e1 	bl	8001554 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b05      	cmp	r3, #5
 800219a:	d90c      	bls.n	80021b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e12d      	b.n	8002412 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e5      	bne.n	800218e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_DMA_Abort+0x444>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d04a      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_DMA_Abort+0x448>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d045      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2c      	ldr	r2, [pc, #176]	; (800228c <HAL_DMA_Abort+0x44c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d040      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_DMA_Abort+0x450>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d03b      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a29      	ldr	r2, [pc, #164]	; (8002294 <HAL_DMA_Abort+0x454>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d036      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_DMA_Abort+0x458>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d031      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a26      	ldr	r2, [pc, #152]	; (800229c <HAL_DMA_Abort+0x45c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d02c      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_DMA_Abort+0x460>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d027      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_DMA_Abort+0x464>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d022      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <HAL_DMA_Abort+0x468>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01d      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_DMA_Abort+0x46c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d018      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_DMA_Abort+0x470>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_DMA_Abort+0x474>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_DMA_Abort+0x478>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_DMA_Abort+0x47c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d004      	beq.n	8002262 <HAL_DMA_Abort+0x422>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_DMA_Abort+0x480>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <HAL_DMA_Abort+0x426>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_DMA_Abort+0x428>
 8002266:	2300      	movs	r3, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02b      	beq.n	80022c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	223f      	movs	r2, #63	; 0x3f
 800227c:	409a      	lsls	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	e02a      	b.n	80022da <HAL_DMA_Abort+0x49a>
 8002284:	40020010 	.word	0x40020010
 8002288:	40020028 	.word	0x40020028
 800228c:	40020040 	.word	0x40020040
 8002290:	40020058 	.word	0x40020058
 8002294:	40020070 	.word	0x40020070
 8002298:	40020088 	.word	0x40020088
 800229c:	400200a0 	.word	0x400200a0
 80022a0:	400200b8 	.word	0x400200b8
 80022a4:	40020410 	.word	0x40020410
 80022a8:	40020428 	.word	0x40020428
 80022ac:	40020440 	.word	0x40020440
 80022b0:	40020458 	.word	0x40020458
 80022b4:	40020470 	.word	0x40020470
 80022b8:	40020488 	.word	0x40020488
 80022bc:	400204a0 	.word	0x400204a0
 80022c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	2201      	movs	r2, #1
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a4f      	ldr	r2, [pc, #316]	; (800241c <HAL_DMA_Abort+0x5dc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d072      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a4d      	ldr	r2, [pc, #308]	; (8002420 <HAL_DMA_Abort+0x5e0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d06d      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_DMA_Abort+0x5e4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d068      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4a      	ldr	r2, [pc, #296]	; (8002428 <HAL_DMA_Abort+0x5e8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d063      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a49      	ldr	r2, [pc, #292]	; (800242c <HAL_DMA_Abort+0x5ec>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d05e      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_DMA_Abort+0x5f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d059      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a46      	ldr	r2, [pc, #280]	; (8002434 <HAL_DMA_Abort+0x5f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d054      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a44      	ldr	r2, [pc, #272]	; (8002438 <HAL_DMA_Abort+0x5f8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04f      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a43      	ldr	r2, [pc, #268]	; (800243c <HAL_DMA_Abort+0x5fc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d04a      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a41      	ldr	r2, [pc, #260]	; (8002440 <HAL_DMA_Abort+0x600>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d045      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_DMA_Abort+0x604>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d040      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <HAL_DMA_Abort+0x608>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d03b      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a3d      	ldr	r2, [pc, #244]	; (800244c <HAL_DMA_Abort+0x60c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d036      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <HAL_DMA_Abort+0x610>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d031      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_DMA_Abort+0x614>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d02c      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a38      	ldr	r2, [pc, #224]	; (8002458 <HAL_DMA_Abort+0x618>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d027      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a37      	ldr	r2, [pc, #220]	; (800245c <HAL_DMA_Abort+0x61c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d022      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a35      	ldr	r2, [pc, #212]	; (8002460 <HAL_DMA_Abort+0x620>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01d      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_DMA_Abort+0x624>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d018      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a32      	ldr	r2, [pc, #200]	; (8002468 <HAL_DMA_Abort+0x628>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_DMA_Abort+0x62c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00e      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <HAL_DMA_Abort+0x630>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2e      	ldr	r2, [pc, #184]	; (8002474 <HAL_DMA_Abort+0x634>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_DMA_Abort+0x58a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2c      	ldr	r2, [pc, #176]	; (8002478 <HAL_DMA_Abort+0x638>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_DMA_Abort+0x58e>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_DMA_Abort+0x590>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
 800245c:	58025408 	.word	0x58025408
 8002460:	5802541c 	.word	0x5802541c
 8002464:	58025430 	.word	0x58025430
 8002468:	58025444 	.word	0x58025444
 800246c:	58025458 	.word	0x58025458
 8002470:	5802546c 	.word	0x5802546c
 8002474:	58025480 	.word	0x58025480
 8002478:	58025494 	.word	0x58025494

0800247c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e237      	b.n	80028fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d004      	beq.n	80024a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e22c      	b.n	80028fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_DMA_Abort_IT+0x1a0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d04a      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5b      	ldr	r2, [pc, #364]	; (8002620 <HAL_DMA_Abort_IT+0x1a4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d045      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a59      	ldr	r2, [pc, #356]	; (8002624 <HAL_DMA_Abort_IT+0x1a8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d040      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_DMA_Abort_IT+0x1ac>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d03b      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_DMA_Abort_IT+0x1b0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d036      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_DMA_Abort_IT+0x1b4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d031      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_DMA_Abort_IT+0x1b8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d02c      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_DMA_Abort_IT+0x1bc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d027      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_DMA_Abort_IT+0x1c0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d022      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a4f      	ldr	r2, [pc, #316]	; (8002640 <HAL_DMA_Abort_IT+0x1c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d01d      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4d      	ldr	r2, [pc, #308]	; (8002644 <HAL_DMA_Abort_IT+0x1c8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d018      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <HAL_DMA_Abort_IT+0x1cc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4a      	ldr	r2, [pc, #296]	; (800264c <HAL_DMA_Abort_IT+0x1d0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00e      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a49      	ldr	r2, [pc, #292]	; (8002650 <HAL_DMA_Abort_IT+0x1d4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_DMA_Abort_IT+0x1d8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_DMA_Abort_IT+0xc8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a46      	ldr	r2, [pc, #280]	; (8002658 <HAL_DMA_Abort_IT+0x1dc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Abort_IT+0xcc>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_DMA_Abort_IT+0xce>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8086 	beq.w	800265c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2204      	movs	r2, #4
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2f      	ldr	r2, [pc, #188]	; (800261c <HAL_DMA_Abort_IT+0x1a0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04a      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2e      	ldr	r2, [pc, #184]	; (8002620 <HAL_DMA_Abort_IT+0x1a4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d045      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <HAL_DMA_Abort_IT+0x1a8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d040      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <HAL_DMA_Abort_IT+0x1ac>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d03b      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a29      	ldr	r2, [pc, #164]	; (800262c <HAL_DMA_Abort_IT+0x1b0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d036      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a28      	ldr	r2, [pc, #160]	; (8002630 <HAL_DMA_Abort_IT+0x1b4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d031      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <HAL_DMA_Abort_IT+0x1b8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02c      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <HAL_DMA_Abort_IT+0x1bc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d027      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_DMA_Abort_IT+0x1c0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d022      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_DMA_Abort_IT+0x1c4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01d      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <HAL_DMA_Abort_IT+0x1c8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d018      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_DMA_Abort_IT+0x1cc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_DMA_Abort_IT+0x1d0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00e      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_DMA_Abort_IT+0x1d4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_DMA_Abort_IT+0x1d8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x17c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_DMA_Abort_IT+0x1dc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <HAL_DMA_Abort_IT+0x18e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e178      	b.n	80028fc <HAL_DMA_Abort_IT+0x480>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e16f      	b.n	80028fc <HAL_DMA_Abort_IT+0x480>
 800261c:	40020010 	.word	0x40020010
 8002620:	40020028 	.word	0x40020028
 8002624:	40020040 	.word	0x40020040
 8002628:	40020058 	.word	0x40020058
 800262c:	40020070 	.word	0x40020070
 8002630:	40020088 	.word	0x40020088
 8002634:	400200a0 	.word	0x400200a0
 8002638:	400200b8 	.word	0x400200b8
 800263c:	40020410 	.word	0x40020410
 8002640:	40020428 	.word	0x40020428
 8002644:	40020440 	.word	0x40020440
 8002648:	40020458 	.word	0x40020458
 800264c:	40020470 	.word	0x40020470
 8002650:	40020488 	.word	0x40020488
 8002654:	400204a0 	.word	0x400204a0
 8002658:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020e 	bic.w	r2, r2, #14
 800266a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <HAL_DMA_Abort_IT+0x3a8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d04a      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6b      	ldr	r2, [pc, #428]	; (8002828 <HAL_DMA_Abort_IT+0x3ac>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d045      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a69      	ldr	r2, [pc, #420]	; (800282c <HAL_DMA_Abort_IT+0x3b0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d040      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a68      	ldr	r2, [pc, #416]	; (8002830 <HAL_DMA_Abort_IT+0x3b4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d03b      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a66      	ldr	r2, [pc, #408]	; (8002834 <HAL_DMA_Abort_IT+0x3b8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d036      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_DMA_Abort_IT+0x3bc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d031      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a63      	ldr	r2, [pc, #396]	; (800283c <HAL_DMA_Abort_IT+0x3c0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02c      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a62      	ldr	r2, [pc, #392]	; (8002840 <HAL_DMA_Abort_IT+0x3c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d027      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a60      	ldr	r2, [pc, #384]	; (8002844 <HAL_DMA_Abort_IT+0x3c8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d022      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5f      	ldr	r2, [pc, #380]	; (8002848 <HAL_DMA_Abort_IT+0x3cc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d01d      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5d      	ldr	r2, [pc, #372]	; (800284c <HAL_DMA_Abort_IT+0x3d0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d018      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a5c      	ldr	r2, [pc, #368]	; (8002850 <HAL_DMA_Abort_IT+0x3d4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d013      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5a      	ldr	r2, [pc, #360]	; (8002854 <HAL_DMA_Abort_IT+0x3d8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00e      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a59      	ldr	r2, [pc, #356]	; (8002858 <HAL_DMA_Abort_IT+0x3dc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d009      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a57      	ldr	r2, [pc, #348]	; (800285c <HAL_DMA_Abort_IT+0x3e0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_DMA_Abort_IT+0x290>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a56      	ldr	r2, [pc, #344]	; (8002860 <HAL_DMA_Abort_IT+0x3e4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <HAL_DMA_Abort_IT+0x2a2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e007      	b.n	800272e <HAL_DMA_Abort_IT+0x2b2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3c      	ldr	r2, [pc, #240]	; (8002824 <HAL_DMA_Abort_IT+0x3a8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d072      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3a      	ldr	r2, [pc, #232]	; (8002828 <HAL_DMA_Abort_IT+0x3ac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d06d      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a39      	ldr	r2, [pc, #228]	; (800282c <HAL_DMA_Abort_IT+0x3b0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d068      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a37      	ldr	r2, [pc, #220]	; (8002830 <HAL_DMA_Abort_IT+0x3b4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d063      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a36      	ldr	r2, [pc, #216]	; (8002834 <HAL_DMA_Abort_IT+0x3b8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d05e      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a34      	ldr	r2, [pc, #208]	; (8002838 <HAL_DMA_Abort_IT+0x3bc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d059      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a33      	ldr	r2, [pc, #204]	; (800283c <HAL_DMA_Abort_IT+0x3c0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d054      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a31      	ldr	r2, [pc, #196]	; (8002840 <HAL_DMA_Abort_IT+0x3c4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04f      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <HAL_DMA_Abort_IT+0x3c8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04a      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2e      	ldr	r2, [pc, #184]	; (8002848 <HAL_DMA_Abort_IT+0x3cc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d045      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_DMA_Abort_IT+0x3d0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d040      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <HAL_DMA_Abort_IT+0x3d4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03b      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <HAL_DMA_Abort_IT+0x3d8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d036      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <HAL_DMA_Abort_IT+0x3dc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_DMA_Abort_IT+0x3e0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d02c      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_DMA_Abort_IT+0x3e4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d027      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_DMA_Abort_IT+0x3e8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_DMA_Abort_IT+0x3ec>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01d      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a21      	ldr	r2, [pc, #132]	; (800286c <HAL_DMA_Abort_IT+0x3f0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <HAL_DMA_Abort_IT+0x3f4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_DMA_Abort_IT+0x3f8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_DMA_Abort_IT+0x3fc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1b      	ldr	r2, [pc, #108]	; (800287c <HAL_DMA_Abort_IT+0x400>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort_IT+0x3a2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_DMA_Abort_IT+0x404>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d132      	bne.n	8002884 <HAL_DMA_Abort_IT+0x408>
 800281e:	2301      	movs	r3, #1
 8002820:	e031      	b.n	8002886 <HAL_DMA_Abort_IT+0x40a>
 8002822:	bf00      	nop
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	40020040 	.word	0x40020040
 8002830:	40020058 	.word	0x40020058
 8002834:	40020070 	.word	0x40020070
 8002838:	40020088 	.word	0x40020088
 800283c:	400200a0 	.word	0x400200a0
 8002840:	400200b8 	.word	0x400200b8
 8002844:	40020410 	.word	0x40020410
 8002848:	40020428 	.word	0x40020428
 800284c:	40020440 	.word	0x40020440
 8002850:	40020458 	.word	0x40020458
 8002854:	40020470 	.word	0x40020470
 8002858:	40020488 	.word	0x40020488
 800285c:	400204a0 	.word	0x400204a0
 8002860:	400204b8 	.word	0x400204b8
 8002864:	58025408 	.word	0x58025408
 8002868:	5802541c 	.word	0x5802541c
 800286c:	58025430 	.word	0x58025430
 8002870:	58025444 	.word	0x58025444
 8002874:	58025458 	.word	0x58025458
 8002878:	5802546c 	.word	0x5802546c
 800287c:	58025480 	.word	0x58025480
 8002880:	58025494 	.word	0x58025494
 8002884:	2300      	movs	r3, #0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d028      	beq.n	80028dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002898:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2201      	movs	r2, #1
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002914:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_DMA_IRQHandler+0x1ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a67      	ldr	r2, [pc, #412]	; (8002ab8 <HAL_DMA_IRQHandler+0x1b0>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <HAL_DMA_IRQHandler+0x1b4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d04a      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5d      	ldr	r2, [pc, #372]	; (8002ac0 <HAL_DMA_IRQHandler+0x1b8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d045      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5c      	ldr	r2, [pc, #368]	; (8002ac4 <HAL_DMA_IRQHandler+0x1bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d040      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_DMA_IRQHandler+0x1c0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d03b      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a59      	ldr	r2, [pc, #356]	; (8002acc <HAL_DMA_IRQHandler+0x1c4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d036      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <HAL_DMA_IRQHandler+0x1c8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d031      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a56      	ldr	r2, [pc, #344]	; (8002ad4 <HAL_DMA_IRQHandler+0x1cc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02c      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a54      	ldr	r2, [pc, #336]	; (8002ad8 <HAL_DMA_IRQHandler+0x1d0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d027      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a53      	ldr	r2, [pc, #332]	; (8002adc <HAL_DMA_IRQHandler+0x1d4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_DMA_IRQHandler+0x1d8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_DMA_IRQHandler+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4e      	ldr	r2, [pc, #312]	; (8002ae8 <HAL_DMA_IRQHandler+0x1e0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a4d      	ldr	r2, [pc, #308]	; (8002aec <HAL_DMA_IRQHandler+0x1e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a4b      	ldr	r2, [pc, #300]	; (8002af0 <HAL_DMA_IRQHandler+0x1e8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_DMA_IRQHandler+0x1ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_IRQHandler+0xd2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a48      	ldr	r2, [pc, #288]	; (8002af8 <HAL_DMA_IRQHandler+0x1f0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_DMA_IRQHandler+0xd6>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0xd8>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 842b 	beq.w	800323c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	2208      	movs	r2, #8
 80029f0:	409a      	lsls	r2, r3
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80a2 	beq.w	8002b40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_DMA_IRQHandler+0x1b4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d04a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <HAL_DMA_IRQHandler+0x1b8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d045      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2b      	ldr	r2, [pc, #172]	; (8002ac4 <HAL_DMA_IRQHandler+0x1bc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d040      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <HAL_DMA_IRQHandler+0x1c0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d03b      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a28      	ldr	r2, [pc, #160]	; (8002acc <HAL_DMA_IRQHandler+0x1c4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d036      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <HAL_DMA_IRQHandler+0x1c8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <HAL_DMA_IRQHandler+0x1cc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02c      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <HAL_DMA_IRQHandler+0x1d0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d027      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_DMA_IRQHandler+0x1d4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d01d      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_DMA_IRQHandler+0x1dc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d018      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_DMA_IRQHandler+0x1e0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_DMA_IRQHandler+0x1e4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_DMA_IRQHandler+0x1e8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_DMA_IRQHandler+0x1ec>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x194>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_DMA_IRQHandler+0x1f0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d12f      	bne.n	8002afc <HAL_DMA_IRQHandler+0x1f4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e02e      	b.n	8002b10 <HAL_DMA_IRQHandler+0x208>
 8002ab2:	bf00      	nop
 8002ab4:	24000004 	.word	0x24000004
 8002ab8:	1b4e81b5 	.word	0x1b4e81b5
 8002abc:	40020010 	.word	0x40020010
 8002ac0:	40020028 	.word	0x40020028
 8002ac4:	40020040 	.word	0x40020040
 8002ac8:	40020058 	.word	0x40020058
 8002acc:	40020070 	.word	0x40020070
 8002ad0:	40020088 	.word	0x40020088
 8002ad4:	400200a0 	.word	0x400200a0
 8002ad8:	400200b8 	.word	0x400200b8
 8002adc:	40020410 	.word	0x40020410
 8002ae0:	40020428 	.word	0x40020428
 8002ae4:	40020440 	.word	0x40020440
 8002ae8:	40020458 	.word	0x40020458
 8002aec:	40020470 	.word	0x40020470
 8002af0:	40020488 	.word	0x40020488
 8002af4:	400204a0 	.word	0x400204a0
 8002af8:	400204b8 	.word	0x400204b8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0204 	bic.w	r2, r2, #4
 8002b22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d06e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a69      	ldr	r2, [pc, #420]	; (8002d00 <HAL_DMA_IRQHandler+0x3f8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04a      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <HAL_DMA_IRQHandler+0x3fc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d045      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a66      	ldr	r2, [pc, #408]	; (8002d08 <HAL_DMA_IRQHandler+0x400>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <HAL_DMA_IRQHandler+0x404>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a63      	ldr	r2, [pc, #396]	; (8002d10 <HAL_DMA_IRQHandler+0x408>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d036      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a61      	ldr	r2, [pc, #388]	; (8002d14 <HAL_DMA_IRQHandler+0x40c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a60      	ldr	r2, [pc, #384]	; (8002d18 <HAL_DMA_IRQHandler+0x410>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5e      	ldr	r2, [pc, #376]	; (8002d1c <HAL_DMA_IRQHandler+0x414>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_DMA_IRQHandler+0x418>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5b      	ldr	r2, [pc, #364]	; (8002d24 <HAL_DMA_IRQHandler+0x41c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	; (8002d28 <HAL_DMA_IRQHandler+0x420>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_DMA_IRQHandler+0x424>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_DMA_IRQHandler+0x428>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <HAL_DMA_IRQHandler+0x42c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a54      	ldr	r2, [pc, #336]	; (8002d38 <HAL_DMA_IRQHandler+0x430>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x2ee>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_DMA_IRQHandler+0x434>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10a      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x304>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e003      	b.n	8002c14 <HAL_DMA_IRQHandler+0x30c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2201      	movs	r2, #1
 8002c22:	409a      	lsls	r2, r3
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0202 	orr.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 808f 	beq.w	8002d68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2c      	ldr	r2, [pc, #176]	; (8002d00 <HAL_DMA_IRQHandler+0x3f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d04a      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <HAL_DMA_IRQHandler+0x3fc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d045      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_DMA_IRQHandler+0x400>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d040      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <HAL_DMA_IRQHandler+0x404>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d03b      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_DMA_IRQHandler+0x408>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d036      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_DMA_IRQHandler+0x40c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d031      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <HAL_DMA_IRQHandler+0x410>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02c      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <HAL_DMA_IRQHandler+0x414>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d027      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <HAL_DMA_IRQHandler+0x418>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_DMA_IRQHandler+0x41c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01d      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_DMA_IRQHandler+0x420>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <HAL_DMA_IRQHandler+0x424>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_DMA_IRQHandler+0x428>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00e      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <HAL_DMA_IRQHandler+0x42c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_DMA_IRQHandler+0x430>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_IRQHandler+0x3e2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <HAL_DMA_IRQHandler+0x434>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d12a      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x438>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e023      	b.n	8002d48 <HAL_DMA_IRQHandler+0x440>
 8002d00:	40020010 	.word	0x40020010
 8002d04:	40020028 	.word	0x40020028
 8002d08:	40020040 	.word	0x40020040
 8002d0c:	40020058 	.word	0x40020058
 8002d10:	40020070 	.word	0x40020070
 8002d14:	40020088 	.word	0x40020088
 8002d18:	400200a0 	.word	0x400200a0
 8002d1c:	400200b8 	.word	0x400200b8
 8002d20:	40020410 	.word	0x40020410
 8002d24:	40020428 	.word	0x40020428
 8002d28:	40020440 	.word	0x40020440
 8002d2c:	40020458 	.word	0x40020458
 8002d30:	40020470 	.word	0x40020470
 8002d34:	40020488 	.word	0x40020488
 8002d38:	400204a0 	.word	0x400204a0
 8002d3c:	400204b8 	.word	0x400204b8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2204      	movs	r2, #4
 8002d56:	409a      	lsls	r2, r3
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2210      	movs	r2, #16
 8002d72:	409a      	lsls	r2, r3
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80a6 	beq.w	8002eca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a85      	ldr	r2, [pc, #532]	; (8002f98 <HAL_DMA_IRQHandler+0x690>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d04a      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a83      	ldr	r2, [pc, #524]	; (8002f9c <HAL_DMA_IRQHandler+0x694>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d045      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a82      	ldr	r2, [pc, #520]	; (8002fa0 <HAL_DMA_IRQHandler+0x698>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d040      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a80      	ldr	r2, [pc, #512]	; (8002fa4 <HAL_DMA_IRQHandler+0x69c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d03b      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a7f      	ldr	r2, [pc, #508]	; (8002fa8 <HAL_DMA_IRQHandler+0x6a0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d036      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_DMA_IRQHandler+0x6a4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d031      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7c      	ldr	r2, [pc, #496]	; (8002fb0 <HAL_DMA_IRQHandler+0x6a8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d02c      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a7a      	ldr	r2, [pc, #488]	; (8002fb4 <HAL_DMA_IRQHandler+0x6ac>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d027      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a79      	ldr	r2, [pc, #484]	; (8002fb8 <HAL_DMA_IRQHandler+0x6b0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d022      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a77      	ldr	r2, [pc, #476]	; (8002fbc <HAL_DMA_IRQHandler+0x6b4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a76      	ldr	r2, [pc, #472]	; (8002fc0 <HAL_DMA_IRQHandler+0x6b8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d018      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a74      	ldr	r2, [pc, #464]	; (8002fc4 <HAL_DMA_IRQHandler+0x6bc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a73      	ldr	r2, [pc, #460]	; (8002fc8 <HAL_DMA_IRQHandler+0x6c0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a71      	ldr	r2, [pc, #452]	; (8002fcc <HAL_DMA_IRQHandler+0x6c4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d009      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a70      	ldr	r2, [pc, #448]	; (8002fd0 <HAL_DMA_IRQHandler+0x6c8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x516>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_DMA_IRQHandler+0x6cc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10a      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x52c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e009      	b.n	8002e48 <HAL_DMA_IRQHandler+0x540>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf14      	ite	ne
 8002e42:	2301      	movne	r3, #1
 8002e44:	2300      	moveq	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03e      	beq.n	8002eca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2210      	movs	r2, #16
 8002e56:	409a      	lsls	r2, r3
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d108      	bne.n	8002e8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d024      	beq.n	8002eca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	e01f      	b.n	8002eca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01b      	beq.n	8002eca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
 8002e9a:	e016      	b.n	8002eca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d107      	bne.n	8002eba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8110 	beq.w	8003100 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <HAL_DMA_IRQHandler+0x690>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d04a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <HAL_DMA_IRQHandler+0x694>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d045      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <HAL_DMA_IRQHandler+0x698>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d040      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_DMA_IRQHandler+0x69c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d03b      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <HAL_DMA_IRQHandler+0x6a0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d036      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a25      	ldr	r2, [pc, #148]	; (8002fac <HAL_DMA_IRQHandler+0x6a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d031      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_DMA_IRQHandler+0x6a8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02c      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_DMA_IRQHandler+0x6ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d027      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <HAL_DMA_IRQHandler+0x6b0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d022      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <HAL_DMA_IRQHandler+0x6b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d01d      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <HAL_DMA_IRQHandler+0x6b8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d018      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_DMA_IRQHandler+0x6bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <HAL_DMA_IRQHandler+0x6c0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <HAL_DMA_IRQHandler+0x6c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <HAL_DMA_IRQHandler+0x6c8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x678>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_DMA_IRQHandler+0x6cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d12b      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x6d0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e02a      	b.n	8002fec <HAL_DMA_IRQHandler+0x6e4>
 8002f96:	bf00      	nop
 8002f98:	40020010 	.word	0x40020010
 8002f9c:	40020028 	.word	0x40020028
 8002fa0:	40020040 	.word	0x40020040
 8002fa4:	40020058 	.word	0x40020058
 8002fa8:	40020070 	.word	0x40020070
 8002fac:	40020088 	.word	0x40020088
 8002fb0:	400200a0 	.word	0x400200a0
 8002fb4:	400200b8 	.word	0x400200b8
 8002fb8:	40020410 	.word	0x40020410
 8002fbc:	40020428 	.word	0x40020428
 8002fc0:	40020440 	.word	0x40020440
 8002fc4:	40020458 	.word	0x40020458
 8002fc8:	40020470 	.word	0x40020470
 8002fcc:	40020488 	.word	0x40020488
 8002fd0:	400204a0 	.word	0x400204a0
 8002fd4:	400204b8 	.word	0x400204b8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8087 	beq.w	8003100 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b04      	cmp	r3, #4
 800300c:	d139      	bne.n	8003082 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0216 	bic.w	r2, r2, #22
 800301c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800302c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <HAL_DMA_IRQHandler+0x736>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0208 	bic.w	r2, r2, #8
 800304c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	223f      	movs	r2, #63	; 0x3f
 8003058:	409a      	lsls	r2, r3
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 834a 	beq.w	800370c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
          }
          return;
 8003080:	e344      	b.n	800370c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02c      	beq.n	8003100 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
 80030ae:	e027      	b.n	8003100 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d023      	beq.n	8003100 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
 80030c0:	e01e      	b.n	8003100 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10f      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0210 	bic.w	r2, r2, #16
 80030de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8306 	beq.w	8003716 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8088 	beq.w	8003228 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2204      	movs	r2, #4
 800311c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a7a      	ldr	r2, [pc, #488]	; (8003310 <HAL_DMA_IRQHandler+0xa08>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d04a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a79      	ldr	r2, [pc, #484]	; (8003314 <HAL_DMA_IRQHandler+0xa0c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d045      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a77      	ldr	r2, [pc, #476]	; (8003318 <HAL_DMA_IRQHandler+0xa10>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d040      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a76      	ldr	r2, [pc, #472]	; (800331c <HAL_DMA_IRQHandler+0xa14>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d03b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a74      	ldr	r2, [pc, #464]	; (8003320 <HAL_DMA_IRQHandler+0xa18>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d036      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a73      	ldr	r2, [pc, #460]	; (8003324 <HAL_DMA_IRQHandler+0xa1c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d031      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a71      	ldr	r2, [pc, #452]	; (8003328 <HAL_DMA_IRQHandler+0xa20>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02c      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a70      	ldr	r2, [pc, #448]	; (800332c <HAL_DMA_IRQHandler+0xa24>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d027      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_DMA_IRQHandler+0xa28>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6d      	ldr	r2, [pc, #436]	; (8003334 <HAL_DMA_IRQHandler+0xa2c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01d      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <HAL_DMA_IRQHandler+0xa30>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6a      	ldr	r2, [pc, #424]	; (800333c <HAL_DMA_IRQHandler+0xa34>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a68      	ldr	r2, [pc, #416]	; (8003340 <HAL_DMA_IRQHandler+0xa38>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_DMA_IRQHandler+0xa3c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a65      	ldr	r2, [pc, #404]	; (8003348 <HAL_DMA_IRQHandler+0xa40>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x8b8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a64      	ldr	r2, [pc, #400]	; (800334c <HAL_DMA_IRQHandler+0xa44>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <HAL_DMA_IRQHandler+0x8ca>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e007      	b.n	80031e2 <HAL_DMA_IRQHandler+0x8da>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d307      	bcc.n	80031fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f2      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x8da>
 80031fc:	e000      	b.n	8003200 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003216:	e003      	b.n	8003220 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8272 	beq.w	8003716 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
 800323a:	e26c      	b.n	8003716 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a43      	ldr	r2, [pc, #268]	; (8003350 <HAL_DMA_IRQHandler+0xa48>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d022      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_DMA_IRQHandler+0xa4c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d01d      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a40      	ldr	r2, [pc, #256]	; (8003358 <HAL_DMA_IRQHandler+0xa50>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3f      	ldr	r2, [pc, #252]	; (800335c <HAL_DMA_IRQHandler+0xa54>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a3d      	ldr	r2, [pc, #244]	; (8003360 <HAL_DMA_IRQHandler+0xa58>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00e      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a3c      	ldr	r2, [pc, #240]	; (8003364 <HAL_DMA_IRQHandler+0xa5c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <HAL_DMA_IRQHandler+0xa60>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_DMA_IRQHandler+0x984>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a39      	ldr	r2, [pc, #228]	; (800336c <HAL_DMA_IRQHandler+0xa64>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_DMA_IRQHandler+0x988>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_DMA_IRQHandler+0x98a>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 823f 	beq.w	8003716 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80cd 	beq.w	8003450 <HAL_DMA_IRQHandler+0xb48>
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80c7 	beq.w	8003450 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2204      	movs	r2, #4
 80032cc:	409a      	lsls	r2, r3
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d049      	beq.n	8003370 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8210 	beq.w	8003710 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032f8:	e20a      	b.n	8003710 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8206 	beq.w	8003710 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800330c:	e200      	b.n	8003710 <HAL_DMA_IRQHandler+0xe08>
 800330e:	bf00      	nop
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
 8003350:	58025408 	.word	0x58025408
 8003354:	5802541c 	.word	0x5802541c
 8003358:	58025430 	.word	0x58025430
 800335c:	58025444 	.word	0x58025444
 8003360:	58025458 	.word	0x58025458
 8003364:	5802546c 	.word	0x5802546c
 8003368:	58025480 	.word	0x58025480
 800336c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d160      	bne.n	800343c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7f      	ldr	r2, [pc, #508]	; (800357c <HAL_DMA_IRQHandler+0xc74>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d04a      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a7d      	ldr	r2, [pc, #500]	; (8003580 <HAL_DMA_IRQHandler+0xc78>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d045      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7c      	ldr	r2, [pc, #496]	; (8003584 <HAL_DMA_IRQHandler+0xc7c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d040      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <HAL_DMA_IRQHandler+0xc80>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d03b      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a79      	ldr	r2, [pc, #484]	; (800358c <HAL_DMA_IRQHandler+0xc84>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d036      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a77      	ldr	r2, [pc, #476]	; (8003590 <HAL_DMA_IRQHandler+0xc88>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a76      	ldr	r2, [pc, #472]	; (8003594 <HAL_DMA_IRQHandler+0xc8c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d02c      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a74      	ldr	r2, [pc, #464]	; (8003598 <HAL_DMA_IRQHandler+0xc90>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d027      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a73      	ldr	r2, [pc, #460]	; (800359c <HAL_DMA_IRQHandler+0xc94>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d022      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a71      	ldr	r2, [pc, #452]	; (80035a0 <HAL_DMA_IRQHandler+0xc98>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01d      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a70      	ldr	r2, [pc, #448]	; (80035a4 <HAL_DMA_IRQHandler+0xc9c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d018      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_DMA_IRQHandler+0xca0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6d      	ldr	r2, [pc, #436]	; (80035ac <HAL_DMA_IRQHandler+0xca4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6b      	ldr	r2, [pc, #428]	; (80035b0 <HAL_DMA_IRQHandler+0xca8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6a      	ldr	r2, [pc, #424]	; (80035b4 <HAL_DMA_IRQHandler+0xcac>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_DMA_IRQHandler+0xb12>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a68      	ldr	r2, [pc, #416]	; (80035b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d108      	bne.n	800342c <HAL_DMA_IRQHandler+0xb24>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0208 	bic.w	r2, r2, #8
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e007      	b.n	800343c <HAL_DMA_IRQHandler+0xb34>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8165 	beq.w	8003710 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800344e:	e15f      	b.n	8003710 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2202      	movs	r2, #2
 800345a:	409a      	lsls	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80c5 	beq.w	80035f0 <HAL_DMA_IRQHandler+0xce8>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80bf 	beq.w	80035f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2202      	movs	r2, #2
 800347c:	409a      	lsls	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d018      	beq.n	80034be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 813a 	beq.w	8003714 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034a8:	e134      	b.n	8003714 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8130 	beq.w	8003714 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034bc:	e12a      	b.n	8003714 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 8089 	bne.w	80035dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2b      	ldr	r2, [pc, #172]	; (800357c <HAL_DMA_IRQHandler+0xc74>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d04a      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_DMA_IRQHandler+0xc78>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d045      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_DMA_IRQHandler+0xc7c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d040      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a26      	ldr	r2, [pc, #152]	; (8003588 <HAL_DMA_IRQHandler+0xc80>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d03b      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a25      	ldr	r2, [pc, #148]	; (800358c <HAL_DMA_IRQHandler+0xc84>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d036      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	; (8003590 <HAL_DMA_IRQHandler+0xc88>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_DMA_IRQHandler+0xc8c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d02c      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a20      	ldr	r2, [pc, #128]	; (8003598 <HAL_DMA_IRQHandler+0xc90>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d027      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1f      	ldr	r2, [pc, #124]	; (800359c <HAL_DMA_IRQHandler+0xc94>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d022      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <HAL_DMA_IRQHandler+0xc98>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01d      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <HAL_DMA_IRQHandler+0xc9c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d018      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_DMA_IRQHandler+0xca0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a19      	ldr	r2, [pc, #100]	; (80035ac <HAL_DMA_IRQHandler+0xca4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <HAL_DMA_IRQHandler+0xca8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <HAL_DMA_IRQHandler+0xcac>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_DMA_IRQHandler+0xc62>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d128      	bne.n	80035bc <HAL_DMA_IRQHandler+0xcb4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0214 	bic.w	r2, r2, #20
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e027      	b.n	80035cc <HAL_DMA_IRQHandler+0xcc4>
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020040 	.word	0x40020040
 8003588:	40020058 	.word	0x40020058
 800358c:	40020070 	.word	0x40020070
 8003590:	40020088 	.word	0x40020088
 8003594:	400200a0 	.word	0x400200a0
 8003598:	400200b8 	.word	0x400200b8
 800359c:	40020410 	.word	0x40020410
 80035a0:	40020428 	.word	0x40020428
 80035a4:	40020440 	.word	0x40020440
 80035a8:	40020458 	.word	0x40020458
 80035ac:	40020470 	.word	0x40020470
 80035b0:	40020488 	.word	0x40020488
 80035b4:	400204a0 	.word	0x400204a0
 80035b8:	400204b8 	.word	0x400204b8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 020a 	bic.w	r2, r2, #10
 80035ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8097 	beq.w	8003714 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ee:	e091      	b.n	8003714 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2208      	movs	r2, #8
 80035fa:	409a      	lsls	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8088 	beq.w	8003716 <HAL_DMA_IRQHandler+0xe0e>
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8082 	beq.w	8003716 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_DMA_IRQHandler+0xe14>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3f      	ldr	r2, [pc, #252]	; (8003720 <HAL_DMA_IRQHandler+0xe18>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a3e      	ldr	r2, [pc, #248]	; (8003724 <HAL_DMA_IRQHandler+0xe1c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3c      	ldr	r2, [pc, #240]	; (8003728 <HAL_DMA_IRQHandler+0xe20>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <HAL_DMA_IRQHandler+0xe24>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a39      	ldr	r2, [pc, #228]	; (8003730 <HAL_DMA_IRQHandler+0xe28>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a38      	ldr	r2, [pc, #224]	; (8003734 <HAL_DMA_IRQHandler+0xe2c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a36      	ldr	r2, [pc, #216]	; (8003738 <HAL_DMA_IRQHandler+0xe30>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a35      	ldr	r2, [pc, #212]	; (800373c <HAL_DMA_IRQHandler+0xe34>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_DMA_IRQHandler+0xe38>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a32      	ldr	r2, [pc, #200]	; (8003744 <HAL_DMA_IRQHandler+0xe3c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a30      	ldr	r2, [pc, #192]	; (8003748 <HAL_DMA_IRQHandler+0xe40>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2f      	ldr	r2, [pc, #188]	; (800374c <HAL_DMA_IRQHandler+0xe44>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_DMA_IRQHandler+0xe48>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <HAL_DMA_IRQHandler+0xe4c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xdaa>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_DMA_IRQHandler+0xe50>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d108      	bne.n	80036c4 <HAL_DMA_IRQHandler+0xdbc>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 021c 	bic.w	r2, r2, #28
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e007      	b.n	80036d4 <HAL_DMA_IRQHandler+0xdcc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 020e 	bic.w	r2, r2, #14
 80036d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
 800370a:	e004      	b.n	8003716 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800370c:	bf00      	nop
 800370e:	e002      	b.n	8003716 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003714:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40020010 	.word	0x40020010
 8003720:	40020028 	.word	0x40020028
 8003724:	40020040 	.word	0x40020040
 8003728:	40020058 	.word	0x40020058
 800372c:	40020070 	.word	0x40020070
 8003730:	40020088 	.word	0x40020088
 8003734:	400200a0 	.word	0x400200a0
 8003738:	400200b8 	.word	0x400200b8
 800373c:	40020410 	.word	0x40020410
 8003740:	40020428 	.word	0x40020428
 8003744:	40020440 	.word	0x40020440
 8003748:	40020458 	.word	0x40020458
 800374c:	40020470 	.word	0x40020470
 8003750:	40020488 	.word	0x40020488
 8003754:	400204a0 	.word	0x400204a0
 8003758:	400204b8 	.word	0x400204b8

0800375c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a42      	ldr	r2, [pc, #264]	; (8003874 <DMA_CalcBaseAndBitshift+0x118>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d04a      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a41      	ldr	r2, [pc, #260]	; (8003878 <DMA_CalcBaseAndBitshift+0x11c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d045      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3f      	ldr	r2, [pc, #252]	; (800387c <DMA_CalcBaseAndBitshift+0x120>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d040      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3e      	ldr	r2, [pc, #248]	; (8003880 <DMA_CalcBaseAndBitshift+0x124>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d03b      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <DMA_CalcBaseAndBitshift+0x128>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d036      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <DMA_CalcBaseAndBitshift+0x12c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d031      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a39      	ldr	r2, [pc, #228]	; (800388c <DMA_CalcBaseAndBitshift+0x130>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02c      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a38      	ldr	r2, [pc, #224]	; (8003890 <DMA_CalcBaseAndBitshift+0x134>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d027      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a36      	ldr	r2, [pc, #216]	; (8003894 <DMA_CalcBaseAndBitshift+0x138>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d022      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a35      	ldr	r2, [pc, #212]	; (8003898 <DMA_CalcBaseAndBitshift+0x13c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d01d      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a33      	ldr	r2, [pc, #204]	; (800389c <DMA_CalcBaseAndBitshift+0x140>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d018      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a32      	ldr	r2, [pc, #200]	; (80038a0 <DMA_CalcBaseAndBitshift+0x144>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <DMA_CalcBaseAndBitshift+0x148>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00e      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2f      	ldr	r2, [pc, #188]	; (80038a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d009      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	; (80038ac <DMA_CalcBaseAndBitshift+0x150>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <DMA_CalcBaseAndBitshift+0xa8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <DMA_CalcBaseAndBitshift+0x154>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d101      	bne.n	8003808 <DMA_CalcBaseAndBitshift+0xac>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <DMA_CalcBaseAndBitshift+0xae>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d024      	beq.n	8003858 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3b10      	subs	r3, #16
 8003816:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <DMA_CalcBaseAndBitshift+0x158>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003828:	5cd3      	ldrb	r3, [r2, r3]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d908      	bls.n	8003848 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <DMA_CalcBaseAndBitshift+0x160>)
 800383e:	4013      	ands	r3, r2
 8003840:	1d1a      	adds	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
 8003846:	e00d      	b.n	8003864 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <DMA_CalcBaseAndBitshift+0x160>)
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6593      	str	r3, [r2, #88]	; 0x58
 8003856:	e005      	b.n	8003864 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40020010 	.word	0x40020010
 8003878:	40020028 	.word	0x40020028
 800387c:	40020040 	.word	0x40020040
 8003880:	40020058 	.word	0x40020058
 8003884:	40020070 	.word	0x40020070
 8003888:	40020088 	.word	0x40020088
 800388c:	400200a0 	.word	0x400200a0
 8003890:	400200b8 	.word	0x400200b8
 8003894:	40020410 	.word	0x40020410
 8003898:	40020428 	.word	0x40020428
 800389c:	40020440 	.word	0x40020440
 80038a0:	40020458 	.word	0x40020458
 80038a4:	40020470 	.word	0x40020470
 80038a8:	40020488 	.word	0x40020488
 80038ac:	400204a0 	.word	0x400204a0
 80038b0:	400204b8 	.word	0x400204b8
 80038b4:	aaaaaaab 	.word	0xaaaaaaab
 80038b8:	08009d34 	.word	0x08009d34
 80038bc:	fffffc00 	.word	0xfffffc00

080038c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d120      	bne.n	8003916 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d858      	bhi.n	800398e <DMA_CheckFifoParam+0xce>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <DMA_CheckFifoParam+0x24>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003907 	.word	0x08003907
 80038ec:	080038f5 	.word	0x080038f5
 80038f0:	0800398f 	.word	0x0800398f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d048      	beq.n	8003992 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003904:	e045      	b.n	8003992 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800390e:	d142      	bne.n	8003996 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003914:	e03f      	b.n	8003996 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	d123      	bne.n	8003968 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	2b03      	cmp	r3, #3
 8003926:	d838      	bhi.n	800399a <DMA_CheckFifoParam+0xda>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <DMA_CheckFifoParam+0x70>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003941 	.word	0x08003941
 8003934:	08003947 	.word	0x08003947
 8003938:	08003941 	.word	0x08003941
 800393c:	08003959 	.word	0x08003959
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
        break;
 8003944:	e030      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d025      	beq.n	800399e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003956:	e022      	b.n	800399e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003960:	d11f      	bne.n	80039a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003966:	e01c      	b.n	80039a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	2b02      	cmp	r3, #2
 800396e:	d902      	bls.n	8003976 <DMA_CheckFifoParam+0xb6>
 8003970:	2b03      	cmp	r3, #3
 8003972:	d003      	beq.n	800397c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003974:	e018      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
        break;
 800397a:	e015      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00e      	beq.n	80039a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
    break;
 800398c:	e00b      	b.n	80039a6 <DMA_CheckFifoParam+0xe6>
        break;
 800398e:	bf00      	nop
 8003990:	e00a      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        break;
 8003992:	bf00      	nop
 8003994:	e008      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        break;
 8003996:	bf00      	nop
 8003998:	e006      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        break;
 800399a:	bf00      	nop
 800399c:	e004      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
        break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
    break;
 80039a6:	bf00      	nop
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a38      	ldr	r2, [pc, #224]	; (8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d022      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a36      	ldr	r2, [pc, #216]	; (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01d      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d018      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a32      	ldr	r2, [pc, #200]	; (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d009      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01a      	beq.n	8003a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3b08      	subs	r3, #8
 8003a28:	4a28      	ldr	r2, [pc, #160]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a54:	e024      	b.n	8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	3b10      	subs	r3, #16
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d806      	bhi.n	8003a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d902      	bls.n	8003a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2201      	movs	r2, #1
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	58025408 	.word	0x58025408
 8003ab0:	5802541c 	.word	0x5802541c
 8003ab4:	58025430 	.word	0x58025430
 8003ab8:	58025444 	.word	0x58025444
 8003abc:	58025458 	.word	0x58025458
 8003ac0:	5802546c 	.word	0x5802546c
 8003ac4:	58025480 	.word	0x58025480
 8003ac8:	58025494 	.word	0x58025494
 8003acc:	cccccccd 	.word	0xcccccccd
 8003ad0:	16009600 	.word	0x16009600
 8003ad4:	58025880 	.word	0x58025880
 8003ad8:	aaaaaaab 	.word	0xaaaaaaab
 8003adc:	400204b8 	.word	0x400204b8
 8003ae0:	4002040f 	.word	0x4002040f
 8003ae4:	10008200 	.word	0x10008200
 8003ae8:	40020880 	.word	0x40020880

08003aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d04a      	beq.n	8003b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d847      	bhi.n	8003b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a25      	ldr	r2, [pc, #148]	; (8003ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01d      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b74:	671a      	str	r2, [r3, #112]	; 0x70
 8003b76:	e009      	b.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	58025408 	.word	0x58025408
 8003ba8:	5802541c 	.word	0x5802541c
 8003bac:	58025430 	.word	0x58025430
 8003bb0:	58025444 	.word	0x58025444
 8003bb4:	58025458 	.word	0x58025458
 8003bb8:	5802546c 	.word	0x5802546c
 8003bbc:	58025480 	.word	0x58025480
 8003bc0:	58025494 	.word	0x58025494
 8003bc4:	1600963f 	.word	0x1600963f
 8003bc8:	58025940 	.word	0x58025940
 8003bcc:	1000823f 	.word	0x1000823f
 8003bd0:	40020940 	.word	0x40020940

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003be2:	4b86      	ldr	r3, [pc, #536]	; (8003dfc <HAL_GPIO_Init+0x228>)
 8003be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003be6:	e18c      	b.n	8003f02 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2101      	movs	r1, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 817e 	beq.w	8003efc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d005      	beq.n	8003c18 <HAL_GPIO_Init+0x44>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d130      	bne.n	8003c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c4e:	2201      	movs	r2, #1
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0201 	and.w	r2, r3, #1
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d017      	beq.n	8003cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	2203      	movs	r2, #3
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d123      	bne.n	8003d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	08da      	lsrs	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3208      	adds	r2, #8
 8003cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	08da      	lsrs	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3208      	adds	r2, #8
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	2203      	movs	r2, #3
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80d8 	beq.w	8003efc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4c:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <HAL_GPIO_Init+0x22c>)
 8003d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d52:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <HAL_GPIO_Init+0x22c>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_GPIO_Init+0x22c>)
 8003d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_GPIO_Init+0x230>)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3302      	adds	r3, #2
 8003d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_GPIO_Init+0x234>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_GPIO_Init+0x258>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <HAL_GPIO_Init+0x238>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02b      	beq.n	8003df6 <HAL_GPIO_Init+0x222>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <HAL_GPIO_Init+0x23c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d025      	beq.n	8003df2 <HAL_GPIO_Init+0x21e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <HAL_GPIO_Init+0x240>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01f      	beq.n	8003dee <HAL_GPIO_Init+0x21a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_GPIO_Init+0x244>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d019      	beq.n	8003dea <HAL_GPIO_Init+0x216>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_GPIO_Init+0x248>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_GPIO_Init+0x212>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_GPIO_Init+0x24c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00d      	beq.n	8003de2 <HAL_GPIO_Init+0x20e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_GPIO_Init+0x250>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <HAL_GPIO_Init+0x20a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <HAL_GPIO_Init+0x254>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <HAL_GPIO_Init+0x206>
 8003dd6:	2309      	movs	r3, #9
 8003dd8:	e029      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003dda:	230a      	movs	r3, #10
 8003ddc:	e027      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e025      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003de2:	2306      	movs	r3, #6
 8003de4:	e023      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e021      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e01f      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e01d      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e01b      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e019      	b.n	8003e2e <HAL_GPIO_Init+0x25a>
 8003dfa:	bf00      	nop
 8003dfc:	58000080 	.word	0x58000080
 8003e00:	58024400 	.word	0x58024400
 8003e04:	58000400 	.word	0x58000400
 8003e08:	58020000 	.word	0x58020000
 8003e0c:	58020400 	.word	0x58020400
 8003e10:	58020800 	.word	0x58020800
 8003e14:	58020c00 	.word	0x58020c00
 8003e18:	58021000 	.word	0x58021000
 8003e1c:	58021400 	.word	0x58021400
 8003e20:	58021800 	.word	0x58021800
 8003e24:	58021c00 	.word	0x58021c00
 8003e28:	58022400 	.word	0x58022400
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4093      	lsls	r3, r2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3e:	4938      	ldr	r1, [pc, #224]	; (8003f20 <HAL_GPIO_Init+0x34c>)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f ae6b 	bne.w	8003be8 <HAL_GPIO_Init+0x14>
  }
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	3724      	adds	r7, #36	; 0x24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	58000400 	.word	0x58000400

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fb91 	bl	80006a4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_PWREx_ConfigSupply+0x70>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <HAL_PWREx_ConfigSupply+0x70>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d001      	beq.n	8003fb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e01f      	b.n	8003ff2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e01d      	b.n	8003ff2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <HAL_PWREx_ConfigSupply+0x70>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f023 0207 	bic.w	r2, r3, #7
 8003fbe:	490f      	ldr	r1, [pc, #60]	; (8003ffc <HAL_PWREx_ConfigSupply+0x70>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fc6:	f7fd fac5 	bl	8001554 <HAL_GetTick>
 8003fca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fcc:	e009      	b.n	8003fe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fce:	f7fd fac1 	bl	8001554 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fdc:	d901      	bls.n	8003fe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e007      	b.n	8003ff2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_PWREx_ConfigSupply+0x70>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d1ee      	bne.n	8003fce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	58024800 	.word	0x58024800

08004000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e39d      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8087 	beq.w	800412e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004020:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800402a:	4b86      	ldr	r3, [pc, #536]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	2b10      	cmp	r3, #16
 8004034:	d007      	beq.n	8004046 <HAL_RCC_OscConfig+0x46>
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	2b18      	cmp	r3, #24
 800403a:	d110      	bne.n	800405e <HAL_RCC_OscConfig+0x5e>
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d10b      	bne.n	800405e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004046:	4b7f      	ldr	r3, [pc, #508]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d06c      	beq.n	800412c <HAL_RCC_OscConfig+0x12c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d168      	bne.n	800412c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e377      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x76>
 8004068:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a75      	ldr	r2, [pc, #468]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e02e      	b.n	80040d4 <HAL_RCC_OscConfig+0xd4>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x98>
 800407e:	4b71      	ldr	r3, [pc, #452]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a70      	ldr	r2, [pc, #448]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b6e      	ldr	r3, [pc, #440]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6d      	ldr	r2, [pc, #436]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e01d      	b.n	80040d4 <HAL_RCC_OscConfig+0xd4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0xbc>
 80040a2:	4b68      	ldr	r3, [pc, #416]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a67      	ldr	r2, [pc, #412]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a64      	ldr	r2, [pc, #400]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0xd4>
 80040bc:	4b61      	ldr	r3, [pc, #388]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a60      	ldr	r2, [pc, #384]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b5e      	ldr	r3, [pc, #376]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a5d      	ldr	r2, [pc, #372]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fa3a 	bl	8001554 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fa36 	bl	8001554 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e32b      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040f6:	4b53      	ldr	r3, [pc, #332]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe4>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fa26 	bl	8001554 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd fa22 	bl	8001554 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e317      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800411e:	4b49      	ldr	r3, [pc, #292]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x10c>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 808c 	beq.w	8004254 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413c:	4b41      	ldr	r3, [pc, #260]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004146:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_RCC_OscConfig+0x162>
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b18      	cmp	r3, #24
 8004156:	d137      	bne.n	80041c8 <HAL_RCC_OscConfig+0x1c8>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d132      	bne.n	80041c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004162:	4b38      	ldr	r3, [pc, #224]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x17a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e2e9      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800417a:	4b32      	ldr	r3, [pc, #200]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0219 	bic.w	r2, r3, #25
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	492f      	ldr	r1, [pc, #188]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800418c:	f7fd f9e2 	bl	8001554 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd f9de 	bl	8001554 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e2d3      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a6:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	4920      	ldr	r1, [pc, #128]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c6:	e045      	b.n	8004254 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d026      	beq.n	800421e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 0219 	bic.w	r2, r3, #25
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4919      	ldr	r1, [pc, #100]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd f9b7 	bl	8001554 <HAL_GetTick>
 80041e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ea:	f7fd f9b3 	bl	8001554 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e2a8      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	490b      	ldr	r1, [pc, #44]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
 800421c:	e01a      	b.n	8004254 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fd f993 	bl	8001554 <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004232:	f7fd f98f 	bl	8001554 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d903      	bls.n	8004248 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e284      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
 8004244:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004248:	4b96      	ldr	r3, [pc, #600]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ee      	bne.n	8004232 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	d06a      	beq.n	8004336 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004260:	4b90      	ldr	r3, [pc, #576]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004268:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800426a:	4b8e      	ldr	r3, [pc, #568]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d007      	beq.n	8004286 <HAL_RCC_OscConfig+0x286>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b18      	cmp	r3, #24
 800427a:	d11b      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2b4>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d116      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004286:	4b87      	ldr	r3, [pc, #540]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x29e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d001      	beq.n	800429e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e257      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800429e:	4b81      	ldr	r3, [pc, #516]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	061b      	lsls	r3, r3, #24
 80042ac:	497d      	ldr	r1, [pc, #500]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042b2:	e040      	b.n	8004336 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d023      	beq.n	8004304 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a78      	ldr	r2, [pc, #480]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd f944 	bl	8001554 <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042d0:	f7fd f940 	bl	8001554 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e235      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042e2:	4b70      	ldr	r3, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042ee:	4b6d      	ldr	r3, [pc, #436]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	4969      	ldr	r1, [pc, #420]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	60cb      	str	r3, [r1, #12]
 8004302:	e018      	b.n	8004336 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004304:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a66      	ldr	r2, [pc, #408]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800430a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd f920 	bl	8001554 <HAL_GetTick>
 8004314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004318:	f7fd f91c 	bl	8001554 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e211      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800432a:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d036      	beq.n	80043b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d019      	beq.n	800437e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434a:	4b56      	ldr	r3, [pc, #344]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	4a55      	ldr	r2, [pc, #340]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004356:	f7fd f8fd 	bl	8001554 <HAL_GetTick>
 800435a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435e:	f7fd f8f9 	bl	8001554 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1ee      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004370:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x35e>
 800437c:	e018      	b.n	80043b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	4a48      	ldr	r2, [pc, #288]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fd f8e3 	bl	8001554 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004392:	f7fd f8df 	bl	8001554 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1d4      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043a4:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d036      	beq.n	800442a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d019      	beq.n	80043f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043c4:	4b37      	ldr	r3, [pc, #220]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80043ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043d0:	f7fd f8c0 	bl	8001554 <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043d8:	f7fd f8bc 	bl	8001554 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1b1      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x3d8>
 80043f6:	e018      	b.n	800442a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 80043fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004402:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004404:	f7fd f8a6 	bl	8001554 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800440c:	f7fd f8a2 	bl	8001554 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e197      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800441e:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8086 	beq.w	8004544 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x4a8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_RCC_OscConfig+0x4a8>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004444:	f7fd f886 	bl	8001554 <HAL_GetTick>
 8004448:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fd f882 	bl	8001554 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	; 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e177      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_OscConfig+0x4a8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x480>
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e032      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d111      	bne.n	80044ac <HAL_RCC_OscConfig+0x4ac>
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a02      	ldr	r2, [pc, #8]	; (80044a4 <HAL_RCC_OscConfig+0x4a4>)
 800449a:	f023 0304 	bic.w	r3, r3, #4
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e021      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e6>
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	58024800 	.word	0x58024800
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_OscConfig+0x4ce>
 80044b4:	4b83      	ldr	r3, [pc, #524]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a82      	ldr	r2, [pc, #520]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	4b80      	ldr	r3, [pc, #512]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a7f      	ldr	r2, [pc, #508]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
 80044cc:	e00b      	b.n	80044e6 <HAL_RCC_OscConfig+0x4e6>
 80044ce:	4b7d      	ldr	r3, [pc, #500]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a7c      	ldr	r2, [pc, #496]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70
 80044da:	4b7a      	ldr	r3, [pc, #488]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	4a79      	ldr	r2, [pc, #484]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d015      	beq.n	800451a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd f831 	bl	8001554 <HAL_GetTick>
 80044f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fd f82d 	bl	8001554 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e120      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800450c:	4b6d      	ldr	r3, [pc, #436]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ee      	beq.n	80044f6 <HAL_RCC_OscConfig+0x4f6>
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fd f81b 	bl	8001554 <HAL_GetTick>
 800451e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fd f817 	bl	8001554 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e10a      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004538:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ee      	bne.n	8004522 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80ff 	beq.w	800474c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800454e:	4b5d      	ldr	r3, [pc, #372]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004556:	2b18      	cmp	r3, #24
 8004558:	f000 80ba 	beq.w	80046d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b02      	cmp	r3, #2
 8004562:	f040 8095 	bne.w	8004690 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004566:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a56      	ldr	r2, [pc, #344]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800456c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fc ffef 	bl	8001554 <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457a:	f7fc ffeb 	bl	8001554 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e0e0      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800458c:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004598:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800459a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459c:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_RCC_OscConfig+0x6c8>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	430a      	orrs	r2, r1
 80045ac:	4945      	ldr	r1, [pc, #276]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	628b      	str	r3, [r1, #40]	; 0x28
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	3b01      	subs	r3, #1
 80045b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	3b01      	subs	r3, #1
 80045c2:	025b      	lsls	r3, r3, #9
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	3b01      	subs	r3, #1
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	3b01      	subs	r3, #1
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045e2:	4938      	ldr	r1, [pc, #224]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4a35      	ldr	r2, [pc, #212]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045f4:	4b33      	ldr	r3, [pc, #204]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80045f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f8:	4b34      	ldr	r3, [pc, #208]	; (80046cc <HAL_RCC_OscConfig+0x6cc>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004600:	00d2      	lsls	r2, r2, #3
 8004602:	4930      	ldr	r1, [pc, #192]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004608:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f023 020c 	bic.w	r2, r3, #12
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	492b      	ldr	r1, [pc, #172]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f023 0202 	bic.w	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4927      	ldr	r1, [pc, #156]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800463e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800464a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc ff74 	bl	8001554 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004670:	f7fc ff70 	bl	8001554 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e065      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x670>
 800468e:	e05d      	b.n	800474c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 8004696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800469a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fc ff5a 	bl	8001554 <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fc ff56 	bl	8001554 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e04b      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b6:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_RCC_OscConfig+0x6c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x6a4>
 80046c2:	e043      	b.n	800474c <HAL_RCC_OscConfig+0x74c>
 80046c4:	58024400 	.word	0x58024400
 80046c8:	fffffc0c 	.word	0xfffffc0c
 80046cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046d0:	4b21      	ldr	r3, [pc, #132]	; (8004758 <HAL_RCC_OscConfig+0x758>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <HAL_RCC_OscConfig+0x758>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d031      	beq.n	8004748 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f003 0203 	and.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d12a      	bne.n	8004748 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d122      	bne.n	8004748 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d11a      	bne.n	8004748 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d111      	bne.n	8004748 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	0c1b      	lsrs	r3, r3, #16
 8004728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d108      	bne.n	8004748 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	0e1b      	lsrs	r3, r3, #24
 800473a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3730      	adds	r7, #48	; 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400

0800475c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e19c      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004770:	4b8a      	ldr	r3, [pc, #552]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d910      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b87      	ldr	r3, [pc, #540]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 020f 	bic.w	r2, r3, #15
 8004786:	4985      	ldr	r1, [pc, #532]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b83      	ldr	r3, [pc, #524]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e184      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	4b7b      	ldr	r3, [pc, #492]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d908      	bls.n	80047ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047bc:	4b78      	ldr	r3, [pc, #480]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4975      	ldr	r1, [pc, #468]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d908      	bls.n	80047fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047ea:	4b6d      	ldr	r3, [pc, #436]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	496a      	ldr	r1, [pc, #424]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	4b64      	ldr	r3, [pc, #400]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004814:	429a      	cmp	r2, r3
 8004816:	d908      	bls.n	800482a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004818:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	495e      	ldr	r1, [pc, #376]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004826:	4313      	orrs	r3, r2
 8004828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004842:	429a      	cmp	r2, r3
 8004844:	d908      	bls.n	8004858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004846:	4b56      	ldr	r3, [pc, #344]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4953      	ldr	r1, [pc, #332]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004854:	4313      	orrs	r3, r2
 8004856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	429a      	cmp	r2, r3
 8004872:	d908      	bls.n	8004886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f023 020f 	bic.w	r2, r3, #15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4947      	ldr	r1, [pc, #284]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004882:	4313      	orrs	r3, r2
 8004884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d055      	beq.n	800493e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004892:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4940      	ldr	r1, [pc, #256]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048ac:	4b3c      	ldr	r3, [pc, #240]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d121      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0f6      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d115      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0ea      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048dc:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0de      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048ec:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0d6      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f023 0207 	bic.w	r2, r3, #7
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4925      	ldr	r1, [pc, #148]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800490a:	4313      	orrs	r3, r2
 800490c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fc fe21 	bl	8001554 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004914:	e00a      	b.n	800492c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004916:	f7fc fe1d 	bl	8001554 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0be      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492c:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	429a      	cmp	r2, r3
 800493c:	d1eb      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d010      	beq.n	800496c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	429a      	cmp	r2, r3
 8004958:	d208      	bcs.n	800496c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f023 020f 	bic.w	r2, r3, #15
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	490e      	ldr	r1, [pc, #56]	; (80049a0 <HAL_RCC_ClockConfig+0x244>)
 8004968:	4313      	orrs	r3, r2
 800496a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d214      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 020f 	bic.w	r2, r3, #15
 8004982:	4906      	ldr	r1, [pc, #24]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <HAL_RCC_ClockConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e086      	b.n	8004aaa <HAL_RCC_ClockConfig+0x34e>
 800499c:	52002000 	.word	0x52002000
 80049a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	4b3f      	ldr	r3, [pc, #252]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049bc:	429a      	cmp	r2, r3
 80049be:	d208      	bcs.n	80049d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049c0:	4b3c      	ldr	r3, [pc, #240]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	4939      	ldr	r1, [pc, #228]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d208      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049ee:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	492e      	ldr	r1, [pc, #184]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d208      	bcs.n	8004a2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a1c:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	4922      	ldr	r1, [pc, #136]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d208      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4917      	ldr	r1, [pc, #92]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a5c:	f000 f834 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	4912      	ldr	r1, [pc, #72]	; (8004ab8 <HAL_RCC_ClockConfig+0x35c>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCC_ClockConfig+0x358>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <HAL_RCC_ClockConfig+0x35c>)
 8004a84:	5cd3      	ldrb	r3, [r2, r3]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <HAL_RCC_ClockConfig+0x360>)
 8004a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a94:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <HAL_RCC_ClockConfig+0x364>)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_RCC_ClockConfig+0x368>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc fd0e 	bl	80014c0 <HAL_InitTick>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	08009d24 	.word	0x08009d24
 8004abc:	24000008 	.word	0x24000008
 8004ac0:	24000004 	.word	0x24000004
 8004ac4:	2400000c 	.word	0x2400000c

08004ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ace:	4bb3      	ldr	r3, [pc, #716]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad6:	2b18      	cmp	r3, #24
 8004ad8:	f200 8155 	bhi.w	8004d86 <HAL_RCC_GetSysClockFreq+0x2be>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b49 	.word	0x08004b49
 8004ae8:	08004d87 	.word	0x08004d87
 8004aec:	08004d87 	.word	0x08004d87
 8004af0:	08004d87 	.word	0x08004d87
 8004af4:	08004d87 	.word	0x08004d87
 8004af8:	08004d87 	.word	0x08004d87
 8004afc:	08004d87 	.word	0x08004d87
 8004b00:	08004d87 	.word	0x08004d87
 8004b04:	08004b6f 	.word	0x08004b6f
 8004b08:	08004d87 	.word	0x08004d87
 8004b0c:	08004d87 	.word	0x08004d87
 8004b10:	08004d87 	.word	0x08004d87
 8004b14:	08004d87 	.word	0x08004d87
 8004b18:	08004d87 	.word	0x08004d87
 8004b1c:	08004d87 	.word	0x08004d87
 8004b20:	08004d87 	.word	0x08004d87
 8004b24:	08004b75 	.word	0x08004b75
 8004b28:	08004d87 	.word	0x08004d87
 8004b2c:	08004d87 	.word	0x08004d87
 8004b30:	08004d87 	.word	0x08004d87
 8004b34:	08004d87 	.word	0x08004d87
 8004b38:	08004d87 	.word	0x08004d87
 8004b3c:	08004d87 	.word	0x08004d87
 8004b40:	08004d87 	.word	0x08004d87
 8004b44:	08004b7b 	.word	0x08004b7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b48:	4b94      	ldr	r3, [pc, #592]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b54:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	4a90      	ldr	r2, [pc, #576]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004b66:	e111      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b68:	4b8d      	ldr	r3, [pc, #564]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b6a:	61bb      	str	r3, [r7, #24]
    break;
 8004b6c:	e10e      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b6e:	4b8d      	ldr	r3, [pc, #564]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b70:	61bb      	str	r3, [r7, #24]
    break;
 8004b72:	e10b      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b74:	4b8c      	ldr	r3, [pc, #560]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b76:	61bb      	str	r3, [r7, #24]
    break;
 8004b78:	e108      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b84:	4b85      	ldr	r3, [pc, #532]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b90:	4b82      	ldr	r3, [pc, #520]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b9a:	4b80      	ldr	r3, [pc, #512]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80e1 	beq.w	8004d80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	f000 8083 	beq.w	8004ccc <HAL_RCC_GetSysClockFreq+0x204>
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	f200 80a1 	bhi.w	8004d10 <HAL_RCC_GetSysClockFreq+0x248>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x114>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d056      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bda:	e099      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02d      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be8:	4b6c      	ldr	r3, [pc, #432]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	4a6b      	ldr	r2, [pc, #428]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c42:	e087      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004db0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c56:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c86:	e065      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cca:	e043      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004db8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cde:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0e:	e021      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d22:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	0a5b      	lsrs	r3, r3, #9
 8004d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5e:	3301      	adds	r3, #1
 8004d60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d78:	ee17 3a90 	vmov	r3, s15
 8004d7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d7e:	e005      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61bb      	str	r3, [r7, #24]
    break;
 8004d84:	e002      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d88:	61bb      	str	r3, [r7, #24]
    break;
 8004d8a:	bf00      	nop
  }

  return sysclockfreq;
 8004d8c:	69bb      	ldr	r3, [r7, #24]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3724      	adds	r7, #36	; 0x24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	03d09000 	.word	0x03d09000
 8004da4:	003d0900 	.word	0x003d0900
 8004da8:	017d7840 	.word	0x017d7840
 8004dac:	46000000 	.word	0x46000000
 8004db0:	4c742400 	.word	0x4c742400
 8004db4:	4a742400 	.word	0x4a742400
 8004db8:	4bbebc20 	.word	0x4bbebc20

08004dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004dc2:	f7ff fe81 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	490f      	ldr	r1, [pc, #60]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dd4:	5ccb      	ldrb	r3, [r1, r3]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dea:	5cd3      	ldrb	r3, [r2, r3]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dfa:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	08009d24 	.word	0x08009d24
 8004e14:	24000008 	.word	0x24000008
 8004e18:	24000004 	.word	0x24000004

08004e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e20:	f7ff ffcc 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4904      	ldr	r1, [pc, #16]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	58024400 	.word	0x58024400
 8004e44:	08009d24 	.word	0x08009d24

08004e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e4c:	f7ff ffb6 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4904      	ldr	r1, [pc, #16]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	08009d24 	.word	0x08009d24

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e80:	2300      	movs	r3, #0
 8004e82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d03f      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e98:	d02a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e9e:	d824      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea4:	d018      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eaa:	d81e      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb4:	d007      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004eb6:	e018      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb8:	4ba4      	ldr	r3, [pc, #656]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	4aa3      	ldr	r2, [pc, #652]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ec4:	e015      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 f989 	bl	80061e4 <RCCEx_PLL2_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ed6:	e00c      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3324      	adds	r3, #36	; 0x24
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fa32 	bl	8006348 <RCCEx_PLL3_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
      break;
 8004eee:	e000      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ef8:	4b94      	ldr	r3, [pc, #592]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	4991      	ldr	r1, [pc, #580]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	650b      	str	r3, [r1, #80]	; 0x50
 8004f0a:	e001      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d03d      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d826      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f41 	.word	0x08004f41
 8004f30:	08004f4f 	.word	0x08004f4f
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f79 	.word	0x08004f79
 8004f3c:	08004f79 	.word	0x08004f79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f40:	4b82      	ldr	r3, [pc, #520]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	4a81      	ldr	r2, [pc, #516]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f4c:	e015      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 f945 	bl	80061e4 <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f5e:	e00c      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3324      	adds	r3, #36	; 0x24
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f9ee 	bl	8006348 <RCCEx_PLL3_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f70:	e003      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
      break;
 8004f76:	e000      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f80:	4b72      	ldr	r3, [pc, #456]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	f023 0207 	bic.w	r2, r3, #7
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	496f      	ldr	r1, [pc, #444]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	650b      	str	r3, [r1, #80]	; 0x50
 8004f92:	e001      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d051      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004faa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fae:	d036      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004fb0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fb4:	d830      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004fb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fba:	d032      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc0:	d82a      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004fc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fc6:	d02e      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004fc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fcc:	d824      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd2:	d018      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd8:	d81e      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe2:	d007      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004fe4:	e018      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe6:	4b59      	ldr	r3, [pc, #356]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	4a58      	ldr	r2, [pc, #352]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ff2:	e019      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 f8f2 	bl	80061e4 <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005004:	e010      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3324      	adds	r3, #36	; 0x24
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f001 f99b 	bl	8006348 <RCCEx_PLL3_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005016:	e007      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
      break;
 800501c:	e004      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800501e:	bf00      	nop
 8005020:	e002      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005022:	bf00      	nop
 8005024:	e000      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800502e:	4b47      	ldr	r3, [pc, #284]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800503c:	4943      	ldr	r1, [pc, #268]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800503e:	4313      	orrs	r3, r2
 8005040:	658b      	str	r3, [r1, #88]	; 0x58
 8005042:	e001      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005050:	2b00      	cmp	r3, #0
 8005052:	d051      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800505a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800505e:	d036      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005060:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005064:	d830      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800506a:	d032      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800506c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005070:	d82a      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005072:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005076:	d02e      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005078:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800507c:	d824      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800507e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005082:	d018      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005088:	d81e      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800508e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005092:	d007      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005094:	e018      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	4a2c      	ldr	r2, [pc, #176]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800509c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050a2:	e019      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 f89a 	bl	80061e4 <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050b4:	e010      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3324      	adds	r3, #36	; 0x24
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 f943 	bl	8006348 <RCCEx_PLL3_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050c6:	e007      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
      break;
 80050cc:	e004      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80050ce:	bf00      	nop
 80050d0:	e002      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80050d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050de:	4b1b      	ldr	r3, [pc, #108]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050ec:	4917      	ldr	r1, [pc, #92]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	658b      	str	r3, [r1, #88]	; 0x58
 80050f2:	e001      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d035      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d01c      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d817      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d00c      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d813      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d019      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800511c:	2b10      	cmp	r3, #16
 800511e:	d10f      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800512c:	e011      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3304      	adds	r3, #4
 8005132:	2102      	movs	r1, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f855 	bl	80061e4 <RCCEx_PLL2_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
      break;
 8005144:	e005      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005146:	bf00      	nop
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
      break;
 8005150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005158:	4ba3      	ldr	r3, [pc, #652]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	49a0      	ldr	r1, [pc, #640]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005166:	4313      	orrs	r3, r2
 8005168:	64cb      	str	r3, [r1, #76]	; 0x4c
 800516a:	e001      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d047      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005184:	d030      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518a:	d82a      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800518c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005190:	d02c      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005196:	d824      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519c:	d018      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a2:	d81e      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d007      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80051ae:	e018      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b0:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a8c      	ldr	r2, [pc, #560]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051bc:	e017      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	2100      	movs	r1, #0
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f80d 	bl	80061e4 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051ce:	e00e      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3324      	adds	r3, #36	; 0x24
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f8b6 	bl	8006348 <RCCEx_PLL3_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051e0:	e005      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	e002      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80051ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051f4:	4b7c      	ldr	r3, [pc, #496]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	4979      	ldr	r1, [pc, #484]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005202:	4313      	orrs	r3, r2
 8005204:	650b      	str	r3, [r1, #80]	; 0x50
 8005206:	e001      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d049      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005220:	d02e      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005226:	d828      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800522c:	d02a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800522e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005232:	d822      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005234:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005238:	d026      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800523a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800523e:	d81c      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005244:	d010      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524a:	d816      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01d      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d111      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 ffc1 	bl	80061e4 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005266:	e012      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	2101      	movs	r1, #1
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f86a 	bl	8006348 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005278:	e009      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
      break;
 800527e:	e006      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005280:	bf00      	nop
 8005282:	e004      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005284:	bf00      	nop
 8005286:	e002      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800528c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005294:	4b54      	ldr	r3, [pc, #336]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a0:	4951      	ldr	r1, [pc, #324]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	650b      	str	r3, [r1, #80]	; 0x50
 80052a6:	e001      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d04b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c2:	d02e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80052c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c8:	d828      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d02a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d822      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052da:	d026      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80052dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e0:	d81c      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e6:	d010      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x496>
 80052e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ec:	d816      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01d      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80052f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052f6:	d111      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 ff70 	bl	80061e4 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005308:	e012      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f819 	bl	8006348 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800531a:	e009      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800532e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005336:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005344:	4928      	ldr	r1, [pc, #160]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005346:	4313      	orrs	r3, r2
 8005348:	658b      	str	r3, [r1, #88]	; 0x58
 800534a:	e001      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02f      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d00e      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536a:	d814      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d015      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005374:	d10f      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800537c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005382:	e00c      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	2101      	movs	r1, #1
 800538a:	4618      	mov	r0, r3
 800538c:	f000 ff2a 	bl	80061e4 <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
      break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80053a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b0:	490d      	ldr	r1, [pc, #52]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	650b      	str	r3, [r1, #80]	; 0x50
 80053b6:	e001      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d034      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d81d      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	08005413 	.word	0x08005413
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053fb 	.word	0x080053fb
 80053e4:	08005413 	.word	0x08005413
 80053e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4bb1      	ldr	r3, [pc, #708]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4ab0      	ldr	r2, [pc, #704]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053f8:	e00c      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 feef 	bl	80061e4 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
      break;
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800541a:	4ba6      	ldr	r3, [pc, #664]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	49a3      	ldr	r1, [pc, #652]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005428:	4313      	orrs	r3, r2
 800542a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800542c:	e001      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8086 	beq.w	800554c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005440:	4b9d      	ldr	r3, [pc, #628]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a9c      	ldr	r2, [pc, #624]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544c:	f7fc f882 	bl	8001554 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005452:	e009      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fc f87e 	bl	8001554 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d902      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	75fb      	strb	r3, [r7, #23]
        break;
 8005466:	e005      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005468:	4b93      	ldr	r3, [pc, #588]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ef      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d166      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800547a:	4b8e      	ldr	r3, [pc, #568]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800547c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005484:	4053      	eors	r3, r2
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d013      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800548e:	4b89      	ldr	r3, [pc, #548]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005498:	4b86      	ldr	r3, [pc, #536]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	4a85      	ldr	r2, [pc, #532]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800549e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a4:	4b83      	ldr	r3, [pc, #524]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a82      	ldr	r2, [pc, #520]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054b0:	4a80      	ldr	r2, [pc, #512]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d115      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc f847 	bl	8001554 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c8:	e00b      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc f843 	bl	8001554 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	75fb      	strb	r3, [r7, #23]
            break;
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054e2:	4b74      	ldr	r3, [pc, #464]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ed      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d126      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d10d      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005504:	4b6b      	ldr	r3, [pc, #428]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005512:	0919      	lsrs	r1, r3, #4
 8005514:	4b69      	ldr	r3, [pc, #420]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005516:	400b      	ands	r3, r1
 8005518:	4966      	ldr	r1, [pc, #408]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
 800551e:	e005      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005520:	4b64      	ldr	r3, [pc, #400]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	4a63      	ldr	r2, [pc, #396]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005526:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800552a:	6113      	str	r3, [r2, #16]
 800552c:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800552e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	495e      	ldr	r1, [pc, #376]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800553c:	4313      	orrs	r3, r2
 800553e:	670b      	str	r3, [r1, #112]	; 0x70
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	75bb      	strb	r3, [r7, #22]
 8005546:	e001      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d07e      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555c:	2b28      	cmp	r3, #40	; 0x28
 800555e:	d867      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	08005637 	.word	0x08005637
 800556c:	08005631 	.word	0x08005631
 8005570:	08005631 	.word	0x08005631
 8005574:	08005631 	.word	0x08005631
 8005578:	08005631 	.word	0x08005631
 800557c:	08005631 	.word	0x08005631
 8005580:	08005631 	.word	0x08005631
 8005584:	08005631 	.word	0x08005631
 8005588:	0800560d 	.word	0x0800560d
 800558c:	08005631 	.word	0x08005631
 8005590:	08005631 	.word	0x08005631
 8005594:	08005631 	.word	0x08005631
 8005598:	08005631 	.word	0x08005631
 800559c:	08005631 	.word	0x08005631
 80055a0:	08005631 	.word	0x08005631
 80055a4:	08005631 	.word	0x08005631
 80055a8:	0800561f 	.word	0x0800561f
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005631 	.word	0x08005631
 80055b4:	08005631 	.word	0x08005631
 80055b8:	08005631 	.word	0x08005631
 80055bc:	08005631 	.word	0x08005631
 80055c0:	08005631 	.word	0x08005631
 80055c4:	08005631 	.word	0x08005631
 80055c8:	08005637 	.word	0x08005637
 80055cc:	08005631 	.word	0x08005631
 80055d0:	08005631 	.word	0x08005631
 80055d4:	08005631 	.word	0x08005631
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005631 	.word	0x08005631
 80055e0:	08005631 	.word	0x08005631
 80055e4:	08005631 	.word	0x08005631
 80055e8:	08005637 	.word	0x08005637
 80055ec:	08005631 	.word	0x08005631
 80055f0:	08005631 	.word	0x08005631
 80055f4:	08005631 	.word	0x08005631
 80055f8:	08005631 	.word	0x08005631
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005631 	.word	0x08005631
 8005604:	08005631 	.word	0x08005631
 8005608:	08005637 	.word	0x08005637
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fde6 	bl	80061e4 <RCCEx_PLL2_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800561c:	e00c      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	2101      	movs	r1, #1
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fe8f 	bl	8006348 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800562e:	e003      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564a:	491a      	ldr	r1, [pc, #104]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800564c:	4313      	orrs	r3, r2
 800564e:	654b      	str	r3, [r1, #84]	; 0x54
 8005650:	e001      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d03e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	2b05      	cmp	r3, #5
 8005668:	d820      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x838>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056c1 	.word	0x080056c1
 8005674:	08005689 	.word	0x08005689
 8005678:	0800569b 	.word	0x0800569b
 800567c:	080056c1 	.word	0x080056c1
 8005680:	080056c1 	.word	0x080056c1
 8005684:	080056c1 	.word	0x080056c1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	2101      	movs	r1, #1
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fda8 	bl	80061e4 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005698:	e013      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3324      	adds	r3, #36	; 0x24
 800569e:	2101      	movs	r1, #1
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fe51 	bl	8006348 <RCCEx_PLL3_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80056aa:	e00a      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
      break;
 80056b0:	e007      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	58024800 	.word	0x58024800
 80056bc:	00ffffcf 	.word	0x00ffffcf
      break;
 80056c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056c8:	4b9f      	ldr	r3, [pc, #636]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f023 0207 	bic.w	r2, r3, #7
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d4:	499c      	ldr	r1, [pc, #624]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	654b      	str	r3, [r1, #84]	; 0x54
 80056da:	e001      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d039      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f2:	2b05      	cmp	r3, #5
 80056f4:	d820      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	0800573f 	.word	0x0800573f
 8005700:	08005715 	.word	0x08005715
 8005704:	08005727 	.word	0x08005727
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fd62 	bl	80061e4 <RCCEx_PLL2_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005724:	e00c      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fe0b 	bl	8006348 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005736:	e003      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
      break;
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800573e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005746:	4b80      	ldr	r3, [pc, #512]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f023 0207 	bic.w	r2, r3, #7
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005754:	497c      	ldr	r1, [pc, #496]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005756:	4313      	orrs	r3, r2
 8005758:	658b      	str	r3, [r1, #88]	; 0x58
 800575a:	e001      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d04b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005776:	d02e      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800577c:	d828      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d02a      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005788:	d822      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800578a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800578e:	d026      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005794:	d81c      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579a:	d010      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800579c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a0:	d816      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01d      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80057a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057aa:	d111      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fd16 	bl	80061e4 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057bc:	e012      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	2102      	movs	r1, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fdbf 	bl	8006348 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057ce:	e009      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80057d6:	bf00      	nop
 80057d8:	e004      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80057da:	bf00      	nop
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80057e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ea:	4b57      	ldr	r3, [pc, #348]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	4953      	ldr	r1, [pc, #332]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	654b      	str	r3, [r1, #84]	; 0x54
 80057fe:	e001      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d04b      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800581a:	d02e      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800581c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005820:	d828      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	d02a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d822      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800582e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005832:	d026      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005838:	d81c      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583e:	d010      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005844:	d816      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01d      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d111      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	2100      	movs	r1, #0
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fcc4 	bl	80061e4 <RCCEx_PLL2_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005860:	e012      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3324      	adds	r3, #36	; 0x24
 8005866:	2102      	movs	r1, #2
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fd6d 	bl	8006348 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005872:	e009      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
      break;
 8005878:	e006      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800587a:	bf00      	nop
 800587c:	e004      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589c:	492a      	ldr	r1, [pc, #168]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	658b      	str	r3, [r1, #88]	; 0x58
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d04d      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058be:	d02e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80058c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058c4:	d828      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d02a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	d822      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80058d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058d6:	d026      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80058d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058dc:	d81c      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80058de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e2:	d010      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80058e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e8:	d816      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01d      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d111      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fc72 	bl	80061e4 <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005904:	e012      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3324      	adds	r3, #36	; 0x24
 800590a:	2102      	movs	r1, #2
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fd1b 	bl	8006348 <RCCEx_PLL3_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005916:	e009      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800591e:	bf00      	nop
 8005920:	e004      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800592a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10c      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005940:	4901      	ldr	r1, [pc, #4]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005942:	4313      	orrs	r3, r2
 8005944:	658b      	str	r3, [r1, #88]	; 0x58
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d018      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005964:	d10a      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3324      	adds	r3, #36	; 0x24
 800596a:	2102      	movs	r1, #2
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fceb 	bl	8006348 <RCCEx_PLL3_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800597c:	4b8a      	ldr	r3, [pc, #552]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005988:	4987      	ldr	r1, [pc, #540]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800598a:	4313      	orrs	r3, r2
 800598c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d10a      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	2102      	movs	r1, #2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fccb 	bl	8006348 <RCCEx_PLL3_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059bc:	4b7a      	ldr	r3, [pc, #488]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	4977      	ldr	r1, [pc, #476]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d034      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059e6:	d01d      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80059e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ec:	d817      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f6:	d009      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80059f8:	e011      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fbef 	bl	80061e4 <RCCEx_PLL2_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a0a:	e00c      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3324      	adds	r3, #36	; 0x24
 8005a10:	2102      	movs	r1, #2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fc98 	bl	8006348 <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005a1c:	e003      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a2c:	4b5e      	ldr	r3, [pc, #376]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a3a:	495b      	ldr	r1, [pc, #364]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	658b      	str	r3, [r1, #88]	; 0x58
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d033      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a5c:	d01c      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005a5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a62:	d816      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a68:	d003      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a6e:	d007      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005a70:	e00f      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a72:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	4a4c      	ldr	r2, [pc, #304]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a7e:	e00c      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fc5e 	bl	8006348 <RCCEx_PLL3_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
      break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aa0:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aae:	493e      	ldr	r1, [pc, #248]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ab4:	e001      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d029      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad2:	d007      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005ad4:	e00f      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	4a33      	ldr	r2, [pc, #204]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ae2:	e00b      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	2102      	movs	r1, #2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fb7a 	bl	80061e4 <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
      break;
 8005afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b02:	4b29      	ldr	r3, [pc, #164]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	4926      	ldr	r1, [pc, #152]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b14:	e001      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3324      	adds	r3, #36	; 0x24
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fc0b 	bl	8006348 <RCCEx_PLL3_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d033      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b50:	d017      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b56:	d811      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5c:	d013      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8005b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b62:	d80b      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d010      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	4a0d      	ldr	r2, [pc, #52]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b7a:	e007      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	e004      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005b82:	bf00      	nop
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10c      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b9e:	4902      	ldr	r1, [pc, #8]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ba4:	e004      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bbc:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc8:	4926      	ldr	r1, [pc, #152]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be6:	491f      	ldr	r1, [pc, #124]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c02:	6113      	str	r3, [r2, #16]
 8005c04:	4b17      	ldr	r3, [pc, #92]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c0e:	4915      	ldr	r1, [pc, #84]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da08      	bge.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c1c:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	490e      	ldr	r1, [pc, #56]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	4906      	ldr	r1, [pc, #24]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400

08005c68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c6c:	f7ff f8a6 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4904      	ldr	r1, [pc, #16]	; (8005c90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	08009d24 	.word	0x08009d24

08005c94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b089      	sub	sp, #36	; 0x24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c9c:	4ba1      	ldr	r3, [pc, #644]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ca6:	4b9f      	ldr	r3, [pc, #636]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	0b1b      	lsrs	r3, r3, #12
 8005cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cb2:	4b9c      	ldr	r3, [pc, #624]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cbe:	4b99      	ldr	r3, [pc, #612]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	08db      	lsrs	r3, r3, #3
 8005cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8111 	beq.w	8005f04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	f000 8083 	beq.w	8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	f200 80a1 	bhi.w	8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d056      	beq.n	8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cfe:	e099      	b.n	8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d00:	4b88      	ldr	r3, [pc, #544]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02d      	beq.n	8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d0c:	4b85      	ldr	r3, [pc, #532]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	08db      	lsrs	r3, r3, #3
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	4a84      	ldr	r2, [pc, #528]	; (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d18:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d36:	4b7b      	ldr	r3, [pc, #492]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d66:	e087      	b.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7a:	4b6a      	ldr	r3, [pc, #424]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005daa:	e065      	b.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dbe:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dee:	e043      	b.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e02:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e32:	e021      	b.n	8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e78:	4b2a      	ldr	r3, [pc, #168]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	0a5b      	lsrs	r3, r3, #9
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9e:	ee17 2a90 	vmov	r2, s15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ecc:	ee17 2a90 	vmov	r2, s15
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ed4:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efa:	ee17 2a90 	vmov	r2, s15
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f02:	e008      	b.n	8005f16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
}
 8005f16:	bf00      	nop
 8005f18:	3724      	adds	r7, #36	; 0x24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	58024400 	.word	0x58024400
 8005f28:	03d09000 	.word	0x03d09000
 8005f2c:	46000000 	.word	0x46000000
 8005f30:	4c742400 	.word	0x4c742400
 8005f34:	4a742400 	.word	0x4a742400
 8005f38:	4bbebc20 	.word	0x4bbebc20

08005f3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f44:	4ba1      	ldr	r3, [pc, #644]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f4e:	4b9f      	ldr	r3, [pc, #636]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	0d1b      	lsrs	r3, r3, #20
 8005f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f5a:	4b9c      	ldr	r3, [pc, #624]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f66:	4b99      	ldr	r3, [pc, #612]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	08db      	lsrs	r3, r3, #3
 8005f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8111 	beq.w	80061ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	f000 8083 	beq.w	8006098 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	f200 80a1 	bhi.w	80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d056      	beq.n	8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fa6:	e099      	b.n	80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fa8:	4b88      	ldr	r3, [pc, #544]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d02d      	beq.n	8006010 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fb4:	4b85      	ldr	r3, [pc, #532]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	08db      	lsrs	r3, r3, #3
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	4a84      	ldr	r2, [pc, #528]	; (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fde:	4b7b      	ldr	r3, [pc, #492]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800600e:	e087      	b.n	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b6a      	ldr	r3, [pc, #424]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a03 	vldr	s12, [r7, #12]
 8006036:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006052:	e065      	b.n	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b59      	ldr	r3, [pc, #356]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a03 	vldr	s12, [r7, #12]
 800607a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006096:	e043      	b.n	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b48      	ldr	r3, [pc, #288]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80060be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060da:	e021      	b.n	8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b37      	ldr	r3, [pc, #220]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006102:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800611e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006120:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	0a5b      	lsrs	r3, r3, #9
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613a:	edd7 6a07 	vldr	s13, [r7, #28]
 800613e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006146:	ee17 2a90 	vmov	r2, s15
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800614e:	4b1f      	ldr	r3, [pc, #124]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006168:	edd7 6a07 	vldr	s13, [r7, #28]
 800616c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006174:	ee17 2a90 	vmov	r2, s15
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800617c:	4b13      	ldr	r3, [pc, #76]	; (80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	0e1b      	lsrs	r3, r3, #24
 8006182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006196:	edd7 6a07 	vldr	s13, [r7, #28]
 800619a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a2:	ee17 2a90 	vmov	r2, s15
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061aa:	e008      	b.n	80061be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
}
 80061be:	bf00      	nop
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	58024400 	.word	0x58024400
 80061d0:	03d09000 	.word	0x03d09000
 80061d4:	46000000 	.word	0x46000000
 80061d8:	4c742400 	.word	0x4c742400
 80061dc:	4a742400 	.word	0x4a742400
 80061e0:	4bbebc20 	.word	0x4bbebc20

080061e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061f2:	4b53      	ldr	r3, [pc, #332]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d101      	bne.n	8006202 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e099      	b.n	8006336 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006202:	4b4f      	ldr	r3, [pc, #316]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a4e      	ldr	r2, [pc, #312]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006208:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800620c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800620e:	f7fb f9a1 	bl	8001554 <HAL_GetTick>
 8006212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006214:	e008      	b.n	8006228 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006216:	f7fb f99d 	bl	8001554 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e086      	b.n	8006336 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006228:	4b45      	ldr	r3, [pc, #276]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f0      	bne.n	8006216 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006234:	4b42      	ldr	r3, [pc, #264]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	031b      	lsls	r3, r3, #12
 8006242:	493f      	ldr	r1, [pc, #252]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	628b      	str	r3, [r1, #40]	; 0x28
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	3b01      	subs	r3, #1
 800624e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	025b      	lsls	r3, r3, #9
 800625a:	b29b      	uxth	r3, r3
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	041b      	lsls	r3, r3, #16
 8006266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	3b01      	subs	r3, #1
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006278:	4931      	ldr	r1, [pc, #196]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800627e:	4b30      	ldr	r3, [pc, #192]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	492d      	ldr	r1, [pc, #180]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 800628c:	4313      	orrs	r3, r2
 800628e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006290:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	f023 0220 	bic.w	r2, r3, #32
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	4928      	ldr	r1, [pc, #160]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062a2:	4b27      	ldr	r3, [pc, #156]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	4a26      	ldr	r2, [pc, #152]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <RCCEx_PLL2_Config+0x160>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	69d2      	ldr	r2, [r2, #28]
 80062ba:	00d2      	lsls	r2, r2, #3
 80062bc:	4920      	ldr	r1, [pc, #128]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	4a1e      	ldr	r2, [pc, #120]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	f043 0310 	orr.w	r3, r3, #16
 80062cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062e0:	e00f      	b.n	8006302 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d106      	bne.n	80062f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4a14      	ldr	r2, [pc, #80]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062f4:	e005      	b.n	8006302 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006300:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 8006308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800630c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630e:	f7fb f921 	bl	8001554 <HAL_GetTick>
 8006312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006314:	e008      	b.n	8006328 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006316:	f7fb f91d 	bl	8001554 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e006      	b.n	8006336 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <RCCEx_PLL2_Config+0x15c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400
 8006344:	ffff0007 	.word	0xffff0007

08006348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006356:	4b53      	ldr	r3, [pc, #332]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b03      	cmp	r3, #3
 8006360:	d101      	bne.n	8006366 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e099      	b.n	800649a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006366:	4b4f      	ldr	r3, [pc, #316]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a4e      	ldr	r2, [pc, #312]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800636c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006372:	f7fb f8ef 	bl	8001554 <HAL_GetTick>
 8006376:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006378:	e008      	b.n	800638c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800637a:	f7fb f8eb 	bl	8001554 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e086      	b.n	800649a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800638c:	4b45      	ldr	r3, [pc, #276]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f0      	bne.n	800637a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006398:	4b42      	ldr	r3, [pc, #264]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	051b      	lsls	r3, r3, #20
 80063a6:	493f      	ldr	r1, [pc, #252]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	628b      	str	r3, [r1, #40]	; 0x28
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	025b      	lsls	r3, r3, #9
 80063be:	b29b      	uxth	r3, r3
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063dc:	4931      	ldr	r1, [pc, #196]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063e2:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	492d      	ldr	r1, [pc, #180]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063f4:	4b2b      	ldr	r3, [pc, #172]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	4928      	ldr	r1, [pc, #160]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006406:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800640c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006416:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <RCCEx_PLL3_Config+0x160>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	69d2      	ldr	r2, [r2, #28]
 800641e:	00d2      	lsls	r2, r2, #3
 8006420:	4920      	ldr	r1, [pc, #128]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006426:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800642c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006438:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800643e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006444:	e00f      	b.n	8006466 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d106      	bne.n	800645a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006452:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006458:	e005      	b.n	8006466 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	4a11      	ldr	r2, [pc, #68]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006464:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a0e      	ldr	r2, [pc, #56]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800646c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006472:	f7fb f86f 	bl	8001554 <HAL_GetTick>
 8006476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006478:	e008      	b.n	800648c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800647a:	f7fb f86b 	bl	8001554 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e006      	b.n	800649a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <RCCEx_PLL3_Config+0x15c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	58024400 	.word	0x58024400
 80064a8:	ffff0007 	.word	0xffff0007

080064ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e049      	b.n	8006552 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa fcc0 	bl	8000e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f000 fa66 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_TIM_PWM_Start+0x24>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	e03c      	b.n	80065fa <HAL_TIM_PWM_Start+0x9e>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d109      	bne.n	800659a <HAL_TIM_PWM_Start+0x3e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	bf14      	ite	ne
 8006592:	2301      	movne	r3, #1
 8006594:	2300      	moveq	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	e02f      	b.n	80065fa <HAL_TIM_PWM_Start+0x9e>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d109      	bne.n	80065b4 <HAL_TIM_PWM_Start+0x58>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	bf14      	ite	ne
 80065ac:	2301      	movne	r3, #1
 80065ae:	2300      	moveq	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e022      	b.n	80065fa <HAL_TIM_PWM_Start+0x9e>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b0c      	cmp	r3, #12
 80065b8:	d109      	bne.n	80065ce <HAL_TIM_PWM_Start+0x72>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	bf14      	ite	ne
 80065c6:	2301      	movne	r3, #1
 80065c8:	2300      	moveq	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	e015      	b.n	80065fa <HAL_TIM_PWM_Start+0x9e>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d109      	bne.n	80065e8 <HAL_TIM_PWM_Start+0x8c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	bf14      	ite	ne
 80065e0:	2301      	movne	r3, #1
 80065e2:	2300      	moveq	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	e008      	b.n	80065fa <HAL_TIM_PWM_Start+0x9e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0ab      	b.n	800675a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start+0xb6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006610:	e023      	b.n	800665a <HAL_TIM_PWM_Start+0xfe>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b04      	cmp	r3, #4
 8006616:	d104      	bne.n	8006622 <HAL_TIM_PWM_Start+0xc6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006620:	e01b      	b.n	800665a <HAL_TIM_PWM_Start+0xfe>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d104      	bne.n	8006632 <HAL_TIM_PWM_Start+0xd6>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	e013      	b.n	800665a <HAL_TIM_PWM_Start+0xfe>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b0c      	cmp	r3, #12
 8006636:	d104      	bne.n	8006642 <HAL_TIM_PWM_Start+0xe6>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006640:	e00b      	b.n	800665a <HAL_TIM_PWM_Start+0xfe>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b10      	cmp	r3, #16
 8006646:	d104      	bne.n	8006652 <HAL_TIM_PWM_Start+0xf6>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006650:	e003      	b.n	800665a <HAL_TIM_PWM_Start+0xfe>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2201      	movs	r2, #1
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd26 	bl	80070b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3d      	ldr	r2, [pc, #244]	; (8006764 <HAL_TIM_PWM_Start+0x208>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_TIM_PWM_Start+0x13e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a3c      	ldr	r2, [pc, #240]	; (8006768 <HAL_TIM_PWM_Start+0x20c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_TIM_PWM_Start+0x13e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3a      	ldr	r2, [pc, #232]	; (800676c <HAL_TIM_PWM_Start+0x210>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_TIM_PWM_Start+0x13e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a39      	ldr	r2, [pc, #228]	; (8006770 <HAL_TIM_PWM_Start+0x214>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_TIM_PWM_Start+0x13e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a37      	ldr	r2, [pc, #220]	; (8006774 <HAL_TIM_PWM_Start+0x218>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <HAL_TIM_PWM_Start+0x142>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_TIM_PWM_Start+0x144>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2a      	ldr	r2, [pc, #168]	; (8006764 <HAL_TIM_PWM_Start+0x208>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02c      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c6:	d027      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2a      	ldr	r2, [pc, #168]	; (8006778 <HAL_TIM_PWM_Start+0x21c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a29      	ldr	r2, [pc, #164]	; (800677c <HAL_TIM_PWM_Start+0x220>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a27      	ldr	r2, [pc, #156]	; (8006780 <HAL_TIM_PWM_Start+0x224>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <HAL_TIM_PWM_Start+0x20c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a23      	ldr	r2, [pc, #140]	; (8006784 <HAL_TIM_PWM_Start+0x228>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1b      	ldr	r2, [pc, #108]	; (800676c <HAL_TIM_PWM_Start+0x210>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <HAL_TIM_PWM_Start+0x22c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIM_PWM_Start+0x1bc>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1e      	ldr	r2, [pc, #120]	; (800678c <HAL_TIM_PWM_Start+0x230>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d115      	bne.n	8006744 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	4b1c      	ldr	r3, [pc, #112]	; (8006790 <HAL_TIM_PWM_Start+0x234>)
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b06      	cmp	r3, #6
 8006728:	d015      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1fa>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006730:	d011      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	e008      	b.n	8006756 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e000      	b.n	8006758 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006756:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40010000 	.word	0x40010000
 8006768:	40010400 	.word	0x40010400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40001800 	.word	0x40001800
 8006788:	4000e000 	.word	0x4000e000
 800678c:	4000e400 	.word	0x4000e400
 8006790:	00010007 	.word	0x00010007

08006794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0ff      	b.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b14      	cmp	r3, #20
 80067be:	f200 80f0 	bhi.w	80069a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	0800681d 	.word	0x0800681d
 80067cc:	080069a3 	.word	0x080069a3
 80067d0:	080069a3 	.word	0x080069a3
 80067d4:	080069a3 	.word	0x080069a3
 80067d8:	0800685d 	.word	0x0800685d
 80067dc:	080069a3 	.word	0x080069a3
 80067e0:	080069a3 	.word	0x080069a3
 80067e4:	080069a3 	.word	0x080069a3
 80067e8:	0800689f 	.word	0x0800689f
 80067ec:	080069a3 	.word	0x080069a3
 80067f0:	080069a3 	.word	0x080069a3
 80067f4:	080069a3 	.word	0x080069a3
 80067f8:	080068df 	.word	0x080068df
 80067fc:	080069a3 	.word	0x080069a3
 8006800:	080069a3 	.word	0x080069a3
 8006804:	080069a3 	.word	0x080069a3
 8006808:	08006921 	.word	0x08006921
 800680c:	080069a3 	.word	0x080069a3
 8006810:	080069a3 	.word	0x080069a3
 8006814:	080069a3 	.word	0x080069a3
 8006818:	08006961 	.word	0x08006961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f970 	bl	8006b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0208 	orr.w	r2, r2, #8
 8006836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0204 	bic.w	r2, r2, #4
 8006846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6999      	ldr	r1, [r3, #24]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	619a      	str	r2, [r3, #24]
      break;
 800685a:	e0a5      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f9e0 	bl	8006c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6999      	ldr	r1, [r3, #24]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	021a      	lsls	r2, r3, #8
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	619a      	str	r2, [r3, #24]
      break;
 800689c:	e084      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fa49 	bl	8006d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0208 	orr.w	r2, r2, #8
 80068b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0204 	bic.w	r2, r2, #4
 80068c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69d9      	ldr	r1, [r3, #28]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	61da      	str	r2, [r3, #28]
      break;
 80068dc:	e064      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fab1 	bl	8006e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69d9      	ldr	r1, [r3, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	021a      	lsls	r2, r3, #8
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	61da      	str	r2, [r3, #28]
      break;
 800691e:	e043      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fafa 	bl	8006f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0204 	bic.w	r2, r2, #4
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800695e:	e023      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fb3e 	bl	8006fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800697a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a0:	e002      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a44      	ldr	r2, [pc, #272]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <TIM_Base_SetConfig+0x128>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a40      	ldr	r2, [pc, #256]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3f      	ldr	r2, [pc, #252]	; (8006aec <TIM_Base_SetConfig+0x130>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3e      	ldr	r2, [pc, #248]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a33      	ldr	r2, [pc, #204]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d027      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d023      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a30      	ldr	r2, [pc, #192]	; (8006ae4 <TIM_Base_SetConfig+0x128>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01f      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01b      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2e      	ldr	r2, [pc, #184]	; (8006aec <TIM_Base_SetConfig+0x130>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d017      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2c      	ldr	r2, [pc, #176]	; (8006af4 <TIM_Base_SetConfig+0x138>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00f      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2a      	ldr	r2, [pc, #168]	; (8006afc <TIM_Base_SetConfig+0x140>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d007      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <TIM_Base_SetConfig+0x144>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <TIM_Base_SetConfig+0x148>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d108      	bne.n	8006a78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a10      	ldr	r2, [pc, #64]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00f      	beq.n	8006ac4 <TIM_Base_SetConfig+0x108>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00b      	beq.n	8006ac4 <TIM_Base_SetConfig+0x108>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a11      	ldr	r2, [pc, #68]	; (8006af4 <TIM_Base_SetConfig+0x138>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d007      	beq.n	8006ac4 <TIM_Base_SetConfig+0x108>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_Base_SetConfig+0x108>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0f      	ldr	r2, [pc, #60]	; (8006afc <TIM_Base_SetConfig+0x140>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d103      	bne.n	8006acc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	615a      	str	r2, [r3, #20]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40010400 	.word	0x40010400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800
 8006b00:	4000e000 	.word	0x4000e000
 8006b04:	4000e400 	.word	0x4000e400

08006b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <TIM_OC1_SetConfig+0x108>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 0302 	bic.w	r3, r3, #2
 8006b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a2d      	ldr	r2, [pc, #180]	; (8006c14 <TIM_OC1_SetConfig+0x10c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00f      	beq.n	8006b84 <TIM_OC1_SetConfig+0x7c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a2c      	ldr	r2, [pc, #176]	; (8006c18 <TIM_OC1_SetConfig+0x110>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <TIM_OC1_SetConfig+0x7c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	; (8006c1c <TIM_OC1_SetConfig+0x114>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d007      	beq.n	8006b84 <TIM_OC1_SetConfig+0x7c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <TIM_OC1_SetConfig+0x118>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC1_SetConfig+0x7c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <TIM_OC1_SetConfig+0x11c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10c      	bne.n	8006b9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0308 	bic.w	r3, r3, #8
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f023 0304 	bic.w	r3, r3, #4
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <TIM_OC1_SetConfig+0x10c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00f      	beq.n	8006bc6 <TIM_OC1_SetConfig+0xbe>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <TIM_OC1_SetConfig+0x110>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_OC1_SetConfig+0xbe>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1a      	ldr	r2, [pc, #104]	; (8006c1c <TIM_OC1_SetConfig+0x114>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_OC1_SetConfig+0xbe>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a19      	ldr	r2, [pc, #100]	; (8006c20 <TIM_OC1_SetConfig+0x118>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_OC1_SetConfig+0xbe>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a18      	ldr	r2, [pc, #96]	; (8006c24 <TIM_OC1_SetConfig+0x11c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d111      	bne.n	8006bea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	621a      	str	r2, [r3, #32]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	fffeff8f 	.word	0xfffeff8f
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800

08006c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0210 	bic.w	r2, r3, #16
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4b34      	ldr	r3, [pc, #208]	; (8006d24 <TIM_OC2_SetConfig+0xfc>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0320 	bic.w	r3, r3, #32
 8006c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <TIM_OC2_SetConfig+0x100>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC2_SetConfig+0x68>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <TIM_OC2_SetConfig+0x104>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10d      	bne.n	8006cac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <TIM_OC2_SetConfig+0x100>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_OC2_SetConfig+0xac>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1d      	ldr	r2, [pc, #116]	; (8006d2c <TIM_OC2_SetConfig+0x104>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_OC2_SetConfig+0xac>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <TIM_OC2_SetConfig+0x108>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_OC2_SetConfig+0xac>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <TIM_OC2_SetConfig+0x10c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC2_SetConfig+0xac>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <TIM_OC2_SetConfig+0x110>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d113      	bne.n	8006cfc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	feff8fff 	.word	0xfeff8fff
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800

08006d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4b33      	ldr	r3, [pc, #204]	; (8006e34 <TIM_OC3_SetConfig+0xf8>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <TIM_OC3_SetConfig+0xfc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d003      	beq.n	8006da2 <TIM_OC3_SetConfig+0x66>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a27      	ldr	r2, [pc, #156]	; (8006e3c <TIM_OC3_SetConfig+0x100>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d10d      	bne.n	8006dbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <TIM_OC3_SetConfig+0xfc>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00f      	beq.n	8006de6 <TIM_OC3_SetConfig+0xaa>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_OC3_SetConfig+0x100>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00b      	beq.n	8006de6 <TIM_OC3_SetConfig+0xaa>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <TIM_OC3_SetConfig+0x104>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d007      	beq.n	8006de6 <TIM_OC3_SetConfig+0xaa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a1a      	ldr	r2, [pc, #104]	; (8006e44 <TIM_OC3_SetConfig+0x108>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_OC3_SetConfig+0xaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <TIM_OC3_SetConfig+0x10c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d113      	bne.n	8006e0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	fffeff8f 	.word	0xfffeff8f
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40010400 	.word	0x40010400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <TIM_OC4_SetConfig+0xbc>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	031b      	lsls	r3, r3, #12
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <TIM_OC4_SetConfig+0xc0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00f      	beq.n	8006ecc <TIM_OC4_SetConfig+0x80>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a18      	ldr	r2, [pc, #96]	; (8006f10 <TIM_OC4_SetConfig+0xc4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00b      	beq.n	8006ecc <TIM_OC4_SetConfig+0x80>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <TIM_OC4_SetConfig+0xc8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d007      	beq.n	8006ecc <TIM_OC4_SetConfig+0x80>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a16      	ldr	r2, [pc, #88]	; (8006f18 <TIM_OC4_SetConfig+0xcc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_OC4_SetConfig+0x80>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <TIM_OC4_SetConfig+0xd0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d109      	bne.n	8006ee0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	019b      	lsls	r3, r3, #6
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	feff8fff 	.word	0xfeff8fff
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40010400 	.word	0x40010400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4b21      	ldr	r3, [pc, #132]	; (8006fd0 <TIM_OC5_SetConfig+0xb0>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	041b      	lsls	r3, r3, #16
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <TIM_OC5_SetConfig+0xb4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_OC5_SetConfig+0x76>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <TIM_OC5_SetConfig+0xb8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_OC5_SetConfig+0x76>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <TIM_OC5_SetConfig+0xbc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_OC5_SetConfig+0x76>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <TIM_OC5_SetConfig+0xc0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_OC5_SetConfig+0x76>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a14      	ldr	r2, [pc, #80]	; (8006fe4 <TIM_OC5_SetConfig+0xc4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d109      	bne.n	8006faa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	621a      	str	r2, [r3, #32]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	fffeff8f 	.word	0xfffeff8f
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40010400 	.word	0x40010400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800

08006fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4b22      	ldr	r3, [pc, #136]	; (800709c <TIM_OC6_SetConfig+0xb4>)
 8007014:	4013      	ands	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	021b      	lsls	r3, r3, #8
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800702a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	051b      	lsls	r3, r3, #20
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <TIM_OC6_SetConfig+0xb8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00f      	beq.n	8007060 <TIM_OC6_SetConfig+0x78>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <TIM_OC6_SetConfig+0xbc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00b      	beq.n	8007060 <TIM_OC6_SetConfig+0x78>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <TIM_OC6_SetConfig+0xc0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d007      	beq.n	8007060 <TIM_OC6_SetConfig+0x78>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC6_SetConfig+0xc4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC6_SetConfig+0x78>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC6_SetConfig+0xc8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d109      	bne.n	8007074 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007066:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	029b      	lsls	r3, r3, #10
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	feff8fff 	.word	0xfeff8fff
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40010400 	.word	0x40010400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2201      	movs	r2, #1
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	401a      	ands	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007114:	2302      	movs	r3, #2
 8007116:	e077      	b.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a35      	ldr	r2, [pc, #212]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d004      	beq.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a34      	ldr	r2, [pc, #208]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d108      	bne.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a25      	ldr	r2, [pc, #148]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d02c      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718a:	d027      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a22      	ldr	r2, [pc, #136]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d022      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a21      	ldr	r2, [pc, #132]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d01d      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d018      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1a      	ldr	r2, [pc, #104]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00e      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1a      	ldr	r2, [pc, #104]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d009      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a18      	ldr	r2, [pc, #96]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a17      	ldr	r2, [pc, #92]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d10c      	bne.n	80071f6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40001800 	.word	0x40001800
 800722c:	40014000 	.word	0x40014000
 8007230:	4000e000 	.word	0x4000e000
 8007234:	4000e400 	.word	0x4000e400

08007238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007250:	2302      	movs	r3, #2
 8007252:	e087      	b.n	8007364 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4313      	orrs	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a27      	ldr	r2, [pc, #156]	; (8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a25      	ldr	r2, [pc, #148]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d106      	bne.n	80072f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1e      	ldr	r2, [pc, #120]	; (8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d126      	bne.n	8007352 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	051b      	lsls	r3, r3, #20
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d106      	bne.n	8007352 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400

08007378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e042      	b.n	8007410 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7f9 fdb9 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2224      	movs	r2, #36	; 0x24
 80073a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fcd6 	bl	8007d6c <UART_SetConfig>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e022      	b.n	8007410 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fb36 	bl	8008a44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fbbd 	bl	8008b88 <UART_CheckIdleState>
 800740e:	4603      	mov	r3, r0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800742e:	2b20      	cmp	r3, #32
 8007430:	f040 8083 	bne.w	800753a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Transmit+0x28>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e07b      	b.n	800753c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_UART_Transmit+0x3a>
 800744e:	2302      	movs	r3, #2
 8007450:	e074      	b.n	800753c <HAL_UART_Transmit+0x124>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2221      	movs	r2, #33	; 0x21
 8007466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800746a:	f7fa f873 	bl	8001554 <HAL_GetTick>
 800746e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007488:	d108      	bne.n	800749c <HAL_UART_Transmit+0x84>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	e003      	b.n	80074a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80074ac:	e02c      	b.n	8007508 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2200      	movs	r2, #0
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 fbb0 	bl	8008c1e <UART_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e039      	b.n	800753c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	3302      	adds	r3, #2
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	e007      	b.n	80074f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1cc      	bne.n	80074ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2200      	movs	r2, #0
 800751c:	2140      	movs	r1, #64	; 0x40
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f001 fb7d 	bl	8008c1e <UART_WaitOnFlagUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e006      	b.n	800753c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007558:	2b20      	cmp	r3, #32
 800755a:	d142      	bne.n	80075e2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_UART_Receive_IT+0x24>
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e03b      	b.n	80075e4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_UART_Receive_IT+0x36>
 8007576:	2302      	movs	r3, #2
 8007578:	e034      	b.n	80075e4 <HAL_UART_Receive_IT+0xa0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a17      	ldr	r2, [pc, #92]	; (80075ec <HAL_UART_Receive_IT+0xa8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e6      	bne.n	80075a0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	461a      	mov	r2, r3
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f001 fbe9 	bl	8008db0 <UART_Start_Receive_IT>
 80075de:	4603      	mov	r3, r0
 80075e0:	e000      	b.n	80075e4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80075e2:	2302      	movs	r3, #2
  }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3728      	adds	r7, #40	; 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	58000c00 	.word	0x58000c00

080075f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b0ba      	sub	sp, #232	; 0xe8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800761a:	f640 030f 	movw	r3, #2063	; 0x80f
 800761e:	4013      	ands	r3, r2
 8007620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11b      	bne.n	8007664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d015      	beq.n	8007664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 835a 	beq.w	8007d0e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
      }
      return;
 8007662:	e354      	b.n	8007d0e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 811f 	beq.w	80078ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800766e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007672:	4b8b      	ldr	r3, [pc, #556]	; (80078a0 <HAL_UART_IRQHandler+0x2b0>)
 8007674:	4013      	ands	r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800767a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800767e:	4b89      	ldr	r3, [pc, #548]	; (80078a4 <HAL_UART_IRQHandler+0x2b4>)
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8112 	beq.w	80078ac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d011      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc8>
 8007694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d011      	beq.n	80076e8 <HAL_UART_IRQHandler+0xf8>
 80076c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2202      	movs	r2, #2
 80076d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d011      	beq.n	8007718 <HAL_UART_IRQHandler+0x128>
 80076f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2204      	movs	r2, #4
 8007706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770e:	f043 0202 	orr.w	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007734:	4b5a      	ldr	r3, [pc, #360]	; (80078a0 <HAL_UART_IRQHandler+0x2b0>)
 8007736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2208      	movs	r2, #8
 8007742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774a:	f043 0208 	orr.w	r2, r3, #8
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800775c:	2b00      	cmp	r3, #0
 800775e:	d012      	beq.n	8007786 <HAL_UART_IRQHandler+0x196>
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00c      	beq.n	8007786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 82c0 	beq.w	8007d12 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d013      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d105      	bne.n	80077b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	d005      	beq.n	80077ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d04f      	beq.n	800788a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fc0a 	bl	8009004 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d141      	bne.n	8007882 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800782a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800782e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1d9      	bne.n	80077fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d013      	beq.n	800787a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007856:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <HAL_UART_IRQHandler+0x2b8>)
 8007858:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785e:	4618      	mov	r0, r3
 8007860:	f7fa fe0c 	bl	800247c <HAL_DMA_Abort_IT>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d017      	beq.n	800789a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007878:	e00f      	b.n	800789a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa60 	bl	8007d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007880:	e00b      	b.n	800789a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa5c 	bl	8007d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	e007      	b.n	800789a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa58 	bl	8007d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007898:	e23b      	b.n	8007d12 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789a:	bf00      	nop
    return;
 800789c:	e239      	b.n	8007d12 <HAL_UART_IRQHandler+0x722>
 800789e:	bf00      	nop
 80078a0:	10000001 	.word	0x10000001
 80078a4:	04000120 	.word	0x04000120
 80078a8:	080090d1 	.word	0x080090d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	f040 81ce 	bne.w	8007c52 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 81c7 	beq.w	8007c52 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 81c0 	beq.w	8007c52 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2210      	movs	r2, #16
 80078d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	f040 813b 	bne.w	8007b60 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a8b      	ldr	r2, [pc, #556]	; (8007b20 <HAL_UART_IRQHandler+0x530>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d059      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a89      	ldr	r2, [pc, #548]	; (8007b24 <HAL_UART_IRQHandler+0x534>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d053      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a87      	ldr	r2, [pc, #540]	; (8007b28 <HAL_UART_IRQHandler+0x538>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d04d      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a85      	ldr	r2, [pc, #532]	; (8007b2c <HAL_UART_IRQHandler+0x53c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d047      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a83      	ldr	r2, [pc, #524]	; (8007b30 <HAL_UART_IRQHandler+0x540>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d041      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a81      	ldr	r2, [pc, #516]	; (8007b34 <HAL_UART_IRQHandler+0x544>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d03b      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a7f      	ldr	r2, [pc, #508]	; (8007b38 <HAL_UART_IRQHandler+0x548>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d035      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a7d      	ldr	r2, [pc, #500]	; (8007b3c <HAL_UART_IRQHandler+0x54c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d02f      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a7b      	ldr	r2, [pc, #492]	; (8007b40 <HAL_UART_IRQHandler+0x550>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d029      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a79      	ldr	r2, [pc, #484]	; (8007b44 <HAL_UART_IRQHandler+0x554>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d023      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a77      	ldr	r2, [pc, #476]	; (8007b48 <HAL_UART_IRQHandler+0x558>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01d      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a75      	ldr	r2, [pc, #468]	; (8007b4c <HAL_UART_IRQHandler+0x55c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d017      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a73      	ldr	r2, [pc, #460]	; (8007b50 <HAL_UART_IRQHandler+0x560>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d011      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a71      	ldr	r2, [pc, #452]	; (8007b54 <HAL_UART_IRQHandler+0x564>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a6f      	ldr	r2, [pc, #444]	; (8007b58 <HAL_UART_IRQHandler+0x568>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d005      	beq.n	80079aa <HAL_UART_IRQHandler+0x3ba>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a6d      	ldr	r2, [pc, #436]	; (8007b5c <HAL_UART_IRQHandler+0x56c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d105      	bne.n	80079b6 <HAL_UART_IRQHandler+0x3c6>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	e004      	b.n	80079c0 <HAL_UART_IRQHandler+0x3d0>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 81a4 	beq.w	8007d16 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079d8:	429a      	cmp	r2, r3
 80079da:	f080 819c 	bcs.w	8007d16 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f2:	f000 8086 	beq.w	8007b02 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1da      	bne.n	80079f6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e1      	bne.n	8007a40 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aa0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e3      	bne.n	8007a7c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	f023 0310 	bic.w	r3, r3, #16
 8007ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ae6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e4      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fa f99f 	bl	8001e40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f91c 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b1c:	e0fb      	b.n	8007d16 <HAL_UART_IRQHandler+0x726>
 8007b1e:	bf00      	nop
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80cc 	beq.w	8007d1a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80c7 	beq.w	8007d1a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bae:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e4      	bne.n	8007b8c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	4b54      	ldr	r3, [pc, #336]	; (8007d28 <HAL_UART_IRQHandler+0x738>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007be6:	633a      	str	r2, [r7, #48]	; 0x30
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e3      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0310 	bic.w	r3, r3, #16
 8007c22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	69b9      	ldr	r1, [r7, #24]
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e4      	bne.n	8007c0e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f882 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c50:	e063      	b.n	8007d1a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00e      	beq.n	8007c7c <HAL_UART_IRQHandler+0x68c>
 8007c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fec9 	bl	8009a0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c7a:	e051      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d014      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d008      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d03a      	beq.n	8007d1e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
    }
    return;
 8007cb0:	e035      	b.n	8007d1e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x6e2>
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fa16 	bl	80090fc <UART_EndTransmit_IT>
    return;
 8007cd0:	e026      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x702>
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 fea2 	bl	8009a34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cf0:	e016      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <HAL_UART_IRQHandler+0x730>
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da0c      	bge.n	8007d20 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fe8a 	bl	8009a20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d0c:	e008      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
      return;
 8007d0e:	bf00      	nop
 8007d10:	e006      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
    return;
 8007d12:	bf00      	nop
 8007d14:	e004      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
      return;
 8007d16:	bf00      	nop
 8007d18:	e002      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
      return;
 8007d1a:	bf00      	nop
 8007d1c:	e000      	b.n	8007d20 <HAL_UART_IRQHandler+0x730>
    return;
 8007d1e:	bf00      	nop
  }
}
 8007d20:	37e8      	adds	r7, #232	; 0xe8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	effffffe 	.word	0xeffffffe

08007d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d70:	b092      	sub	sp, #72	; 0x48
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	431a      	orrs	r2, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4bbe      	ldr	r3, [pc, #760]	; (8008094 <UART_SetConfig+0x328>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007da4:	430b      	orrs	r3, r1
 8007da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4ab3      	ldr	r2, [pc, #716]	; (8008098 <UART_SetConfig+0x32c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	4baf      	ldr	r3, [pc, #700]	; (800809c <UART_SetConfig+0x330>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	f023 010f 	bic.w	r1, r3, #15
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4aa6      	ldr	r2, [pc, #664]	; (80080a0 <UART_SetConfig+0x334>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d177      	bne.n	8007efc <UART_SetConfig+0x190>
 8007e0c:	4ba5      	ldr	r3, [pc, #660]	; (80080a4 <UART_SetConfig+0x338>)
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e14:	2b28      	cmp	r3, #40	; 0x28
 8007e16:	d86d      	bhi.n	8007ef4 <UART_SetConfig+0x188>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0xb4>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007ec5 	.word	0x08007ec5
 8007e24:	08007ef5 	.word	0x08007ef5
 8007e28:	08007ef5 	.word	0x08007ef5
 8007e2c:	08007ef5 	.word	0x08007ef5
 8007e30:	08007ef5 	.word	0x08007ef5
 8007e34:	08007ef5 	.word	0x08007ef5
 8007e38:	08007ef5 	.word	0x08007ef5
 8007e3c:	08007ef5 	.word	0x08007ef5
 8007e40:	08007ecd 	.word	0x08007ecd
 8007e44:	08007ef5 	.word	0x08007ef5
 8007e48:	08007ef5 	.word	0x08007ef5
 8007e4c:	08007ef5 	.word	0x08007ef5
 8007e50:	08007ef5 	.word	0x08007ef5
 8007e54:	08007ef5 	.word	0x08007ef5
 8007e58:	08007ef5 	.word	0x08007ef5
 8007e5c:	08007ef5 	.word	0x08007ef5
 8007e60:	08007ed5 	.word	0x08007ed5
 8007e64:	08007ef5 	.word	0x08007ef5
 8007e68:	08007ef5 	.word	0x08007ef5
 8007e6c:	08007ef5 	.word	0x08007ef5
 8007e70:	08007ef5 	.word	0x08007ef5
 8007e74:	08007ef5 	.word	0x08007ef5
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007edd 	.word	0x08007edd
 8007e84:	08007ef5 	.word	0x08007ef5
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	08007ef5 	.word	0x08007ef5
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007ef5 	.word	0x08007ef5
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007ee5 	.word	0x08007ee5
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	08007ef5 	.word	0x08007ef5
 8007eac:	08007ef5 	.word	0x08007ef5
 8007eb0:	08007ef5 	.word	0x08007ef5
 8007eb4:	08007ef5 	.word	0x08007ef5
 8007eb8:	08007ef5 	.word	0x08007ef5
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007eed 	.word	0x08007eed
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eca:	e326      	b.n	800851a <UART_SetConfig+0x7ae>
 8007ecc:	2304      	movs	r3, #4
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed2:	e322      	b.n	800851a <UART_SetConfig+0x7ae>
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eda:	e31e      	b.n	800851a <UART_SetConfig+0x7ae>
 8007edc:	2310      	movs	r3, #16
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee2:	e31a      	b.n	800851a <UART_SetConfig+0x7ae>
 8007ee4:	2320      	movs	r3, #32
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eea:	e316      	b.n	800851a <UART_SetConfig+0x7ae>
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef2:	e312      	b.n	800851a <UART_SetConfig+0x7ae>
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efa:	e30e      	b.n	800851a <UART_SetConfig+0x7ae>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a69      	ldr	r2, [pc, #420]	; (80080a8 <UART_SetConfig+0x33c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d130      	bne.n	8007f68 <UART_SetConfig+0x1fc>
 8007f06:	4b67      	ldr	r3, [pc, #412]	; (80080a4 <UART_SetConfig+0x338>)
 8007f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d826      	bhi.n	8007f60 <UART_SetConfig+0x1f4>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <UART_SetConfig+0x1ac>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f31 	.word	0x08007f31
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	08007f41 	.word	0x08007f41
 8007f24:	08007f49 	.word	0x08007f49
 8007f28:	08007f51 	.word	0x08007f51
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f36:	e2f0      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3e:	e2ec      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f40:	2308      	movs	r3, #8
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f46:	e2e8      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4e:	e2e4      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f50:	2320      	movs	r3, #32
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f56:	e2e0      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f58:	2340      	movs	r3, #64	; 0x40
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5e:	e2dc      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f66:	e2d8      	b.n	800851a <UART_SetConfig+0x7ae>
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a4f      	ldr	r2, [pc, #316]	; (80080ac <UART_SetConfig+0x340>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d130      	bne.n	8007fd4 <UART_SetConfig+0x268>
 8007f72:	4b4c      	ldr	r3, [pc, #304]	; (80080a4 <UART_SetConfig+0x338>)
 8007f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d826      	bhi.n	8007fcc <UART_SetConfig+0x260>
 8007f7e:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <UART_SetConfig+0x218>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007f9d 	.word	0x08007f9d
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007fad 	.word	0x08007fad
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa2:	e2ba      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e2b6      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e2b2      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fba:	e2ae      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc2:	e2aa      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fc4:	2340      	movs	r3, #64	; 0x40
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e2a6      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd2:	e2a2      	b.n	800851a <UART_SetConfig+0x7ae>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a35      	ldr	r2, [pc, #212]	; (80080b0 <UART_SetConfig+0x344>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d130      	bne.n	8008040 <UART_SetConfig+0x2d4>
 8007fde:	4b31      	ldr	r3, [pc, #196]	; (80080a4 <UART_SetConfig+0x338>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	d826      	bhi.n	8008038 <UART_SetConfig+0x2cc>
 8007fea:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <UART_SetConfig+0x284>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	08008019 	.word	0x08008019
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008029 	.word	0x08008029
 8008004:	08008031 	.word	0x08008031
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e284      	b.n	800851a <UART_SetConfig+0x7ae>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e280      	b.n	800851a <UART_SetConfig+0x7ae>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e27c      	b.n	800851a <UART_SetConfig+0x7ae>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e278      	b.n	800851a <UART_SetConfig+0x7ae>
 8008028:	2320      	movs	r3, #32
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e274      	b.n	800851a <UART_SetConfig+0x7ae>
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e270      	b.n	800851a <UART_SetConfig+0x7ae>
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e26c      	b.n	800851a <UART_SetConfig+0x7ae>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1b      	ldr	r2, [pc, #108]	; (80080b4 <UART_SetConfig+0x348>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d142      	bne.n	80080d0 <UART_SetConfig+0x364>
 800804a:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <UART_SetConfig+0x338>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b05      	cmp	r3, #5
 8008054:	d838      	bhi.n	80080c8 <UART_SetConfig+0x35c>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x2f0>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008075 	.word	0x08008075
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008085 	.word	0x08008085
 8008068:	0800808d 	.word	0x0800808d
 800806c:	080080b9 	.word	0x080080b9
 8008070:	080080c1 	.word	0x080080c1
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e24e      	b.n	800851a <UART_SetConfig+0x7ae>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e24a      	b.n	800851a <UART_SetConfig+0x7ae>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e246      	b.n	800851a <UART_SetConfig+0x7ae>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e242      	b.n	800851a <UART_SetConfig+0x7ae>
 8008094:	cfff69f3 	.word	0xcfff69f3
 8008098:	58000c00 	.word	0x58000c00
 800809c:	11fff4ff 	.word	0x11fff4ff
 80080a0:	40011000 	.word	0x40011000
 80080a4:	58024400 	.word	0x58024400
 80080a8:	40004400 	.word	0x40004400
 80080ac:	40004800 	.word	0x40004800
 80080b0:	40004c00 	.word	0x40004c00
 80080b4:	40005000 	.word	0x40005000
 80080b8:	2320      	movs	r3, #32
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e22c      	b.n	800851a <UART_SetConfig+0x7ae>
 80080c0:	2340      	movs	r3, #64	; 0x40
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e228      	b.n	800851a <UART_SetConfig+0x7ae>
 80080c8:	2380      	movs	r3, #128	; 0x80
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e224      	b.n	800851a <UART_SetConfig+0x7ae>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4ab1      	ldr	r2, [pc, #708]	; (800839c <UART_SetConfig+0x630>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d176      	bne.n	80081c8 <UART_SetConfig+0x45c>
 80080da:	4bb1      	ldr	r3, [pc, #708]	; (80083a0 <UART_SetConfig+0x634>)
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080e2:	2b28      	cmp	r3, #40	; 0x28
 80080e4:	d86c      	bhi.n	80081c0 <UART_SetConfig+0x454>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x380>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008191 	.word	0x08008191
 80080f0:	080081c1 	.word	0x080081c1
 80080f4:	080081c1 	.word	0x080081c1
 80080f8:	080081c1 	.word	0x080081c1
 80080fc:	080081c1 	.word	0x080081c1
 8008100:	080081c1 	.word	0x080081c1
 8008104:	080081c1 	.word	0x080081c1
 8008108:	080081c1 	.word	0x080081c1
 800810c:	08008199 	.word	0x08008199
 8008110:	080081c1 	.word	0x080081c1
 8008114:	080081c1 	.word	0x080081c1
 8008118:	080081c1 	.word	0x080081c1
 800811c:	080081c1 	.word	0x080081c1
 8008120:	080081c1 	.word	0x080081c1
 8008124:	080081c1 	.word	0x080081c1
 8008128:	080081c1 	.word	0x080081c1
 800812c:	080081a1 	.word	0x080081a1
 8008130:	080081c1 	.word	0x080081c1
 8008134:	080081c1 	.word	0x080081c1
 8008138:	080081c1 	.word	0x080081c1
 800813c:	080081c1 	.word	0x080081c1
 8008140:	080081c1 	.word	0x080081c1
 8008144:	080081c1 	.word	0x080081c1
 8008148:	080081c1 	.word	0x080081c1
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081c1 	.word	0x080081c1
 8008154:	080081c1 	.word	0x080081c1
 8008158:	080081c1 	.word	0x080081c1
 800815c:	080081c1 	.word	0x080081c1
 8008160:	080081c1 	.word	0x080081c1
 8008164:	080081c1 	.word	0x080081c1
 8008168:	080081c1 	.word	0x080081c1
 800816c:	080081b1 	.word	0x080081b1
 8008170:	080081c1 	.word	0x080081c1
 8008174:	080081c1 	.word	0x080081c1
 8008178:	080081c1 	.word	0x080081c1
 800817c:	080081c1 	.word	0x080081c1
 8008180:	080081c1 	.word	0x080081c1
 8008184:	080081c1 	.word	0x080081c1
 8008188:	080081c1 	.word	0x080081c1
 800818c:	080081b9 	.word	0x080081b9
 8008190:	2301      	movs	r3, #1
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e1c0      	b.n	800851a <UART_SetConfig+0x7ae>
 8008198:	2304      	movs	r3, #4
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e1bc      	b.n	800851a <UART_SetConfig+0x7ae>
 80081a0:	2308      	movs	r3, #8
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e1b8      	b.n	800851a <UART_SetConfig+0x7ae>
 80081a8:	2310      	movs	r3, #16
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e1b4      	b.n	800851a <UART_SetConfig+0x7ae>
 80081b0:	2320      	movs	r3, #32
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e1b0      	b.n	800851a <UART_SetConfig+0x7ae>
 80081b8:	2340      	movs	r3, #64	; 0x40
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e1ac      	b.n	800851a <UART_SetConfig+0x7ae>
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e1a8      	b.n	800851a <UART_SetConfig+0x7ae>
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a75      	ldr	r2, [pc, #468]	; (80083a4 <UART_SetConfig+0x638>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d130      	bne.n	8008234 <UART_SetConfig+0x4c8>
 80081d2:	4b73      	ldr	r3, [pc, #460]	; (80083a0 <UART_SetConfig+0x634>)
 80081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d826      	bhi.n	800822c <UART_SetConfig+0x4c0>
 80081de:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <UART_SetConfig+0x478>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	08008205 	.word	0x08008205
 80081ec:	0800820d 	.word	0x0800820d
 80081f0:	08008215 	.word	0x08008215
 80081f4:	0800821d 	.word	0x0800821d
 80081f8:	08008225 	.word	0x08008225
 80081fc:	2300      	movs	r3, #0
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e18a      	b.n	800851a <UART_SetConfig+0x7ae>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e186      	b.n	800851a <UART_SetConfig+0x7ae>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e182      	b.n	800851a <UART_SetConfig+0x7ae>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e17e      	b.n	800851a <UART_SetConfig+0x7ae>
 800821c:	2320      	movs	r3, #32
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e17a      	b.n	800851a <UART_SetConfig+0x7ae>
 8008224:	2340      	movs	r3, #64	; 0x40
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e176      	b.n	800851a <UART_SetConfig+0x7ae>
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e172      	b.n	800851a <UART_SetConfig+0x7ae>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a5b      	ldr	r2, [pc, #364]	; (80083a8 <UART_SetConfig+0x63c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d130      	bne.n	80082a0 <UART_SetConfig+0x534>
 800823e:	4b58      	ldr	r3, [pc, #352]	; (80083a0 <UART_SetConfig+0x634>)
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b05      	cmp	r3, #5
 8008248:	d826      	bhi.n	8008298 <UART_SetConfig+0x52c>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0x4e4>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008269 	.word	0x08008269
 8008254:	08008271 	.word	0x08008271
 8008258:	08008279 	.word	0x08008279
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e154      	b.n	800851a <UART_SetConfig+0x7ae>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e150      	b.n	800851a <UART_SetConfig+0x7ae>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e14c      	b.n	800851a <UART_SetConfig+0x7ae>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e148      	b.n	800851a <UART_SetConfig+0x7ae>
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e144      	b.n	800851a <UART_SetConfig+0x7ae>
 8008290:	2340      	movs	r3, #64	; 0x40
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e140      	b.n	800851a <UART_SetConfig+0x7ae>
 8008298:	2380      	movs	r3, #128	; 0x80
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e13c      	b.n	800851a <UART_SetConfig+0x7ae>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a41      	ldr	r2, [pc, #260]	; (80083ac <UART_SetConfig+0x640>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	f040 8082 	bne.w	80083b0 <UART_SetConfig+0x644>
 80082ac:	4b3c      	ldr	r3, [pc, #240]	; (80083a0 <UART_SetConfig+0x634>)
 80082ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082b4:	2b28      	cmp	r3, #40	; 0x28
 80082b6:	d86d      	bhi.n	8008394 <UART_SetConfig+0x628>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x554>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	08008365 	.word	0x08008365
 80082c4:	08008395 	.word	0x08008395
 80082c8:	08008395 	.word	0x08008395
 80082cc:	08008395 	.word	0x08008395
 80082d0:	08008395 	.word	0x08008395
 80082d4:	08008395 	.word	0x08008395
 80082d8:	08008395 	.word	0x08008395
 80082dc:	08008395 	.word	0x08008395
 80082e0:	0800836d 	.word	0x0800836d
 80082e4:	08008395 	.word	0x08008395
 80082e8:	08008395 	.word	0x08008395
 80082ec:	08008395 	.word	0x08008395
 80082f0:	08008395 	.word	0x08008395
 80082f4:	08008395 	.word	0x08008395
 80082f8:	08008395 	.word	0x08008395
 80082fc:	08008395 	.word	0x08008395
 8008300:	08008375 	.word	0x08008375
 8008304:	08008395 	.word	0x08008395
 8008308:	08008395 	.word	0x08008395
 800830c:	08008395 	.word	0x08008395
 8008310:	08008395 	.word	0x08008395
 8008314:	08008395 	.word	0x08008395
 8008318:	08008395 	.word	0x08008395
 800831c:	08008395 	.word	0x08008395
 8008320:	0800837d 	.word	0x0800837d
 8008324:	08008395 	.word	0x08008395
 8008328:	08008395 	.word	0x08008395
 800832c:	08008395 	.word	0x08008395
 8008330:	08008395 	.word	0x08008395
 8008334:	08008395 	.word	0x08008395
 8008338:	08008395 	.word	0x08008395
 800833c:	08008395 	.word	0x08008395
 8008340:	08008385 	.word	0x08008385
 8008344:	08008395 	.word	0x08008395
 8008348:	08008395 	.word	0x08008395
 800834c:	08008395 	.word	0x08008395
 8008350:	08008395 	.word	0x08008395
 8008354:	08008395 	.word	0x08008395
 8008358:	08008395 	.word	0x08008395
 800835c:	08008395 	.word	0x08008395
 8008360:	0800838d 	.word	0x0800838d
 8008364:	2301      	movs	r3, #1
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e0d6      	b.n	800851a <UART_SetConfig+0x7ae>
 800836c:	2304      	movs	r3, #4
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e0d2      	b.n	800851a <UART_SetConfig+0x7ae>
 8008374:	2308      	movs	r3, #8
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e0ce      	b.n	800851a <UART_SetConfig+0x7ae>
 800837c:	2310      	movs	r3, #16
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e0ca      	b.n	800851a <UART_SetConfig+0x7ae>
 8008384:	2320      	movs	r3, #32
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e0c6      	b.n	800851a <UART_SetConfig+0x7ae>
 800838c:	2340      	movs	r3, #64	; 0x40
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e0c2      	b.n	800851a <UART_SetConfig+0x7ae>
 8008394:	2380      	movs	r3, #128	; 0x80
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e0be      	b.n	800851a <UART_SetConfig+0x7ae>
 800839c:	40011400 	.word	0x40011400
 80083a0:	58024400 	.word	0x58024400
 80083a4:	40007800 	.word	0x40007800
 80083a8:	40007c00 	.word	0x40007c00
 80083ac:	40011800 	.word	0x40011800
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4aad      	ldr	r2, [pc, #692]	; (800866c <UART_SetConfig+0x900>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d176      	bne.n	80084a8 <UART_SetConfig+0x73c>
 80083ba:	4bad      	ldr	r3, [pc, #692]	; (8008670 <UART_SetConfig+0x904>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083c2:	2b28      	cmp	r3, #40	; 0x28
 80083c4:	d86c      	bhi.n	80084a0 <UART_SetConfig+0x734>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <UART_SetConfig+0x660>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	08008471 	.word	0x08008471
 80083d0:	080084a1 	.word	0x080084a1
 80083d4:	080084a1 	.word	0x080084a1
 80083d8:	080084a1 	.word	0x080084a1
 80083dc:	080084a1 	.word	0x080084a1
 80083e0:	080084a1 	.word	0x080084a1
 80083e4:	080084a1 	.word	0x080084a1
 80083e8:	080084a1 	.word	0x080084a1
 80083ec:	08008479 	.word	0x08008479
 80083f0:	080084a1 	.word	0x080084a1
 80083f4:	080084a1 	.word	0x080084a1
 80083f8:	080084a1 	.word	0x080084a1
 80083fc:	080084a1 	.word	0x080084a1
 8008400:	080084a1 	.word	0x080084a1
 8008404:	080084a1 	.word	0x080084a1
 8008408:	080084a1 	.word	0x080084a1
 800840c:	08008481 	.word	0x08008481
 8008410:	080084a1 	.word	0x080084a1
 8008414:	080084a1 	.word	0x080084a1
 8008418:	080084a1 	.word	0x080084a1
 800841c:	080084a1 	.word	0x080084a1
 8008420:	080084a1 	.word	0x080084a1
 8008424:	080084a1 	.word	0x080084a1
 8008428:	080084a1 	.word	0x080084a1
 800842c:	08008489 	.word	0x08008489
 8008430:	080084a1 	.word	0x080084a1
 8008434:	080084a1 	.word	0x080084a1
 8008438:	080084a1 	.word	0x080084a1
 800843c:	080084a1 	.word	0x080084a1
 8008440:	080084a1 	.word	0x080084a1
 8008444:	080084a1 	.word	0x080084a1
 8008448:	080084a1 	.word	0x080084a1
 800844c:	08008491 	.word	0x08008491
 8008450:	080084a1 	.word	0x080084a1
 8008454:	080084a1 	.word	0x080084a1
 8008458:	080084a1 	.word	0x080084a1
 800845c:	080084a1 	.word	0x080084a1
 8008460:	080084a1 	.word	0x080084a1
 8008464:	080084a1 	.word	0x080084a1
 8008468:	080084a1 	.word	0x080084a1
 800846c:	08008499 	.word	0x08008499
 8008470:	2301      	movs	r3, #1
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e050      	b.n	800851a <UART_SetConfig+0x7ae>
 8008478:	2304      	movs	r3, #4
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e04c      	b.n	800851a <UART_SetConfig+0x7ae>
 8008480:	2308      	movs	r3, #8
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008486:	e048      	b.n	800851a <UART_SetConfig+0x7ae>
 8008488:	2310      	movs	r3, #16
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848e:	e044      	b.n	800851a <UART_SetConfig+0x7ae>
 8008490:	2320      	movs	r3, #32
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008496:	e040      	b.n	800851a <UART_SetConfig+0x7ae>
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e03c      	b.n	800851a <UART_SetConfig+0x7ae>
 80084a0:	2380      	movs	r3, #128	; 0x80
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e038      	b.n	800851a <UART_SetConfig+0x7ae>
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a71      	ldr	r2, [pc, #452]	; (8008674 <UART_SetConfig+0x908>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d130      	bne.n	8008514 <UART_SetConfig+0x7a8>
 80084b2:	4b6f      	ldr	r3, [pc, #444]	; (8008670 <UART_SetConfig+0x904>)
 80084b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d826      	bhi.n	800850c <UART_SetConfig+0x7a0>
 80084be:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <UART_SetConfig+0x758>)
 80084c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c4:	080084dd 	.word	0x080084dd
 80084c8:	080084e5 	.word	0x080084e5
 80084cc:	080084ed 	.word	0x080084ed
 80084d0:	080084f5 	.word	0x080084f5
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	08008505 	.word	0x08008505
 80084dc:	2302      	movs	r3, #2
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e01a      	b.n	800851a <UART_SetConfig+0x7ae>
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e016      	b.n	800851a <UART_SetConfig+0x7ae>
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e012      	b.n	800851a <UART_SetConfig+0x7ae>
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e00e      	b.n	800851a <UART_SetConfig+0x7ae>
 80084fc:	2320      	movs	r3, #32
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008502:	e00a      	b.n	800851a <UART_SetConfig+0x7ae>
 8008504:	2340      	movs	r3, #64	; 0x40
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e006      	b.n	800851a <UART_SetConfig+0x7ae>
 800850c:	2380      	movs	r3, #128	; 0x80
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e002      	b.n	800851a <UART_SetConfig+0x7ae>
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a55      	ldr	r2, [pc, #340]	; (8008674 <UART_SetConfig+0x908>)
 8008520:	4293      	cmp	r3, r2
 8008522:	f040 80f8 	bne.w	8008716 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008526:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800852a:	2b20      	cmp	r3, #32
 800852c:	dc46      	bgt.n	80085bc <UART_SetConfig+0x850>
 800852e:	2b02      	cmp	r3, #2
 8008530:	db75      	blt.n	800861e <UART_SetConfig+0x8b2>
 8008532:	3b02      	subs	r3, #2
 8008534:	2b1e      	cmp	r3, #30
 8008536:	d872      	bhi.n	800861e <UART_SetConfig+0x8b2>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x7d4>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	080085c3 	.word	0x080085c3
 8008544:	0800861f 	.word	0x0800861f
 8008548:	080085cb 	.word	0x080085cb
 800854c:	0800861f 	.word	0x0800861f
 8008550:	0800861f 	.word	0x0800861f
 8008554:	0800861f 	.word	0x0800861f
 8008558:	080085db 	.word	0x080085db
 800855c:	0800861f 	.word	0x0800861f
 8008560:	0800861f 	.word	0x0800861f
 8008564:	0800861f 	.word	0x0800861f
 8008568:	0800861f 	.word	0x0800861f
 800856c:	0800861f 	.word	0x0800861f
 8008570:	0800861f 	.word	0x0800861f
 8008574:	0800861f 	.word	0x0800861f
 8008578:	080085eb 	.word	0x080085eb
 800857c:	0800861f 	.word	0x0800861f
 8008580:	0800861f 	.word	0x0800861f
 8008584:	0800861f 	.word	0x0800861f
 8008588:	0800861f 	.word	0x0800861f
 800858c:	0800861f 	.word	0x0800861f
 8008590:	0800861f 	.word	0x0800861f
 8008594:	0800861f 	.word	0x0800861f
 8008598:	0800861f 	.word	0x0800861f
 800859c:	0800861f 	.word	0x0800861f
 80085a0:	0800861f 	.word	0x0800861f
 80085a4:	0800861f 	.word	0x0800861f
 80085a8:	0800861f 	.word	0x0800861f
 80085ac:	0800861f 	.word	0x0800861f
 80085b0:	0800861f 	.word	0x0800861f
 80085b4:	0800861f 	.word	0x0800861f
 80085b8:	08008611 	.word	0x08008611
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	d02a      	beq.n	8008616 <UART_SetConfig+0x8aa>
 80085c0:	e02d      	b.n	800861e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085c2:	f7fd fb51 	bl	8005c68 <HAL_RCCEx_GetD3PCLK1Freq>
 80085c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085c8:	e02f      	b.n	800862a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fb60 	bl	8005c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d8:	e027      	b.n	800862a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085da:	f107 0318 	add.w	r3, r7, #24
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fd fcac 	bl	8005f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e8:	e01f      	b.n	800862a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ea:	4b21      	ldr	r3, [pc, #132]	; (8008670 <UART_SetConfig+0x904>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085f6:	4b1e      	ldr	r3, [pc, #120]	; (8008670 <UART_SetConfig+0x904>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	08db      	lsrs	r3, r3, #3
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	4a1d      	ldr	r2, [pc, #116]	; (8008678 <UART_SetConfig+0x90c>)
 8008602:	fa22 f303 	lsr.w	r3, r2, r3
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008608:	e00f      	b.n	800862a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800860a:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <UART_SetConfig+0x90c>)
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860e:	e00c      	b.n	800862a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008610:	4b1a      	ldr	r3, [pc, #104]	; (800867c <UART_SetConfig+0x910>)
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008614:	e009      	b.n	800862a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861c:	e005      	b.n	800862a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 81ee 	beq.w	8008a0e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	4a12      	ldr	r2, [pc, #72]	; (8008680 <UART_SetConfig+0x914>)
 8008638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800863c:	461a      	mov	r2, r3
 800863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008640:	fbb3 f3f2 	udiv	r3, r3, r2
 8008644:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	429a      	cmp	r2, r3
 8008654:	d305      	bcc.n	8008662 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800865c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865e:	429a      	cmp	r2, r3
 8008660:	d910      	bls.n	8008684 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008668:	e1d1      	b.n	8008a0e <UART_SetConfig+0xca2>
 800866a:	bf00      	nop
 800866c:	40011c00 	.word	0x40011c00
 8008670:	58024400 	.word	0x58024400
 8008674:	58000c00 	.word	0x58000c00
 8008678:	03d09000 	.word	0x03d09000
 800867c:	003d0900 	.word	0x003d0900
 8008680:	08009d3c 	.word	0x08009d3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008686:	2200      	movs	r2, #0
 8008688:	60bb      	str	r3, [r7, #8]
 800868a:	60fa      	str	r2, [r7, #12]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	4ac0      	ldr	r2, [pc, #768]	; (8008994 <UART_SetConfig+0xc28>)
 8008692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008696:	b29b      	uxth	r3, r3
 8008698:	2200      	movs	r2, #0
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086a6:	f7f7 fe3b 	bl	8000320 <__aeabi_uldivmod>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4610      	mov	r0, r2
 80086b0:	4619      	mov	r1, r3
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	020b      	lsls	r3, r1, #8
 80086bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086c0:	0202      	lsls	r2, r0, #8
 80086c2:	6979      	ldr	r1, [r7, #20]
 80086c4:	6849      	ldr	r1, [r1, #4]
 80086c6:	0849      	lsrs	r1, r1, #1
 80086c8:	2000      	movs	r0, #0
 80086ca:	460c      	mov	r4, r1
 80086cc:	4605      	mov	r5, r0
 80086ce:	eb12 0804 	adds.w	r8, r2, r4
 80086d2:	eb43 0905 	adc.w	r9, r3, r5
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	469a      	mov	sl, r3
 80086de:	4693      	mov	fp, r2
 80086e0:	4652      	mov	r2, sl
 80086e2:	465b      	mov	r3, fp
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f7 fe1a 	bl	8000320 <__aeabi_uldivmod>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4613      	mov	r3, r2
 80086f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086fa:	d308      	bcc.n	800870e <UART_SetConfig+0x9a2>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008702:	d204      	bcs.n	800870e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800870a:	60da      	str	r2, [r3, #12]
 800870c:	e17f      	b.n	8008a0e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008714:	e17b      	b.n	8008a0e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871e:	f040 80bd 	bne.w	800889c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008722:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008726:	2b20      	cmp	r3, #32
 8008728:	dc48      	bgt.n	80087bc <UART_SetConfig+0xa50>
 800872a:	2b00      	cmp	r3, #0
 800872c:	db7b      	blt.n	8008826 <UART_SetConfig+0xaba>
 800872e:	2b20      	cmp	r3, #32
 8008730:	d879      	bhi.n	8008826 <UART_SetConfig+0xaba>
 8008732:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <UART_SetConfig+0x9cc>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	080087c3 	.word	0x080087c3
 800873c:	080087cb 	.word	0x080087cb
 8008740:	08008827 	.word	0x08008827
 8008744:	08008827 	.word	0x08008827
 8008748:	080087d3 	.word	0x080087d3
 800874c:	08008827 	.word	0x08008827
 8008750:	08008827 	.word	0x08008827
 8008754:	08008827 	.word	0x08008827
 8008758:	080087e3 	.word	0x080087e3
 800875c:	08008827 	.word	0x08008827
 8008760:	08008827 	.word	0x08008827
 8008764:	08008827 	.word	0x08008827
 8008768:	08008827 	.word	0x08008827
 800876c:	08008827 	.word	0x08008827
 8008770:	08008827 	.word	0x08008827
 8008774:	08008827 	.word	0x08008827
 8008778:	080087f3 	.word	0x080087f3
 800877c:	08008827 	.word	0x08008827
 8008780:	08008827 	.word	0x08008827
 8008784:	08008827 	.word	0x08008827
 8008788:	08008827 	.word	0x08008827
 800878c:	08008827 	.word	0x08008827
 8008790:	08008827 	.word	0x08008827
 8008794:	08008827 	.word	0x08008827
 8008798:	08008827 	.word	0x08008827
 800879c:	08008827 	.word	0x08008827
 80087a0:	08008827 	.word	0x08008827
 80087a4:	08008827 	.word	0x08008827
 80087a8:	08008827 	.word	0x08008827
 80087ac:	08008827 	.word	0x08008827
 80087b0:	08008827 	.word	0x08008827
 80087b4:	08008827 	.word	0x08008827
 80087b8:	08008819 	.word	0x08008819
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d02e      	beq.n	800881e <UART_SetConfig+0xab2>
 80087c0:	e031      	b.n	8008826 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c2:	f7fc fb2b 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 80087c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087c8:	e033      	b.n	8008832 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ca:	f7fc fb3d 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 80087ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087d0:	e02f      	b.n	8008832 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd fa5c 	bl	8005c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e0:	e027      	b.n	8008832 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e2:	f107 0318 	add.w	r3, r7, #24
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd fba8 	bl	8005f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f0:	e01f      	b.n	8008832 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f2:	4b69      	ldr	r3, [pc, #420]	; (8008998 <UART_SetConfig+0xc2c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0320 	and.w	r3, r3, #32
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087fe:	4b66      	ldr	r3, [pc, #408]	; (8008998 <UART_SetConfig+0xc2c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	08db      	lsrs	r3, r3, #3
 8008804:	f003 0303 	and.w	r3, r3, #3
 8008808:	4a64      	ldr	r2, [pc, #400]	; (800899c <UART_SetConfig+0xc30>)
 800880a:	fa22 f303 	lsr.w	r3, r2, r3
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008810:	e00f      	b.n	8008832 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008812:	4b62      	ldr	r3, [pc, #392]	; (800899c <UART_SetConfig+0xc30>)
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008816:	e00c      	b.n	8008832 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008818:	4b61      	ldr	r3, [pc, #388]	; (80089a0 <UART_SetConfig+0xc34>)
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800881c:	e009      	b.n	8008832 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800881e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008824:	e005      	b.n	8008832 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80ea 	beq.w	8008a0e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	4a55      	ldr	r2, [pc, #340]	; (8008994 <UART_SetConfig+0xc28>)
 8008840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008844:	461a      	mov	r2, r3
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	fbb3 f3f2 	udiv	r3, r3, r2
 800884c:	005a      	lsls	r2, r3, #1
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	441a      	add	r2, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	fbb2 f3f3 	udiv	r3, r2, r3
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	2b0f      	cmp	r3, #15
 8008864:	d916      	bls.n	8008894 <UART_SetConfig+0xb28>
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800886c:	d212      	bcs.n	8008894 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	b29b      	uxth	r3, r3
 8008872:	f023 030f 	bic.w	r3, r3, #15
 8008876:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	b29b      	uxth	r3, r3
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	b29a      	uxth	r2, r3
 8008884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008886:	4313      	orrs	r3, r2
 8008888:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008890:	60da      	str	r2, [r3, #12]
 8008892:	e0bc      	b.n	8008a0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800889a:	e0b8      	b.n	8008a0e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800889c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	dc4b      	bgt.n	800893c <UART_SetConfig+0xbd0>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f2c0 8087 	blt.w	80089b8 <UART_SetConfig+0xc4c>
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	f200 8084 	bhi.w	80089b8 <UART_SetConfig+0xc4c>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <UART_SetConfig+0xb4c>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	08008943 	.word	0x08008943
 80088bc:	0800894b 	.word	0x0800894b
 80088c0:	080089b9 	.word	0x080089b9
 80088c4:	080089b9 	.word	0x080089b9
 80088c8:	08008953 	.word	0x08008953
 80088cc:	080089b9 	.word	0x080089b9
 80088d0:	080089b9 	.word	0x080089b9
 80088d4:	080089b9 	.word	0x080089b9
 80088d8:	08008963 	.word	0x08008963
 80088dc:	080089b9 	.word	0x080089b9
 80088e0:	080089b9 	.word	0x080089b9
 80088e4:	080089b9 	.word	0x080089b9
 80088e8:	080089b9 	.word	0x080089b9
 80088ec:	080089b9 	.word	0x080089b9
 80088f0:	080089b9 	.word	0x080089b9
 80088f4:	080089b9 	.word	0x080089b9
 80088f8:	08008973 	.word	0x08008973
 80088fc:	080089b9 	.word	0x080089b9
 8008900:	080089b9 	.word	0x080089b9
 8008904:	080089b9 	.word	0x080089b9
 8008908:	080089b9 	.word	0x080089b9
 800890c:	080089b9 	.word	0x080089b9
 8008910:	080089b9 	.word	0x080089b9
 8008914:	080089b9 	.word	0x080089b9
 8008918:	080089b9 	.word	0x080089b9
 800891c:	080089b9 	.word	0x080089b9
 8008920:	080089b9 	.word	0x080089b9
 8008924:	080089b9 	.word	0x080089b9
 8008928:	080089b9 	.word	0x080089b9
 800892c:	080089b9 	.word	0x080089b9
 8008930:	080089b9 	.word	0x080089b9
 8008934:	080089b9 	.word	0x080089b9
 8008938:	080089ab 	.word	0x080089ab
 800893c:	2b40      	cmp	r3, #64	; 0x40
 800893e:	d037      	beq.n	80089b0 <UART_SetConfig+0xc44>
 8008940:	e03a      	b.n	80089b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008942:	f7fc fa6b 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8008946:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008948:	e03c      	b.n	80089c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800894a:	f7fc fa7d 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 800894e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008950:	e038      	b.n	80089c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f7fd f99c 	bl	8005c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008960:	e030      	b.n	80089c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008962:	f107 0318 	add.w	r3, r7, #24
 8008966:	4618      	mov	r0, r3
 8008968:	f7fd fae8 	bl	8005f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008970:	e028      	b.n	80089c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <UART_SetConfig+0xc2c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d012      	beq.n	80089a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <UART_SetConfig+0xc2c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	4a04      	ldr	r2, [pc, #16]	; (800899c <UART_SetConfig+0xc30>)
 800898a:	fa22 f303 	lsr.w	r3, r2, r3
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008990:	e018      	b.n	80089c4 <UART_SetConfig+0xc58>
 8008992:	bf00      	nop
 8008994:	08009d3c 	.word	0x08009d3c
 8008998:	58024400 	.word	0x58024400
 800899c:	03d09000 	.word	0x03d09000
 80089a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80089a4:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <UART_SetConfig+0xccc>)
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a8:	e00c      	b.n	80089c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089aa:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <UART_SetConfig+0xcd0>)
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ae:	e009      	b.n	80089c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b6:	e005      	b.n	80089c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80089c2:	bf00      	nop
    }

    if (pclk != 0U)
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d021      	beq.n	8008a0e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	4a1c      	ldr	r2, [pc, #112]	; (8008a40 <UART_SetConfig+0xcd4>)
 80089d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	441a      	add	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	2b0f      	cmp	r3, #15
 80089f2:	d909      	bls.n	8008a08 <UART_SetConfig+0xc9c>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fa:	d205      	bcs.n	8008a08 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60da      	str	r2, [r3, #12]
 8008a06:	e002      	b.n	8008a0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a2a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3748      	adds	r7, #72	; 0x48
 8008a32:	46bd      	mov	sp, r7
 8008a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a38:	03d09000 	.word	0x03d09000
 8008a3c:	003d0900 	.word	0x003d0900
 8008a40:	08009d3c 	.word	0x08009d3c

08008a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b42:	d10a      	bne.n	8008b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b98:	f7f8 fcdc 	bl	8001554 <HAL_GetTick>
 8008b9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d10e      	bne.n	8008bca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f82f 	bl	8008c1e <UART_WaitOnFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e025      	b.n	8008c16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d10e      	bne.n	8008bf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f819 	bl	8008c1e <UART_WaitOnFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e00f      	b.n	8008c16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b09c      	sub	sp, #112	; 0x70
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2e:	e0a9      	b.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	f000 80a5 	beq.w	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3a:	f7f8 fc8b 	bl	8001554 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d302      	bcc.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d140      	bne.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c64:	667b      	str	r3, [r7, #100]	; 0x64
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e6      	bne.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	663b      	str	r3, [r7, #96]	; 0x60
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ca2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ca4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e5      	bne.n	8008c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e069      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d051      	beq.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cee:	d149      	bne.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e6      	bne.n	8008cfa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d4c:	623a      	str	r2, [r7, #32]
 8008d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	69f9      	ldr	r1, [r7, #28]
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e5      	bne.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e010      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69da      	ldr	r2, [r3, #28]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	f43f af46 	beq.w	8008c30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3770      	adds	r7, #112	; 0x70
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b0a3      	sub	sp, #140	; 0x8c
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	88fa      	ldrh	r2, [r7, #6]
 8008dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de2:	d10e      	bne.n	8008e02 <UART_Start_Receive_IT+0x52>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d105      	bne.n	8008df8 <UART_Start_Receive_IT+0x48>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008df2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008df6:	e02d      	b.n	8008e54 <UART_Start_Receive_IT+0xa4>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	22ff      	movs	r2, #255	; 0xff
 8008dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e00:	e028      	b.n	8008e54 <UART_Start_Receive_IT+0xa4>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <UART_Start_Receive_IT+0x76>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <UART_Start_Receive_IT+0x6c>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	22ff      	movs	r2, #255	; 0xff
 8008e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e1a:	e01b      	b.n	8008e54 <UART_Start_Receive_IT+0xa4>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	227f      	movs	r2, #127	; 0x7f
 8008e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e24:	e016      	b.n	8008e54 <UART_Start_Receive_IT+0xa4>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e2e:	d10d      	bne.n	8008e4c <UART_Start_Receive_IT+0x9c>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <UART_Start_Receive_IT+0x92>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	227f      	movs	r2, #127	; 0x7f
 8008e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e40:	e008      	b.n	8008e54 <UART_Start_Receive_IT+0xa4>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	223f      	movs	r2, #63	; 0x3f
 8008e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e4a:	e003      	b.n	8008e54 <UART_Start_Receive_IT+0xa4>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2222      	movs	r2, #34	; 0x22
 8008e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e76:	f043 0301 	orr.w	r3, r3, #1
 8008e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008e88:	673a      	str	r2, [r7, #112]	; 0x70
 8008e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008e8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e3      	bne.n	8008e64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea4:	d153      	bne.n	8008f4e <UART_Start_Receive_IT+0x19e>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008eac:	88fa      	ldrh	r2, [r7, #6]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d34d      	bcc.n	8008f4e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	d107      	bne.n	8008ecc <UART_Start_Receive_IT+0x11c>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4a4b      	ldr	r2, [pc, #300]	; (8008ff4 <UART_Start_Receive_IT+0x244>)
 8008ec8:	671a      	str	r2, [r3, #112]	; 0x70
 8008eca:	e002      	b.n	8008ed2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4a4a      	ldr	r2, [pc, #296]	; (8008ff8 <UART_Start_Receive_IT+0x248>)
 8008ed0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01a      	beq.n	8008f18 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eea:	e853 3f00 	ldrex	r3, [r3]
 8008eee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f06:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e4      	bne.n	8008ee2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f22:	e853 3f00 	ldrex	r3, [r3]
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3308      	adds	r3, #8
 8008f36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f38:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e5      	bne.n	8008f18 <UART_Start_Receive_IT+0x168>
 8008f4c:	e04a      	b.n	8008fe4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f56:	d107      	bne.n	8008f68 <UART_Start_Receive_IT+0x1b8>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d103      	bne.n	8008f68 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <UART_Start_Receive_IT+0x24c>)
 8008f64:	671a      	str	r2, [r3, #112]	; 0x70
 8008f66:	e002      	b.n	8008f6e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4a25      	ldr	r2, [pc, #148]	; (8009000 <UART_Start_Receive_IT+0x250>)
 8008f6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d019      	beq.n	8008fb2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008f92:	677b      	str	r3, [r7, #116]	; 0x74
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa4:	e841 2300 	strex	r3, r2, [r1]
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e6      	bne.n	8008f7e <UART_Start_Receive_IT+0x1ce>
 8008fb0:	e018      	b.n	8008fe4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f043 0320 	orr.w	r3, r3, #32
 8008fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd0:	623b      	str	r3, [r7, #32]
 8008fd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	69f9      	ldr	r1, [r7, #28]
 8008fd6:	6a3a      	ldr	r2, [r7, #32]
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e6      	bne.n	8008fb2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	378c      	adds	r7, #140	; 0x8c
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	0800970d 	.word	0x0800970d
 8008ff8:	08009415 	.word	0x08009415
 8008ffc:	080092b3 	.word	0x080092b3
 8009000:	08009153 	.word	0x08009153

08009004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b095      	sub	sp, #84	; 0x54
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	643b      	str	r3, [r7, #64]	; 0x40
 800902c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e6      	bne.n	800900c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	61fb      	str	r3, [r7, #28]
   return(result);
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <UART_EndRxTransfer+0xc8>)
 8009052:	4013      	ands	r3, r2
 8009054:	64bb      	str	r3, [r7, #72]	; 0x48
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800905e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e5      	bne.n	800903e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d118      	bne.n	80090ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	60bb      	str	r3, [r7, #8]
   return(result);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f023 0310 	bic.w	r3, r3, #16
 800908e:	647b      	str	r3, [r7, #68]	; 0x44
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	613b      	str	r3, [r7, #16]
   return(result);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e6      	bne.n	800907a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80090c0:	bf00      	nop
 80090c2:	3754      	adds	r7, #84	; 0x54
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	effffffe 	.word	0xeffffffe

080090d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f7fe fe26 	bl	8007d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	60bb      	str	r3, [r7, #8]
   return(result);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	61bb      	str	r3, [r7, #24]
 8009124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6979      	ldr	r1, [r7, #20]
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	613b      	str	r3, [r7, #16]
   return(result);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e6      	bne.n	8009104 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fe fdf1 	bl	8007d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914a:	bf00      	nop
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b096      	sub	sp, #88	; 0x58
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009160:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916a:	2b22      	cmp	r3, #34	; 0x22
 800916c:	f040 8095 	bne.w	800929a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800917a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800917e:	b2d9      	uxtb	r1, r3
 8009180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918a:	400a      	ands	r2, r1
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d178      	bne.n	80092aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091cc:	653b      	str	r3, [r7, #80]	; 0x50
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091d6:	647b      	str	r3, [r7, #68]	; 0x44
 80091d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e6      	bne.n	80091b8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	623b      	str	r3, [r7, #32]
   return(result);
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3308      	adds	r3, #8
 8009208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800920a:	633a      	str	r2, [r7, #48]	; 0x30
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e5      	bne.n	80091ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d12e      	bne.n	8009292 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60fb      	str	r3, [r7, #12]
   return(result);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b10      	cmp	r3, #16
 8009278:	d103      	bne.n	8009282 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2210      	movs	r2, #16
 8009280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe fd62 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009290:	e00b      	b.n	80092aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7f7 fcf2 	bl	8000c7c <HAL_UART_RxCpltCallback>
}
 8009298:	e007      	b.n	80092aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0208 	orr.w	r2, r2, #8
 80092a8:	619a      	str	r2, [r3, #24]
}
 80092aa:	bf00      	nop
 80092ac:	3758      	adds	r7, #88	; 0x58
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b096      	sub	sp, #88	; 0x58
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ca:	2b22      	cmp	r3, #34	; 0x22
 80092cc:	f040 8095 	bne.w	80093fa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80092e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80092e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092e8:	4013      	ands	r3, r2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	1c9a      	adds	r2, r3, #2
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009300:	b29b      	uxth	r3, r3
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009312:	b29b      	uxth	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d178      	bne.n	800940a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800932c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009336:	643b      	str	r3, [r7, #64]	; 0x40
 8009338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800933c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	61fb      	str	r3, [r7, #28]
   return(result);
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	64bb      	str	r3, [r7, #72]	; 0x48
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e5      	bne.n	800934a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d12e      	bne.n	80093f2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	647b      	str	r3, [r7, #68]	; 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	f003 0310 	and.w	r3, r3, #16
 80093d6:	2b10      	cmp	r3, #16
 80093d8:	d103      	bne.n	80093e2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2210      	movs	r2, #16
 80093e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fe fcb2 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093f0:	e00b      	b.n	800940a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f7 fc42 	bl	8000c7c <HAL_UART_RxCpltCallback>
}
 80093f8:	e007      	b.n	800940a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0208 	orr.w	r2, r2, #8
 8009408:	619a      	str	r2, [r3, #24]
}
 800940a:	bf00      	nop
 800940c:	3758      	adds	r7, #88	; 0x58
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b0a6      	sub	sp, #152	; 0x98
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009422:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944a:	2b22      	cmp	r3, #34	; 0x22
 800944c:	f040 814d 	bne.w	80096ea <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009456:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800945a:	e0f4      	b.n	8009646 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009466:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800946a:	b2d9      	uxtb	r1, r3
 800946c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009470:	b2da      	uxtb	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009476:	400a      	ands	r2, r1
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d053      	beq.n	8009556 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <UART_RxISR_8BIT_FIFOEN+0xca>
 80094ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2201      	movs	r2, #1
 80094cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	f043 0201 	orr.w	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d011      	beq.n	800950e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80094ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2202      	movs	r2, #2
 80094fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009504:	f043 0204 	orr.w	r2, r3, #4
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800950e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	d011      	beq.n	800953e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800951a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2204      	movs	r2, #4
 800952c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009534:	f043 0202 	orr.w	r2, r3, #2
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d006      	beq.n	8009556 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fe fbf9 	bl	8007d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800955c:	b29b      	uxth	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d171      	bne.n	8009646 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009584:	66bb      	str	r3, [r7, #104]	; 0x68
 8009586:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800958a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e4      	bne.n	8009562 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3308      	adds	r3, #8
 800959e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095aa:	4b56      	ldr	r3, [pc, #344]	; (8009704 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3308      	adds	r3, #8
 80095b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095b8:	657a      	str	r2, [r7, #84]	; 0x54
 80095ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d12e      	bne.n	8009640 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	f023 0310 	bic.w	r3, r3, #16
 80095fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009606:	643b      	str	r3, [r7, #64]	; 0x40
 8009608:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800960c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e6      	bne.n	80095e8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	2b10      	cmp	r3, #16
 8009626:	d103      	bne.n	8009630 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2210      	movs	r2, #16
 800962e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7fe fb8b 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
 800963e:	e002      	b.n	8009646 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7f7 fb1b 	bl	8000c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009646:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800964a:	2b00      	cmp	r3, #0
 800964c:	d006      	beq.n	800965c <UART_RxISR_8BIT_FIFOEN+0x248>
 800964e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	f47f af00 	bne.w	800945c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009662:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009666:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800966a:	2b00      	cmp	r3, #0
 800966c:	d045      	beq.n	80096fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009674:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009678:	429a      	cmp	r2, r3
 800967a:	d23e      	bcs.n	80096fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	61fb      	str	r3, [r7, #28]
   return(result);
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009692:	673b      	str	r3, [r7, #112]	; 0x70
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3308      	adds	r3, #8
 800969a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800969c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800969e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e5      	bne.n	800967c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a15      	ldr	r2, [pc, #84]	; (8009708 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80096b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f043 0320 	orr.w	r3, r3, #32
 80096ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6979      	ldr	r1, [r7, #20]
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	613b      	str	r3, [r7, #16]
   return(result);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e6      	bne.n	80096b6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096e8:	e007      	b.n	80096fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f042 0208 	orr.w	r2, r2, #8
 80096f8:	619a      	str	r2, [r3, #24]
}
 80096fa:	bf00      	nop
 80096fc:	3798      	adds	r7, #152	; 0x98
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	effffffe 	.word	0xeffffffe
 8009708:	08009153 	.word	0x08009153

0800970c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b0a8      	sub	sp, #160	; 0xa0
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800971a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009742:	2b22      	cmp	r3, #34	; 0x22
 8009744:	f040 8151 	bne.w	80099ea <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800974e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009752:	e0f8      	b.n	8009946 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009766:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800976a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800976e:	4013      	ands	r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009776:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977c:	1c9a      	adds	r2, r3, #2
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800979e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d053      	beq.n	8009852 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d011      	beq.n	80097da <UART_RxISR_16BIT_FIFOEN+0xce>
 80097b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2201      	movs	r2, #1
 80097c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d0:	f043 0201 	orr.w	r2, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d011      	beq.n	800980a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80097e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2202      	movs	r2, #2
 80097f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009800:	f043 0204 	orr.w	r2, r3, #4
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800980a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800980e:	f003 0304 	and.w	r3, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2204      	movs	r2, #4
 8009828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009830:	f043 0202 	orr.w	r2, r3, #2
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d006      	beq.n	8009852 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7fe fa7b 	bl	8007d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d173      	bne.n	8009946 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800986c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800986e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009882:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800988e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e4      	bne.n	800985e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098a6:	4b57      	ldr	r3, [pc, #348]	; (8009a04 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80098ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e3      	bne.n	8009894 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d12e      	bne.n	8009940 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f8:	f023 0310 	bic.w	r3, r3, #16
 80098fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009906:	647b      	str	r3, [r7, #68]	; 0x44
 8009908:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800990c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e6      	bne.n	80098e8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b10      	cmp	r3, #16
 8009926:	d103      	bne.n	8009930 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2210      	movs	r2, #16
 800992e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7fe fa0b 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
 800993e:	e002      	b.n	8009946 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7f7 f99b 	bl	8000c7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009946:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800994a:	2b00      	cmp	r3, #0
 800994c:	d006      	beq.n	800995c <UART_RxISR_16BIT_FIFOEN+0x250>
 800994e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	f47f aefc 	bne.w	8009754 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800996a:	2b00      	cmp	r3, #0
 800996c:	d045      	beq.n	80099fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009974:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009978:	429a      	cmp	r2, r3
 800997a:	d23e      	bcs.n	80099fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	623b      	str	r3, [r7, #32]
   return(result);
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009992:	677b      	str	r3, [r7, #116]	; 0x74
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800999c:	633a      	str	r2, [r7, #48]	; 0x30
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e5      	bne.n	800997c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80099b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f043 0320 	orr.w	r3, r3, #32
 80099ca:	673b      	str	r3, [r7, #112]	; 0x70
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099d4:	61fb      	str	r3, [r7, #28]
 80099d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	69b9      	ldr	r1, [r7, #24]
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	617b      	str	r3, [r7, #20]
   return(result);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e6      	bne.n	80099b6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099e8:	e007      	b.n	80099fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	699a      	ldr	r2, [r3, #24]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0208 	orr.w	r2, r2, #8
 80099f8:	619a      	str	r2, [r3, #24]
}
 80099fa:	bf00      	nop
 80099fc:	37a0      	adds	r7, #160	; 0xa0
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	effffffe 	.word	0xeffffffe
 8009a08:	080092b3 	.word	0x080092b3

08009a0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d101      	bne.n	8009a5e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e027      	b.n	8009aae <HAL_UARTEx_DisableFifoMode+0x66>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2224      	movs	r2, #36	; 0x24
 8009a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d101      	bne.n	8009ad2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e02d      	b.n	8009b2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2224      	movs	r2, #36	; 0x24
 8009ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f850 	bl	8009bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e02d      	b.n	8009baa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2224      	movs	r2, #36	; 0x24
 8009b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f022 0201 	bic.w	r2, r2, #1
 8009b74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f812 	bl	8009bb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d108      	bne.n	8009bd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bd4:	e031      	b.n	8009c3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bda:	2310      	movs	r3, #16
 8009bdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	0e5b      	lsrs	r3, r3, #25
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 0307 	and.w	r3, r3, #7
 8009bec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	0f5b      	lsrs	r3, r3, #29
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	7b3a      	ldrb	r2, [r7, #12]
 8009c02:	4911      	ldr	r1, [pc, #68]	; (8009c48 <UARTEx_SetNbDataToProcess+0x94>)
 8009c04:	5c8a      	ldrb	r2, [r1, r2]
 8009c06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c0a:	7b3a      	ldrb	r2, [r7, #12]
 8009c0c:	490f      	ldr	r1, [pc, #60]	; (8009c4c <UARTEx_SetNbDataToProcess+0x98>)
 8009c0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	7b7a      	ldrb	r2, [r7, #13]
 8009c20:	4909      	ldr	r1, [pc, #36]	; (8009c48 <UARTEx_SetNbDataToProcess+0x94>)
 8009c22:	5c8a      	ldrb	r2, [r1, r2]
 8009c24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c28:	7b7a      	ldrb	r2, [r7, #13]
 8009c2a:	4908      	ldr	r1, [pc, #32]	; (8009c4c <UARTEx_SetNbDataToProcess+0x98>)
 8009c2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	08009d54 	.word	0x08009d54
 8009c4c:	08009d5c 	.word	0x08009d5c

08009c50 <__libc_init_array>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	4d0d      	ldr	r5, [pc, #52]	; (8009c88 <__libc_init_array+0x38>)
 8009c54:	4c0d      	ldr	r4, [pc, #52]	; (8009c8c <__libc_init_array+0x3c>)
 8009c56:	1b64      	subs	r4, r4, r5
 8009c58:	10a4      	asrs	r4, r4, #2
 8009c5a:	2600      	movs	r6, #0
 8009c5c:	42a6      	cmp	r6, r4
 8009c5e:	d109      	bne.n	8009c74 <__libc_init_array+0x24>
 8009c60:	4d0b      	ldr	r5, [pc, #44]	; (8009c90 <__libc_init_array+0x40>)
 8009c62:	4c0c      	ldr	r4, [pc, #48]	; (8009c94 <__libc_init_array+0x44>)
 8009c64:	f000 f848 	bl	8009cf8 <_init>
 8009c68:	1b64      	subs	r4, r4, r5
 8009c6a:	10a4      	asrs	r4, r4, #2
 8009c6c:	2600      	movs	r6, #0
 8009c6e:	42a6      	cmp	r6, r4
 8009c70:	d105      	bne.n	8009c7e <__libc_init_array+0x2e>
 8009c72:	bd70      	pop	{r4, r5, r6, pc}
 8009c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c78:	4798      	blx	r3
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7ee      	b.n	8009c5c <__libc_init_array+0xc>
 8009c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c82:	4798      	blx	r3
 8009c84:	3601      	adds	r6, #1
 8009c86:	e7f2      	b.n	8009c6e <__libc_init_array+0x1e>
 8009c88:	08009d6c 	.word	0x08009d6c
 8009c8c:	08009d6c 	.word	0x08009d6c
 8009c90:	08009d6c 	.word	0x08009d6c
 8009c94:	08009d70 	.word	0x08009d70

08009c98 <memset>:
 8009c98:	4402      	add	r2, r0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d100      	bne.n	8009ca2 <memset+0xa>
 8009ca0:	4770      	bx	lr
 8009ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca6:	e7f9      	b.n	8009c9c <memset+0x4>

08009ca8 <strchr>:
 8009ca8:	b2c9      	uxtb	r1, r1
 8009caa:	4603      	mov	r3, r0
 8009cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb0:	b11a      	cbz	r2, 8009cba <strchr+0x12>
 8009cb2:	428a      	cmp	r2, r1
 8009cb4:	d1f9      	bne.n	8009caa <strchr+0x2>
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	4770      	bx	lr
 8009cba:	2900      	cmp	r1, #0
 8009cbc:	bf18      	it	ne
 8009cbe:	2300      	movne	r3, #0
 8009cc0:	e7f9      	b.n	8009cb6 <strchr+0xe>

08009cc2 <strcpy>:
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cc8:	f803 2b01 	strb.w	r2, [r3], #1
 8009ccc:	2a00      	cmp	r2, #0
 8009cce:	d1f9      	bne.n	8009cc4 <strcpy+0x2>
 8009cd0:	4770      	bx	lr

08009cd2 <strncpy>:
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	3901      	subs	r1, #1
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	b132      	cbz	r2, 8009ce8 <strncpy+0x16>
 8009cda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009cde:	f803 4b01 	strb.w	r4, [r3], #1
 8009ce2:	3a01      	subs	r2, #1
 8009ce4:	2c00      	cmp	r4, #0
 8009ce6:	d1f7      	bne.n	8009cd8 <strncpy+0x6>
 8009ce8:	441a      	add	r2, r3
 8009cea:	2100      	movs	r1, #0
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d100      	bne.n	8009cf2 <strncpy+0x20>
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf6:	e7f9      	b.n	8009cec <strncpy+0x1a>

08009cf8 <_init>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr

08009d04 <_fini>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr
