
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  24000000  080058cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  24000024  080058f0  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000168  080058f0  00020168  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f0e3  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001b58  00000000  00000000  0002f135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a18  00000000  00000000  00030c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000980  00000000  00000000  000316a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030d6b  00000000  00000000  00032028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d5fb  00000000  00000000  00062d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e514  00000000  00000000  0007038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ae8a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002914  00000000  00000000  001ae8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000024 	.word	0x24000024
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800586c 	.word	0x0800586c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000028 	.word	0x24000028
 8000308:	0800586c 	.word	0x0800586c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fb0a 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f81c 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f910 	bl	8000840 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f876 	bl	8000710 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f8c0 	bl	80007a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	4907      	ldr	r1, [pc, #28]	; (8000648 <main+0x38>)
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <main+0x3c>)
 800062e:	f003 f9cf 	bl	80039d0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart1, tx1_buffer, 20, 10);
 8000632:	230a      	movs	r3, #10
 8000634:	2214      	movs	r2, #20
 8000636:	4906      	ldr	r1, [pc, #24]	; (8000650 <main+0x40>)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x3c>)
 800063a:	f003 f933 	bl	80038a4 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800063e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000642:	f000 fb85 	bl	8000d50 <HAL_Delay>
	HAL_UART_Transmit(&huart1, tx1_buffer, 20, 10);
 8000646:	e7f4      	b.n	8000632 <main+0x22>
 8000648:	24000160 	.word	0x24000160
 800064c:	24000040 	.word	0x24000040
 8000650:	24000000 	.word	0x24000000

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	; 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065e:	224c      	movs	r2, #76	; 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 f8fa 	bl	800585c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2220      	movs	r2, #32
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 f8f4 	bl	800585c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fe35 	bl	80012e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemClock_Config+0xb8>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xb8>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xb8>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069a:	bf00      	nop
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <SystemClock_Config+0xb8>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a8:	d1f8      	bne.n	800069c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fe4a 	bl	8001358 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006ca:	f000 f913 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	233f      	movs	r3, #63	; 0x3f
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006e2:	2340      	movs	r3, #64	; 0x40
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006ec:	2340      	movs	r3, #64	; 0x40
 80006ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2101      	movs	r1, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f9dd 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000700:	f000 f8f8 	bl	80008f4 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3770      	adds	r7, #112	; 0x70
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	58024800 	.word	0x58024800

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_USART1_UART_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800075a:	f003 f853 	bl	8003804 <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f8c6 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800076c:	f004 ff87 	bl	800567e <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f8bd 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800077e:	f004 ffbc 	bl	80056fa <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f8b4 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800078e:	f004 ff3d 	bl	800560c <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f8ac 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000040 	.word	0x24000040
 80007a4:	40011000 	.word	0x40011000

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_USART3_UART_Init+0x94>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <MX_USART3_UART_Init+0x90>)
 80007f2:	f003 f807 	bl	8003804 <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f87a 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000804:	f004 ff3b 	bl	800567e <HAL_UARTEx_SetTxFifoThreshold>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800080e:	f000 f871 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000816:	f004 ff70 	bl	80056fa <HAL_UARTEx_SetRxFifoThreshold>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000820:	f000 f868 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_USART3_UART_Init+0x90>)
 8000826:	f004 fef1 	bl	800560c <HAL_UARTEx_DisableFifoMode>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000830:	f000 f860 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240000d0 	.word	0x240000d0
 800083c:	40004800 	.word	0x40004800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_GPIO_Init+0xa8>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xa8>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xa8>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_GPIO_Init+0xa8>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_GPIO_Init+0xa8>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xa8>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2108      	movs	r1, #8
 8000896:	4815      	ldr	r0, [pc, #84]	; (80008ec <MX_GPIO_Init+0xac>)
 8000898:	f000 fd0a 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_GPIO_Init+0xb0>)
 80008a2:	f000 fd05 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a6:	2308      	movs	r3, #8
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <MX_GPIO_Init+0xac>)
 80008be:	f000 fb4f 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008c2:	2320      	movs	r3, #32
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_GPIO_Init+0xb0>)
 80008da:	f000 fb41 	bl	8000f60 <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024400 	.word	0x58024400
 80008ec:	58021000 	.word	0x58021000
 80008f0:	58020400 	.word	0x58020400

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_MspInit+0x30>)
 8000908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800090c:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x30>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x30>)
 8000918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	58024400 	.word	0x58024400

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0b8      	sub	sp, #224	; 0xe0
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	22b4      	movs	r2, #180	; 0xb4
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f004 ff81 	bl	800585c <memset>
  if(huart->Instance==USART1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a49      	ldr	r2, [pc, #292]	; (8000a84 <HAL_UART_MspInit+0x150>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d143      	bne.n	80009ec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fc2a 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800097e:	f7ff ffb9 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000982:	4b41      	ldr	r3, [pc, #260]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000988:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <HAL_UART_MspInit+0x154>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000992:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <HAL_UART_MspInit+0x154>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a38      	ldr	r2, [pc, #224]	; (8000a88 <HAL_UART_MspInit+0x154>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <HAL_UART_MspInit+0x154>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009d8:	2304      	movs	r3, #4
 80009da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009e2:	4619      	mov	r1, r3
 80009e4:	4829      	ldr	r0, [pc, #164]	; (8000a8c <HAL_UART_MspInit+0x158>)
 80009e6:	f000 fabb 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ea:	e047      	b.n	8000a7c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <HAL_UART_MspInit+0x15c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d142      	bne.n	8000a7c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fbe1 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000a10:	f7ff ff70 	bl	80008f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a1a:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0x154>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a74:	4619      	mov	r1, r3
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_UART_MspInit+0x158>)
 8000a78:	f000 fa72 	bl	8000f60 <HAL_GPIO_Init>
}
 8000a7c:	bf00      	nop
 8000a7e:	37e0      	adds	r7, #224	; 0xe0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40011000 	.word	0x40011000
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	58020400 	.word	0x58020400
 8000a90:	40004800 	.word	0x40004800

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f916 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <SystemInit+0xd0>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <SystemInit+0xd0>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afc:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <SystemInit+0xd4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d807      	bhi.n	8000b18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b08:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <SystemInit+0xd4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	4a2a      	ldr	r2, [pc, #168]	; (8000bbc <SystemInit+0xd4>)
 8000b12:	f043 0307 	orr.w	r3, r3, #7
 8000b16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <SystemInit+0xd8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <SystemInit+0xd8>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <SystemInit+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemInit+0xd8>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <SystemInit+0xd8>)
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <SystemInit+0xdc>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <SystemInit+0xd4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d007      	beq.n	8000b52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemInit+0xd4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f023 030f 	bic.w	r3, r3, #15
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <SystemInit+0xd4>)
 8000b4c:	f043 0307 	orr.w	r3, r3, #7
 8000b50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <SystemInit+0xd8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <SystemInit+0xd8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <SystemInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <SystemInit+0xd8>)
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <SystemInit+0xe0>)
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <SystemInit+0xd8>)
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <SystemInit+0xe4>)
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <SystemInit+0xd8>)
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <SystemInit+0xe8>)
 8000b74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <SystemInit+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <SystemInit+0xd8>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <SystemInit+0xe8>)
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <SystemInit+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <SystemInit+0xd8>)
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <SystemInit+0xe8>)
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <SystemInit+0xd8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SystemInit+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <SystemInit+0xd8>)
 8000b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SystemInit+0xd8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <SystemInit+0xec>)
 8000ba8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	52002000 	.word	0x52002000
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bc8:	02020200 	.word	0x02020200
 8000bcc:	01ff0000 	.word	0x01ff0000
 8000bd0:	01010280 	.word	0x01010280
 8000bd4:	52004000 	.word	0x52004000

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff ff84 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fe05 	bl	8005814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fd01 	bl	8000610 <main>
  bx  lr
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000c14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c18:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8000c1c:	080058cc 	.word	0x080058cc
  ldr r2, =_sbss
 8000c20:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8000c24:	24000168 	.word	0x24000168

08000c28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC3_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f962 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c38:	f001 f8f2 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_Init+0x68>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <HAL_Init+0x6c>)
 8000c4a:	5ccb      	ldrb	r3, [r1, r3]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_Init+0x68>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_Init+0x6c>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_Init+0x70>)
 8000c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_Init+0x74>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f814 	bl	8000ca4 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e002      	b.n	8000c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c86:	f7ff fe3b 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400
 8000c98:	08005884 	.word	0x08005884
 8000c9c:	24000018 	.word	0x24000018
 8000ca0:	24000014 	.word	0x24000014

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_InitTick+0x60>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e021      	b.n	8000cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_InitTick+0x64>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_InitTick+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f939 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f911 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x68>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000020 	.word	0x24000020
 8000d08:	24000014 	.word	0x24000014
 8000d0c:	2400001c 	.word	0x2400001c

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	24000020 	.word	0x24000020
 8000d34:	24000164 	.word	0x24000164

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	24000164 	.word	0x24000164

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000020 	.word	0x24000020

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	05fa0000 	.word	0x05fa0000

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb2 	bl	8000eb8 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f6e:	4b86      	ldr	r3, [pc, #536]	; (8001188 <HAL_GPIO_Init+0x228>)
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f72:	e18c      	b.n	800128e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 817e 	beq.w	8001288 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_Init+0x44>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d130      	bne.n	8001006 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 0201 	and.w	r2, r3, #1
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	69b9      	ldr	r1, [r7, #24]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80d8 	beq.w	8001288 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_GPIO_Init+0x22c>)
 80010da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010de:	4a2b      	ldr	r2, [pc, #172]	; (800118c <HAL_GPIO_Init+0x22c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x22c>)
 80010ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x230>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x234>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d04a      	beq.n	80011b8 <HAL_GPIO_Init+0x258>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x238>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x222>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_GPIO_Init+0x23c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x21e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x240>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x21a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_GPIO_Init+0x244>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x216>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x248>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x212>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_GPIO_Init+0x24c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x20e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_GPIO_Init+0x250>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x20a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <HAL_GPIO_Init+0x254>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x206>
 8001162:	2309      	movs	r3, #9
 8001164:	e029      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001166:	230a      	movs	r3, #10
 8001168:	e027      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800116a:	2307      	movs	r3, #7
 800116c:	e025      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800116e:	2306      	movs	r3, #6
 8001170:	e023      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001172:	2305      	movs	r3, #5
 8001174:	e021      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001176:	2304      	movs	r3, #4
 8001178:	e01f      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800117a:	2303      	movs	r3, #3
 800117c:	e01d      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 800117e:	2302      	movs	r3, #2
 8001180:	e01b      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001182:	2301      	movs	r3, #1
 8001184:	e019      	b.n	80011ba <HAL_GPIO_Init+0x25a>
 8001186:	bf00      	nop
 8001188:	58000080 	.word	0x58000080
 800118c:	58024400 	.word	0x58024400
 8001190:	58000400 	.word	0x58000400
 8001194:	58020000 	.word	0x58020000
 8001198:	58020400 	.word	0x58020400
 800119c:	58020800 	.word	0x58020800
 80011a0:	58020c00 	.word	0x58020c00
 80011a4:	58021000 	.word	0x58021000
 80011a8:	58021400 	.word	0x58021400
 80011ac:	58021800 	.word	0x58021800
 80011b0:	58021c00 	.word	0x58021c00
 80011b4:	58022400 	.word	0x58022400
 80011b8:	2300      	movs	r3, #0
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	4093      	lsls	r3, r2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ca:	4938      	ldr	r1, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x34c>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800122c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	3301      	adds	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f ae6b 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	58000400 	.word	0x58000400

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d00a      	beq.n	800130e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e01f      	b.n	800134a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e01d      	b.n	800134a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f023 0207 	bic.w	r2, r3, #7
 8001316:	490f      	ldr	r1, [pc, #60]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800131e:	f7ff fd0b 	bl	8000d38 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001324:	e009      	b.n	800133a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001326:	f7ff fd07 	bl	8000d38 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001334:	d901      	bls.n	800133a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e007      	b.n	800134a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_PWREx_ConfigSupply+0x70>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001346:	d1ee      	bne.n	8001326 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	58024800 	.word	0x58024800

08001358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e39d      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001382:	4b86      	ldr	r3, [pc, #536]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	2b10      	cmp	r3, #16
 800138c:	d007      	beq.n	800139e <HAL_RCC_OscConfig+0x46>
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	2b18      	cmp	r3, #24
 8001392:	d110      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d10b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <HAL_RCC_OscConfig+0x12c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d168      	bne.n	8001484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e377      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x76>
 80013c0:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a75      	ldr	r2, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6d      	ldr	r2, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0xbc>
 80013fa:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a67      	ldr	r2, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a64      	ldr	r2, [pc, #400]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 8001414:	4b61      	ldr	r3, [pc, #388]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a60      	ldr	r2, [pc, #384]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5d      	ldr	r2, [pc, #372]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc80 	bl	8000d38 <HAL_GetTick>
 8001438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc7c 	bl	8000d38 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e32b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe4>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc6c 	bl	8000d38 <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc68 	bl	8000d38 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e317      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x10c>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 808c 	beq.w	80015ac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800149c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <HAL_RCC_OscConfig+0x162>
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2b18      	cmp	r3, #24
 80014ae:	d137      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c8>
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d132      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e2e9      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014d2:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0219 	bic.w	r2, r3, #25
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	492f      	ldr	r1, [pc, #188]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014e4:	f7ff fc28 	bl	8000d38 <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc24 	bl	8000d38 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2d3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	4920      	ldr	r1, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151e:	e045      	b.n	80015ac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d026      	beq.n	8001576 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 0219 	bic.w	r2, r3, #25
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4919      	ldr	r1, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fbfd 	bl	8000d38 <HAL_GetTick>
 800153e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fbf9 	bl	8000d38 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e2a8      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	490b      	ldr	r1, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e01a      	b.n	80015ac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_OscConfig+0x244>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fbd9 	bl	8000d38 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fbd5 	bl	8000d38 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d903      	bls.n	80015a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e284      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
 800159c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a0:	4b96      	ldr	r3, [pc, #600]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ee      	bne.n	800158a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d06a      	beq.n	800168e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4b90      	ldr	r3, [pc, #576]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c2:	4b8e      	ldr	r3, [pc, #568]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d007      	beq.n	80015de <HAL_RCC_OscConfig+0x286>
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b18      	cmp	r3, #24
 80015d2:	d11b      	bne.n	800160c <HAL_RCC_OscConfig+0x2b4>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d116      	bne.n	800160c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015de:	4b87      	ldr	r3, [pc, #540]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x29e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b80      	cmp	r3, #128	; 0x80
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e257      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	061b      	lsls	r3, r3, #24
 8001604:	497d      	ldr	r1, [pc, #500]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800160a:	e040      	b.n	800168e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a78      	ldr	r2, [pc, #480]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800161a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fb8a 	bl	8000d38 <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001628:	f7ff fb86 	bl	8000d38 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e235      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800163a:	4b70      	ldr	r3, [pc, #448]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001646:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	4969      	ldr	r1, [pc, #420]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	60cb      	str	r3, [r1, #12]
 800165a:	e018      	b.n	800168e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800165c:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a66      	ldr	r2, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb66 	bl	8000d38 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001670:	f7ff fb62 	bl	8000d38 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e211      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001682:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d036      	beq.n	8001708 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d019      	beq.n	80016d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	4a55      	ldr	r2, [pc, #340]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb43 	bl	8000d38 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb3f 	bl	8000d38 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1ee      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016c8:	4b4c      	ldr	r3, [pc, #304]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x35e>
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016da:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb29 	bl	8000d38 <HAL_GetTick>
 80016e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb25 	bl	8000d38 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1d4      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016fc:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d036      	beq.n	8001782 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a36      	ldr	r2, [pc, #216]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001726:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001728:	f7ff fb06 	bl	8000d38 <HAL_GetTick>
 800172c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001730:	f7ff fb02 	bl	8000d38 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1b1      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x3d8>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800175a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800175c:	f7ff faec 	bl	8000d38 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001764:	f7ff fae8 	bl	8000d38 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e197      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8086 	beq.w	800189c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x4a8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_RCC_OscConfig+0x4a8>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800179c:	f7ff facc 	bl	8000d38 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017a4:	f7ff fac8 	bl	8000d38 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e177      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x4a8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d106      	bne.n	80017d8 <HAL_RCC_OscConfig+0x480>
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	e032      	b.n	800183e <HAL_RCC_OscConfig+0x4e6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0x4ac>
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a02      	ldr	r2, [pc, #8]	; (80017fc <HAL_RCC_OscConfig+0x4a4>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
 80017f8:	e021      	b.n	800183e <HAL_RCC_OscConfig+0x4e6>
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	58024800 	.word	0x58024800
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x4ce>
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a82      	ldr	r2, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x4e6>
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a7c      	ldr	r2, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a79      	ldr	r2, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fa77 	bl	8000d38 <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fa73 	bl	8000d38 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e120      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ee      	beq.n	800184e <HAL_RCC_OscConfig+0x4f6>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fa61 	bl	8000d38 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fa5d 	bl	8000d38 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e10a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ff 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ae:	2b18      	cmp	r3, #24
 80018b0:	f000 80ba 	beq.w	8001a28 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 8095 	bne.w	80019e8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fa35 	bl	8000d38 <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fa31 	bl	8000d38 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0e0      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80018f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f4:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x6c8>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	430a      	orrs	r2, r1
 8001904:	4945      	ldr	r1, [pc, #276]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	628b      	str	r3, [r1, #40]	; 0x28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	3b01      	subs	r3, #1
 8001910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	3b01      	subs	r3, #1
 800191a:	025b      	lsls	r3, r3, #9
 800191c:	b29b      	uxth	r3, r3
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	3b01      	subs	r3, #1
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	3b01      	subs	r3, #1
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800193a:	4938      	ldr	r1, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	4a35      	ldr	r2, [pc, #212]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800194e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x6cc>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001958:	00d2      	lsls	r2, r2, #3
 800195a:	4930      	ldr	r1, [pc, #192]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	f023 020c 	bic.w	r2, r3, #12
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	492b      	ldr	r1, [pc, #172]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f023 0202 	bic.w	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f9ba 	bl	8000d38 <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9b6 	bl	8000d38 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e065      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x670>
 80019e6:	e05d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 80019ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f9a0 	bl	8000d38 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f99c 	bl	8000d38 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e04b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_RCC_OscConfig+0x6c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x6a4>
 8001a1a:	e043      	b.n	8001aa4 <HAL_RCC_OscConfig+0x74c>
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	fffffc0c 	.word	0xfffffc0c
 8001a24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x758>)
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x758>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d031      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d12a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d122      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d11a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0a5b      	lsrs	r3, r3, #9
 8001a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d111      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0e1b      	lsrs	r3, r3, #24
 8001a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3730      	adds	r7, #48	; 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	58024400 	.word	0x58024400

08001ab4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e19c      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b8a      	ldr	r3, [pc, #552]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b87      	ldr	r3, [pc, #540]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 020f 	bic.w	r2, r3, #15
 8001ade:	4985      	ldr	r1, [pc, #532]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e184      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d908      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b14:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4975      	ldr	r1, [pc, #468]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d010      	beq.n	8001b54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d908      	bls.n	8001b54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	496a      	ldr	r1, [pc, #424]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d908      	bls.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b70:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	495e      	ldr	r1, [pc, #376]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b9e:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4953      	ldr	r1, [pc, #332]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d908      	bls.n	8001bde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f023 020f 	bic.w	r2, r3, #15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4947      	ldr	r1, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d055      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4940      	ldr	r1, [pc, #256]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c04:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d121      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0f6      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0ea      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0de      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0d6      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f023 0207 	bic.w	r2, r3, #7
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4925      	ldr	r1, [pc, #148]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f867 	bl	8000d38 <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f863 	bl	8000d38 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0be      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d1eb      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d208      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x244>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d214      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 020f 	bic.w	r2, r3, #15
 8001cda:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_ClockConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e086      	b.n	8001e02 <HAL_RCC_ClockConfig+0x34e>
 8001cf4:	52002000 	.word	0x52002000
 8001cf8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d208      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d18:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4939      	ldr	r1, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d208      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	492e      	ldr	r1, [pc, #184]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d208      	bcs.n	8001d86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d010      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d208      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4917      	ldr	r1, [pc, #92]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001db4:	f000 f834 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x35c>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x358>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_RCC_ClockConfig+0x35c>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x360>)
 8001dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x364>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x368>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ff54 	bl	8000ca4 <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	08005884 	.word	0x08005884
 8001e14:	24000018 	.word	0x24000018
 8001e18:	24000014 	.word	0x24000014
 8001e1c:	2400001c 	.word	0x2400001c

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e26:	4bb3      	ldr	r3, [pc, #716]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e2e:	2b18      	cmp	r3, #24
 8001e30:	f200 8155 	bhi.w	80020de <HAL_RCC_GetSysClockFreq+0x2be>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001ea1 	.word	0x08001ea1
 8001e40:	080020df 	.word	0x080020df
 8001e44:	080020df 	.word	0x080020df
 8001e48:	080020df 	.word	0x080020df
 8001e4c:	080020df 	.word	0x080020df
 8001e50:	080020df 	.word	0x080020df
 8001e54:	080020df 	.word	0x080020df
 8001e58:	080020df 	.word	0x080020df
 8001e5c:	08001ec7 	.word	0x08001ec7
 8001e60:	080020df 	.word	0x080020df
 8001e64:	080020df 	.word	0x080020df
 8001e68:	080020df 	.word	0x080020df
 8001e6c:	080020df 	.word	0x080020df
 8001e70:	080020df 	.word	0x080020df
 8001e74:	080020df 	.word	0x080020df
 8001e78:	080020df 	.word	0x080020df
 8001e7c:	08001ecd 	.word	0x08001ecd
 8001e80:	080020df 	.word	0x080020df
 8001e84:	080020df 	.word	0x080020df
 8001e88:	080020df 	.word	0x080020df
 8001e8c:	080020df 	.word	0x080020df
 8001e90:	080020df 	.word	0x080020df
 8001e94:	080020df 	.word	0x080020df
 8001e98:	080020df 	.word	0x080020df
 8001e9c:	08001ed3 	.word	0x08001ed3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea0:	4b94      	ldr	r3, [pc, #592]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001eac:	4b91      	ldr	r3, [pc, #580]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	4a90      	ldr	r2, [pc, #576]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001ebe:	e111      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ec0:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec2:	61bb      	str	r3, [r7, #24]
    break;
 8001ec4:	e10e      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ec8:	61bb      	str	r3, [r7, #24]
    break;
 8001eca:	e10b      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ece:	61bb      	str	r3, [r7, #24]
    break;
 8001ed0:	e108      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001edc:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ee8:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80e1 	beq.w	80020d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f000 8083 	beq.w	8002024 <HAL_RCC_GetSysClockFreq+0x204>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	f200 80a1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x248>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x114>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d056      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f32:	e099      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02d      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f40:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001f9a:	e087      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002108 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fde:	e065      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800210c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	ed97 6a02 	vldr	s12, [r7, #8]
 8002006:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002022:	e043      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002110 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002046:	ed97 6a02 	vldr	s12, [r7, #8]
 800204a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 800204e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800205a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002066:	e021      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002072:	eddf 6a26 	vldr	s13, [pc, #152]	; 800210c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208a:	ed97 6a02 	vldr	s12, [r7, #8]
 800208e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002104 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800209e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	0a5b      	lsrs	r3, r3, #9
 80020b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d0:	ee17 3a90 	vmov	r3, s15
 80020d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80020d6:	e005      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    break;
 80020dc:	e002      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020e0:	61bb      	str	r3, [r7, #24]
    break;
 80020e2:	bf00      	nop
  }

  return sysclockfreq;
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	58024400 	.word	0x58024400
 80020f8:	03d09000 	.word	0x03d09000
 80020fc:	003d0900 	.word	0x003d0900
 8002100:	017d7840 	.word	0x017d7840
 8002104:	46000000 	.word	0x46000000
 8002108:	4c742400 	.word	0x4c742400
 800210c:	4a742400 	.word	0x4a742400
 8002110:	4bbebc20 	.word	0x4bbebc20

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800211a:	f7ff fe81 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_GetHCLKFreq+0x50>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490f      	ldr	r1, [pc, #60]	; (8002168 <HAL_RCC_GetHCLKFreq+0x54>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_GetHCLKFreq+0x50>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_GetHCLKFreq+0x54>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_RCC_GetHCLKFreq+0x58>)
 8002150:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_GetHCLKFreq+0x58>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	58024400 	.word	0x58024400
 8002168:	08005884 	.word	0x08005884
 800216c:	24000018 	.word	0x24000018
 8002170:	24000014 	.word	0x24000014

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002178:	f7ff ffcc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_RCC_GetPCLK1Freq+0x28>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400
 800219c:	08005884 	.word	0x08005884

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80021a4:	f7ff ffb6 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4904      	ldr	r1, [pc, #16]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	58024400 	.word	0x58024400
 80021c8:	08005884 	.word	0x08005884

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021d4:	2300      	movs	r3, #0
 80021d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d8:	2300      	movs	r3, #0
 80021da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d03f      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80021f0:	d02a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80021f6:	d824      	bhi.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021fc:	d018      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002202:	d81e      	bhi.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800220c:	d007      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800220e:	e018      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002210:	4ba4      	ldr	r3, [pc, #656]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	4aa3      	ldr	r2, [pc, #652]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800221c:	e015      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	2102      	movs	r1, #2
 8002224:	4618      	mov	r0, r3
 8002226:	f001 f989 	bl	800353c <RCCEx_PLL2_Config>
 800222a:	4603      	mov	r3, r0
 800222c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800222e:	e00c      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3324      	adds	r3, #36	; 0x24
 8002234:	2102      	movs	r1, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fa32 	bl	80036a0 <RCCEx_PLL3_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002240:	e003      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
      break;
 8002246:	e000      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002250:	4b94      	ldr	r3, [pc, #592]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225c:	4991      	ldr	r1, [pc, #580]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	650b      	str	r3, [r1, #80]	; 0x50
 8002262:	e001      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03d      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	2b04      	cmp	r3, #4
 800227a:	d826      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	08002299 	.word	0x08002299
 8002288:	080022a7 	.word	0x080022a7
 800228c:	080022b9 	.word	0x080022b9
 8002290:	080022d1 	.word	0x080022d1
 8002294:	080022d1 	.word	0x080022d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002298:	4b82      	ldr	r3, [pc, #520]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	4a81      	ldr	r2, [pc, #516]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800229e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022a4:	e015      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 f945 	bl	800353c <RCCEx_PLL2_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3324      	adds	r3, #36	; 0x24
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f9ee 	bl	80036a0 <RCCEx_PLL3_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022c8:	e003      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80022d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d8:	4b72      	ldr	r3, [pc, #456]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	f023 0207 	bic.w	r2, r3, #7
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	496f      	ldr	r1, [pc, #444]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	650b      	str	r3, [r1, #80]	; 0x50
 80022ea:	e001      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d051      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002302:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002306:	d036      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002308:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800230c:	d830      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800230e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002312:	d032      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002318:	d82a      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800231a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800231e:	d02e      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002320:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002324:	d824      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d018      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800232c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002330:	d81e      	bhi.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233a:	d007      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800233c:	e018      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800233e:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800234a:	e019      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f8f2 	bl	800353c <RCCEx_PLL2_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800235c:	e010      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3324      	adds	r3, #36	; 0x24
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f99b 	bl	80036a0 <RCCEx_PLL3_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800236e:	e007      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
      break;
 8002374:	e004      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002376:	bf00      	nop
 8002378:	e002      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800237e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002394:	4943      	ldr	r1, [pc, #268]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002396:	4313      	orrs	r3, r2
 8002398:	658b      	str	r3, [r1, #88]	; 0x58
 800239a:	e001      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d051      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80023b6:	d036      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80023b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80023bc:	d830      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80023be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c2:	d032      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80023c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c8:	d82a      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80023ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023ce:	d02e      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80023d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d4:	d824      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80023d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023da:	d018      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80023dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e0:	d81e      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x222>
 80023e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ea:	d007      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 80023ec:	e018      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023fa:	e019      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f001 f89a 	bl	800353c <RCCEx_PLL2_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800240c:	e010      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3324      	adds	r3, #36	; 0x24
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f001 f943 	bl	80036a0 <RCCEx_PLL3_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800241e:	e007      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	75fb      	strb	r3, [r7, #23]
      break;
 8002424:	e004      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800242e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002444:	4917      	ldr	r1, [pc, #92]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	658b      	str	r3, [r1, #88]	; 0x58
 800244a:	e001      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d035      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d01c      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d817      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d00c      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d813      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d019      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002474:	2b10      	cmp	r3, #16
 8002476:	d10f      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800247e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002484:	e011      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	2102      	movs	r1, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f001 f855 	bl	800353c <RCCEx_PLL2_Config>
 8002492:	4603      	mov	r3, r0
 8002494:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002496:	e008      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      break;
 800249c:	e005      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800249e:	bf00      	nop
 80024a0:	e003      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
      break;
 80024a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80024b0:	4ba3      	ldr	r3, [pc, #652]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	49a0      	ldr	r1, [pc, #640]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80024c2:	e001      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d047      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024dc:	d030      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80024de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e2:	d82a      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80024e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024e8:	d02c      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80024ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024ee:	d824      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f4:	d018      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fa:	d81e      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002504:	d007      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002506:	e018      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002508:	4b8d      	ldr	r3, [pc, #564]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	4a8c      	ldr	r2, [pc, #560]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800250e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002514:	e017      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f001 f80d 	bl	800353c <RCCEx_PLL2_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002526:	e00e      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3324      	adds	r3, #36	; 0x24
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f001 f8b6 	bl	80036a0 <RCCEx_PLL3_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002538:	e005      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
      break;
 800253e:	e002      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800254c:	4b7c      	ldr	r3, [pc, #496]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800254e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002550:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4979      	ldr	r1, [pc, #484]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800255a:	4313      	orrs	r3, r2
 800255c:	650b      	str	r3, [r1, #80]	; 0x50
 800255e:	e001      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d049      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d02e      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800257a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257e:	d828      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002584:	d02a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800258a:	d822      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800258c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002590:	d026      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002596:	d81c      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800259c:	d010      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800259e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025a2:	d816      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01d      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d111      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 ffc1 	bl	800353c <RCCEx_PLL2_Config>
 80025ba:	4603      	mov	r3, r0
 80025bc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025be:	e012      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3324      	adds	r3, #36	; 0x24
 80025c4:	2101      	movs	r1, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 f86a 	bl	80036a0 <RCCEx_PLL3_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80025d0:	e009      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
      break;
 80025d6:	e006      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80025d8:	bf00      	nop
 80025da:	e004      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80025dc:	bf00      	nop
 80025de:	e002      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80025e0:	bf00      	nop
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80025e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80025ec:	4b54      	ldr	r3, [pc, #336]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	4951      	ldr	r1, [pc, #324]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	650b      	str	r3, [r1, #80]	; 0x50
 80025fe:	e001      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d04b      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261a:	d02e      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d828      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d02a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d822      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800262e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002632:	d026      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002638:	d81c      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800263a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263e:	d010      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002644:	d816      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01d      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800264a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264e:	d111      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f000 ff70 	bl	800353c <RCCEx_PLL2_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002660:	e012      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3324      	adds	r3, #36	; 0x24
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f001 f819 	bl	80036a0 <RCCEx_PLL3_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	75fb      	strb	r3, [r7, #23]
      break;
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800267a:	bf00      	nop
 800267c:	e004      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800267e:	bf00      	nop
 8002680:	e002      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800269c:	4928      	ldr	r1, [pc, #160]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	658b      	str	r3, [r1, #88]	; 0x58
 80026a2:	e001      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d02f      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d00e      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80026be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c2:	d814      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x522>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80026c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026cc:	d10f      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 ff2a 	bl	800353c <RCCEx_PLL2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
      break;
 80026f2:	e000      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026fc:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002708:	490d      	ldr	r1, [pc, #52]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800270a:	4313      	orrs	r3, r2
 800270c:	650b      	str	r3, [r1, #80]	; 0x50
 800270e:	e001      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d034      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	2b03      	cmp	r3, #3
 8002726:	d81d      	bhi.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	0800276b 	.word	0x0800276b
 8002734:	08002745 	.word	0x08002745
 8002738:	08002753 	.word	0x08002753
 800273c:	0800276b 	.word	0x0800276b
 8002740:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002744:	4bb1      	ldr	r3, [pc, #708]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	4ab0      	ldr	r2, [pc, #704]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002750:	e00c      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	2102      	movs	r1, #2
 8002758:	4618      	mov	r0, r3
 800275a:	f000 feef 	bl	800353c <RCCEx_PLL2_Config>
 800275e:	4603      	mov	r3, r0
 8002760:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002762:	e003      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
      break;
 8002768:	e000      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800276a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002772:	4ba6      	ldr	r3, [pc, #664]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	49a3      	ldr	r1, [pc, #652]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002780:	4313      	orrs	r3, r2
 8002782:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002784:	e001      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8086 	beq.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002798:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a9c      	ldr	r2, [pc, #624]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a4:	f7fe fac8 	bl	8000d38 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027aa:	e009      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7fe fac4 	bl	8000d38 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d902      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	75fb      	strb	r3, [r7, #23]
        break;
 80027be:	e005      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c0:	4b93      	ldr	r3, [pc, #588]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d166      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80027d2:	4b8e      	ldr	r3, [pc, #568]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80027d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027dc:	4053      	eors	r3, r2
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d013      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e6:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027f0:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a85      	ldr	r2, [pc, #532]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027fc:	4b83      	ldr	r3, [pc, #524]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a82      	ldr	r2, [pc, #520]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002808:	4a80      	ldr	r2, [pc, #512]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d115      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fa8d 	bl	8000d38 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002820:	e00b      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fa89 	bl	8000d38 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d902      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	75fb      	strb	r3, [r7, #23]
            break;
 8002838:	e005      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283a:	4b74      	ldr	r3, [pc, #464]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0ed      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d126      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800285a:	d10d      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800285c:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800286a:	0919      	lsrs	r1, r3, #4
 800286c:	4b69      	ldr	r3, [pc, #420]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800286e:	400b      	ands	r3, r1
 8002870:	4966      	ldr	r1, [pc, #408]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002872:	4313      	orrs	r3, r2
 8002874:	610b      	str	r3, [r1, #16]
 8002876:	e005      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800287e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002882:	6113      	str	r3, [r2, #16]
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	495e      	ldr	r1, [pc, #376]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002894:	4313      	orrs	r3, r2
 8002896:	670b      	str	r3, [r1, #112]	; 0x70
 8002898:	e004      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
 800289c:	75bb      	strb	r3, [r7, #22]
 800289e:	e001      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d07e      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b4:	2b28      	cmp	r3, #40	; 0x28
 80028b6:	d867      	bhi.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	0800298f 	.word	0x0800298f
 80028c4:	08002989 	.word	0x08002989
 80028c8:	08002989 	.word	0x08002989
 80028cc:	08002989 	.word	0x08002989
 80028d0:	08002989 	.word	0x08002989
 80028d4:	08002989 	.word	0x08002989
 80028d8:	08002989 	.word	0x08002989
 80028dc:	08002989 	.word	0x08002989
 80028e0:	08002965 	.word	0x08002965
 80028e4:	08002989 	.word	0x08002989
 80028e8:	08002989 	.word	0x08002989
 80028ec:	08002989 	.word	0x08002989
 80028f0:	08002989 	.word	0x08002989
 80028f4:	08002989 	.word	0x08002989
 80028f8:	08002989 	.word	0x08002989
 80028fc:	08002989 	.word	0x08002989
 8002900:	08002977 	.word	0x08002977
 8002904:	08002989 	.word	0x08002989
 8002908:	08002989 	.word	0x08002989
 800290c:	08002989 	.word	0x08002989
 8002910:	08002989 	.word	0x08002989
 8002914:	08002989 	.word	0x08002989
 8002918:	08002989 	.word	0x08002989
 800291c:	08002989 	.word	0x08002989
 8002920:	0800298f 	.word	0x0800298f
 8002924:	08002989 	.word	0x08002989
 8002928:	08002989 	.word	0x08002989
 800292c:	08002989 	.word	0x08002989
 8002930:	08002989 	.word	0x08002989
 8002934:	08002989 	.word	0x08002989
 8002938:	08002989 	.word	0x08002989
 800293c:	08002989 	.word	0x08002989
 8002940:	0800298f 	.word	0x0800298f
 8002944:	08002989 	.word	0x08002989
 8002948:	08002989 	.word	0x08002989
 800294c:	08002989 	.word	0x08002989
 8002950:	08002989 	.word	0x08002989
 8002954:	08002989 	.word	0x08002989
 8002958:	08002989 	.word	0x08002989
 800295c:	08002989 	.word	0x08002989
 8002960:	0800298f 	.word	0x0800298f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fde6 	bl	800353c <RCCEx_PLL2_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002974:	e00c      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3324      	adds	r3, #36	; 0x24
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fe8f 	bl	80036a0 <RCCEx_PLL3_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002986:	e003      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	75fb      	strb	r3, [r7, #23]
      break;
 800298c:	e000      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800298e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	491a      	ldr	r1, [pc, #104]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	654b      	str	r3, [r1, #84]	; 0x54
 80029a8:	e001      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03e      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d820      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	080029e1 	.word	0x080029e1
 80029d0:	080029f3 	.word	0x080029f3
 80029d4:	08002a19 	.word	0x08002a19
 80029d8:	08002a19 	.word	0x08002a19
 80029dc:	08002a19 	.word	0x08002a19
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fda8 	bl	800353c <RCCEx_PLL2_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80029f0:	e013      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3324      	adds	r3, #36	; 0x24
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fe51 	bl	80036a0 <RCCEx_PLL3_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002a02:	e00a      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
      break;
 8002a08:	e007      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	58024800 	.word	0x58024800
 8002a14:	00ffffcf 	.word	0x00ffffcf
      break;
 8002a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002a20:	4b9f      	ldr	r3, [pc, #636]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f023 0207 	bic.w	r2, r3, #7
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	499c      	ldr	r1, [pc, #624]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	654b      	str	r3, [r1, #84]	; 0x54
 8002a32:	e001      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d039      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d820      	bhi.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a97 	.word	0x08002a97
 8002a58:	08002a6d 	.word	0x08002a6d
 8002a5c:	08002a7f 	.word	0x08002a7f
 8002a60:	08002a97 	.word	0x08002a97
 8002a64:	08002a97 	.word	0x08002a97
 8002a68:	08002a97 	.word	0x08002a97
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fd62 	bl	800353c <RCCEx_PLL2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a7c:	e00c      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3324      	adds	r3, #36	; 0x24
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fe0b 	bl	80036a0 <RCCEx_PLL3_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e003      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
      break;
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8002a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9e:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f023 0207 	bic.w	r2, r3, #7
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aac:	497c      	ldr	r1, [pc, #496]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d04b      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ace:	d02e      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad4:	d828      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d02a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d822      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002ae2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ae6:	d026      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002ae8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aec:	d81c      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af2:	d010      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af8:	d816      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01d      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b02:	d111      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fd16 	bl	800353c <RCCEx_PLL2_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b14:	e012      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3324      	adds	r3, #36	; 0x24
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fdbf 	bl	80036a0 <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002b26:	e009      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b2c:	e006      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e004      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8002b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	4953      	ldr	r1, [pc, #332]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	654b      	str	r3, [r1, #84]	; 0x54
 8002b56:	e001      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d04b      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b72:	d02e      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8002b74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b78:	d828      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d02a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d822      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b8a:	d026      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b90:	d81c      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d010      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8002b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9c:	d816      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01d      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d111      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fcc4 	bl	800353c <RCCEx_PLL2_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bb8:	e012      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3324      	adds	r3, #36	; 0x24
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fd6d 	bl	80036a0 <RCCEx_PLL3_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002bca:	e009      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd0:	e006      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e004      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8002bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be6:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf4:	492a      	ldr	r1, [pc, #168]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	658b      	str	r3, [r1, #88]	; 0x58
 8002bfa:	e001      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d04d      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8002c18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c1c:	d828      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c22:	d02a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c28:	d822      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002c2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c2e:	d026      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002c30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c34:	d81c      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8002c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c40:	d816      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01d      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fc72 	bl	800353c <RCCEx_PLL2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c5c:	e012      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3324      	adds	r3, #36	; 0x24
 8002c62:	2102      	movs	r1, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fd1b 	bl	80036a0 <RCCEx_PLL3_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
      break;
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e004      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8002c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c98:	4901      	ldr	r1, [pc, #4]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d018      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3324      	adds	r3, #36	; 0x24
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fceb 	bl	80036a0 <RCCEx_PLL3_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002cd4:	4b8a      	ldr	r3, [pc, #552]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce0:	4987      	ldr	r1, [pc, #540]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfc:	d10a      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3324      	adds	r3, #36	; 0x24
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fccb 	bl	80036a0 <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d14:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	4977      	ldr	r1, [pc, #476]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d034      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3e:	d01d      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d44:	d817      	bhi.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002d50:	e011      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fbef 	bl	800353c <RCCEx_PLL2_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d62:	e00c      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3324      	adds	r3, #36	; 0x24
 8002d68:	2102      	movs	r1, #2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fc98 	bl	80036a0 <RCCEx_PLL3_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002d74:	e003      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8002d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d92:	495b      	ldr	r1, [pc, #364]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	658b      	str	r3, [r1, #88]	; 0x58
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d033      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002db4:	d01c      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002db6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dba:	d816      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc0:	d003      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8002dc8:	e00f      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dca:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	4a4c      	ldr	r2, [pc, #304]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002dd6:	e00c      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fc5e 	bl	80036a0 <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
      break;
 8002dee:	e000      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8002df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df8:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	493e      	ldr	r1, [pc, #248]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e0c:	e001      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d029      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d007      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fb7a 	bl	800353c <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	4926      	ldr	r1, [pc, #152]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e6c:	e001      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3324      	adds	r3, #36	; 0x24
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fc0b 	bl	80036a0 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d033      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea8:	d017      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8002eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eae:	d811      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d013      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8002eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eba:	d80b      	bhi.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002ed2:	e007      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ed8:	e004      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8002ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	4902      	ldr	r1, [pc, #8]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	654b      	str	r3, [r1, #84]	; 0x54
 8002efc:	e004      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8002efe:	bf00      	nop
 8002f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f20:	4926      	ldr	r1, [pc, #152]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3e:	491f      	ldr	r1, [pc, #124]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f5a:	6113      	str	r3, [r2, #16]
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f66:	4915      	ldr	r1, [pc, #84]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da08      	bge.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	4906      	ldr	r1, [pc, #24]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002fa6:	7dbb      	ldrb	r3, [r7, #22]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400

08002fc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002fc4:	f7ff f8a6 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	08005884 	.word	0x08005884

08002fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ff4:	4ba1      	ldr	r3, [pc, #644]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002ffe:	4b9f      	ldr	r3, [pc, #636]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	0b1b      	lsrs	r3, r3, #12
 8003004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800300a:	4b9c      	ldr	r3, [pc, #624]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003016:	4b99      	ldr	r3, [pc, #612]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8111 	beq.w	800325c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f000 8083 	beq.w	8003148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b02      	cmp	r3, #2
 8003046:	f200 80a1 	bhi.w	800318c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d056      	beq.n	8003104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003056:	e099      	b.n	800318c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003058:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d02d      	beq.n	80030c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003064:	4b85      	ldr	r3, [pc, #532]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	4a84      	ldr	r2, [pc, #528]	; (8003280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309e:	ed97 6a03 	vldr	s12, [r7, #12]
 80030a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80030be:	e087      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80030e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003102:	e065      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800328c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a03 	vldr	s12, [r7, #12]
 800312a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003146:	e043      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b48      	ldr	r3, [pc, #288]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a03 	vldr	s12, [r7, #12]
 800316e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800318a:	e021      	b.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800328c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80031b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80031d0:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	0a5b      	lsrs	r3, r3, #9
 80031d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80031ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f6:	ee17 2a90 	vmov	r2, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003218:	edd7 6a07 	vldr	s13, [r7, #28]
 800321c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003224:	ee17 2a90 	vmov	r2, s15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003246:	edd7 6a07 	vldr	s13, [r7, #28]
 800324a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800324e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003252:	ee17 2a90 	vmov	r2, s15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800325a:	e008      	b.n	800326e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
}
 800326e:	bf00      	nop
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	03d09000 	.word	0x03d09000
 8003284:	46000000 	.word	0x46000000
 8003288:	4c742400 	.word	0x4c742400
 800328c:	4a742400 	.word	0x4a742400
 8003290:	4bbebc20 	.word	0x4bbebc20

08003294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800329c:	4ba1      	ldr	r3, [pc, #644]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80032a6:	4b9f      	ldr	r3, [pc, #636]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	0d1b      	lsrs	r3, r3, #20
 80032ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80032b2:	4b9c      	ldr	r3, [pc, #624]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80032be:	4b99      	ldr	r3, [pc, #612]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8111 	beq.w	8003504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f000 8083 	beq.w	80033f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	f200 80a1 	bhi.w	8003434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d056      	beq.n	80033ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80032fe:	e099      	b.n	8003434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003300:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d02d      	beq.n	8003368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800330c:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	4a84      	ldr	r2, [pc, #528]	; (8003528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003336:	4b7b      	ldr	r3, [pc, #492]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003346:	ed97 6a03 	vldr	s12, [r7, #12]
 800334a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800334e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003366:	e087      	b.n	8003478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337a:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338a:	ed97 6a03 	vldr	s12, [r7, #12]
 800338e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800339e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033aa:	e065      	b.n	8003478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033be:	4b59      	ldr	r3, [pc, #356]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80033d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033ee:	e043      	b.n	8003478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	4b48      	ldr	r3, [pc, #288]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003412:	ed97 6a03 	vldr	s12, [r7, #12]
 8003416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003432:	e021      	b.n	8003478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003456:	ed97 6a03 	vldr	s12, [r7, #12]
 800345a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003478:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	0a5b      	lsrs	r3, r3, #9
 800347e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800348e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003492:	edd7 6a07 	vldr	s13, [r7, #28]
 8003496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800349a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800349e:	ee17 2a90 	vmov	r2, s15
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034cc:	ee17 2a90 	vmov	r2, s15
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	0e1b      	lsrs	r3, r3, #24
 80034da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fa:	ee17 2a90 	vmov	r2, s15
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003502:	e008      	b.n	8003516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
}
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	58024400 	.word	0x58024400
 8003528:	03d09000 	.word	0x03d09000
 800352c:	46000000 	.word	0x46000000
 8003530:	4c742400 	.word	0x4c742400
 8003534:	4a742400 	.word	0x4a742400
 8003538:	4bbebc20 	.word	0x4bbebc20

0800353c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800354a:	4b53      	ldr	r3, [pc, #332]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b03      	cmp	r3, #3
 8003554:	d101      	bne.n	800355a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e099      	b.n	800368e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003566:	f7fd fbe7 	bl	8000d38 <HAL_GetTick>
 800356a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800356c:	e008      	b.n	8003580 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800356e:	f7fd fbe3 	bl	8000d38 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e086      	b.n	800368e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003580:	4b45      	ldr	r3, [pc, #276]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	493f      	ldr	r1, [pc, #252]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	628b      	str	r3, [r1, #40]	; 0x28
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	025b      	lsls	r3, r3, #9
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035d0:	4931      	ldr	r1, [pc, #196]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80035d6:	4b30      	ldr	r3, [pc, #192]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	492d      	ldr	r1, [pc, #180]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f023 0220 	bic.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4928      	ldr	r1, [pc, #160]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	4a26      	ldr	r2, [pc, #152]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003600:	f023 0310 	bic.w	r3, r3, #16
 8003604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <RCCEx_PLL2_Config+0x160>)
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	69d2      	ldr	r2, [r2, #28]
 8003612:	00d2      	lsls	r2, r2, #3
 8003614:	4920      	ldr	r1, [pc, #128]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800361a:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003620:	f043 0310 	orr.w	r3, r3, #16
 8003624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003638:	e00f      	b.n	800365a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800364c:	e005      	b.n	800365a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003658:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003666:	f7fd fb67 	bl	8000d38 <HAL_GetTick>
 800366a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800366c:	e008      	b.n	8003680 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800366e:	f7fd fb63 	bl	8000d38 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <RCCEx_PLL2_Config+0x15c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	58024400 	.word	0x58024400
 800369c:	ffff0007 	.word	0xffff0007

080036a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036ae:	4b53      	ldr	r3, [pc, #332]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d101      	bne.n	80036be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e099      	b.n	80037f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036be:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80036c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ca:	f7fd fb35 	bl	8000d38 <HAL_GetTick>
 80036ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80036d2:	f7fd fb31 	bl	8000d38 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e086      	b.n	80037f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036e4:	4b45      	ldr	r3, [pc, #276]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036f0:	4b42      	ldr	r3, [pc, #264]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	051b      	lsls	r3, r3, #20
 80036fe:	493f      	ldr	r1, [pc, #252]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	628b      	str	r3, [r1, #40]	; 0x28
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	3b01      	subs	r3, #1
 800370a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	3b01      	subs	r3, #1
 8003714:	025b      	lsls	r3, r3, #9
 8003716:	b29b      	uxth	r3, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	3b01      	subs	r3, #1
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003734:	4931      	ldr	r1, [pc, #196]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800373a:	4b30      	ldr	r3, [pc, #192]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	492d      	ldr	r1, [pc, #180]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4928      	ldr	r1, [pc, #160]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800375e:	4b27      	ldr	r3, [pc, #156]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	4a26      	ldr	r2, [pc, #152]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 800376c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <RCCEx_PLL3_Config+0x160>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	69d2      	ldr	r2, [r2, #28]
 8003776:	00d2      	lsls	r2, r2, #3
 8003778:	4920      	ldr	r1, [pc, #128]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800377e:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 8003796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800379c:	e00f      	b.n	80037be <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037b0:	e005      	b.n	80037be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	4a11      	ldr	r2, [pc, #68]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ca:	f7fd fab5 	bl	8000d38 <HAL_GetTick>
 80037ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037d2:	f7fd fab1 	bl	8000d38 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e006      	b.n	80037f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <RCCEx_PLL3_Config+0x15c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
 8003800:	ffff0007 	.word	0xffff0007

08003804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e042      	b.n	800389c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fd f883 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	; 0x24
 8003832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f938 	bl	8003abc <UART_SetConfig>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 ff98 	bl	8004794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 f81f 	bl	80048d8 <UART_CheckIdleState>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	f040 8083 	bne.w	80039c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UART_Transmit+0x28>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e07b      	b.n	80039c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_UART_Transmit+0x3a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e074      	b.n	80039c8 <HAL_UART_Transmit+0x124>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2221      	movs	r2, #33	; 0x21
 80038f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f6:	f7fd fa1f 	bl	8000d38 <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d108      	bne.n	8003928 <HAL_UART_Transmit+0x84>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003938:	e02c      	b.n	8003994 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f001 f812 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e039      	b.n	80039c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3302      	adds	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e007      	b.n	8003982 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1cc      	bne.n	800393a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2200      	movs	r2, #0
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 ffdf 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e006      	b.n	80039c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3720      	adds	r7, #32
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d142      	bne.n	8003a6e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Receive_IT+0x24>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e03b      	b.n	8003a70 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Receive_IT+0x36>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e034      	b.n	8003a70 <HAL_UART_Receive_IT+0xa0>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <HAL_UART_Receive_IT+0xa8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01f      	beq.n	8003a5e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d018      	beq.n	8003a5e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	623b      	str	r3, [r7, #32]
 8003a4c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	69f9      	ldr	r1, [r7, #28]
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e6      	bne.n	8003a2c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f001 f84b 	bl	8004b00 <UART_Start_Receive_IT>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	e000      	b.n	8003a70 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58000c00 	.word	0x58000c00

08003a7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b092      	sub	sp, #72	; 0x48
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4bbe      	ldr	r3, [pc, #760]	; (8003de4 <UART_SetConfig+0x328>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4ab3      	ldr	r2, [pc, #716]	; (8003de8 <UART_SetConfig+0x32c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b24:	4313      	orrs	r3, r2
 8003b26:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	4baf      	ldr	r3, [pc, #700]	; (8003dec <UART_SetConfig+0x330>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f023 010f 	bic.w	r1, r3, #15
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4aa6      	ldr	r2, [pc, #664]	; (8003df0 <UART_SetConfig+0x334>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d177      	bne.n	8003c4c <UART_SetConfig+0x190>
 8003b5c:	4ba5      	ldr	r3, [pc, #660]	; (8003df4 <UART_SetConfig+0x338>)
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b64:	2b28      	cmp	r3, #40	; 0x28
 8003b66:	d86d      	bhi.n	8003c44 <UART_SetConfig+0x188>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <UART_SetConfig+0xb4>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003c15 	.word	0x08003c15
 8003b74:	08003c45 	.word	0x08003c45
 8003b78:	08003c45 	.word	0x08003c45
 8003b7c:	08003c45 	.word	0x08003c45
 8003b80:	08003c45 	.word	0x08003c45
 8003b84:	08003c45 	.word	0x08003c45
 8003b88:	08003c45 	.word	0x08003c45
 8003b8c:	08003c45 	.word	0x08003c45
 8003b90:	08003c1d 	.word	0x08003c1d
 8003b94:	08003c45 	.word	0x08003c45
 8003b98:	08003c45 	.word	0x08003c45
 8003b9c:	08003c45 	.word	0x08003c45
 8003ba0:	08003c45 	.word	0x08003c45
 8003ba4:	08003c45 	.word	0x08003c45
 8003ba8:	08003c45 	.word	0x08003c45
 8003bac:	08003c45 	.word	0x08003c45
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c45 	.word	0x08003c45
 8003bb8:	08003c45 	.word	0x08003c45
 8003bbc:	08003c45 	.word	0x08003c45
 8003bc0:	08003c45 	.word	0x08003c45
 8003bc4:	08003c45 	.word	0x08003c45
 8003bc8:	08003c45 	.word	0x08003c45
 8003bcc:	08003c45 	.word	0x08003c45
 8003bd0:	08003c2d 	.word	0x08003c2d
 8003bd4:	08003c45 	.word	0x08003c45
 8003bd8:	08003c45 	.word	0x08003c45
 8003bdc:	08003c45 	.word	0x08003c45
 8003be0:	08003c45 	.word	0x08003c45
 8003be4:	08003c45 	.word	0x08003c45
 8003be8:	08003c45 	.word	0x08003c45
 8003bec:	08003c45 	.word	0x08003c45
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c45 	.word	0x08003c45
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c45 	.word	0x08003c45
 8003c00:	08003c45 	.word	0x08003c45
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c45 	.word	0x08003c45
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c1a:	e326      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c22:	e322      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c24:	2308      	movs	r3, #8
 8003c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c2a:	e31e      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c32:	e31a      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c34:	2320      	movs	r3, #32
 8003c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c3a:	e316      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c3c:	2340      	movs	r3, #64	; 0x40
 8003c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c42:	e312      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c4a:	e30e      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a69      	ldr	r2, [pc, #420]	; (8003df8 <UART_SetConfig+0x33c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d130      	bne.n	8003cb8 <UART_SetConfig+0x1fc>
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <UART_SetConfig+0x338>)
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d826      	bhi.n	8003cb0 <UART_SetConfig+0x1f4>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x1ac>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c81 	.word	0x08003c81
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003c91 	.word	0x08003c91
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c86:	e2f0      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c8e:	e2ec      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c96:	e2e8      	b.n	800426a <UART_SetConfig+0x7ae>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c9e:	e2e4      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ca6:	e2e0      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cae:	e2dc      	b.n	800426a <UART_SetConfig+0x7ae>
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cb6:	e2d8      	b.n	800426a <UART_SetConfig+0x7ae>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4f      	ldr	r2, [pc, #316]	; (8003dfc <UART_SetConfig+0x340>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d130      	bne.n	8003d24 <UART_SetConfig+0x268>
 8003cc2:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <UART_SetConfig+0x338>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d826      	bhi.n	8003d1c <UART_SetConfig+0x260>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0x218>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003ced 	.word	0x08003ced
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	08003cfd 	.word	0x08003cfd
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cf2:	e2ba      	b.n	800426a <UART_SetConfig+0x7ae>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cfa:	e2b6      	b.n	800426a <UART_SetConfig+0x7ae>
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d02:	e2b2      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d04:	2310      	movs	r3, #16
 8003d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d0a:	e2ae      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d12:	e2aa      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d14:	2340      	movs	r3, #64	; 0x40
 8003d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d1a:	e2a6      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d22:	e2a2      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <UART_SetConfig+0x344>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d130      	bne.n	8003d90 <UART_SetConfig+0x2d4>
 8003d2e:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <UART_SetConfig+0x338>)
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d826      	bhi.n	8003d88 <UART_SetConfig+0x2cc>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x284>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d59 	.word	0x08003d59
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	08003d69 	.word	0x08003d69
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d5e:	e284      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d66:	e280      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d6e:	e27c      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d76:	e278      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d78:	2320      	movs	r3, #32
 8003d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d7e:	e274      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d86:	e270      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d8e:	e26c      	b.n	800426a <UART_SetConfig+0x7ae>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <UART_SetConfig+0x348>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d142      	bne.n	8003e20 <UART_SetConfig+0x364>
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <UART_SetConfig+0x338>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d838      	bhi.n	8003e18 <UART_SetConfig+0x35c>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0x2f0>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dcd 	.word	0x08003dcd
 8003db4:	08003dd5 	.word	0x08003dd5
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003e09 	.word	0x08003e09
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dca:	e24e      	b.n	800426a <UART_SetConfig+0x7ae>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dd2:	e24a      	b.n	800426a <UART_SetConfig+0x7ae>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dda:	e246      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003de2:	e242      	b.n	800426a <UART_SetConfig+0x7ae>
 8003de4:	cfff69f3 	.word	0xcfff69f3
 8003de8:	58000c00 	.word	0x58000c00
 8003dec:	11fff4ff 	.word	0x11fff4ff
 8003df0:	40011000 	.word	0x40011000
 8003df4:	58024400 	.word	0x58024400
 8003df8:	40004400 	.word	0x40004400
 8003dfc:	40004800 	.word	0x40004800
 8003e00:	40004c00 	.word	0x40004c00
 8003e04:	40005000 	.word	0x40005000
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0e:	e22c      	b.n	800426a <UART_SetConfig+0x7ae>
 8003e10:	2340      	movs	r3, #64	; 0x40
 8003e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e16:	e228      	b.n	800426a <UART_SetConfig+0x7ae>
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e1e:	e224      	b.n	800426a <UART_SetConfig+0x7ae>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4ab1      	ldr	r2, [pc, #708]	; (80040ec <UART_SetConfig+0x630>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d176      	bne.n	8003f18 <UART_SetConfig+0x45c>
 8003e2a:	4bb1      	ldr	r3, [pc, #708]	; (80040f0 <UART_SetConfig+0x634>)
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e32:	2b28      	cmp	r3, #40	; 0x28
 8003e34:	d86c      	bhi.n	8003f10 <UART_SetConfig+0x454>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x380>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003ee1 	.word	0x08003ee1
 8003e40:	08003f11 	.word	0x08003f11
 8003e44:	08003f11 	.word	0x08003f11
 8003e48:	08003f11 	.word	0x08003f11
 8003e4c:	08003f11 	.word	0x08003f11
 8003e50:	08003f11 	.word	0x08003f11
 8003e54:	08003f11 	.word	0x08003f11
 8003e58:	08003f11 	.word	0x08003f11
 8003e5c:	08003ee9 	.word	0x08003ee9
 8003e60:	08003f11 	.word	0x08003f11
 8003e64:	08003f11 	.word	0x08003f11
 8003e68:	08003f11 	.word	0x08003f11
 8003e6c:	08003f11 	.word	0x08003f11
 8003e70:	08003f11 	.word	0x08003f11
 8003e74:	08003f11 	.word	0x08003f11
 8003e78:	08003f11 	.word	0x08003f11
 8003e7c:	08003ef1 	.word	0x08003ef1
 8003e80:	08003f11 	.word	0x08003f11
 8003e84:	08003f11 	.word	0x08003f11
 8003e88:	08003f11 	.word	0x08003f11
 8003e8c:	08003f11 	.word	0x08003f11
 8003e90:	08003f11 	.word	0x08003f11
 8003e94:	08003f11 	.word	0x08003f11
 8003e98:	08003f11 	.word	0x08003f11
 8003e9c:	08003ef9 	.word	0x08003ef9
 8003ea0:	08003f11 	.word	0x08003f11
 8003ea4:	08003f11 	.word	0x08003f11
 8003ea8:	08003f11 	.word	0x08003f11
 8003eac:	08003f11 	.word	0x08003f11
 8003eb0:	08003f11 	.word	0x08003f11
 8003eb4:	08003f11 	.word	0x08003f11
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f01 	.word	0x08003f01
 8003ec0:	08003f11 	.word	0x08003f11
 8003ec4:	08003f11 	.word	0x08003f11
 8003ec8:	08003f11 	.word	0x08003f11
 8003ecc:	08003f11 	.word	0x08003f11
 8003ed0:	08003f11 	.word	0x08003f11
 8003ed4:	08003f11 	.word	0x08003f11
 8003ed8:	08003f11 	.word	0x08003f11
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e1c0      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eee:	e1bc      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef6:	e1b8      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e1b4      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f00:	2320      	movs	r3, #32
 8003f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f06:	e1b0      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f0e:	e1ac      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f16:	e1a8      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a75      	ldr	r2, [pc, #468]	; (80040f4 <UART_SetConfig+0x638>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d130      	bne.n	8003f84 <UART_SetConfig+0x4c8>
 8003f22:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <UART_SetConfig+0x634>)
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d826      	bhi.n	8003f7c <UART_SetConfig+0x4c0>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0x478>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f4d 	.word	0x08003f4d
 8003f38:	08003f55 	.word	0x08003f55
 8003f3c:	08003f5d 	.word	0x08003f5d
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f52:	e18a      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f5a:	e186      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f62:	e182      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f6a:	e17e      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f72:	e17a      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f7a:	e176      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f82:	e172      	b.n	800426a <UART_SetConfig+0x7ae>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <UART_SetConfig+0x63c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d130      	bne.n	8003ff0 <UART_SetConfig+0x534>
 8003f8e:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <UART_SetConfig+0x634>)
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d826      	bhi.n	8003fe8 <UART_SetConfig+0x52c>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <UART_SetConfig+0x4e4>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fb9 	.word	0x08003fb9
 8003fa4:	08003fc1 	.word	0x08003fc1
 8003fa8:	08003fc9 	.word	0x08003fc9
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fbe:	e154      	b.n	800426a <UART_SetConfig+0x7ae>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fc6:	e150      	b.n	800426a <UART_SetConfig+0x7ae>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fce:	e14c      	b.n	800426a <UART_SetConfig+0x7ae>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fd6:	e148      	b.n	800426a <UART_SetConfig+0x7ae>
 8003fd8:	2320      	movs	r3, #32
 8003fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fde:	e144      	b.n	800426a <UART_SetConfig+0x7ae>
 8003fe0:	2340      	movs	r3, #64	; 0x40
 8003fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fe6:	e140      	b.n	800426a <UART_SetConfig+0x7ae>
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fee:	e13c      	b.n	800426a <UART_SetConfig+0x7ae>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a41      	ldr	r2, [pc, #260]	; (80040fc <UART_SetConfig+0x640>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	f040 8082 	bne.w	8004100 <UART_SetConfig+0x644>
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <UART_SetConfig+0x634>)
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004004:	2b28      	cmp	r3, #40	; 0x28
 8004006:	d86d      	bhi.n	80040e4 <UART_SetConfig+0x628>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x554>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	080040b5 	.word	0x080040b5
 8004014:	080040e5 	.word	0x080040e5
 8004018:	080040e5 	.word	0x080040e5
 800401c:	080040e5 	.word	0x080040e5
 8004020:	080040e5 	.word	0x080040e5
 8004024:	080040e5 	.word	0x080040e5
 8004028:	080040e5 	.word	0x080040e5
 800402c:	080040e5 	.word	0x080040e5
 8004030:	080040bd 	.word	0x080040bd
 8004034:	080040e5 	.word	0x080040e5
 8004038:	080040e5 	.word	0x080040e5
 800403c:	080040e5 	.word	0x080040e5
 8004040:	080040e5 	.word	0x080040e5
 8004044:	080040e5 	.word	0x080040e5
 8004048:	080040e5 	.word	0x080040e5
 800404c:	080040e5 	.word	0x080040e5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	080040e5 	.word	0x080040e5
 8004058:	080040e5 	.word	0x080040e5
 800405c:	080040e5 	.word	0x080040e5
 8004060:	080040e5 	.word	0x080040e5
 8004064:	080040e5 	.word	0x080040e5
 8004068:	080040e5 	.word	0x080040e5
 800406c:	080040e5 	.word	0x080040e5
 8004070:	080040cd 	.word	0x080040cd
 8004074:	080040e5 	.word	0x080040e5
 8004078:	080040e5 	.word	0x080040e5
 800407c:	080040e5 	.word	0x080040e5
 8004080:	080040e5 	.word	0x080040e5
 8004084:	080040e5 	.word	0x080040e5
 8004088:	080040e5 	.word	0x080040e5
 800408c:	080040e5 	.word	0x080040e5
 8004090:	080040d5 	.word	0x080040d5
 8004094:	080040e5 	.word	0x080040e5
 8004098:	080040e5 	.word	0x080040e5
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	080040e5 	.word	0x080040e5
 80040a4:	080040e5 	.word	0x080040e5
 80040a8:	080040e5 	.word	0x080040e5
 80040ac:	080040e5 	.word	0x080040e5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ba:	e0d6      	b.n	800426a <UART_SetConfig+0x7ae>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c2:	e0d2      	b.n	800426a <UART_SetConfig+0x7ae>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ca:	e0ce      	b.n	800426a <UART_SetConfig+0x7ae>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d2:	e0ca      	b.n	800426a <UART_SetConfig+0x7ae>
 80040d4:	2320      	movs	r3, #32
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040da:	e0c6      	b.n	800426a <UART_SetConfig+0x7ae>
 80040dc:	2340      	movs	r3, #64	; 0x40
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040e2:	e0c2      	b.n	800426a <UART_SetConfig+0x7ae>
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ea:	e0be      	b.n	800426a <UART_SetConfig+0x7ae>
 80040ec:	40011400 	.word	0x40011400
 80040f0:	58024400 	.word	0x58024400
 80040f4:	40007800 	.word	0x40007800
 80040f8:	40007c00 	.word	0x40007c00
 80040fc:	40011800 	.word	0x40011800
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4aad      	ldr	r2, [pc, #692]	; (80043bc <UART_SetConfig+0x900>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d176      	bne.n	80041f8 <UART_SetConfig+0x73c>
 800410a:	4bad      	ldr	r3, [pc, #692]	; (80043c0 <UART_SetConfig+0x904>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004112:	2b28      	cmp	r3, #40	; 0x28
 8004114:	d86c      	bhi.n	80041f0 <UART_SetConfig+0x734>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x660>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	080041c1 	.word	0x080041c1
 8004120:	080041f1 	.word	0x080041f1
 8004124:	080041f1 	.word	0x080041f1
 8004128:	080041f1 	.word	0x080041f1
 800412c:	080041f1 	.word	0x080041f1
 8004130:	080041f1 	.word	0x080041f1
 8004134:	080041f1 	.word	0x080041f1
 8004138:	080041f1 	.word	0x080041f1
 800413c:	080041c9 	.word	0x080041c9
 8004140:	080041f1 	.word	0x080041f1
 8004144:	080041f1 	.word	0x080041f1
 8004148:	080041f1 	.word	0x080041f1
 800414c:	080041f1 	.word	0x080041f1
 8004150:	080041f1 	.word	0x080041f1
 8004154:	080041f1 	.word	0x080041f1
 8004158:	080041f1 	.word	0x080041f1
 800415c:	080041d1 	.word	0x080041d1
 8004160:	080041f1 	.word	0x080041f1
 8004164:	080041f1 	.word	0x080041f1
 8004168:	080041f1 	.word	0x080041f1
 800416c:	080041f1 	.word	0x080041f1
 8004170:	080041f1 	.word	0x080041f1
 8004174:	080041f1 	.word	0x080041f1
 8004178:	080041f1 	.word	0x080041f1
 800417c:	080041d9 	.word	0x080041d9
 8004180:	080041f1 	.word	0x080041f1
 8004184:	080041f1 	.word	0x080041f1
 8004188:	080041f1 	.word	0x080041f1
 800418c:	080041f1 	.word	0x080041f1
 8004190:	080041f1 	.word	0x080041f1
 8004194:	080041f1 	.word	0x080041f1
 8004198:	080041f1 	.word	0x080041f1
 800419c:	080041e1 	.word	0x080041e1
 80041a0:	080041f1 	.word	0x080041f1
 80041a4:	080041f1 	.word	0x080041f1
 80041a8:	080041f1 	.word	0x080041f1
 80041ac:	080041f1 	.word	0x080041f1
 80041b0:	080041f1 	.word	0x080041f1
 80041b4:	080041f1 	.word	0x080041f1
 80041b8:	080041f1 	.word	0x080041f1
 80041bc:	080041e9 	.word	0x080041e9
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c6:	e050      	b.n	800426a <UART_SetConfig+0x7ae>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e04c      	b.n	800426a <UART_SetConfig+0x7ae>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d6:	e048      	b.n	800426a <UART_SetConfig+0x7ae>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041de:	e044      	b.n	800426a <UART_SetConfig+0x7ae>
 80041e0:	2320      	movs	r3, #32
 80041e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e6:	e040      	b.n	800426a <UART_SetConfig+0x7ae>
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ee:	e03c      	b.n	800426a <UART_SetConfig+0x7ae>
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f6:	e038      	b.n	800426a <UART_SetConfig+0x7ae>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a71      	ldr	r2, [pc, #452]	; (80043c4 <UART_SetConfig+0x908>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d130      	bne.n	8004264 <UART_SetConfig+0x7a8>
 8004202:	4b6f      	ldr	r3, [pc, #444]	; (80043c0 <UART_SetConfig+0x904>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	2b05      	cmp	r3, #5
 800420c:	d826      	bhi.n	800425c <UART_SetConfig+0x7a0>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x758>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	2302      	movs	r3, #2
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004232:	e01a      	b.n	800426a <UART_SetConfig+0x7ae>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e016      	b.n	800426a <UART_SetConfig+0x7ae>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e012      	b.n	800426a <UART_SetConfig+0x7ae>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e00e      	b.n	800426a <UART_SetConfig+0x7ae>
 800424c:	2320      	movs	r3, #32
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e00a      	b.n	800426a <UART_SetConfig+0x7ae>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425a:	e006      	b.n	800426a <UART_SetConfig+0x7ae>
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004262:	e002      	b.n	800426a <UART_SetConfig+0x7ae>
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a55      	ldr	r2, [pc, #340]	; (80043c4 <UART_SetConfig+0x908>)
 8004270:	4293      	cmp	r3, r2
 8004272:	f040 80f8 	bne.w	8004466 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004276:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800427a:	2b20      	cmp	r3, #32
 800427c:	dc46      	bgt.n	800430c <UART_SetConfig+0x850>
 800427e:	2b02      	cmp	r3, #2
 8004280:	db75      	blt.n	800436e <UART_SetConfig+0x8b2>
 8004282:	3b02      	subs	r3, #2
 8004284:	2b1e      	cmp	r3, #30
 8004286:	d872      	bhi.n	800436e <UART_SetConfig+0x8b2>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0x7d4>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	08004313 	.word	0x08004313
 8004294:	0800436f 	.word	0x0800436f
 8004298:	0800431b 	.word	0x0800431b
 800429c:	0800436f 	.word	0x0800436f
 80042a0:	0800436f 	.word	0x0800436f
 80042a4:	0800436f 	.word	0x0800436f
 80042a8:	0800432b 	.word	0x0800432b
 80042ac:	0800436f 	.word	0x0800436f
 80042b0:	0800436f 	.word	0x0800436f
 80042b4:	0800436f 	.word	0x0800436f
 80042b8:	0800436f 	.word	0x0800436f
 80042bc:	0800436f 	.word	0x0800436f
 80042c0:	0800436f 	.word	0x0800436f
 80042c4:	0800436f 	.word	0x0800436f
 80042c8:	0800433b 	.word	0x0800433b
 80042cc:	0800436f 	.word	0x0800436f
 80042d0:	0800436f 	.word	0x0800436f
 80042d4:	0800436f 	.word	0x0800436f
 80042d8:	0800436f 	.word	0x0800436f
 80042dc:	0800436f 	.word	0x0800436f
 80042e0:	0800436f 	.word	0x0800436f
 80042e4:	0800436f 	.word	0x0800436f
 80042e8:	0800436f 	.word	0x0800436f
 80042ec:	0800436f 	.word	0x0800436f
 80042f0:	0800436f 	.word	0x0800436f
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	0800436f 	.word	0x0800436f
 80042fc:	0800436f 	.word	0x0800436f
 8004300:	0800436f 	.word	0x0800436f
 8004304:	0800436f 	.word	0x0800436f
 8004308:	08004361 	.word	0x08004361
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d02a      	beq.n	8004366 <UART_SetConfig+0x8aa>
 8004310:	e02d      	b.n	800436e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004312:	f7fe fe55 	bl	8002fc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004316:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004318:	e02f      	b.n	800437a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800431a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fe64 	bl	8002fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004328:	e027      	b.n	800437a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800432a:	f107 0318 	add.w	r3, r7, #24
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe ffb0 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004338:	e01f      	b.n	800437a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <UART_SetConfig+0x904>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <UART_SetConfig+0x904>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	08db      	lsrs	r3, r3, #3
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <UART_SetConfig+0x90c>)
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004358:	e00f      	b.n	800437a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <UART_SetConfig+0x90c>)
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800435e:	e00c      	b.n	800437a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <UART_SetConfig+0x910>)
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004364:	e009      	b.n	800437a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800436c:	e005      	b.n	800437a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 81ee 	beq.w	800475e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <UART_SetConfig+0x914>)
 8004388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800438c:	461a      	mov	r2, r3
 800438e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004390:	fbb3 f3f2 	udiv	r3, r3, r2
 8004394:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d305      	bcc.n	80043b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d910      	bls.n	80043d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80043b8:	e1d1      	b.n	800475e <UART_SetConfig+0xca2>
 80043ba:	bf00      	nop
 80043bc:	40011c00 	.word	0x40011c00
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58000c00 	.word	0x58000c00
 80043c8:	03d09000 	.word	0x03d09000
 80043cc:	003d0900 	.word	0x003d0900
 80043d0:	08005894 	.word	0x08005894
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d6:	2200      	movs	r2, #0
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	60fa      	str	r2, [r7, #12]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	4ac0      	ldr	r2, [pc, #768]	; (80046e4 <UART_SetConfig+0xc28>)
 80043e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043f6:	f7fb ff89 	bl	800030c <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	020b      	lsls	r3, r1, #8
 800440c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004410:	0202      	lsls	r2, r0, #8
 8004412:	6979      	ldr	r1, [r7, #20]
 8004414:	6849      	ldr	r1, [r1, #4]
 8004416:	0849      	lsrs	r1, r1, #1
 8004418:	2000      	movs	r0, #0
 800441a:	460c      	mov	r4, r1
 800441c:	4605      	mov	r5, r0
 800441e:	eb12 0804 	adds.w	r8, r2, r4
 8004422:	eb43 0905 	adc.w	r9, r3, r5
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	469a      	mov	sl, r3
 800442e:	4693      	mov	fp, r2
 8004430:	4652      	mov	r2, sl
 8004432:	465b      	mov	r3, fp
 8004434:	4640      	mov	r0, r8
 8004436:	4649      	mov	r1, r9
 8004438:	f7fb ff68 	bl	800030c <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4613      	mov	r3, r2
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444a:	d308      	bcc.n	800445e <UART_SetConfig+0x9a2>
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004452:	d204      	bcs.n	800445e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	e17f      	b.n	800475e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004464:	e17b      	b.n	800475e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446e:	f040 80bd 	bne.w	80045ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004472:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004476:	2b20      	cmp	r3, #32
 8004478:	dc48      	bgt.n	800450c <UART_SetConfig+0xa50>
 800447a:	2b00      	cmp	r3, #0
 800447c:	db7b      	blt.n	8004576 <UART_SetConfig+0xaba>
 800447e:	2b20      	cmp	r3, #32
 8004480:	d879      	bhi.n	8004576 <UART_SetConfig+0xaba>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x9cc>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	08004513 	.word	0x08004513
 800448c:	0800451b 	.word	0x0800451b
 8004490:	08004577 	.word	0x08004577
 8004494:	08004577 	.word	0x08004577
 8004498:	08004523 	.word	0x08004523
 800449c:	08004577 	.word	0x08004577
 80044a0:	08004577 	.word	0x08004577
 80044a4:	08004577 	.word	0x08004577
 80044a8:	08004533 	.word	0x08004533
 80044ac:	08004577 	.word	0x08004577
 80044b0:	08004577 	.word	0x08004577
 80044b4:	08004577 	.word	0x08004577
 80044b8:	08004577 	.word	0x08004577
 80044bc:	08004577 	.word	0x08004577
 80044c0:	08004577 	.word	0x08004577
 80044c4:	08004577 	.word	0x08004577
 80044c8:	08004543 	.word	0x08004543
 80044cc:	08004577 	.word	0x08004577
 80044d0:	08004577 	.word	0x08004577
 80044d4:	08004577 	.word	0x08004577
 80044d8:	08004577 	.word	0x08004577
 80044dc:	08004577 	.word	0x08004577
 80044e0:	08004577 	.word	0x08004577
 80044e4:	08004577 	.word	0x08004577
 80044e8:	08004577 	.word	0x08004577
 80044ec:	08004577 	.word	0x08004577
 80044f0:	08004577 	.word	0x08004577
 80044f4:	08004577 	.word	0x08004577
 80044f8:	08004577 	.word	0x08004577
 80044fc:	08004577 	.word	0x08004577
 8004500:	08004577 	.word	0x08004577
 8004504:	08004577 	.word	0x08004577
 8004508:	08004569 	.word	0x08004569
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d02e      	beq.n	800456e <UART_SetConfig+0xab2>
 8004510:	e031      	b.n	8004576 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004512:	f7fd fe2f 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8004516:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004518:	e033      	b.n	8004582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800451a:	f7fd fe41 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 800451e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004520:	e02f      	b.n	8004582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fd60 	bl	8002fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004530:	e027      	b.n	8004582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004532:	f107 0318 	add.w	r3, r7, #24
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe feac 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004540:	e01f      	b.n	8004582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004542:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <UART_SetConfig+0xc2c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800454e:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <UART_SetConfig+0xc2c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	08db      	lsrs	r3, r3, #3
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	4a64      	ldr	r2, [pc, #400]	; (80046ec <UART_SetConfig+0xc30>)
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004560:	e00f      	b.n	8004582 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <UART_SetConfig+0xc30>)
 8004564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004566:	e00c      	b.n	8004582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004568:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <UART_SetConfig+0xc34>)
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800456c:	e009      	b.n	8004582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004574:	e005      	b.n	8004582 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80ea 	beq.w	800475e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <UART_SetConfig+0xc28>)
 8004590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004594:	461a      	mov	r2, r3
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	fbb3 f3f2 	udiv	r3, r3, r2
 800459c:	005a      	lsls	r2, r3, #1
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	441a      	add	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d916      	bls.n	80045e4 <UART_SetConfig+0xb28>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d212      	bcs.n	80045e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f023 030f 	bic.w	r3, r3, #15
 80045c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045d6:	4313      	orrs	r3, r2
 80045d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e0bc      	b.n	800475e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80045ea:	e0b8      	b.n	800475e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	dc4b      	bgt.n	800468c <UART_SetConfig+0xbd0>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f2c0 8087 	blt.w	8004708 <UART_SetConfig+0xc4c>
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	f200 8084 	bhi.w	8004708 <UART_SetConfig+0xc4c>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0xb4c>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004693 	.word	0x08004693
 800460c:	0800469b 	.word	0x0800469b
 8004610:	08004709 	.word	0x08004709
 8004614:	08004709 	.word	0x08004709
 8004618:	080046a3 	.word	0x080046a3
 800461c:	08004709 	.word	0x08004709
 8004620:	08004709 	.word	0x08004709
 8004624:	08004709 	.word	0x08004709
 8004628:	080046b3 	.word	0x080046b3
 800462c:	08004709 	.word	0x08004709
 8004630:	08004709 	.word	0x08004709
 8004634:	08004709 	.word	0x08004709
 8004638:	08004709 	.word	0x08004709
 800463c:	08004709 	.word	0x08004709
 8004640:	08004709 	.word	0x08004709
 8004644:	08004709 	.word	0x08004709
 8004648:	080046c3 	.word	0x080046c3
 800464c:	08004709 	.word	0x08004709
 8004650:	08004709 	.word	0x08004709
 8004654:	08004709 	.word	0x08004709
 8004658:	08004709 	.word	0x08004709
 800465c:	08004709 	.word	0x08004709
 8004660:	08004709 	.word	0x08004709
 8004664:	08004709 	.word	0x08004709
 8004668:	08004709 	.word	0x08004709
 800466c:	08004709 	.word	0x08004709
 8004670:	08004709 	.word	0x08004709
 8004674:	08004709 	.word	0x08004709
 8004678:	08004709 	.word	0x08004709
 800467c:	08004709 	.word	0x08004709
 8004680:	08004709 	.word	0x08004709
 8004684:	08004709 	.word	0x08004709
 8004688:	080046fb 	.word	0x080046fb
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d037      	beq.n	8004700 <UART_SetConfig+0xc44>
 8004690:	e03a      	b.n	8004708 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004692:	f7fd fd6f 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8004696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004698:	e03c      	b.n	8004714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800469a:	f7fd fd81 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 800469e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80046a0:	e038      	b.n	8004714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fca0 	bl	8002fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046b0:	e030      	b.n	8004714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046b2:	f107 0318 	add.w	r3, r7, #24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fdec 	bl	8003294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046c0:	e028      	b.n	8004714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <UART_SetConfig+0xc2c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <UART_SetConfig+0xc2c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	08db      	lsrs	r3, r3, #3
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <UART_SetConfig+0xc30>)
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046e0:	e018      	b.n	8004714 <UART_SetConfig+0xc58>
 80046e2:	bf00      	nop
 80046e4:	08005894 	.word	0x08005894
 80046e8:	58024400 	.word	0x58024400
 80046ec:	03d09000 	.word	0x03d09000
 80046f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <UART_SetConfig+0xccc>)
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046f8:	e00c      	b.n	8004714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <UART_SetConfig+0xcd0>)
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046fe:	e009      	b.n	8004714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004706:	e005      	b.n	8004714 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004712:	bf00      	nop
    }

    if (pclk != 0U)
 8004714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d021      	beq.n	800475e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <UART_SetConfig+0xcd4>)
 8004720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004724:	461a      	mov	r2, r3
 8004726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004728:	fbb3 f2f2 	udiv	r2, r3, r2
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	441a      	add	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b0f      	cmp	r3, #15
 8004742:	d909      	bls.n	8004758 <UART_SetConfig+0xc9c>
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d205      	bcs.n	8004758 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	b29a      	uxth	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	e002      	b.n	800475e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2201      	movs	r2, #1
 8004762:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2201      	movs	r2, #1
 800476a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800477a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800477e:	4618      	mov	r0, r3
 8004780:	3748      	adds	r7, #72	; 0x48
 8004782:	46bd      	mov	sp, r7
 8004784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004788:	03d09000 	.word	0x03d09000
 800478c:	003d0900 	.word	0x003d0900
 8004790:	08005894 	.word	0x08005894

08004794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01a      	beq.n	80048aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004892:	d10a      	bne.n	80048aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048e8:	f7fc fa26 	bl	8000d38 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10e      	bne.n	800491a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f82f 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e025      	b.n	8004966 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d10e      	bne.n	8004946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f819 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b09c      	sub	sp, #112	; 0x70
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	e0a9      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	f000 80a5 	beq.w	8004ad4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fc f9d5 	bl	8000d38 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800499a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499c:	2b00      	cmp	r3, #0
 800499e:	d140      	bne.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049b4:	667b      	str	r3, [r7, #100]	; 0x64
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e6      	bne.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3308      	adds	r3, #8
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e5      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e069      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d051      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	d149      	bne.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a9c:	623a      	str	r2, [r7, #32]
 8004a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	69f9      	ldr	r1, [r7, #28]
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e5      	bne.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e010      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	f43f af46 	beq.w	8004980 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3770      	adds	r7, #112	; 0x70
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b0a3      	sub	sp, #140	; 0x8c
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	d10e      	bne.n	8004b52 <UART_Start_Receive_IT+0x52>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <UART_Start_Receive_IT+0x48>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b46:	e02d      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	22ff      	movs	r2, #255	; 0xff
 8004b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b50:	e028      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <UART_Start_Receive_IT+0x76>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <UART_Start_Receive_IT+0x6c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b6a:	e01b      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	227f      	movs	r2, #127	; 0x7f
 8004b70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b74:	e016      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b7e:	d10d      	bne.n	8004b9c <UART_Start_Receive_IT+0x9c>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <UART_Start_Receive_IT+0x92>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	227f      	movs	r2, #127	; 0x7f
 8004b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b90:	e008      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	223f      	movs	r2, #63	; 0x3f
 8004b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b9a:	e003      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2222      	movs	r2, #34	; 0x22
 8004bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bd8:	673a      	str	r2, [r7, #112]	; 0x70
 8004bda:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004bde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e3      	bne.n	8004bb4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf4:	d153      	bne.n	8004c9e <UART_Start_Receive_IT+0x19e>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d34d      	bcc.n	8004c9e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0a:	d107      	bne.n	8004c1c <UART_Start_Receive_IT+0x11c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d103      	bne.n	8004c1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a4b      	ldr	r2, [pc, #300]	; (8004d44 <UART_Start_Receive_IT+0x244>)
 8004c18:	671a      	str	r2, [r3, #112]	; 0x70
 8004c1a:	e002      	b.n	8004c22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4a4a      	ldr	r2, [pc, #296]	; (8004d48 <UART_Start_Receive_IT+0x248>)
 8004c20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01a      	beq.n	8004c68 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c56:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e4      	bne.n	8004c32 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c88:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_Start_Receive_IT+0x168>
 8004c9c:	e04a      	b.n	8004d34 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d107      	bne.n	8004cb8 <UART_Start_Receive_IT+0x1b8>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <UART_Start_Receive_IT+0x24c>)
 8004cb4:	671a      	str	r2, [r3, #112]	; 0x70
 8004cb6:	e002      	b.n	8004cbe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a25      	ldr	r2, [pc, #148]	; (8004d50 <UART_Start_Receive_IT+0x250>)
 8004cbc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d019      	beq.n	8004d02 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ce2:	677b      	str	r3, [r7, #116]	; 0x74
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
 8004cee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e6      	bne.n	8004cce <UART_Start_Receive_IT+0x1ce>
 8004d00:	e018      	b.n	8004d34 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f043 0320 	orr.w	r3, r3, #32
 8004d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	378c      	adds	r7, #140	; 0x8c
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	0800530d 	.word	0x0800530d
 8004d48:	08005015 	.word	0x08005015
 8004d4c:	08004eb5 	.word	0x08004eb5
 8004d50:	08004d55 	.word	0x08004d55

08004d54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b096      	sub	sp, #88	; 0x58
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	2b22      	cmp	r3, #34	; 0x22
 8004d6e:	f040 8095 	bne.w	8004e9c <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004d80:	b2d9      	uxtb	r1, r3
 8004d82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d178      	bne.n	8004eac <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e6      	bne.n	8004dba <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	623b      	str	r3, [r7, #32]
   return(result);
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d12e      	bne.n	8004e94 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f023 0310 	bic.w	r3, r3, #16
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	617b      	str	r3, [r7, #20]
   return(result);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d103      	bne.n	8004e84 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2210      	movs	r2, #16
 8004e82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7fe fe09 	bl	8003aa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e92:	e00b      	b.n	8004eac <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fe fdf1 	bl	8003a7c <HAL_UART_RxCpltCallback>
}
 8004e9a:	e007      	b.n	8004eac <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	619a      	str	r2, [r3, #24]
}
 8004eac:	bf00      	nop
 8004eae:	3758      	adds	r7, #88	; 0x58
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b096      	sub	sp, #88	; 0x58
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ec2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	2b22      	cmp	r3, #34	; 0x22
 8004ece:	f040 8095 	bne.w	8004ffc <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ee2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ee6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004eea:	4013      	ands	r3, r2
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	1c9a      	adds	r2, r3, #2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d178      	bne.n	800500c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	643b      	str	r3, [r7, #64]	; 0x40
 8004f3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d12e      	bne.n	8004ff4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e6      	bne.n	8004f9c <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d103      	bne.n	8004fe4 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fe fd59 	bl	8003aa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ff2:	e00b      	b.n	800500c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fe fd41 	bl	8003a7c <HAL_UART_RxCpltCallback>
}
 8004ffa:	e007      	b.n	800500c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	619a      	str	r2, [r3, #24]
}
 800500c:	bf00      	nop
 800500e:	3758      	adds	r7, #88	; 0x58
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b0a6      	sub	sp, #152	; 0x98
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005022:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	2b22      	cmp	r3, #34	; 0x22
 800504c:	f040 814d 	bne.w	80052ea <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005056:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800505a:	e0f4      	b.n	8005246 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005066:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800506a:	b2d9      	uxtb	r1, r3
 800506c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005070:	b2da      	uxtb	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	400a      	ands	r2, r1
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d053      	beq.n	8005156 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d011      	beq.n	80050de <UART_RxISR_8BIT_FIFOEN+0xca>
 80050ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80050ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2202      	movs	r2, #2
 80050fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005104:	f043 0204 	orr.w	r2, r3, #4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800510e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d011      	beq.n	800513e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800511a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2204      	movs	r2, #4
 800512c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005134:	f043 0202 	orr.w	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fe fca1 	bl	8003a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d171      	bne.n	8005246 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005184:	66bb      	str	r3, [r7, #104]	; 0x68
 8005186:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800518a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e4      	bne.n	8005162 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051aa:	4b56      	ldr	r3, [pc, #344]	; (8005304 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051b8:	657a      	str	r2, [r7, #84]	; 0x54
 80051ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d12e      	bne.n	8005240 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f023 0310 	bic.w	r3, r3, #16
 80051fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	643b      	str	r3, [r7, #64]	; 0x40
 8005208:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800520c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e6      	bne.n	80051e8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d103      	bne.n	8005230 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2210      	movs	r2, #16
 800522e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fe fc33 	bl	8003aa4 <HAL_UARTEx_RxEventCallback>
 800523e:	e002      	b.n	8005246 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fe fc1b 	bl	8003a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005246:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800524a:	2b00      	cmp	r3, #0
 800524c:	d006      	beq.n	800525c <UART_RxISR_8BIT_FIFOEN+0x248>
 800524e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	f47f af00 	bne.w	800505c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005262:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005266:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800526a:	2b00      	cmp	r3, #0
 800526c:	d045      	beq.n	80052fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005278:	429a      	cmp	r2, r3
 800527a:	d23e      	bcs.n	80052fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	61fb      	str	r3, [r7, #28]
   return(result);
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005292:	673b      	str	r3, [r7, #112]	; 0x70
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800529c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80052b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	613b      	str	r3, [r7, #16]
   return(result);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e6      	bne.n	80052b6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e8:	e007      	b.n	80052fa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0208 	orr.w	r2, r2, #8
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	bf00      	nop
 80052fc:	3798      	adds	r7, #152	; 0x98
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	effffffe 	.word	0xeffffffe
 8005308:	08004d55 	.word	0x08004d55

0800530c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b0a8      	sub	sp, #160	; 0xa0
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800531a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	2b22      	cmp	r3, #34	; 0x22
 8005344:	f040 8151 	bne.w	80055ea <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800534e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005352:	e0f8      	b.n	8005546 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005366:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800536a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800536e:	4013      	ands	r3, r2
 8005370:	b29a      	uxth	r2, r3
 8005372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005376:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800539e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d053      	beq.n	8005452 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <UART_RxISR_16BIT_FIFOEN+0xce>
 80053b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2201      	movs	r2, #1
 80053c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d011      	beq.n	800540a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80053e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2202      	movs	r2, #2
 80053f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800540a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d011      	beq.n	800543a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2204      	movs	r2, #4
 8005428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005430:	f043 0202 	orr.w	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fe fb23 	bl	8003a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d173      	bne.n	8005546 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800546c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800546e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005482:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005486:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800548e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e4      	bne.n	800545e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a6:	4b57      	ldr	r3, [pc, #348]	; (8005604 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80054ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e3      	bne.n	8005494 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d12e      	bne.n	8005540 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
 8005508:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800550c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e6      	bne.n	80054e8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d103      	bne.n	8005530 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2210      	movs	r2, #16
 800552e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fe fab3 	bl	8003aa4 <HAL_UARTEx_RxEventCallback>
 800553e:	e002      	b.n	8005546 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7fe fa9b 	bl	8003a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005546:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <UART_RxISR_16BIT_FIFOEN+0x250>
 800554e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	f47f aefc 	bne.w	8005354 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005562:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005566:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800556a:	2b00      	cmp	r3, #0
 800556c:	d045      	beq.n	80055fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005574:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005578:	429a      	cmp	r2, r3
 800557a:	d23e      	bcs.n	80055fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	623b      	str	r3, [r7, #32]
   return(result);
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005592:	677b      	str	r3, [r7, #116]	; 0x74
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800559c:	633a      	str	r2, [r7, #48]	; 0x30
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a15      	ldr	r2, [pc, #84]	; (8005608 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80055b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f043 0320 	orr.w	r3, r3, #32
 80055ca:	673b      	str	r3, [r7, #112]	; 0x70
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	69b9      	ldr	r1, [r7, #24]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	617b      	str	r3, [r7, #20]
   return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055e8:	e007      	b.n	80055fa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699a      	ldr	r2, [r3, #24]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0208 	orr.w	r2, r2, #8
 80055f8:	619a      	str	r2, [r3, #24]
}
 80055fa:	bf00      	nop
 80055fc:	37a0      	adds	r7, #160	; 0xa0
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	effffffe 	.word	0xeffffffe
 8005608:	08004eb5 	.word	0x08004eb5

0800560c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_UARTEx_DisableFifoMode+0x16>
 800561e:	2302      	movs	r3, #2
 8005620:	e027      	b.n	8005672 <HAL_UARTEx_DisableFifoMode+0x66>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2224      	movs	r2, #36	; 0x24
 800562e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005650:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005692:	2302      	movs	r3, #2
 8005694:	e02d      	b.n	80056f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2224      	movs	r2, #36	; 0x24
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f850 	bl	8005778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800570e:	2302      	movs	r3, #2
 8005710:	e02d      	b.n	800576e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2224      	movs	r2, #36	; 0x24
 800571e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f812 	bl	8005778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005798:	e031      	b.n	80057fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800579a:	2310      	movs	r3, #16
 800579c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800579e:	2310      	movs	r3, #16
 80057a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	0e5b      	lsrs	r3, r3, #25
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	0f5b      	lsrs	r3, r3, #29
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	7b3a      	ldrb	r2, [r7, #12]
 80057c6:	4911      	ldr	r1, [pc, #68]	; (800580c <UARTEx_SetNbDataToProcess+0x94>)
 80057c8:	5c8a      	ldrb	r2, [r1, r2]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057ce:	7b3a      	ldrb	r2, [r7, #12]
 80057d0:	490f      	ldr	r1, [pc, #60]	; (8005810 <UARTEx_SetNbDataToProcess+0x98>)
 80057d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	7b7a      	ldrb	r2, [r7, #13]
 80057e4:	4909      	ldr	r1, [pc, #36]	; (800580c <UARTEx_SetNbDataToProcess+0x94>)
 80057e6:	5c8a      	ldrb	r2, [r1, r2]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057ec:	7b7a      	ldrb	r2, [r7, #13]
 80057ee:	4908      	ldr	r1, [pc, #32]	; (8005810 <UARTEx_SetNbDataToProcess+0x98>)
 80057f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	080058ac 	.word	0x080058ac
 8005810:	080058b4 	.word	0x080058b4

08005814 <__libc_init_array>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4d0d      	ldr	r5, [pc, #52]	; (800584c <__libc_init_array+0x38>)
 8005818:	4c0d      	ldr	r4, [pc, #52]	; (8005850 <__libc_init_array+0x3c>)
 800581a:	1b64      	subs	r4, r4, r5
 800581c:	10a4      	asrs	r4, r4, #2
 800581e:	2600      	movs	r6, #0
 8005820:	42a6      	cmp	r6, r4
 8005822:	d109      	bne.n	8005838 <__libc_init_array+0x24>
 8005824:	4d0b      	ldr	r5, [pc, #44]	; (8005854 <__libc_init_array+0x40>)
 8005826:	4c0c      	ldr	r4, [pc, #48]	; (8005858 <__libc_init_array+0x44>)
 8005828:	f000 f820 	bl	800586c <_init>
 800582c:	1b64      	subs	r4, r4, r5
 800582e:	10a4      	asrs	r4, r4, #2
 8005830:	2600      	movs	r6, #0
 8005832:	42a6      	cmp	r6, r4
 8005834:	d105      	bne.n	8005842 <__libc_init_array+0x2e>
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	f855 3b04 	ldr.w	r3, [r5], #4
 800583c:	4798      	blx	r3
 800583e:	3601      	adds	r6, #1
 8005840:	e7ee      	b.n	8005820 <__libc_init_array+0xc>
 8005842:	f855 3b04 	ldr.w	r3, [r5], #4
 8005846:	4798      	blx	r3
 8005848:	3601      	adds	r6, #1
 800584a:	e7f2      	b.n	8005832 <__libc_init_array+0x1e>
 800584c:	080058c4 	.word	0x080058c4
 8005850:	080058c4 	.word	0x080058c4
 8005854:	080058c4 	.word	0x080058c4
 8005858:	080058c8 	.word	0x080058c8

0800585c <memset>:
 800585c:	4402      	add	r2, r0
 800585e:	4603      	mov	r3, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	f803 1b01 	strb.w	r1, [r3], #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <_init>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr

08005878 <_fini>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr
