
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800d798  0800d798  0001d798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc4c  0800dc4c  0001dc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc54  0800dc54  0001dc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dc58  0800dc58  0001dc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0800dc5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  240001e8  0800de44  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000588  0800de44  00020588  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d0c  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002739  00000000  00000000  00036f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00039660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010c8  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033750  00000000  00000000  0003b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017317  00000000  00000000  0006f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014db78  00000000  00000000  0008633f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3eb7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b6c  00000000  00000000  001d3f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d780 	.word	0x0800d780

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800d780 	.word	0x0800d780

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <radianes_a_valor>:
uint8_t tx2_buffer[20]="Welcome \n\r";

uint8_t rx1_buffer;
uint8_t received_data;

uint32_t radianes_a_valor(float radianes) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes < 0) radianes = 0;
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d502      	bpl.n	8000ace <radianes_a_valor+0x1e>
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
    if (radianes > M_PI) radianes = M_PI;
 8000ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000b18 <radianes_a_valor+0x68>
 8000ada:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	dd01      	ble.n	8000ae8 <radianes_a_valor+0x38>
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <radianes_a_valor+0x78>)
 8000ae6:	607b      	str	r3, [r7, #4]

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000af0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000b18 <radianes_a_valor+0x68>
 8000af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000af8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000b20 <radianes_a_valor+0x70>
 8000afc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b04:	ee17 3a90 	vmov	r3, s15
 8000b08:	3341      	adds	r3, #65	; 0x41
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	54442d18 	.word	0x54442d18
 8000b1c:	400921fb 	.word	0x400921fb
 8000b20:	00000000 	.word	0x00000000
 8000b24:	406d6000 	.word	0x406d6000
 8000b28:	40490fdb 	.word	0x40490fdb

08000b2c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <milimetros_a_pasos+0x3c>)
 8000b38:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8000b42:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b56:	ee17 3a90 	vmov	r3, s15
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	41c80000 	.word	0x41c80000

08000b6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint8_t motor_running = 1;// Variable to control motor state
volatile uint8_t motor_running1 = 1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b7c:	d102      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x18>
        motor_running = 0; // Stop the motor when the interrupt occurs
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_13) {
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8a:	d102      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x26>
    	motor_running1 = 0; // Stop the motor when the interrupt occurs
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	24000000 	.word	0x24000000
 8000ba4:	24000001 	.word	0x24000001

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f001 fbb9 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 facf 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 fc99 	bl	80014ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bba:	f000 fbc7 	bl	800134c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000bbe:	f000 fc5d 	bl	800147c <MX_DMA_Init>
  MX_TIM1_Init();
 8000bc2:	f000 fb27 	bl	8001214 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000bc6:	f000 fc0d 	bl	80013e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000bca:	210c      	movs	r1, #12
 8000bcc:	48d2      	ldr	r0, [pc, #840]	; (8000f18 <main+0x370>)
 8000bce:	f006 fc57 	bl	8007480 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	48d0      	ldr	r0, [pc, #832]	; (8000f18 <main+0x370>)
 8000bd6:	f006 fc53 	bl	8007480 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
 8000bda:	2201      	movs	r2, #1
 8000bdc:	49cf      	ldr	r1, [pc, #828]	; (8000f1c <main+0x374>)
 8000bde:	48d0      	ldr	r0, [pc, #832]	; (8000f20 <main+0x378>)
 8000be0:	f007 fbac 	bl	800833c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,&byte,bufersize);
 8000be4:	2201      	movs	r2, #1
 8000be6:	49cf      	ldr	r1, [pc, #828]	; (8000f24 <main+0x37c>)
 8000be8:	48cf      	ldr	r0, [pc, #828]	; (8000f28 <main+0x380>)
 8000bea:	f007 fba7 	bl	800833c <HAL_UART_Receive_IT>

  A4988_Setup();
 8000bee:	f000 fd4f 	bl	8001690 <A4988_Setup>
  Home();
 8000bf2:	f000 fd69 	bl	80016c8 <Home>

  char q1[]="1.5707";
 8000bf6:	4acd      	ldr	r2, [pc, #820]	; (8000f2c <main+0x384>)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c00:	6018      	str	r0, [r3, #0]
 8000c02:	3304      	adds	r3, #4
 8000c04:	8019      	strh	r1, [r3, #0]
 8000c06:	3302      	adds	r3, #2
 8000c08:	0c0a      	lsrs	r2, r1, #16
 8000c0a:	701a      	strb	r2, [r3, #0]
  	char q2[]="150";
 8000c0c:	4bc8      	ldr	r3, [pc, #800]	; (8000f30 <main+0x388>)
 8000c0e:	60fb      	str	r3, [r7, #12]
  	char q3[]="0";
 8000c10:	2330      	movs	r3, #48	; 0x30
 8000c12:	813b      	strh	r3, [r7, #8]
  	char q4[]="1.5707";
 8000c14:	4ac5      	ldr	r2, [pc, #788]	; (8000f2c <main+0x384>)
 8000c16:	463b      	mov	r3, r7
 8000c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1c:	6018      	str	r0, [r3, #0]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	8019      	strh	r1, [r3, #0]
 8000c22:	3302      	adds	r3, #2
 8000c24:	0c0a      	lsrs	r2, r1, #16
 8000c26:	701a      	strb	r2, [r3, #0]

  	// Conversión de q1 y q4 a float
  	q1_float = atof(q1);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f009 ff0b 	bl	800aa48 <atof>
 8000c32:	eeb0 7b40 	vmov.f64	d7, d0
 8000c36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c3a:	4bbe      	ldr	r3, [pc, #760]	; (8000f34 <main+0x38c>)
 8000c3c:	edc3 7a00 	vstr	s15, [r3]
  	q4_float = atof(q4);
 8000c40:	463b      	mov	r3, r7
 8000c42:	4618      	mov	r0, r3
 8000c44:	f009 ff00 	bl	800aa48 <atof>
 8000c48:	eeb0 7b40 	vmov.f64	d7, d0
 8000c4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c50:	4bb9      	ldr	r3, [pc, #740]	; (8000f38 <main+0x390>)
 8000c52:	edc3 7a00 	vstr	s15, [r3]

  	// Conversión de q2 y q3 a int (truncando los valores decimales)
  	q2_int = (int)atof(q2);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f009 fef4 	bl	800aa48 <atof>
 8000c60:	eeb0 7b40 	vmov.f64	d7, d0
 8000c64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c68:	ee17 2a90 	vmov	r2, s15
 8000c6c:	4bb3      	ldr	r3, [pc, #716]	; (8000f3c <main+0x394>)
 8000c6e:	601a      	str	r2, [r3, #0]
  	q3_int = (int)atof(q3);
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4618      	mov	r0, r3
 8000c76:	f009 fee7 	bl	800aa48 <atof>
 8000c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c82:	ee17 2a90 	vmov	r2, s15
 8000c86:	4bae      	ldr	r3, [pc, #696]	; (8000f40 <main+0x398>)
 8000c88:	601a      	str	r2, [r3, #0]

  	 mover_motorq1(q1_float);
 8000c8a:	4baa      	ldr	r3, [pc, #680]	; (8000f34 <main+0x38c>)
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	f000 fd30 	bl	80016f8 <mover_motorq1>
  	 mover_motorq2_mm(q2_int);
 8000c98:	4ba8      	ldr	r3, [pc, #672]	; (8000f3c <main+0x394>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca8:	f000 fe54 	bl	8001954 <mover_motorq2_mm>
  	 mover_motorq3_mm(q3_int);
 8000cac:	4ba4      	ldr	r3, [pc, #656]	; (8000f40 <main+0x398>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbc:	f000 fecc 	bl	8001a58 <mover_motorq3_mm>
  	 TIM1->CCR2 = radianes_a_valor(q4_float);
 8000cc0:	4b9d      	ldr	r3, [pc, #628]	; (8000f38 <main+0x390>)
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	4c9f      	ldr	r4, [pc, #636]	; (8000f44 <main+0x39c>)
 8000cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ccc:	f7ff fef0 	bl	8000ab0 <radianes_a_valor>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	63a3      	str	r3, [r4, #56]	; 0x38

  	 HAL_Delay(2000);
 8000cd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cd8:	f001 fbb6 	bl	8002448 <HAL_Delay>

  	 strcpy(q1, "2.8274");
 8000cdc:	4a9a      	ldr	r2, [pc, #616]	; (8000f48 <main+0x3a0>)
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce6:	6018      	str	r0, [r3, #0]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	8019      	strh	r1, [r3, #0]
 8000cec:	3302      	adds	r3, #2
 8000cee:	0c0a      	lsrs	r2, r1, #16
 8000cf0:	701a      	strb	r2, [r3, #0]
  	 strcpy(q2, "155");
 8000cf2:	4b96      	ldr	r3, [pc, #600]	; (8000f4c <main+0x3a4>)
 8000cf4:	60fb      	str	r3, [r7, #12]

  	 // Conversión de q1 y q4 a float
  	 q1_float = atof(q1);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f009 fea4 	bl	800aa48 <atof>
 8000d00:	eeb0 7b40 	vmov.f64	d7, d0
 8000d04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d08:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <main+0x38c>)
 8000d0a:	edc3 7a00 	vstr	s15, [r3]


  	 // Conversión de q2 y q3 a int (truncando los valores decimales)
  	 q2_int = (int)atof(q2);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4618      	mov	r0, r3
 8000d14:	f009 fe98 	bl	800aa48 <atof>
 8000d18:	eeb0 7b40 	vmov.f64	d7, d0
 8000d1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d20:	ee17 2a90 	vmov	r2, s15
 8000d24:	4b85      	ldr	r3, [pc, #532]	; (8000f3c <main+0x394>)
 8000d26:	601a      	str	r2, [r3, #0]


  	 mover_motorq1(q1_float);
 8000d28:	4b82      	ldr	r3, [pc, #520]	; (8000f34 <main+0x38c>)
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d32:	f000 fce1 	bl	80016f8 <mover_motorq1>
  	 mover_motorq2_mm(q2_int);
 8000d36:	4b81      	ldr	r3, [pc, #516]	; (8000f3c <main+0x394>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	f000 fe05 	bl	8001954 <mover_motorq2_mm>
  	 mover_motorq3_mm(q3_int);
 8000d4a:	4b7d      	ldr	r3, [pc, #500]	; (8000f40 <main+0x398>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d56:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5a:	f000 fe7d 	bl	8001a58 <mover_motorq3_mm>
  	 TIM1->CCR2 = radianes_a_valor(q4_float);
 8000d5e:	4b76      	ldr	r3, [pc, #472]	; (8000f38 <main+0x390>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	4c77      	ldr	r4, [pc, #476]	; (8000f44 <main+0x39c>)
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	f7ff fea1 	bl	8000ab0 <radianes_a_valor>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	63a3      	str	r3, [r4, #56]	; 0x38

  	 HAL_Delay(2000);
 8000d72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d76:	f001 fb67 	bl	8002448 <HAL_Delay>

  	 strcpy(q1, "4.084");
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4a74      	ldr	r2, [pc, #464]	; (8000f50 <main+0x3a8>)
 8000d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d84:	6018      	str	r0, [r3, #0]
 8000d86:	3304      	adds	r3, #4
 8000d88:	8019      	strh	r1, [r3, #0]
  	 strcpy(q2, "145");
 8000d8a:	4b72      	ldr	r3, [pc, #456]	; (8000f54 <main+0x3ac>)
 8000d8c:	60fb      	str	r3, [r7, #12]


  	 // Conversión de q1 y q4 a float
  	 q1_float = atof(q1);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4618      	mov	r0, r3
 8000d94:	f009 fe58 	bl	800aa48 <atof>
 8000d98:	eeb0 7b40 	vmov.f64	d7, d0
 8000d9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da0:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <main+0x38c>)
 8000da2:	edc3 7a00 	vstr	s15, [r3]


  	 // Conversión de q2 y q3 a int (truncando los valores decimales)
  	 q2_int = (int)atof(q2);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4618      	mov	r0, r3
 8000dac:	f009 fe4c 	bl	800aa48 <atof>
 8000db0:	eeb0 7b40 	vmov.f64	d7, d0
 8000db4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000db8:	ee17 2a90 	vmov	r2, s15
 8000dbc:	4b5f      	ldr	r3, [pc, #380]	; (8000f3c <main+0x394>)
 8000dbe:	601a      	str	r2, [r3, #0]

  	 mover_motorq1(q1_float);
 8000dc0:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <main+0x38c>)
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dca:	f000 fc95 	bl	80016f8 <mover_motorq1>
  	 mover_motorq2_mm(q2_int);
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <main+0x394>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dda:	eeb0 0a67 	vmov.f32	s0, s15
 8000dde:	f000 fdb9 	bl	8001954 <mover_motorq2_mm>
  	 mover_motorq3_mm(q3_int);
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <main+0x398>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	f000 fe31 	bl	8001a58 <mover_motorq3_mm>
  	 TIM1->CCR2 = radianes_a_valor(q4_float);
 8000df6:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <main+0x390>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	4c51      	ldr	r4, [pc, #324]	; (8000f44 <main+0x39c>)
 8000dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000e02:	f7ff fe55 	bl	8000ab0 <radianes_a_valor>
 8000e06:	4603      	mov	r3, r0
 8000e08:	63a3      	str	r3, [r4, #56]	; 0x38

  	 HAL_Delay(2000);
 8000e0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e0e:	f001 fb1b 	bl	8002448 <HAL_Delay>

  	strcpy(q1, "1.5707");
 8000e12:	4a46      	ldr	r2, [pc, #280]	; (8000f2c <main+0x384>)
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	8019      	strh	r1, [r3, #0]
 8000e22:	3302      	adds	r3, #2
 8000e24:	0c0a      	lsrs	r2, r1, #16
 8000e26:	701a      	strb	r2, [r3, #0]
  	strcpy(q2, "140");
 8000e28:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <main+0x3b0>)
 8000e2a:	60fb      	str	r3, [r7, #12]
  	strcpy(q3, "48");
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <main+0x3b4>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	4611      	mov	r1, r2
 8000e36:	8019      	strh	r1, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	0c12      	lsrs	r2, r2, #16
 8000e3c:	701a      	strb	r2, [r3, #0]
  	strcpy(q4, "1.74533");
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4a47      	ldr	r2, [pc, #284]	; (8000f60 <main+0x3b8>)
 8000e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e46:	e883 0003 	stmia.w	r3, {r0, r1}


  	// Conversión de q1 y q4 a float
  	q1_float = atof(q1);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f009 fdfa 	bl	800aa48 <atof>
 8000e54:	eeb0 7b40 	vmov.f64	d7, d0
 8000e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <main+0x38c>)
 8000e5e:	edc3 7a00 	vstr	s15, [r3]
  	q4_float = atof(q4);
 8000e62:	463b      	mov	r3, r7
 8000e64:	4618      	mov	r0, r3
 8000e66:	f009 fdef 	bl	800aa48 <atof>
 8000e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <main+0x390>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]


  	// Conversión de q2 y q3 a int (truncando los valores decimales)
  	q2_int = (int)atof(q2);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 fde3 	bl	800aa48 <atof>
 8000e82:	eeb0 7b40 	vmov.f64	d7, d0
 8000e86:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e8a:	ee17 2a90 	vmov	r2, s15
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <main+0x394>)
 8000e90:	601a      	str	r2, [r3, #0]
  	q3_int = (int)atof(q3);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 fdd6 	bl	800aa48 <atof>
 8000e9c:	eeb0 7b40 	vmov.f64	d7, d0
 8000ea0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ea4:	ee17 2a90 	vmov	r2, s15
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <main+0x398>)
 8000eaa:	601a      	str	r2, [r3, #0]

  	mover_motorq1(q1_float);
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <main+0x38c>)
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb6:	f000 fc1f 	bl	80016f8 <mover_motorq1>
  	mover_motorq2_mm(q2_int);
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <main+0x394>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 fd43 	bl	8001954 <mover_motorq2_mm>
  	mover_motorq3_mm(q3_int);
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <main+0x398>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	eeb0 0a67 	vmov.f32	s0, s15
 8000ede:	f000 fdbb 	bl	8001a58 <mover_motorq3_mm>
  	TIM1->CCR2 = radianes_a_valor(q4_float);
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <main+0x390>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	4c16      	ldr	r4, [pc, #88]	; (8000f44 <main+0x39c>)
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	f7ff fddf 	bl	8000ab0 <radianes_a_valor>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	63a3      	str	r3, [r4, #56]	; 0x38

  	HAL_Delay(2000);
 8000ef6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000efa:	f001 faa5 	bl	8002448 <HAL_Delay>

  	strcpy(q1, "3.1415");
 8000efe:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <main+0x3bc>)
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f08:	6018      	str	r0, [r3, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	8019      	strh	r1, [r3, #0]
 8000f0e:	3302      	adds	r3, #2
 8000f10:	0c0a      	lsrs	r2, r1, #16
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e028      	b.n	8000f68 <main+0x3c0>
 8000f16:	bf00      	nop
 8000f18:	24000204 	.word	0x24000204
 8000f1c:	24000551 	.word	0x24000551
 8000f20:	240002e0 	.word	0x240002e0
 8000f24:	24000550 	.word	0x24000550
 8000f28:	24000250 	.word	0x24000250
 8000f2c:	0800d7a8 	.word	0x0800d7a8
 8000f30:	00303531 	.word	0x00303531
 8000f34:	24000560 	.word	0x24000560
 8000f38:	24000564 	.word	0x24000564
 8000f3c:	24000568 	.word	0x24000568
 8000f40:	2400056c 	.word	0x2400056c
 8000f44:	40010000 	.word	0x40010000
 8000f48:	0800d798 	.word	0x0800d798
 8000f4c:	00353531 	.word	0x00353531
 8000f50:	0800d7a0 	.word	0x0800d7a0
 8000f54:	00353431 	.word	0x00353431
 8000f58:	00303431 	.word	0x00303431
 8000f5c:	0800d7b0 	.word	0x0800d7b0
 8000f60:	0800d7b4 	.word	0x0800d7b4
 8000f64:	0800d7bc 	.word	0x0800d7bc
  	strcpy(q2, "145");
 8000f68:	4b6e      	ldr	r3, [pc, #440]	; (8001124 <main+0x57c>)
 8000f6a:	60fb      	str	r3, [r7, #12]
  	strcpy(q3, "95");
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <main+0x580>)
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	8019      	strh	r1, [r3, #0]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	0c12      	lsrs	r2, r2, #16
 8000f7c:	701a      	strb	r2, [r3, #0]
  	strcpy(q4, "1.8326");
 8000f7e:	4a6b      	ldr	r2, [pc, #428]	; (800112c <main+0x584>)
 8000f80:	463b      	mov	r3, r7
 8000f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f86:	6018      	str	r0, [r3, #0]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	8019      	strh	r1, [r3, #0]
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	0c0a      	lsrs	r2, r1, #16
 8000f90:	701a      	strb	r2, [r3, #0]

  	// Conversión de q1 y q4 a float
  	q1_float = atof(q1);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fd56 	bl	800aa48 <atof>
 8000f9c:	eeb0 7b40 	vmov.f64	d7, d0
 8000fa0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <main+0x588>)
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
  	q4_float = atof(q4);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f009 fd4b 	bl	800aa48 <atof>
 8000fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8000fb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fba:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <main+0x58c>)
 8000fbc:	edc3 7a00 	vstr	s15, [r3]

  	// Conversión de q2 y q3 a int (truncando los valores decimales)
  	q2_int = (int)atof(q2);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 fd3f 	bl	800aa48 <atof>
 8000fca:	eeb0 7b40 	vmov.f64	d7, d0
 8000fce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fd2:	ee17 2a90 	vmov	r2, s15
 8000fd6:	4b58      	ldr	r3, [pc, #352]	; (8001138 <main+0x590>)
 8000fd8:	601a      	str	r2, [r3, #0]
  	q3_int = (int)atof(q3);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f009 fd32 	bl	800aa48 <atof>
 8000fe4:	eeb0 7b40 	vmov.f64	d7, d0
 8000fe8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fec:	ee17 2a90 	vmov	r2, s15
 8000ff0:	4b52      	ldr	r3, [pc, #328]	; (800113c <main+0x594>)
 8000ff2:	601a      	str	r2, [r3, #0]

  	mover_motorq1(q1_float);
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <main+0x588>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f000 fb7b 	bl	80016f8 <mover_motorq1>
  	mover_motorq2_mm(q2_int);
 8001002:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <main+0x590>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	f000 fc9f 	bl	8001954 <mover_motorq2_mm>
  	mover_motorq3_mm(q3_int);
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <main+0x594>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	eeb0 0a67 	vmov.f32	s0, s15
 8001026:	f000 fd17 	bl	8001a58 <mover_motorq3_mm>
  	TIM1->CCR2 = radianes_a_valor(q4_float);
 800102a:	4b42      	ldr	r3, [pc, #264]	; (8001134 <main+0x58c>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	4c43      	ldr	r4, [pc, #268]	; (8001140 <main+0x598>)
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	f7ff fd3b 	bl	8000ab0 <radianes_a_valor>
 800103a:	4603      	mov	r3, r0
 800103c:	63a3      	str	r3, [r4, #56]	; 0x38

  	HAL_Delay(2000);
 800103e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001042:	f001 fa01 	bl	8002448 <HAL_Delay>

  	strcpy(q1, "2.82743");
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4a3e      	ldr	r2, [pc, #248]	; (8001144 <main+0x59c>)
 800104c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001050:	e883 0003 	stmia.w	r3, {r0, r1}
  	strcpy(q2, "165");
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <main+0x5a0>)
 8001056:	60fb      	str	r3, [r7, #12]
  	strcpy(q3, "179");
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4a3b      	ldr	r2, [pc, #236]	; (800114c <main+0x5a4>)
 800105e:	601a      	str	r2, [r3, #0]
  	strcpy(q4, "1.91986");
 8001060:	463b      	mov	r3, r7
 8001062:	4a3b      	ldr	r2, [pc, #236]	; (8001150 <main+0x5a8>)
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	e883 0003 	stmia.w	r3, {r0, r1}

  	// Conversión de q1 y q4 a float
  	q1_float = atof(q1);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4618      	mov	r0, r3
 8001072:	f009 fce9 	bl	800aa48 <atof>
 8001076:	eeb0 7b40 	vmov.f64	d7, d0
 800107a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <main+0x588>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
  	q4_float = atof(q4);
 8001084:	463b      	mov	r3, r7
 8001086:	4618      	mov	r0, r3
 8001088:	f009 fcde 	bl	800aa48 <atof>
 800108c:	eeb0 7b40 	vmov.f64	d7, d0
 8001090:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <main+0x58c>)
 8001096:	edc3 7a00 	vstr	s15, [r3]

  	// Conversión de q2 y q3 a int (truncando los valores decimales)
  	q2_int = (int)atof(q2);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fcd2 	bl	800aa48 <atof>
 80010a4:	eeb0 7b40 	vmov.f64	d7, d0
 80010a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010ac:	ee17 2a90 	vmov	r2, s15
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <main+0x590>)
 80010b2:	601a      	str	r2, [r3, #0]
  	q3_int = (int)atof(q3);
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4618      	mov	r0, r3
 80010ba:	f009 fcc5 	bl	800aa48 <atof>
 80010be:	eeb0 7b40 	vmov.f64	d7, d0
 80010c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010c6:	ee17 2a90 	vmov	r2, s15
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <main+0x594>)
 80010cc:	601a      	str	r2, [r3, #0]

  	mover_motorq1(q1_float);
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <main+0x588>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	f000 fb0e 	bl	80016f8 <mover_motorq1>
  	mover_motorq2_mm(q2_int);
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <main+0x590>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f000 fc32 	bl	8001954 <mover_motorq2_mm>
  	mover_motorq3_mm(q3_int);
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <main+0x594>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	f000 fcaa 	bl	8001a58 <mover_motorq3_mm>
  	TIM1->CCR2 = radianes_a_valor(q4_float);
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <main+0x58c>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	4c0d      	ldr	r4, [pc, #52]	; (8001140 <main+0x598>)
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	f7ff fcce 	bl	8000ab0 <radianes_a_valor>
 8001114:	4603      	mov	r3, r0
 8001116:	63a3      	str	r3, [r4, #56]	; 0x38

  	HAL_Delay(2000);
 8001118:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800111c:	f001 f994 	bl	8002448 <HAL_Delay>
//  TIM1->CCR4 = 183;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001120:	e7fe      	b.n	8001120 <main+0x578>
 8001122:	bf00      	nop
 8001124:	00353431 	.word	0x00353431
 8001128:	0800d7c4 	.word	0x0800d7c4
 800112c:	0800d7c8 	.word	0x0800d7c8
 8001130:	24000560 	.word	0x24000560
 8001134:	24000564 	.word	0x24000564
 8001138:	24000568 	.word	0x24000568
 800113c:	2400056c 	.word	0x2400056c
 8001140:	40010000 	.word	0x40010000
 8001144:	0800d7d0 	.word	0x0800d7d0
 8001148:	00353631 	.word	0x00353631
 800114c:	00393731 	.word	0x00393731
 8001150:	0800d7d8 	.word	0x0800d7d8

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09c      	sub	sp, #112	; 0x70
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	224c      	movs	r2, #76	; 0x4c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f009 fc9e 	bl	800aaa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2220      	movs	r2, #32
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 fc98 	bl	800aaa4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001174:	2002      	movs	r0, #2
 8001176:	f003 fe9b 	bl	8004eb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <SystemClock_Config+0xbc>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001186:	4a22      	ldr	r2, [pc, #136]	; (8001210 <SystemClock_Config+0xbc>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <SystemClock_Config+0xbc>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800119a:	bf00      	nop
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <SystemClock_Config+0xbc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a8:	d1f8      	bne.n	800119c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011aa:	2302      	movs	r3, #2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 feb0 	bl	8004f24 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011ca:	f000 fccd 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	233f      	movs	r3, #63	; 0x3f
 80011d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 80011d6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fa42 	bl	8005680 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001202:	f000 fcb1 	bl	8001b68 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3770      	adds	r7, #112	; 0x70
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58024800 	.word	0x58024800

08001214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b098      	sub	sp, #96	; 0x60
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2234      	movs	r2, #52	; 0x34
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f009 fc2f 	bl	800aaa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_TIM1_Init+0x130>)
 8001248:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <MX_TIM1_Init+0x134>)
 800124a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <MX_TIM1_Init+0x130>)
 800124e:	2240      	movs	r2, #64	; 0x40
 8001250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_TIM1_Init+0x130>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <MX_TIM1_Init+0x130>)
 800125a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <MX_TIM1_Init+0x130>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <MX_TIM1_Init+0x130>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <MX_TIM1_Init+0x130>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001272:	4834      	ldr	r0, [pc, #208]	; (8001344 <MX_TIM1_Init+0x130>)
 8001274:	f006 f8ac 	bl	80073d0 <HAL_TIM_PWM_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800127e:	f000 fc73 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <MX_TIM1_Init+0x130>)
 8001296:	f006 fec5 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012a0:	f000 fc62 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a4:	2360      	movs	r3, #96	; 0x60
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c4:	2204      	movs	r2, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	481e      	ldr	r0, [pc, #120]	; (8001344 <MX_TIM1_Init+0x130>)
 80012ca:	f006 f9f5 	bl	80076b8 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012d4:	f000 fc48 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012dc:	220c      	movs	r2, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <MX_TIM1_Init+0x130>)
 80012e2:	f006 f9e9 	bl	80076b8 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80012ec:	f000 fc3c 	bl	8001b68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4619      	mov	r1, r3
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM1_Init+0x130>)
 8001326:	f006 ff19 	bl	800815c <HAL_TIMEx_ConfigBreakDeadTime>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001330:	f000 fc1a 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM1_Init+0x130>)
 8001336:	f000 fc59 	bl	8001bec <HAL_TIM_MspPostInit>

}
 800133a:	bf00      	nop
 800133c:	3760      	adds	r7, #96	; 0x60
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	24000204 	.word	0x24000204
 8001348:	40010000 	.word	0x40010000

0800134c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MX_USART1_UART_Init+0x94>)
 8001354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_USART1_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_USART1_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_USART1_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x90>)
 8001396:	f006 ff81 	bl	800829c <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 fbe2 	bl	8001b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_USART1_UART_Init+0x90>)
 80013a8:	f009 fa83 	bl	800a8b2 <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 fbd9 	bl	8001b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x90>)
 80013ba:	f009 fab8 	bl	800a92e <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 fbd0 	bl	8001b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_USART1_UART_Init+0x90>)
 80013ca:	f009 fa39 	bl	800a840 <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f000 fbc8 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000250 	.word	0x24000250
 80013e0:	40011000 	.word	0x40011000

080013e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <MX_USART3_UART_Init+0x94>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_USART3_UART_Init+0x90>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142c:	4811      	ldr	r0, [pc, #68]	; (8001474 <MX_USART3_UART_Init+0x90>)
 800142e:	f006 ff35 	bl	800829c <HAL_UART_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001438:	f000 fb96 	bl	8001b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001440:	f009 fa37 	bl	800a8b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800144a:	f000 fb8d 	bl	8001b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4808      	ldr	r0, [pc, #32]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001452:	f009 fa6c 	bl	800a92e <HAL_UARTEx_SetRxFifoThreshold>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800145c:	f000 fb84 	bl	8001b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001462:	f009 f9ed 	bl	800a840 <HAL_UARTEx_DisableFifoMode>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800146c:	f000 fb7c 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	240002e0 	.word	0x240002e0
 8001478:	40004800 	.word	0x40004800

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_DMA_Init+0x6c>)
 8001484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <MX_DMA_Init+0x6c>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_DMA_Init+0x6c>)
 8001494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	200b      	movs	r0, #11
 80014a6:	f001 f8ce 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014aa:	200b      	movs	r0, #11
 80014ac:	f001 f8e5 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	200c      	movs	r0, #12
 80014b6:	f001 f8c6 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014ba:	200c      	movs	r0, #12
 80014bc:	f001 f8dd 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	200d      	movs	r0, #13
 80014c6:	f001 f8be 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80014ca:	200d      	movs	r0, #13
 80014cc:	f001 f8d5 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	200e      	movs	r0, #14
 80014d6:	f001 f8b6 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80014da:	200e      	movs	r0, #14
 80014dc:	f001 f8cd 	bl	800267a <HAL_NVIC_EnableIRQ>

}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58024400 	.word	0x58024400

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4b59      	ldr	r3, [pc, #356]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	4a57      	ldr	r2, [pc, #348]	; (8001668 <MX_GPIO_Init+0x17c>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001512:	4b55      	ldr	r3, [pc, #340]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b51      	ldr	r3, [pc, #324]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	4a50      	ldr	r2, [pc, #320]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001530:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	4a48      	ldr	r2, [pc, #288]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <MX_GPIO_Init+0x17c>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	4a41      	ldr	r2, [pc, #260]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <MX_GPIO_Init+0x17c>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <MX_GPIO_Init+0x17c>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	4a39      	ldr	r2, [pc, #228]	; (8001668 <MX_GPIO_Init+0x17c>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <MX_GPIO_Init+0x17c>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f640 2128 	movw	r1, #2600	; 0xa28
 800159e:	4833      	ldr	r0, [pc, #204]	; (800166c <MX_GPIO_Init+0x180>)
 80015a0:	f003 fc52 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	210a      	movs	r1, #10
 80015a8:	4831      	ldr	r0, [pc, #196]	; (8001670 <MX_GPIO_Init+0x184>)
 80015aa:	f003 fc4d 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80015ae:	2200      	movs	r2, #0
 80015b0:	21ae      	movs	r1, #174	; 0xae
 80015b2:	4830      	ldr	r0, [pc, #192]	; (8001674 <MX_GPIO_Init+0x188>)
 80015b4:	f003 fc48 	bl	8004e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2120      	movs	r1, #32
 80015bc:	482e      	ldr	r0, [pc, #184]	; (8001678 <MX_GPIO_Init+0x18c>)
 80015be:	f003 fc43 	bl	8004e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 80015c2:	f640 2328 	movw	r3, #2600	; 0xa28
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4824      	ldr	r0, [pc, #144]	; (800166c <MX_GPIO_Init+0x180>)
 80015dc:	f003 fa8c 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80015e0:	230a      	movs	r3, #10
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	481e      	ldr	r0, [pc, #120]	; (8001670 <MX_GPIO_Init+0x184>)
 80015f8:	f003 fa7e 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80015fc:	23ae      	movs	r3, #174	; 0xae
 80015fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <MX_GPIO_Init+0x188>)
 8001614:	f003 fa70 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001618:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800161e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4812      	ldr	r0, [pc, #72]	; (8001678 <MX_GPIO_Init+0x18c>)
 8001630:	f003 fa62 	bl	8004af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001634:	2320      	movs	r3, #32
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <MX_GPIO_Init+0x18c>)
 800164c:	f003 fa54 	bl	8004af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2028      	movs	r0, #40	; 0x28
 8001656:	f000 fff6 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800165a:	2028      	movs	r0, #40	; 0x28
 800165c:	f001 f80d 	bl	800267a <HAL_NVIC_EnableIRQ>

}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400
 800166c:	58021000 	.word	0x58021000
 8001670:	58020800 	.word	0x58020800
 8001674:	58020000 	.word	0x58020000
 8001678:	58020400 	.word	0x58020400

0800167c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
//        }
//
//        // Vuelve a habilitar la recepción por interrupción
//        HAL_UART_Receive_IT(&huart1, &byte, 1);
//    }
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <A4988_Setup>:
//    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); 5 puntos desfazados
//    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); 2 puntos malos
//    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100);
//}

void A4988_Setup() {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    // Configurar pines de modo (MS0, MS1, MS2) para medio paso
    HAL_GPIO_WritePin(GPIOE, MS0_PIN, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	2120      	movs	r1, #32
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <A4988_Setup+0x30>)
 800169a:	f003 fbd5 	bl	8004e48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS1_PIN, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2102      	movs	r1, #2
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <A4988_Setup+0x34>)
 80016a4:	f003 fbd0 	bl	8004e48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS2_PIN, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2108      	movs	r1, #8
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <A4988_Setup+0x34>)
 80016ae:	f003 fbcb 	bl	8004e48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, ENABLE_PIN, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2108      	movs	r1, #8
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <A4988_Setup+0x30>)
 80016b8:	f003 fbc6 	bl	8004e48 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58021000 	.word	0x58021000
 80016c4:	58020800 	.word	0x58020800

080016c8 <Home>:

void Home (void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	TIM1->CCR4 = 183;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <Home+0x28>)
 80016ce:	22b7      	movs	r2, #183	; 0xb7
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR2 =300;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <Home+0x28>)
 80016d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
	mover_motorq1(0);
 80016da:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80016f4 <Home+0x2c>
 80016de:	f000 f80b 	bl	80016f8 <mover_motorq1>
	motor_control();
 80016e2:	f000 f885 	bl	80017f0 <motor_control>
	motor_control1();
 80016e6:	f000 f8c7 	bl	8001878 <motor_control1>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000
 80016f4:	00000000 	.word	0x00000000

080016f8 <mover_motorq1>:


void mover_motorq1(float radianes) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	ed87 0a01 	vstr	s0, [r7, #4]
    // Convertir radianes a pasos
    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 8001702:	edd7 7a01 	vldr	s15, [r7, #4]
 8001706:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800170a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80017d8 <mover_motorq1+0xe0>
 800170e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001712:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80017e0 <mover_motorq1+0xe8>
 8001716:	ee27 7b06 	vmul.f64	d7, d7, d6
 800171a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800171e:	ee17 3a90 	vmov	r3, s15
 8001722:	617b      	str	r3, [r7, #20]

    // Calcular el nuevo paso deseado
    int nuevo_paso = pasos;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <mover_motorq1+0xf0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd1f      	ble.n	8001778 <mover_motorq1+0x80>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	482b      	ldr	r0, [pc, #172]	; (80017ec <mover_motorq1+0xf4>)
 800173e:	f003 fb83 	bl	8004e48 <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e012      	b.n	800176e <mover_motorq1+0x76>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2102      	movs	r1, #2
 800174c:	4827      	ldr	r0, [pc, #156]	; (80017ec <mover_motorq1+0xf4>)
 800174e:	f003 fb7b 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f000 fe78 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2102      	movs	r1, #2
 800175c:	4823      	ldr	r0, [pc, #140]	; (80017ec <mover_motorq1+0xf4>)
 800175e:	f003 fb73 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f000 fe70 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbe8      	blt.n	8001748 <mover_motorq1+0x50>
 8001776:	e024      	b.n	80017c2 <mover_motorq1+0xca>
        }
    } else if (diferencia_pasos < 0) {
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	da21      	bge.n	80017c2 <mover_motorq1+0xca>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2108      	movs	r1, #8
 8001782:	481a      	ldr	r0, [pc, #104]	; (80017ec <mover_motorq1+0xf4>)
 8001784:	f003 fb60 	bl	8004e48 <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	425b      	negs	r3, r3
 800178c:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	e012      	b.n	80017ba <mover_motorq1+0xc2>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2102      	movs	r1, #2
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <mover_motorq1+0xf4>)
 800179a:	f003 fb55 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 fe52 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2102      	movs	r1, #2
 80017a8:	4810      	ldr	r0, [pc, #64]	; (80017ec <mover_motorq1+0xf4>)
 80017aa:	f003 fb4d 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 fe4a 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbe8      	blt.n	8001794 <mover_motorq1+0x9c>
        }
    }

    // Actualizar el paso actual
    paso_actual_q1 = nuevo_paso;
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <mover_motorq1+0xf0>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 80017c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017cc:	f000 fe3c 	bl	8002448 <HAL_Delay>
}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	54442d18 	.word	0x54442d18
 80017dc:	401921fb 	.word	0x401921fb
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40790000 	.word	0x40790000
 80017e8:	24000554 	.word	0x24000554
 80017ec:	58020000 	.word	0x58020000

080017f0 <motor_control>:

void motor_control(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
    while (motor_running) {
 80017f6:	e02c      	b.n	8001852 <motor_control+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	481c      	ldr	r0, [pc, #112]	; (8001870 <motor_control+0x80>)
 80017fe:	f003 fb23 	bl	8004e48 <HAL_GPIO_WritePin>
        for (int i = 0; i < 1000 && motor_running; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	e012      	b.n	800182e <motor_control+0x3e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2120      	movs	r1, #32
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <motor_control+0x80>)
 800180e:	f003 fb1b 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 fe18 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2120      	movs	r1, #32
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <motor_control+0x80>)
 800181e:	f003 fb13 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f000 fe10 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < 1000 && motor_running; i++) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001834:	da04      	bge.n	8001840 <motor_control+0x50>
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <motor_control+0x84>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e3      	bne.n	8001808 <motor_control+0x18>
        }
        if (!motor_running) break; // Check if motor_running is false
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <motor_control+0x84>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <motor_control+0x6e>

        HAL_Delay(500);
 800184a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184e:	f000 fdfb 	bl	8002448 <HAL_Delay>
    while (motor_running) {
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <motor_control+0x84>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1cd      	bne.n	80017f8 <motor_control+0x8>
 800185c:	e000      	b.n	8001860 <motor_control+0x70>
        if (!motor_running) break; // Check if motor_running is false
 800185e:	bf00      	nop
//    	HAL_Delay(1);
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//    	HAL_Delay(1);
//    }
//    HAL_Delay(500);
    motor_running = 1;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <motor_control+0x84>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	58020000 	.word	0x58020000
 8001874:	24000000 	.word	0x24000000

08001878 <motor_control1>:

void motor_control1(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
    while (motor_running1) {
 800187e:	e032      	b.n	80018e6 <motor_control1+0x6e>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001886:	4831      	ldr	r0, [pc, #196]	; (800194c <motor_control1+0xd4>)
 8001888:	f003 fade 	bl	8004e48 <HAL_GPIO_WritePin>
        for (int i = 0; i < 1000 && motor_running1; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	e014      	b.n	80018bc <motor_control1+0x44>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001898:	482c      	ldr	r0, [pc, #176]	; (800194c <motor_control1+0xd4>)
 800189a:	f003 fad5 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fdd2 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4828      	ldr	r0, [pc, #160]	; (800194c <motor_control1+0xd4>)
 80018ac:	f003 facc 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 fdc9 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < 1000 && motor_running1; i++) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c2:	da04      	bge.n	80018ce <motor_control1+0x56>
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <motor_control1+0xd8>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e1      	bne.n	8001892 <motor_control1+0x1a>
        }
        HAL_Delay(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f000 fdba 	bl	8002448 <HAL_Delay>
        if (!motor_running1) break; // Check if motor_running is false
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <motor_control1+0xd8>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <motor_control1+0x7a>
        HAL_Delay(500);
 80018de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e2:	f000 fdb1 	bl	8002448 <HAL_Delay>
    while (motor_running1) {
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <motor_control1+0xd8>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1c7      	bne.n	8001880 <motor_control1+0x8>
 80018f0:	e000      	b.n	80018f4 <motor_control1+0x7c>
        if (!motor_running1) break; // Check if motor_running is false
 80018f2:	bf00      	nop

    }

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <motor_control1+0xd4>)
 80018fc:	f003 faa4 	bl	8004e48 <HAL_GPIO_WritePin>
    for (int i = 0; i < 70; i++) {
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	e014      	b.n	8001930 <motor_control1+0xb8>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800190c:	480f      	ldr	r0, [pc, #60]	; (800194c <motor_control1+0xd4>)
 800190e:	f003 fa9b 	bl	8004e48 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 fd98 	bl	8002448 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191e:	480b      	ldr	r0, [pc, #44]	; (800194c <motor_control1+0xd4>)
 8001920:	f003 fa92 	bl	8004e48 <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 fd8f 	bl	8002448 <HAL_Delay>
    for (int i = 0; i < 70; i++) {
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b45      	cmp	r3, #69	; 0x45
 8001934:	dde7      	ble.n	8001906 <motor_control1+0x8e>
    }
    HAL_Delay(500);
 8001936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193a:	f000 fd85 	bl	8002448 <HAL_Delay>

    motor_running1 = 1;
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <motor_control1+0xd8>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	58021000 	.word	0x58021000
 8001950:	24000001 	.word	0x24000001

08001954 <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limitar el rango de movimiento entre 0 y 200 mm
    if (milimetros < 0) milimetros = 0;
 800195e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	d502      	bpl.n	8001972 <mover_motorq2_mm+0x1e>
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
    if (milimetros > 200) milimetros = 200;
 8001972:	edd7 7a01 	vldr	s15, [r7, #4]
 8001976:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a48 <mover_motorq2_mm+0xf4>
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	dd01      	ble.n	8001988 <mover_motorq2_mm+0x34>
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <mover_motorq2_mm+0xf8>)
 8001986:	607b      	str	r3, [r7, #4]

    // Convertir milímetros a pasos
    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001988:	ed97 0a01 	vldr	s0, [r7, #4]
 800198c:	f7ff f8ce 	bl	8000b2c <milimetros_a_pasos>
 8001990:	6178      	str	r0, [r7, #20]

    // Calcular la nueva posición deseada
    int nuevo_paso = pasos;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q2;
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <mover_motorq2_mm+0xfc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dd1f      	ble.n	80019e6 <mover_motorq2_mm+0x92>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Dirección positiva
 80019a6:	2201      	movs	r2, #1
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	482a      	ldr	r0, [pc, #168]	; (8001a54 <mover_motorq2_mm+0x100>)
 80019ac:	f003 fa4c 	bl	8004e48 <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	e012      	b.n	80019dc <mover_motorq2_mm+0x88>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2120      	movs	r1, #32
 80019ba:	4826      	ldr	r0, [pc, #152]	; (8001a54 <mover_motorq2_mm+0x100>)
 80019bc:	f003 fa44 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f000 fd41 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2120      	movs	r1, #32
 80019ca:	4822      	ldr	r0, [pc, #136]	; (8001a54 <mover_motorq2_mm+0x100>)
 80019cc:	f003 fa3c 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f000 fd39 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbe8      	blt.n	80019b6 <mover_motorq2_mm+0x62>
 80019e4:	e024      	b.n	8001a30 <mover_motorq2_mm+0xdc>
        }
    } else if (diferencia_pasos < 0) {
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da21      	bge.n	8001a30 <mover_motorq2_mm+0xdc>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Dirección negativa
 80019ec:	2200      	movs	r2, #0
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	4818      	ldr	r0, [pc, #96]	; (8001a54 <mover_motorq2_mm+0x100>)
 80019f2:	f003 fa29 	bl	8004e48 <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	425b      	negs	r3, r3
 80019fa:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	e012      	b.n	8001a28 <mover_motorq2_mm+0xd4>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2120      	movs	r1, #32
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <mover_motorq2_mm+0x100>)
 8001a08:	f003 fa1e 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f000 fd1b 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2120      	movs	r1, #32
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <mover_motorq2_mm+0x100>)
 8001a18:	f003 fa16 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f000 fd13 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbe8      	blt.n	8001a02 <mover_motorq2_mm+0xae>
        }
    }

    // Actualizar el paso actual
    paso_actual_q2 = nuevo_paso;
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <mover_motorq2_mm+0xfc>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 8001a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3a:	f000 fd05 	bl	8002448 <HAL_Delay>
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	43480000 	.word	0x43480000
 8001a4c:	43480000 	.word	0x43480000
 8001a50:	24000558 	.word	0x24000558
 8001a54:	58020000 	.word	0x58020000

08001a58 <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limitar el rango de movimiento entre 0 y 200 mm
	if (milimetros < 0) milimetros = 0;
 8001a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d502      	bpl.n	8001a76 <mover_motorq3_mm+0x1e>
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
	if (milimetros > 400) milimetros = 400;
 8001a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001b58 <mover_motorq3_mm+0x100>
 8001a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a86:	dd01      	ble.n	8001a8c <mover_motorq3_mm+0x34>
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <mover_motorq3_mm+0x104>)
 8001a8a:	607b      	str	r3, [r7, #4]

	// Convertir el punto de referencia de 100 mm a 0 mm para los cálculos
	//milimetros -= 100;

	// Convertir milímetros a pasos
    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001a8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a90:	f7ff f84c 	bl	8000b2c <milimetros_a_pasos>
 8001a94:	6178      	str	r0, [r7, #20]

    // Calcular la nueva posición deseada
    int nuevo_paso = pasos;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q3;
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <mover_motorq3_mm+0x108>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	dd22      	ble.n	8001af0 <mover_motorq3_mm+0x98>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // Dirección positiva
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab0:	482c      	ldr	r0, [pc, #176]	; (8001b64 <mover_motorq3_mm+0x10c>)
 8001ab2:	f003 f9c9 	bl	8004e48 <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e014      	b.n	8001ae6 <mover_motorq3_mm+0x8e>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <mover_motorq3_mm+0x10c>)
 8001ac4:	f003 f9c0 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f000 fcbd 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad4:	4823      	ldr	r0, [pc, #140]	; (8001b64 <mover_motorq3_mm+0x10c>)
 8001ad6:	f003 f9b7 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f000 fcb4 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dbe6      	blt.n	8001abc <mover_motorq3_mm+0x64>
 8001aee:	e027      	b.n	8001b40 <mover_motorq3_mm+0xe8>
        }
    } else if (diferencia_pasos < 0) {
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da24      	bge.n	8001b40 <mover_motorq3_mm+0xe8>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); // Dirección negativa
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afc:	4819      	ldr	r0, [pc, #100]	; (8001b64 <mover_motorq3_mm+0x10c>)
 8001afe:	f003 f9a3 	bl	8004e48 <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	425b      	negs	r3, r3
 8001b06:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	e014      	b.n	8001b38 <mover_motorq3_mm+0xe0>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b14:	4813      	ldr	r0, [pc, #76]	; (8001b64 <mover_motorq3_mm+0x10c>)
 8001b16:	f003 f997 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f000 fc94 	bl	8002448 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b26:	480f      	ldr	r0, [pc, #60]	; (8001b64 <mover_motorq3_mm+0x10c>)
 8001b28:	f003 f98e 	bl	8004e48 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f000 fc8b 	bl	8002448 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbe6      	blt.n	8001b0e <mover_motorq3_mm+0xb6>
        }
    }

    // Actualizar el paso actual
    paso_actual_q3 = nuevo_paso;
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <mover_motorq3_mm+0x108>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 8001b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b4a:	f000 fc7d 	bl	8002448 <HAL_Delay>
}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	43c80000 	.word	0x43c80000
 8001b5c:	43c80000 	.word	0x43c80000
 8001b60:	2400055c 	.word	0x2400055c
 8001b64:	58021000 	.word	0x58021000

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>
	...

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_MspInit+0x30>)
 8001b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b80:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x30>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x30>)
 8001b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	58024400 	.word	0x58024400

08001ba8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40010000 	.word	0x40010000
 8001be8:	58024400 	.word	0x58024400

08001bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_TIM_MspPostInit+0x6c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d11f      	bne.n	8001c4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_TIM_MspPostInit+0x70>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <HAL_TIM_MspPostInit+0x70>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_TIM_MspPostInit+0x70>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001c2c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_TIM_MspPostInit+0x74>)
 8001c4a:	f002 ff55 	bl	8004af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	58024400 	.word	0x58024400
 8001c60:	58020000 	.word	0x58020000

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0b8      	sub	sp, #224	; 0xe0
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	22b4      	movs	r2, #180	; 0xb4
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f008 ff0d 	bl	800aaa4 <memset>
  if(huart->Instance==USART1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4aac      	ldr	r2, [pc, #688]	; (8001f40 <HAL_UART_MspInit+0x2dc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	f040 80a6 	bne.w	8001de2 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f004 f877 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001cb0:	f7ff ff5a 	bl	8001b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb4:	4ba3      	ldr	r3, [pc, #652]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cba:	4aa2      	ldr	r2, [pc, #648]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001cbc:	f043 0310 	orr.w	r3, r3, #16
 8001cc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cc4:	4b9f      	ldr	r3, [pc, #636]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b9c      	ldr	r3, [pc, #624]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	4a9a      	ldr	r2, [pc, #616]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce2:	4b98      	ldr	r3, [pc, #608]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cf0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d14:	4619      	mov	r1, r3
 8001d16:	488c      	ldr	r0, [pc, #560]	; (8001f48 <HAL_UART_MspInit+0x2e4>)
 8001d18:	f002 feee 	bl	8004af8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001d1c:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d1e:	4a8c      	ldr	r2, [pc, #560]	; (8001f50 <HAL_UART_MspInit+0x2ec>)
 8001d20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d22:	4b8a      	ldr	r3, [pc, #552]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d24:	2229      	movs	r2, #41	; 0x29
 8001d26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d28:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2e:	4b87      	ldr	r3, [pc, #540]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d34:	4b85      	ldr	r3, [pc, #532]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3c:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d54:	4b7d      	ldr	r3, [pc, #500]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d5a:	487c      	ldr	r0, [pc, #496]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d5c:	f000 fca8 	bl	80026b0 <HAL_DMA_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001d66:	f7ff feff 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d6e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d70:	4a76      	ldr	r2, [pc, #472]	; (8001f4c <HAL_UART_MspInit+0x2e8>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d78:	4a77      	ldr	r2, [pc, #476]	; (8001f58 <HAL_UART_MspInit+0x2f4>)
 8001d7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d7e:	222a      	movs	r2, #42	; 0x2a
 8001d80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d82:	4b74      	ldr	r3, [pc, #464]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d94:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9c:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001da2:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dae:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001db4:	4867      	ldr	r0, [pc, #412]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001db6:	f000 fc7b 	bl	80026b0 <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001dc0:	f7ff fed2 	bl	8001b68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a63      	ldr	r2, [pc, #396]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001dc8:	679a      	str	r2, [r3, #120]	; 0x78
 8001dca:	4a62      	ldr	r2, [pc, #392]	; (8001f54 <HAL_UART_MspInit+0x2f0>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2025      	movs	r0, #37	; 0x25
 8001dd6:	f000 fc36 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dda:	2025      	movs	r0, #37	; 0x25
 8001ddc:	f000 fc4d 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001de0:	e0aa      	b.n	8001f38 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_UART_MspInit+0x2f8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	f040 80a5 	bne.w	8001f38 <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 ffcb 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001e08:	f7ff feae 	bl	8001b68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e12:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e1c:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e30:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3a:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <HAL_UART_MspInit+0x2e0>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e62:	2307      	movs	r3, #7
 8001e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4836      	ldr	r0, [pc, #216]	; (8001f48 <HAL_UART_MspInit+0x2e4>)
 8001e70:	f002 fe42 	bl	8004af8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e76:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <HAL_UART_MspInit+0x300>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e7c:	222d      	movs	r2, #45	; 0x2d
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e92:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e94:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001eb2:	482b      	ldr	r0, [pc, #172]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001eb4:	f000 fbfc 	bl	80026b0 <HAL_DMA_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8001ebe:	f7ff fe53 	bl	8001b68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001ec6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ec8:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <HAL_UART_MspInit+0x2fc>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <HAL_UART_MspInit+0x308>)
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001ed6:	222e      	movs	r2, #46	; 0x2e
 8001ed8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f0c:	4816      	ldr	r0, [pc, #88]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001f0e:	f000 fbcf 	bl	80026b0 <HAL_DMA_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8001f18:	f7ff fe26 	bl	8001b68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001f20:	679a      	str	r2, [r3, #120]	; 0x78
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_UART_MspInit+0x304>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2027      	movs	r0, #39	; 0x27
 8001f2e:	f000 fb8a 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f32:	2027      	movs	r0, #39	; 0x27
 8001f34:	f000 fba1 	bl	800267a <HAL_NVIC_EnableIRQ>
}
 8001f38:	bf00      	nop
 8001f3a:	37e0      	adds	r7, #224	; 0xe0
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40011000 	.word	0x40011000
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58020400 	.word	0x58020400
 8001f4c:	24000370 	.word	0x24000370
 8001f50:	40020010 	.word	0x40020010
 8001f54:	240003e8 	.word	0x240003e8
 8001f58:	40020028 	.word	0x40020028
 8001f5c:	40004800 	.word	0x40004800
 8001f60:	24000460 	.word	0x24000460
 8001f64:	40020040 	.word	0x40020040
 8001f68:	240004d8 	.word	0x240004d8
 8001f6c:	40020058 	.word	0x40020058

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f000 fa24 	bl	8002408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8001fca:	f001 fc2f 	bl	800382c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	24000370 	.word	0x24000370

08001fd8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Stream1_IRQHandler+0x10>)
 8001fde:	f001 fc25 	bl	800382c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	240003e8 	.word	0x240003e8

08001fec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA1_Stream2_IRQHandler+0x10>)
 8001ff2:	f001 fc1b 	bl	800382c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24000460 	.word	0x24000460

08002000 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA1_Stream3_IRQHandler+0x10>)
 8002006:	f001 fc11 	bl	800382c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	240004d8 	.word	0x240004d8

08002014 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <USART1_IRQHandler+0x10>)
 800201a:	f006 f9e5 	bl	80083e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24000250 	.word	0x24000250

08002028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <USART3_IRQHandler+0x10>)
 800202e:	f006 f9db 	bl	80083e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	240002e0 	.word	0x240002e0

0800203c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002040:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002044:	f002 ff19 	bl	8004e7a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002048:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800204c:	f002 ff15 	bl	8004e7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800206e:	f008 fcef 	bl	800aa50 <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
	return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002096:	e7fe      	b.n	8002096 <_exit+0x12>

08002098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e00a      	b.n	80020c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020aa:	f3af 8000 	nop.w
 80020ae:	4601      	mov	r1, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	dbf0      	blt.n	80020aa <_read+0x12>
	}

return len;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e009      	b.n	80020f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf1      	blt.n	80020e4 <_write+0x12>
	}
	return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_close>:

int _close(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
	return -1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	605a      	str	r2, [r3, #4]
	return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_isatty>:

int _isatty(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	return 1;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
	return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f008 fc54 	bl	800aa50 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	24050000 	.word	0x24050000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	24000570 	.word	0x24000570
 80021dc:	24000588 	.word	0x24000588

080021e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <SystemInit+0xd0>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <SystemInit+0xd0>)
 80021ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <SystemInit+0xd4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d807      	bhi.n	8002210 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <SystemInit+0xd4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 030f 	bic.w	r3, r3, #15
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <SystemInit+0xd4>)
 800220a:	f043 0307 	orr.w	r3, r3, #7
 800220e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002210:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <SystemInit+0xd8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <SystemInit+0xd8>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <SystemInit+0xd8>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002222:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <SystemInit+0xd8>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4924      	ldr	r1, [pc, #144]	; (80022b8 <SystemInit+0xd8>)
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <SystemInit+0xdc>)
 800222a:	4013      	ands	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <SystemInit+0xd4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <SystemInit+0xd4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 030f 	bic.w	r3, r3, #15
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <SystemInit+0xd4>)
 8002244:	f043 0307 	orr.w	r3, r3, #7
 8002248:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <SystemInit+0xd8>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <SystemInit+0xd8>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <SystemInit+0xd8>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <SystemInit+0xd8>)
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <SystemInit+0xe0>)
 8002260:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <SystemInit+0xd8>)
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <SystemInit+0xe4>)
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <SystemInit+0xd8>)
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <SystemInit+0xe8>)
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <SystemInit+0xd8>)
 8002270:	2200      	movs	r2, #0
 8002272:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <SystemInit+0xd8>)
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <SystemInit+0xe8>)
 8002278:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <SystemInit+0xd8>)
 800227c:	2200      	movs	r2, #0
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <SystemInit+0xd8>)
 8002282:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <SystemInit+0xe8>)
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <SystemInit+0xd8>)
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <SystemInit+0xd8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <SystemInit+0xd8>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <SystemInit+0xd8>)
 800229a:	2200      	movs	r2, #0
 800229c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <SystemInit+0xec>)
 80022a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00
 80022b4:	52002000 	.word	0x52002000
 80022b8:	58024400 	.word	0x58024400
 80022bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80022c0:	02020200 	.word	0x02020200
 80022c4:	01ff0000 	.word	0x01ff0000
 80022c8:	01010280 	.word	0x01010280
 80022cc:	52004000 	.word	0x52004000

080022d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022d4:	f7ff ff84 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	; (8002310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	; (800231c <LoopFillZerobss+0x22>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f008 fbad 	bl	800aa5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002302:	f7fe fc51 	bl	8000ba8 <main>
  bx  lr
 8002306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800230c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002310:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8002314:	0800dc5c 	.word	0x0800dc5c
  ldr r2, =_sbss
 8002318:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 800231c:	24000588 	.word	0x24000588

08002320 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC3_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232a:	2003      	movs	r0, #3
 800232c:	f000 f980 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002330:	f003 fb5c 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_Init+0x68>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	4913      	ldr	r1, [pc, #76]	; (8002390 <HAL_Init+0x6c>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_Init+0x68>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_Init+0x6c>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_Init+0x70>)
 8002366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_Init+0x74>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800236e:	200f      	movs	r0, #15
 8002370:	f000 f814 	bl	800239c <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e002      	b.n	8002384 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800237e:	f7ff fbf9 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	58024400 	.word	0x58024400
 8002390:	0800d7e0 	.word	0x0800d7e0
 8002394:	24000008 	.word	0x24000008
 8002398:	24000004 	.word	0x24000004

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_InitTick+0x60>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e021      	b.n	80023f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_InitTick+0x64>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_InitTick+0x60>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023be:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f965 	bl	8002696 <HAL_SYSTICK_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00e      	b.n	80023f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d80a      	bhi.n	80023f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023dc:	2200      	movs	r2, #0
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f000 f92f 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <HAL_InitTick+0x68>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	24000010 	.word	0x24000010
 8002400:	24000004 	.word	0x24000004
 8002404:	2400000c 	.word	0x2400000c

08002408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x20>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_IncTick+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	24000010 	.word	0x24000010
 800242c:	24000574 	.word	0x24000574

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	24000574 	.word	0x24000574

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffde 	bl	8002430 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000010 	.word	0x24000010

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <__NVIC_SetPriorityGrouping+0x40>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x40>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00
 80024d4:	05fa0000 	.word	0x05fa0000

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002654:	f7ff ff40 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff90 	bl	8002584 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5f 	bl	8002530 <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff33 	bl	80024f4 <__NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffa4 	bl	80025ec <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff feba 	bl	8002430 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e314      	b.n	8002cf2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a66      	ldr	r2, [pc, #408]	; (8002868 <HAL_DMA_Init+0x1b8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04a      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_DMA_Init+0x1bc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d045      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a63      	ldr	r2, [pc, #396]	; (8002870 <HAL_DMA_Init+0x1c0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a62      	ldr	r2, [pc, #392]	; (8002874 <HAL_DMA_Init+0x1c4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d03b      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a60      	ldr	r2, [pc, #384]	; (8002878 <HAL_DMA_Init+0x1c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d036      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5f      	ldr	r2, [pc, #380]	; (800287c <HAL_DMA_Init+0x1cc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d031      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <HAL_DMA_Init+0x1d0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02c      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5c      	ldr	r2, [pc, #368]	; (8002884 <HAL_DMA_Init+0x1d4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d027      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_DMA_Init+0x1d8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d022      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a59      	ldr	r2, [pc, #356]	; (800288c <HAL_DMA_Init+0x1dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01d      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_DMA_Init+0x1e0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d018      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_DMA_Init+0x1e4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_DMA_Init+0x1e8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_DMA_Init+0x1ec>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a51      	ldr	r2, [pc, #324]	; (80028a0 <HAL_DMA_Init+0x1f0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <HAL_DMA_Init+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_DMA_Init+0xbc>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_DMA_Init+0xbe>
 800276c:	2300      	movs	r3, #0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 813c 	beq.w	80029ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a37      	ldr	r2, [pc, #220]	; (8002868 <HAL_DMA_Init+0x1b8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d04a      	beq.n	8002824 <HAL_DMA_Init+0x174>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_DMA_Init+0x1bc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d045      	beq.n	8002824 <HAL_DMA_Init+0x174>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_DMA_Init+0x1c0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d040      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a33      	ldr	r2, [pc, #204]	; (8002874 <HAL_DMA_Init+0x1c4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d03b      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_DMA_Init+0x1c8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d036      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_DMA_Init+0x1cc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d031      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <HAL_DMA_Init+0x1d0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d02c      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_DMA_Init+0x1d4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d027      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <HAL_DMA_Init+0x1d8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d022      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_DMA_Init+0x1dc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d01d      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_DMA_Init+0x1e0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d018      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_DMA_Init+0x1e4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d013      	beq.n	8002824 <HAL_DMA_Init+0x174>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <HAL_DMA_Init+0x1e8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00e      	beq.n	8002824 <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_DMA_Init+0x1ec>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_DMA_Init+0x1f0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d004      	beq.n	8002824 <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_DMA_Init+0x1f4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d108      	bne.n	8002836 <HAL_DMA_Init+0x186>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e007      	b.n	8002846 <HAL_DMA_Init+0x196>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002846:	e02f      	b.n	80028a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002848:	f7ff fdf2 	bl	8002430 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b05      	cmp	r3, #5
 8002854:	d928      	bls.n	80028a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2203      	movs	r2, #3
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e244      	b.n	8002cf2 <HAL_DMA_Init+0x642>
 8002868:	40020010 	.word	0x40020010
 800286c:	40020028 	.word	0x40020028
 8002870:	40020040 	.word	0x40020040
 8002874:	40020058 	.word	0x40020058
 8002878:	40020070 	.word	0x40020070
 800287c:	40020088 	.word	0x40020088
 8002880:	400200a0 	.word	0x400200a0
 8002884:	400200b8 	.word	0x400200b8
 8002888:	40020410 	.word	0x40020410
 800288c:	40020428 	.word	0x40020428
 8002890:	40020440 	.word	0x40020440
 8002894:	40020458 	.word	0x40020458
 8002898:	40020470 	.word	0x40020470
 800289c:	40020488 	.word	0x40020488
 80028a0:	400204a0 	.word	0x400204a0
 80028a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1c8      	bne.n	8002848 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <HAL_DMA_Init+0x424>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d107      	bne.n	800290c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b28      	cmp	r3, #40	; 0x28
 8002912:	d903      	bls.n	800291c <HAL_DMA_Init+0x26c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b2e      	cmp	r3, #46	; 0x2e
 800291a:	d91f      	bls.n	800295c <HAL_DMA_Init+0x2ac>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b3e      	cmp	r3, #62	; 0x3e
 8002922:	d903      	bls.n	800292c <HAL_DMA_Init+0x27c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b42      	cmp	r3, #66	; 0x42
 800292a:	d917      	bls.n	800295c <HAL_DMA_Init+0x2ac>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b46      	cmp	r3, #70	; 0x46
 8002932:	d903      	bls.n	800293c <HAL_DMA_Init+0x28c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b48      	cmp	r3, #72	; 0x48
 800293a:	d90f      	bls.n	800295c <HAL_DMA_Init+0x2ac>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b4e      	cmp	r3, #78	; 0x4e
 8002942:	d903      	bls.n	800294c <HAL_DMA_Init+0x29c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b52      	cmp	r3, #82	; 0x52
 800294a:	d907      	bls.n	800295c <HAL_DMA_Init+0x2ac>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b73      	cmp	r3, #115	; 0x73
 8002952:	d905      	bls.n	8002960 <HAL_DMA_Init+0x2b0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b77      	cmp	r3, #119	; 0x77
 800295a:	d801      	bhi.n	8002960 <HAL_DMA_Init+0x2b0>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_DMA_Init+0x2b2>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f023 0307 	bic.w	r3, r3, #7
 8002984:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2b04      	cmp	r3, #4
 8002996:	d117      	bne.n	80029c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 ff1a 	bl	80047e4 <DMA_CheckFifoParam>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2240      	movs	r2, #64	; 0x40
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e194      	b.n	8002cf2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f001 fe55 	bl	8004680 <DMA_CalcBaseAndBitshift>
 80029d6:	4603      	mov	r3, r0
 80029d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	223f      	movs	r2, #63	; 0x3f
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e0ca      	b.n	8002b82 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <HAL_DMA_Init+0x428>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d022      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a38      	ldr	r2, [pc, #224]	; (8002adc <HAL_DMA_Init+0x42c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01d      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a36      	ldr	r2, [pc, #216]	; (8002ae0 <HAL_DMA_Init+0x430>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a35      	ldr	r2, [pc, #212]	; (8002ae4 <HAL_DMA_Init+0x434>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_DMA_Init+0x438>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a32      	ldr	r2, [pc, #200]	; (8002aec <HAL_DMA_Init+0x43c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_DMA_Init+0x440>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_DMA_Init+0x38c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <HAL_DMA_Init+0x444>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Init+0x390>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_DMA_Init+0x392>
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8094 	beq.w	8002b70 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_DMA_Init+0x428>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d021      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_DMA_Init+0x42c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d01c      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_DMA_Init+0x430>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d017      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_DMA_Init+0x434>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d012      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_DMA_Init+0x438>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_DMA_Init+0x43c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d008      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_DMA_Init+0x440>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <HAL_DMA_Init+0x3e6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_DMA_Init+0x444>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_DMA_Init+0x448>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d01d      	beq.n	8002afc <HAL_DMA_Init+0x44c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d102      	bne.n	8002ace <HAL_DMA_Init+0x41e>
 8002ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002acc:	e017      	b.n	8002afe <HAL_DMA_Init+0x44e>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e015      	b.n	8002afe <HAL_DMA_Init+0x44e>
 8002ad2:	bf00      	nop
 8002ad4:	fe10803f 	.word	0xfe10803f
 8002ad8:	58025408 	.word	0x58025408
 8002adc:	5802541c 	.word	0x5802541c
 8002ae0:	58025430 	.word	0x58025430
 8002ae4:	58025444 	.word	0x58025444
 8002ae8:	58025458 	.word	0x58025458
 8002aec:	5802546c 	.word	0x5802546c
 8002af0:	58025480 	.word	0x58025480
 8002af4:	58025494 	.word	0x58025494
 8002af8:	fffe000f 	.word	0xfffe000f
 8002afc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68d2      	ldr	r2, [r2, #12]
 8002b02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b6e      	ldr	r3, [pc, #440]	; (8002cfc <HAL_DMA_Init+0x64c>)
 8002b44:	4413      	add	r3, r2
 8002b46:	4a6e      	ldr	r2, [pc, #440]	; (8002d00 <HAL_DMA_Init+0x650>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f001 fd93 	bl	8004680 <DMA_CalcBaseAndBitshift>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e008      	b.n	8002b82 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2203      	movs	r2, #3
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0b7      	b.n	8002cf2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5f      	ldr	r2, [pc, #380]	; (8002d04 <HAL_DMA_Init+0x654>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d072      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <HAL_DMA_Init+0x658>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d06d      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	; (8002d0c <HAL_DMA_Init+0x65c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d068      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5a      	ldr	r2, [pc, #360]	; (8002d10 <HAL_DMA_Init+0x660>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d063      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a59      	ldr	r2, [pc, #356]	; (8002d14 <HAL_DMA_Init+0x664>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d05e      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_DMA_Init+0x668>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d059      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_DMA_Init+0x66c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d054      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_DMA_Init+0x670>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d04f      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_DMA_Init+0x674>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04a      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_DMA_Init+0x678>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d045      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_DMA_Init+0x67c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d040      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4e      	ldr	r2, [pc, #312]	; (8002d30 <HAL_DMA_Init+0x680>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d03b      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <HAL_DMA_Init+0x684>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d036      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a4b      	ldr	r2, [pc, #300]	; (8002d38 <HAL_DMA_Init+0x688>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4a      	ldr	r2, [pc, #296]	; (8002d3c <HAL_DMA_Init+0x68c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d02c      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_DMA_Init+0x690>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d027      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a47      	ldr	r2, [pc, #284]	; (8002d44 <HAL_DMA_Init+0x694>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <HAL_DMA_Init+0x698>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a44      	ldr	r2, [pc, #272]	; (8002d4c <HAL_DMA_Init+0x69c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_DMA_Init+0x6a0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <HAL_DMA_Init+0x6a4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_DMA_Init+0x6a8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	; (8002d5c <HAL_DMA_Init+0x6ac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMA_Init+0x5c2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <HAL_DMA_Init+0x6b0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_DMA_Init+0x5c6>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_DMA_Init+0x5c8>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d032      	beq.n	8002ce2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f001 fe2d 	bl	80048dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d102      	bne.n	8002c90 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ca4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_DMA_Init+0x620>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d80c      	bhi.n	8002cd0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f001 feaa 	bl	8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	e008      	b.n	8002ce2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	a7fdabf8 	.word	0xa7fdabf8
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	40020010 	.word	0x40020010
 8002d08:	40020028 	.word	0x40020028
 8002d0c:	40020040 	.word	0x40020040
 8002d10:	40020058 	.word	0x40020058
 8002d14:	40020070 	.word	0x40020070
 8002d18:	40020088 	.word	0x40020088
 8002d1c:	400200a0 	.word	0x400200a0
 8002d20:	400200b8 	.word	0x400200b8
 8002d24:	40020410 	.word	0x40020410
 8002d28:	40020428 	.word	0x40020428
 8002d2c:	40020440 	.word	0x40020440
 8002d30:	40020458 	.word	0x40020458
 8002d34:	40020470 	.word	0x40020470
 8002d38:	40020488 	.word	0x40020488
 8002d3c:	400204a0 	.word	0x400204a0
 8002d40:	400204b8 	.word	0x400204b8
 8002d44:	58025408 	.word	0x58025408
 8002d48:	5802541c 	.word	0x5802541c
 8002d4c:	58025430 	.word	0x58025430
 8002d50:	58025444 	.word	0x58025444
 8002d54:	58025458 	.word	0x58025458
 8002d58:	5802546c 	.word	0x5802546c
 8002d5c:	58025480 	.word	0x58025480
 8002d60:	58025494 	.word	0x58025494

08002d64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fb60 	bl	8002430 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e2dc      	b.n	8003336 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d008      	beq.n	8002d9a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2280      	movs	r2, #128	; 0x80
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e2cd      	b.n	8003336 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a76      	ldr	r2, [pc, #472]	; (8002f78 <HAL_DMA_Abort+0x214>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d04a      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a74      	ldr	r2, [pc, #464]	; (8002f7c <HAL_DMA_Abort+0x218>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a73      	ldr	r2, [pc, #460]	; (8002f80 <HAL_DMA_Abort+0x21c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d040      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a71      	ldr	r2, [pc, #452]	; (8002f84 <HAL_DMA_Abort+0x220>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03b      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <HAL_DMA_Abort+0x224>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d036      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_DMA_Abort+0x228>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <HAL_DMA_Abort+0x22c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d02c      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6b      	ldr	r2, [pc, #428]	; (8002f94 <HAL_DMA_Abort+0x230>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d027      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_DMA_Abort+0x234>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_DMA_Abort+0x238>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <HAL_DMA_Abort+0x23c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a65      	ldr	r2, [pc, #404]	; (8002fa4 <HAL_DMA_Abort+0x240>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a64      	ldr	r2, [pc, #400]	; (8002fa8 <HAL_DMA_Abort+0x244>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a62      	ldr	r2, [pc, #392]	; (8002fac <HAL_DMA_Abort+0x248>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <HAL_DMA_Abort+0x24c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_DMA_Abort+0xd6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5f      	ldr	r2, [pc, #380]	; (8002fb4 <HAL_DMA_Abort+0x250>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Abort+0xda>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_DMA_Abort+0xdc>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 021e 	bic.w	r2, r2, #30
 8002e52:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e62:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e00a      	b.n	8002e82 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 020e 	bic.w	r2, r2, #14
 8002e7a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <HAL_DMA_Abort+0x214>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d072      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <HAL_DMA_Abort+0x218>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d06d      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <HAL_DMA_Abort+0x21c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d068      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a37      	ldr	r2, [pc, #220]	; (8002f84 <HAL_DMA_Abort+0x220>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d063      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <HAL_DMA_Abort+0x224>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d05e      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <HAL_DMA_Abort+0x228>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d059      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <HAL_DMA_Abort+0x22c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d054      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_DMA_Abort+0x230>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d04f      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a30      	ldr	r2, [pc, #192]	; (8002f98 <HAL_DMA_Abort+0x234>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a2e      	ldr	r2, [pc, #184]	; (8002f9c <HAL_DMA_Abort+0x238>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <HAL_DMA_Abort+0x23c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <HAL_DMA_Abort+0x240>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <HAL_DMA_Abort+0x244>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a28      	ldr	r2, [pc, #160]	; (8002fac <HAL_DMA_Abort+0x248>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <HAL_DMA_Abort+0x24c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <HAL_DMA_Abort+0x250>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <HAL_DMA_Abort+0x254>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_DMA_Abort+0x258>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <HAL_DMA_Abort+0x25c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_DMA_Abort+0x260>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_DMA_Abort+0x264>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_DMA_Abort+0x268>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_DMA_Abort+0x26c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort+0x20e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_DMA_Abort+0x270>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d132      	bne.n	8002fd8 <HAL_DMA_Abort+0x274>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e031      	b.n	8002fda <HAL_DMA_Abort+0x276>
 8002f76:	bf00      	nop
 8002f78:	40020010 	.word	0x40020010
 8002f7c:	40020028 	.word	0x40020028
 8002f80:	40020040 	.word	0x40020040
 8002f84:	40020058 	.word	0x40020058
 8002f88:	40020070 	.word	0x40020070
 8002f8c:	40020088 	.word	0x40020088
 8002f90:	400200a0 	.word	0x400200a0
 8002f94:	400200b8 	.word	0x400200b8
 8002f98:	40020410 	.word	0x40020410
 8002f9c:	40020428 	.word	0x40020428
 8002fa0:	40020440 	.word	0x40020440
 8002fa4:	40020458 	.word	0x40020458
 8002fa8:	40020470 	.word	0x40020470
 8002fac:	40020488 	.word	0x40020488
 8002fb0:	400204a0 	.word	0x400204a0
 8002fb4:	400204b8 	.word	0x400204b8
 8002fb8:	58025408 	.word	0x58025408
 8002fbc:	5802541c 	.word	0x5802541c
 8002fc0:	58025430 	.word	0x58025430
 8002fc4:	58025444 	.word	0x58025444
 8002fc8:	58025458 	.word	0x58025458
 8002fcc:	5802546c 	.word	0x5802546c
 8002fd0:	58025480 	.word	0x58025480
 8002fd4:	58025494 	.word	0x58025494
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6d      	ldr	r2, [pc, #436]	; (80031a8 <HAL_DMA_Abort+0x444>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d04a      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <HAL_DMA_Abort+0x448>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d045      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_DMA_Abort+0x44c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d040      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a68      	ldr	r2, [pc, #416]	; (80031b4 <HAL_DMA_Abort+0x450>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d03b      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a67      	ldr	r2, [pc, #412]	; (80031b8 <HAL_DMA_Abort+0x454>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d036      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a65      	ldr	r2, [pc, #404]	; (80031bc <HAL_DMA_Abort+0x458>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d031      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a64      	ldr	r2, [pc, #400]	; (80031c0 <HAL_DMA_Abort+0x45c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d02c      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a62      	ldr	r2, [pc, #392]	; (80031c4 <HAL_DMA_Abort+0x460>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d027      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <HAL_DMA_Abort+0x464>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a5f      	ldr	r2, [pc, #380]	; (80031cc <HAL_DMA_Abort+0x468>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01d      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_DMA_Abort+0x46c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_DMA_Abort+0x470>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_DMA_Abort+0x474>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a59      	ldr	r2, [pc, #356]	; (80031dc <HAL_DMA_Abort+0x478>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_DMA_Abort+0x47c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_DMA_Abort+0x32a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_DMA_Abort+0x480>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d108      	bne.n	80030a0 <HAL_DMA_Abort+0x33c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e007      	b.n	80030b0 <HAL_DMA_Abort+0x34c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030b0:	e013      	b.n	80030da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b2:	f7ff f9bd 	bl	8002430 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d90c      	bls.n	80030da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2203      	movs	r2, #3
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e12d      	b.n	8003336 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <HAL_DMA_Abort+0x444>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_DMA_Abort+0x448>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <HAL_DMA_Abort+0x44c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <HAL_DMA_Abort+0x450>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <HAL_DMA_Abort+0x454>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_DMA_Abort+0x458>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_DMA_Abort+0x45c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_DMA_Abort+0x460>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_DMA_Abort+0x464>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a21      	ldr	r2, [pc, #132]	; (80031cc <HAL_DMA_Abort+0x468>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <HAL_DMA_Abort+0x46c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1e      	ldr	r2, [pc, #120]	; (80031d4 <HAL_DMA_Abort+0x470>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <HAL_DMA_Abort+0x474>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <HAL_DMA_Abort+0x478>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_DMA_Abort+0x47c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_DMA_Abort+0x422>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_DMA_Abort+0x480>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_DMA_Abort+0x426>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_DMA_Abort+0x428>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d02b      	beq.n	80031e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	223f      	movs	r2, #63	; 0x3f
 80031a0:	409a      	lsls	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	e02a      	b.n	80031fe <HAL_DMA_Abort+0x49a>
 80031a8:	40020010 	.word	0x40020010
 80031ac:	40020028 	.word	0x40020028
 80031b0:	40020040 	.word	0x40020040
 80031b4:	40020058 	.word	0x40020058
 80031b8:	40020070 	.word	0x40020070
 80031bc:	40020088 	.word	0x40020088
 80031c0:	400200a0 	.word	0x400200a0
 80031c4:	400200b8 	.word	0x400200b8
 80031c8:	40020410 	.word	0x40020410
 80031cc:	40020428 	.word	0x40020428
 80031d0:	40020440 	.word	0x40020440
 80031d4:	40020458 	.word	0x40020458
 80031d8:	40020470 	.word	0x40020470
 80031dc:	40020488 	.word	0x40020488
 80031e0:	400204a0 	.word	0x400204a0
 80031e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2201      	movs	r2, #1
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a4f      	ldr	r2, [pc, #316]	; (8003340 <HAL_DMA_Abort+0x5dc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d072      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <HAL_DMA_Abort+0x5e0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d06d      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <HAL_DMA_Abort+0x5e4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d068      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a4a      	ldr	r2, [pc, #296]	; (800334c <HAL_DMA_Abort+0x5e8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d063      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a49      	ldr	r2, [pc, #292]	; (8003350 <HAL_DMA_Abort+0x5ec>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d05e      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a47      	ldr	r2, [pc, #284]	; (8003354 <HAL_DMA_Abort+0x5f0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d059      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a46      	ldr	r2, [pc, #280]	; (8003358 <HAL_DMA_Abort+0x5f4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d054      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a44      	ldr	r2, [pc, #272]	; (800335c <HAL_DMA_Abort+0x5f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d04f      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a43      	ldr	r2, [pc, #268]	; (8003360 <HAL_DMA_Abort+0x5fc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a41      	ldr	r2, [pc, #260]	; (8003364 <HAL_DMA_Abort+0x600>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a40      	ldr	r2, [pc, #256]	; (8003368 <HAL_DMA_Abort+0x604>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3e      	ldr	r2, [pc, #248]	; (800336c <HAL_DMA_Abort+0x608>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <HAL_DMA_Abort+0x60c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <HAL_DMA_Abort+0x610>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3a      	ldr	r2, [pc, #232]	; (8003378 <HAL_DMA_Abort+0x614>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a38      	ldr	r2, [pc, #224]	; (800337c <HAL_DMA_Abort+0x618>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a37      	ldr	r2, [pc, #220]	; (8003380 <HAL_DMA_Abort+0x61c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a35      	ldr	r2, [pc, #212]	; (8003384 <HAL_DMA_Abort+0x620>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a34      	ldr	r2, [pc, #208]	; (8003388 <HAL_DMA_Abort+0x624>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a32      	ldr	r2, [pc, #200]	; (800338c <HAL_DMA_Abort+0x628>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_DMA_Abort+0x62c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2f      	ldr	r2, [pc, #188]	; (8003394 <HAL_DMA_Abort+0x630>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <HAL_DMA_Abort+0x634>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_Abort+0x58a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <HAL_DMA_Abort+0x638>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_DMA_Abort+0x58e>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_DMA_Abort+0x590>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003300:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003318:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003322:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	40020040 	.word	0x40020040
 800334c:	40020058 	.word	0x40020058
 8003350:	40020070 	.word	0x40020070
 8003354:	40020088 	.word	0x40020088
 8003358:	400200a0 	.word	0x400200a0
 800335c:	400200b8 	.word	0x400200b8
 8003360:	40020410 	.word	0x40020410
 8003364:	40020428 	.word	0x40020428
 8003368:	40020440 	.word	0x40020440
 800336c:	40020458 	.word	0x40020458
 8003370:	40020470 	.word	0x40020470
 8003374:	40020488 	.word	0x40020488
 8003378:	400204a0 	.word	0x400204a0
 800337c:	400204b8 	.word	0x400204b8
 8003380:	58025408 	.word	0x58025408
 8003384:	5802541c 	.word	0x5802541c
 8003388:	58025430 	.word	0x58025430
 800338c:	58025444 	.word	0x58025444
 8003390:	58025458 	.word	0x58025458
 8003394:	5802546c 	.word	0x5802546c
 8003398:	58025480 	.word	0x58025480
 800339c:	58025494 	.word	0x58025494

080033a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e237      	b.n	8003822 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e22c      	b.n	8003822 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a5c      	ldr	r2, [pc, #368]	; (8003540 <HAL_DMA_Abort_IT+0x1a0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d04a      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a5b      	ldr	r2, [pc, #364]	; (8003544 <HAL_DMA_Abort_IT+0x1a4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d045      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a59      	ldr	r2, [pc, #356]	; (8003548 <HAL_DMA_Abort_IT+0x1a8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d040      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_DMA_Abort_IT+0x1ac>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d03b      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a56      	ldr	r2, [pc, #344]	; (8003550 <HAL_DMA_Abort_IT+0x1b0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d036      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a55      	ldr	r2, [pc, #340]	; (8003554 <HAL_DMA_Abort_IT+0x1b4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d031      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a53      	ldr	r2, [pc, #332]	; (8003558 <HAL_DMA_Abort_IT+0x1b8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02c      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_DMA_Abort_IT+0x1bc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d027      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a50      	ldr	r2, [pc, #320]	; (8003560 <HAL_DMA_Abort_IT+0x1c0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d022      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4f      	ldr	r2, [pc, #316]	; (8003564 <HAL_DMA_Abort_IT+0x1c4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d01d      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a4d      	ldr	r2, [pc, #308]	; (8003568 <HAL_DMA_Abort_IT+0x1c8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d018      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a4c      	ldr	r2, [pc, #304]	; (800356c <HAL_DMA_Abort_IT+0x1cc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_DMA_Abort_IT+0x1d0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_DMA_Abort_IT+0x1d4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d009      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a47      	ldr	r2, [pc, #284]	; (8003578 <HAL_DMA_Abort_IT+0x1d8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_DMA_Abort_IT+0xc8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a46      	ldr	r2, [pc, #280]	; (800357c <HAL_DMA_Abort_IT+0x1dc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_DMA_Abort_IT+0xcc>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_DMA_Abort_IT+0xce>
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8086 	beq.w	8003580 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2204      	movs	r2, #4
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <HAL_DMA_Abort_IT+0x1a0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04a      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2e      	ldr	r2, [pc, #184]	; (8003544 <HAL_DMA_Abort_IT+0x1a4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d045      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2c      	ldr	r2, [pc, #176]	; (8003548 <HAL_DMA_Abort_IT+0x1a8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d040      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_DMA_Abort_IT+0x1ac>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d03b      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_DMA_Abort_IT+0x1b0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d036      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <HAL_DMA_Abort_IT+0x1b4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d031      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <HAL_DMA_Abort_IT+0x1b8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_DMA_Abort_IT+0x1bc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d027      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_DMA_Abort_IT+0x1c0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <HAL_DMA_Abort_IT+0x1c4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01d      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a20      	ldr	r2, [pc, #128]	; (8003568 <HAL_DMA_Abort_IT+0x1c8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_DMA_Abort_IT+0x1cc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_DMA_Abort_IT+0x1d0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_DMA_Abort_IT+0x1d4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_DMA_Abort_IT+0x1d8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_DMA_Abort_IT+0x17c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_DMA_Abort_IT+0x1dc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <HAL_DMA_Abort_IT+0x18e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e178      	b.n	8003820 <HAL_DMA_Abort_IT+0x480>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e16f      	b.n	8003820 <HAL_DMA_Abort_IT+0x480>
 8003540:	40020010 	.word	0x40020010
 8003544:	40020028 	.word	0x40020028
 8003548:	40020040 	.word	0x40020040
 800354c:	40020058 	.word	0x40020058
 8003550:	40020070 	.word	0x40020070
 8003554:	40020088 	.word	0x40020088
 8003558:	400200a0 	.word	0x400200a0
 800355c:	400200b8 	.word	0x400200b8
 8003560:	40020410 	.word	0x40020410
 8003564:	40020428 	.word	0x40020428
 8003568:	40020440 	.word	0x40020440
 800356c:	40020458 	.word	0x40020458
 8003570:	40020470 	.word	0x40020470
 8003574:	40020488 	.word	0x40020488
 8003578:	400204a0 	.word	0x400204a0
 800357c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 020e 	bic.w	r2, r2, #14
 800358e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6c      	ldr	r2, [pc, #432]	; (8003748 <HAL_DMA_Abort_IT+0x3a8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d04a      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6b      	ldr	r2, [pc, #428]	; (800374c <HAL_DMA_Abort_IT+0x3ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d045      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a69      	ldr	r2, [pc, #420]	; (8003750 <HAL_DMA_Abort_IT+0x3b0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d040      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a68      	ldr	r2, [pc, #416]	; (8003754 <HAL_DMA_Abort_IT+0x3b4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d03b      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a66      	ldr	r2, [pc, #408]	; (8003758 <HAL_DMA_Abort_IT+0x3b8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d036      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a65      	ldr	r2, [pc, #404]	; (800375c <HAL_DMA_Abort_IT+0x3bc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d031      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a63      	ldr	r2, [pc, #396]	; (8003760 <HAL_DMA_Abort_IT+0x3c0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02c      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a62      	ldr	r2, [pc, #392]	; (8003764 <HAL_DMA_Abort_IT+0x3c4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d027      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a60      	ldr	r2, [pc, #384]	; (8003768 <HAL_DMA_Abort_IT+0x3c8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d022      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5f      	ldr	r2, [pc, #380]	; (800376c <HAL_DMA_Abort_IT+0x3cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d01d      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a5d      	ldr	r2, [pc, #372]	; (8003770 <HAL_DMA_Abort_IT+0x3d0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a5c      	ldr	r2, [pc, #368]	; (8003774 <HAL_DMA_Abort_IT+0x3d4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a5a      	ldr	r2, [pc, #360]	; (8003778 <HAL_DMA_Abort_IT+0x3d8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a59      	ldr	r2, [pc, #356]	; (800377c <HAL_DMA_Abort_IT+0x3dc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a57      	ldr	r2, [pc, #348]	; (8003780 <HAL_DMA_Abort_IT+0x3e0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_DMA_Abort_IT+0x290>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a56      	ldr	r2, [pc, #344]	; (8003784 <HAL_DMA_Abort_IT+0x3e4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d108      	bne.n	8003642 <HAL_DMA_Abort_IT+0x2a2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e007      	b.n	8003652 <HAL_DMA_Abort_IT+0x2b2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3c      	ldr	r2, [pc, #240]	; (8003748 <HAL_DMA_Abort_IT+0x3a8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d072      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_DMA_Abort_IT+0x3ac>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d06d      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a39      	ldr	r2, [pc, #228]	; (8003750 <HAL_DMA_Abort_IT+0x3b0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d068      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a37      	ldr	r2, [pc, #220]	; (8003754 <HAL_DMA_Abort_IT+0x3b4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d063      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a36      	ldr	r2, [pc, #216]	; (8003758 <HAL_DMA_Abort_IT+0x3b8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d05e      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a34      	ldr	r2, [pc, #208]	; (800375c <HAL_DMA_Abort_IT+0x3bc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d059      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a33      	ldr	r2, [pc, #204]	; (8003760 <HAL_DMA_Abort_IT+0x3c0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d054      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a31      	ldr	r2, [pc, #196]	; (8003764 <HAL_DMA_Abort_IT+0x3c4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04f      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a30      	ldr	r2, [pc, #192]	; (8003768 <HAL_DMA_Abort_IT+0x3c8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2e      	ldr	r2, [pc, #184]	; (800376c <HAL_DMA_Abort_IT+0x3cc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HAL_DMA_Abort_IT+0x3d0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_DMA_Abort_IT+0x3d4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2a      	ldr	r2, [pc, #168]	; (8003778 <HAL_DMA_Abort_IT+0x3d8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a28      	ldr	r2, [pc, #160]	; (800377c <HAL_DMA_Abort_IT+0x3dc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a27      	ldr	r2, [pc, #156]	; (8003780 <HAL_DMA_Abort_IT+0x3e0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a25      	ldr	r2, [pc, #148]	; (8003784 <HAL_DMA_Abort_IT+0x3e4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a24      	ldr	r2, [pc, #144]	; (8003788 <HAL_DMA_Abort_IT+0x3e8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <HAL_DMA_Abort_IT+0x3ec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <HAL_DMA_Abort_IT+0x3f0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_DMA_Abort_IT+0x3f4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_DMA_Abort_IT+0x3f8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_DMA_Abort_IT+0x3fc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_DMA_Abort_IT+0x400>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_Abort_IT+0x3a2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_DMA_Abort_IT+0x404>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d132      	bne.n	80037a8 <HAL_DMA_Abort_IT+0x408>
 8003742:	2301      	movs	r3, #1
 8003744:	e031      	b.n	80037aa <HAL_DMA_Abort_IT+0x40a>
 8003746:	bf00      	nop
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	58025408 	.word	0x58025408
 800378c:	5802541c 	.word	0x5802541c
 8003790:	58025430 	.word	0x58025430
 8003794:	58025444 	.word	0x58025444
 8003798:	58025458 	.word	0x58025458
 800379c:	5802546c 	.word	0x5802546c
 80037a0:	58025480 	.word	0x58025480
 80037a4:	58025494 	.word	0x58025494
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2201      	movs	r2, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop

0800382c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003838:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_DMA_IRQHandler+0x1ac>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a67      	ldr	r2, [pc, #412]	; (80039dc <HAL_DMA_IRQHandler+0x1b0>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0a9b      	lsrs	r3, r3, #10
 8003844:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5f      	ldr	r2, [pc, #380]	; (80039e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04a      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5d      	ldr	r2, [pc, #372]	; (80039e4 <HAL_DMA_IRQHandler+0x1b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d045      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <HAL_DMA_IRQHandler+0x1bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5a      	ldr	r2, [pc, #360]	; (80039ec <HAL_DMA_IRQHandler+0x1c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03b      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a59      	ldr	r2, [pc, #356]	; (80039f0 <HAL_DMA_IRQHandler+0x1c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d036      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a56      	ldr	r2, [pc, #344]	; (80039f8 <HAL_DMA_IRQHandler+0x1cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d02c      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_DMA_IRQHandler+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a53      	ldr	r2, [pc, #332]	; (8003a00 <HAL_DMA_IRQHandler+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a51      	ldr	r2, [pc, #324]	; (8003a04 <HAL_DMA_IRQHandler+0x1d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a50      	ldr	r2, [pc, #320]	; (8003a08 <HAL_DMA_IRQHandler+0x1dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a4e      	ldr	r2, [pc, #312]	; (8003a0c <HAL_DMA_IRQHandler+0x1e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a4d      	ldr	r2, [pc, #308]	; (8003a10 <HAL_DMA_IRQHandler+0x1e4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4b      	ldr	r2, [pc, #300]	; (8003a14 <HAL_DMA_IRQHandler+0x1e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <HAL_DMA_IRQHandler+0x1ec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_IRQHandler+0xd2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a48      	ldr	r2, [pc, #288]	; (8003a1c <HAL_DMA_IRQHandler+0x1f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_DMA_IRQHandler+0xd6>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_DMA_IRQHandler+0xd8>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 842b 	beq.w	8004160 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2208      	movs	r2, #8
 8003914:	409a      	lsls	r2, r3
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80a2 	beq.w	8003a64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <HAL_DMA_IRQHandler+0x1b8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_DMA_IRQHandler+0x1bc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <HAL_DMA_IRQHandler+0x1c0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_DMA_IRQHandler+0x1c4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <HAL_DMA_IRQHandler+0x1cc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a24      	ldr	r2, [pc, #144]	; (80039fc <HAL_DMA_IRQHandler+0x1d0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_DMA_IRQHandler+0x1d4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <HAL_DMA_IRQHandler+0x1d8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_DMA_IRQHandler+0x1dc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <HAL_DMA_IRQHandler+0x1e0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_DMA_IRQHandler+0x1e4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_DMA_IRQHandler+0x1e8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_DMA_IRQHandler+0x1ec>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x194>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_DMA_IRQHandler+0x1f0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d12f      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x1f4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e02e      	b.n	8003a34 <HAL_DMA_IRQHandler+0x208>
 80039d6:	bf00      	nop
 80039d8:	24000004 	.word	0x24000004
 80039dc:	1b4e81b5 	.word	0x1b4e81b5
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0204 	bic.w	r2, r2, #4
 8003a46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2208      	movs	r2, #8
 8003a52:	409a      	lsls	r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d06e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a69      	ldr	r2, [pc, #420]	; (8003c24 <HAL_DMA_IRQHandler+0x3f8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04a      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a67      	ldr	r2, [pc, #412]	; (8003c28 <HAL_DMA_IRQHandler+0x3fc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d045      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <HAL_DMA_IRQHandler+0x400>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d040      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a64      	ldr	r2, [pc, #400]	; (8003c30 <HAL_DMA_IRQHandler+0x404>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03b      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_DMA_IRQHandler+0x408>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d036      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a61      	ldr	r2, [pc, #388]	; (8003c38 <HAL_DMA_IRQHandler+0x40c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d031      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a60      	ldr	r2, [pc, #384]	; (8003c3c <HAL_DMA_IRQHandler+0x410>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d02c      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a5e      	ldr	r2, [pc, #376]	; (8003c40 <HAL_DMA_IRQHandler+0x414>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d027      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a5d      	ldr	r2, [pc, #372]	; (8003c44 <HAL_DMA_IRQHandler+0x418>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a5b      	ldr	r2, [pc, #364]	; (8003c48 <HAL_DMA_IRQHandler+0x41c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_DMA_IRQHandler+0x420>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <HAL_DMA_IRQHandler+0x424>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a57      	ldr	r2, [pc, #348]	; (8003c54 <HAL_DMA_IRQHandler+0x428>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a55      	ldr	r2, [pc, #340]	; (8003c58 <HAL_DMA_IRQHandler+0x42c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a54      	ldr	r2, [pc, #336]	; (8003c5c <HAL_DMA_IRQHandler+0x430>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x2ee>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_DMA_IRQHandler+0x434>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10a      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x304>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e003      	b.n	8003b38 <HAL_DMA_IRQHandler+0x30c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2201      	movs	r2, #1
 8003b46:	409a      	lsls	r2, r3
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0202 	orr.w	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2204      	movs	r2, #4
 8003b62:	409a      	lsls	r2, r3
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 808f 	beq.w	8003c8c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <HAL_DMA_IRQHandler+0x3f8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <HAL_DMA_IRQHandler+0x3fc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d045      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <HAL_DMA_IRQHandler+0x400>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_DMA_IRQHandler+0x404>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <HAL_DMA_IRQHandler+0x408>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d036      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <HAL_DMA_IRQHandler+0x40c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a23      	ldr	r2, [pc, #140]	; (8003c3c <HAL_DMA_IRQHandler+0x410>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d02c      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <HAL_DMA_IRQHandler+0x414>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d027      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <HAL_DMA_IRQHandler+0x418>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <HAL_DMA_IRQHandler+0x41c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_DMA_IRQHandler+0x420>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <HAL_DMA_IRQHandler+0x424>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <HAL_DMA_IRQHandler+0x428>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_DMA_IRQHandler+0x42c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_DMA_IRQHandler+0x430>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x3e2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_DMA_IRQHandler+0x434>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12a      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x438>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e023      	b.n	8003c6c <HAL_DMA_IRQHandler+0x440>
 8003c24:	40020010 	.word	0x40020010
 8003c28:	40020028 	.word	0x40020028
 8003c2c:	40020040 	.word	0x40020040
 8003c30:	40020058 	.word	0x40020058
 8003c34:	40020070 	.word	0x40020070
 8003c38:	40020088 	.word	0x40020088
 8003c3c:	400200a0 	.word	0x400200a0
 8003c40:	400200b8 	.word	0x400200b8
 8003c44:	40020410 	.word	0x40020410
 8003c48:	40020428 	.word	0x40020428
 8003c4c:	40020440 	.word	0x40020440
 8003c50:	40020458 	.word	0x40020458
 8003c54:	40020470 	.word	0x40020470
 8003c58:	40020488 	.word	0x40020488
 8003c5c:	400204a0 	.word	0x400204a0
 8003c60:	400204b8 	.word	0x400204b8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2204      	movs	r2, #4
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2210      	movs	r2, #16
 8003c96:	409a      	lsls	r2, r3
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a6 	beq.w	8003dee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a85      	ldr	r2, [pc, #532]	; (8003ebc <HAL_DMA_IRQHandler+0x690>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04a      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <HAL_DMA_IRQHandler+0x694>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d045      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a82      	ldr	r2, [pc, #520]	; (8003ec4 <HAL_DMA_IRQHandler+0x698>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a80      	ldr	r2, [pc, #512]	; (8003ec8 <HAL_DMA_IRQHandler+0x69c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d03b      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7f      	ldr	r2, [pc, #508]	; (8003ecc <HAL_DMA_IRQHandler+0x6a0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d036      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7d      	ldr	r2, [pc, #500]	; (8003ed0 <HAL_DMA_IRQHandler+0x6a4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d031      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7c      	ldr	r2, [pc, #496]	; (8003ed4 <HAL_DMA_IRQHandler+0x6a8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d02c      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7a      	ldr	r2, [pc, #488]	; (8003ed8 <HAL_DMA_IRQHandler+0x6ac>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d027      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a79      	ldr	r2, [pc, #484]	; (8003edc <HAL_DMA_IRQHandler+0x6b0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a77      	ldr	r2, [pc, #476]	; (8003ee0 <HAL_DMA_IRQHandler+0x6b4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a76      	ldr	r2, [pc, #472]	; (8003ee4 <HAL_DMA_IRQHandler+0x6b8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a74      	ldr	r2, [pc, #464]	; (8003ee8 <HAL_DMA_IRQHandler+0x6bc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a73      	ldr	r2, [pc, #460]	; (8003eec <HAL_DMA_IRQHandler+0x6c0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a71      	ldr	r2, [pc, #452]	; (8003ef0 <HAL_DMA_IRQHandler+0x6c4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a70      	ldr	r2, [pc, #448]	; (8003ef4 <HAL_DMA_IRQHandler+0x6c8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x516>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6e      	ldr	r2, [pc, #440]	; (8003ef8 <HAL_DMA_IRQHandler+0x6cc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10a      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x52c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e009      	b.n	8003d6c <HAL_DMA_IRQHandler+0x540>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03e      	beq.n	8003dee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2210      	movs	r2, #16
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d018      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d024      	beq.n	8003dee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
 8003dac:	e01f      	b.n	8003dee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01b      	beq.n	8003dee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
 8003dbe:	e016      	b.n	8003dee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0208 	bic.w	r2, r2, #8
 8003ddc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2220      	movs	r2, #32
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8110 	beq.w	8004024 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <HAL_DMA_IRQHandler+0x690>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_DMA_IRQHandler+0x694>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_DMA_IRQHandler+0x698>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d040      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_DMA_IRQHandler+0x69c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03b      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_DMA_IRQHandler+0x6a0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_DMA_IRQHandler+0x6a4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <HAL_DMA_IRQHandler+0x6a8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_DMA_IRQHandler+0x6ac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a20      	ldr	r2, [pc, #128]	; (8003edc <HAL_DMA_IRQHandler+0x6b0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_DMA_IRQHandler+0x6b4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_DMA_IRQHandler+0x6b8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_DMA_IRQHandler+0x6bc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_DMA_IRQHandler+0x6c0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_DMA_IRQHandler+0x6c4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_DMA_IRQHandler+0x6c8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x678>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <HAL_DMA_IRQHandler+0x6cc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d12b      	bne.n	8003efc <HAL_DMA_IRQHandler+0x6d0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e02a      	b.n	8003f10 <HAL_DMA_IRQHandler+0x6e4>
 8003eba:	bf00      	nop
 8003ebc:	40020010 	.word	0x40020010
 8003ec0:	40020028 	.word	0x40020028
 8003ec4:	40020040 	.word	0x40020040
 8003ec8:	40020058 	.word	0x40020058
 8003ecc:	40020070 	.word	0x40020070
 8003ed0:	40020088 	.word	0x40020088
 8003ed4:	400200a0 	.word	0x400200a0
 8003ed8:	400200b8 	.word	0x400200b8
 8003edc:	40020410 	.word	0x40020410
 8003ee0:	40020428 	.word	0x40020428
 8003ee4:	40020440 	.word	0x40020440
 8003ee8:	40020458 	.word	0x40020458
 8003eec:	40020470 	.word	0x40020470
 8003ef0:	40020488 	.word	0x40020488
 8003ef4:	400204a0 	.word	0x400204a0
 8003ef8:	400204b8 	.word	0x400204b8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8087 	beq.w	8004024 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2220      	movs	r2, #32
 8003f20:	409a      	lsls	r2, r3
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d139      	bne.n	8003fa6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0216 	bic.w	r2, r2, #22
 8003f40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <HAL_DMA_IRQHandler+0x736>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0208 	bic.w	r2, r2, #8
 8003f70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	223f      	movs	r2, #63	; 0x3f
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 834a 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
          }
          return;
 8003fa4:	e344      	b.n	8004630 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d02c      	beq.n	8004024 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
 8003fd2:	e027      	b.n	8004024 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d023      	beq.n	8004024 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e01e      	b.n	8004024 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10f      	bne.n	8004014 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0210 	bic.w	r2, r2, #16
 8004002:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8306 	beq.w	800463a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8088 	beq.w	800414c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_DMA_IRQHandler+0xa08>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d04a      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a79      	ldr	r2, [pc, #484]	; (8004238 <HAL_DMA_IRQHandler+0xa0c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d045      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a77      	ldr	r2, [pc, #476]	; (800423c <HAL_DMA_IRQHandler+0xa10>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d040      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a76      	ldr	r2, [pc, #472]	; (8004240 <HAL_DMA_IRQHandler+0xa14>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d03b      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a74      	ldr	r2, [pc, #464]	; (8004244 <HAL_DMA_IRQHandler+0xa18>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d036      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a73      	ldr	r2, [pc, #460]	; (8004248 <HAL_DMA_IRQHandler+0xa1c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d031      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a71      	ldr	r2, [pc, #452]	; (800424c <HAL_DMA_IRQHandler+0xa20>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02c      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a70      	ldr	r2, [pc, #448]	; (8004250 <HAL_DMA_IRQHandler+0xa24>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d027      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6e      	ldr	r2, [pc, #440]	; (8004254 <HAL_DMA_IRQHandler+0xa28>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d022      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6d      	ldr	r2, [pc, #436]	; (8004258 <HAL_DMA_IRQHandler+0xa2c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01d      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6b      	ldr	r2, [pc, #428]	; (800425c <HAL_DMA_IRQHandler+0xa30>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d018      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6a      	ldr	r2, [pc, #424]	; (8004260 <HAL_DMA_IRQHandler+0xa34>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d013      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a68      	ldr	r2, [pc, #416]	; (8004264 <HAL_DMA_IRQHandler+0xa38>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a67      	ldr	r2, [pc, #412]	; (8004268 <HAL_DMA_IRQHandler+0xa3c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a65      	ldr	r2, [pc, #404]	; (800426c <HAL_DMA_IRQHandler+0xa40>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x8b8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a64      	ldr	r2, [pc, #400]	; (8004270 <HAL_DMA_IRQHandler+0xa44>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d108      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x8ca>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e007      	b.n	8004106 <HAL_DMA_IRQHandler+0x8da>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	429a      	cmp	r2, r3
 8004110:	d307      	bcc.n	8004122 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f2      	bne.n	8004106 <HAL_DMA_IRQHandler+0x8da>
 8004120:	e000      	b.n	8004124 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004122:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800413a:	e003      	b.n	8004144 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8272 	beq.w	800463a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
 800415e:	e26c      	b.n	800463a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a43      	ldr	r2, [pc, #268]	; (8004274 <HAL_DMA_IRQHandler+0xa48>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a42      	ldr	r2, [pc, #264]	; (8004278 <HAL_DMA_IRQHandler+0xa4c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d01d      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a40      	ldr	r2, [pc, #256]	; (800427c <HAL_DMA_IRQHandler+0xa50>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3f      	ldr	r2, [pc, #252]	; (8004280 <HAL_DMA_IRQHandler+0xa54>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3d      	ldr	r2, [pc, #244]	; (8004284 <HAL_DMA_IRQHandler+0xa58>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <HAL_DMA_IRQHandler+0xa5c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3a      	ldr	r2, [pc, #232]	; (800428c <HAL_DMA_IRQHandler+0xa60>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x984>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a39      	ldr	r2, [pc, #228]	; (8004290 <HAL_DMA_IRQHandler+0xa64>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x988>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_DMA_IRQHandler+0x98a>
 80041b4:	2300      	movs	r3, #0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 823f 	beq.w	800463a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2204      	movs	r2, #4
 80041ce:	409a      	lsls	r2, r3
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80cd 	beq.w	8004374 <HAL_DMA_IRQHandler+0xb48>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80c7 	beq.w	8004374 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2204      	movs	r2, #4
 80041f0:	409a      	lsls	r2, r3
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d049      	beq.n	8004294 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8210 	beq.w	8004634 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800421c:	e20a      	b.n	8004634 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8206 	beq.w	8004634 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004230:	e200      	b.n	8004634 <HAL_DMA_IRQHandler+0xe08>
 8004232:	bf00      	nop
 8004234:	40020010 	.word	0x40020010
 8004238:	40020028 	.word	0x40020028
 800423c:	40020040 	.word	0x40020040
 8004240:	40020058 	.word	0x40020058
 8004244:	40020070 	.word	0x40020070
 8004248:	40020088 	.word	0x40020088
 800424c:	400200a0 	.word	0x400200a0
 8004250:	400200b8 	.word	0x400200b8
 8004254:	40020410 	.word	0x40020410
 8004258:	40020428 	.word	0x40020428
 800425c:	40020440 	.word	0x40020440
 8004260:	40020458 	.word	0x40020458
 8004264:	40020470 	.word	0x40020470
 8004268:	40020488 	.word	0x40020488
 800426c:	400204a0 	.word	0x400204a0
 8004270:	400204b8 	.word	0x400204b8
 8004274:	58025408 	.word	0x58025408
 8004278:	5802541c 	.word	0x5802541c
 800427c:	58025430 	.word	0x58025430
 8004280:	58025444 	.word	0x58025444
 8004284:	58025458 	.word	0x58025458
 8004288:	5802546c 	.word	0x5802546c
 800428c:	58025480 	.word	0x58025480
 8004290:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d160      	bne.n	8004360 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7f      	ldr	r2, [pc, #508]	; (80044a0 <HAL_DMA_IRQHandler+0xc74>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d04a      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7d      	ldr	r2, [pc, #500]	; (80044a4 <HAL_DMA_IRQHandler+0xc78>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d045      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7c      	ldr	r2, [pc, #496]	; (80044a8 <HAL_DMA_IRQHandler+0xc7c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d040      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a7a      	ldr	r2, [pc, #488]	; (80044ac <HAL_DMA_IRQHandler+0xc80>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d03b      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a79      	ldr	r2, [pc, #484]	; (80044b0 <HAL_DMA_IRQHandler+0xc84>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d036      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a77      	ldr	r2, [pc, #476]	; (80044b4 <HAL_DMA_IRQHandler+0xc88>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d031      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a76      	ldr	r2, [pc, #472]	; (80044b8 <HAL_DMA_IRQHandler+0xc8c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d02c      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a74      	ldr	r2, [pc, #464]	; (80044bc <HAL_DMA_IRQHandler+0xc90>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d027      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a73      	ldr	r2, [pc, #460]	; (80044c0 <HAL_DMA_IRQHandler+0xc94>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a71      	ldr	r2, [pc, #452]	; (80044c4 <HAL_DMA_IRQHandler+0xc98>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01d      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a70      	ldr	r2, [pc, #448]	; (80044c8 <HAL_DMA_IRQHandler+0xc9c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6e      	ldr	r2, [pc, #440]	; (80044cc <HAL_DMA_IRQHandler+0xca0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6d      	ldr	r2, [pc, #436]	; (80044d0 <HAL_DMA_IRQHandler+0xca4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6b      	ldr	r2, [pc, #428]	; (80044d4 <HAL_DMA_IRQHandler+0xca8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6a      	ldr	r2, [pc, #424]	; (80044d8 <HAL_DMA_IRQHandler+0xcac>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_DMA_IRQHandler+0xb12>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a68      	ldr	r2, [pc, #416]	; (80044dc <HAL_DMA_IRQHandler+0xcb0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <HAL_DMA_IRQHandler+0xb24>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0208 	bic.w	r2, r2, #8
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e007      	b.n	8004360 <HAL_DMA_IRQHandler+0xb34>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8165 	beq.w	8004634 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004372:	e15f      	b.n	8004634 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2202      	movs	r2, #2
 800437e:	409a      	lsls	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80c5 	beq.w	8004514 <HAL_DMA_IRQHandler+0xce8>
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80bf 	beq.w	8004514 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2202      	movs	r2, #2
 80043a0:	409a      	lsls	r2, r3
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 813a 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043cc:	e134      	b.n	8004638 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8130 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e0:	e12a      	b.n	8004638 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 8089 	bne.w	8004500 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <HAL_DMA_IRQHandler+0xc74>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_DMA_IRQHandler+0xc78>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <HAL_DMA_IRQHandler+0xc7c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a26      	ldr	r2, [pc, #152]	; (80044ac <HAL_DMA_IRQHandler+0xc80>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <HAL_DMA_IRQHandler+0xc84>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <HAL_DMA_IRQHandler+0xc88>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a22      	ldr	r2, [pc, #136]	; (80044b8 <HAL_DMA_IRQHandler+0xc8c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a20      	ldr	r2, [pc, #128]	; (80044bc <HAL_DMA_IRQHandler+0xc90>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <HAL_DMA_IRQHandler+0xc94>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_DMA_IRQHandler+0xc98>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <HAL_DMA_IRQHandler+0xc9c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_DMA_IRQHandler+0xca0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_DMA_IRQHandler+0xca4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <HAL_DMA_IRQHandler+0xca8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <HAL_DMA_IRQHandler+0xcac>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_DMA_IRQHandler+0xc62>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_DMA_IRQHandler+0xcb0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d128      	bne.n	80044e0 <HAL_DMA_IRQHandler+0xcb4>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0214 	bic.w	r2, r2, #20
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e027      	b.n	80044f0 <HAL_DMA_IRQHandler+0xcc4>
 80044a0:	40020010 	.word	0x40020010
 80044a4:	40020028 	.word	0x40020028
 80044a8:	40020040 	.word	0x40020040
 80044ac:	40020058 	.word	0x40020058
 80044b0:	40020070 	.word	0x40020070
 80044b4:	40020088 	.word	0x40020088
 80044b8:	400200a0 	.word	0x400200a0
 80044bc:	400200b8 	.word	0x400200b8
 80044c0:	40020410 	.word	0x40020410
 80044c4:	40020428 	.word	0x40020428
 80044c8:	40020440 	.word	0x40020440
 80044cc:	40020458 	.word	0x40020458
 80044d0:	40020470 	.word	0x40020470
 80044d4:	40020488 	.word	0x40020488
 80044d8:	400204a0 	.word	0x400204a0
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 020a 	bic.w	r2, r2, #10
 80044ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8097 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004512:	e091      	b.n	8004638 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2208      	movs	r2, #8
 800451e:	409a      	lsls	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8088 	beq.w	800463a <HAL_DMA_IRQHandler+0xe0e>
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8082 	beq.w	800463a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a41      	ldr	r2, [pc, #260]	; (8004640 <HAL_DMA_IRQHandler+0xe14>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04a      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <HAL_DMA_IRQHandler+0xe18>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d045      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3e      	ldr	r2, [pc, #248]	; (8004648 <HAL_DMA_IRQHandler+0xe1c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d040      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3c      	ldr	r2, [pc, #240]	; (800464c <HAL_DMA_IRQHandler+0xe20>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d03b      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <HAL_DMA_IRQHandler+0xe24>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d036      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a39      	ldr	r2, [pc, #228]	; (8004654 <HAL_DMA_IRQHandler+0xe28>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d031      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_DMA_IRQHandler+0xe2c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d02c      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a36      	ldr	r2, [pc, #216]	; (800465c <HAL_DMA_IRQHandler+0xe30>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d027      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a35      	ldr	r2, [pc, #212]	; (8004660 <HAL_DMA_IRQHandler+0xe34>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a33      	ldr	r2, [pc, #204]	; (8004664 <HAL_DMA_IRQHandler+0xe38>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a32      	ldr	r2, [pc, #200]	; (8004668 <HAL_DMA_IRQHandler+0xe3c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a30      	ldr	r2, [pc, #192]	; (800466c <HAL_DMA_IRQHandler+0xe40>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2f      	ldr	r2, [pc, #188]	; (8004670 <HAL_DMA_IRQHandler+0xe44>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2d      	ldr	r2, [pc, #180]	; (8004674 <HAL_DMA_IRQHandler+0xe48>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <HAL_DMA_IRQHandler+0xe4c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_DMA_IRQHandler+0xdaa>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <HAL_DMA_IRQHandler+0xe50>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <HAL_DMA_IRQHandler+0xdbc>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 021c 	bic.w	r2, r2, #28
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e007      	b.n	80045f8 <HAL_DMA_IRQHandler+0xdcc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 020e 	bic.w	r2, r2, #14
 80045f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
 800462e:	e004      	b.n	800463a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004630:	bf00      	nop
 8004632:	e002      	b.n	800463a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8

08004680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a42      	ldr	r2, [pc, #264]	; (8004798 <DMA_CalcBaseAndBitshift+0x118>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d04a      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a41      	ldr	r2, [pc, #260]	; (800479c <DMA_CalcBaseAndBitshift+0x11c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d045      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a3f      	ldr	r2, [pc, #252]	; (80047a0 <DMA_CalcBaseAndBitshift+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d040      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3e      	ldr	r2, [pc, #248]	; (80047a4 <DMA_CalcBaseAndBitshift+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d03b      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <DMA_CalcBaseAndBitshift+0x128>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d036      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3b      	ldr	r2, [pc, #236]	; (80047ac <DMA_CalcBaseAndBitshift+0x12c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d031      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a39      	ldr	r2, [pc, #228]	; (80047b0 <DMA_CalcBaseAndBitshift+0x130>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02c      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <DMA_CalcBaseAndBitshift+0x134>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d027      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a36      	ldr	r2, [pc, #216]	; (80047b8 <DMA_CalcBaseAndBitshift+0x138>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a35      	ldr	r2, [pc, #212]	; (80047bc <DMA_CalcBaseAndBitshift+0x13c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01d      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a33      	ldr	r2, [pc, #204]	; (80047c0 <DMA_CalcBaseAndBitshift+0x140>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d018      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a32      	ldr	r2, [pc, #200]	; (80047c4 <DMA_CalcBaseAndBitshift+0x144>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a30      	ldr	r2, [pc, #192]	; (80047c8 <DMA_CalcBaseAndBitshift+0x148>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2f      	ldr	r2, [pc, #188]	; (80047cc <DMA_CalcBaseAndBitshift+0x14c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <DMA_CalcBaseAndBitshift+0x150>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <DMA_CalcBaseAndBitshift+0xa8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <DMA_CalcBaseAndBitshift+0x154>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <DMA_CalcBaseAndBitshift+0xac>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <DMA_CalcBaseAndBitshift+0xae>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d024      	beq.n	800477c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3b10      	subs	r3, #16
 800473a:	4a27      	ldr	r2, [pc, #156]	; (80047d8 <DMA_CalcBaseAndBitshift+0x158>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	4a24      	ldr	r2, [pc, #144]	; (80047dc <DMA_CalcBaseAndBitshift+0x15c>)
 800474c:	5cd3      	ldrb	r3, [r2, r3]
 800474e:	461a      	mov	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d908      	bls.n	800476c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004762:	4013      	ands	r3, r2
 8004764:	1d1a      	adds	r2, r3, #4
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	659a      	str	r2, [r3, #88]	; 0x58
 800476a:	e00d      	b.n	8004788 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004774:	4013      	ands	r3, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6593      	str	r3, [r2, #88]	; 0x58
 800477a:	e005      	b.n	8004788 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40020010 	.word	0x40020010
 800479c:	40020028 	.word	0x40020028
 80047a0:	40020040 	.word	0x40020040
 80047a4:	40020058 	.word	0x40020058
 80047a8:	40020070 	.word	0x40020070
 80047ac:	40020088 	.word	0x40020088
 80047b0:	400200a0 	.word	0x400200a0
 80047b4:	400200b8 	.word	0x400200b8
 80047b8:	40020410 	.word	0x40020410
 80047bc:	40020428 	.word	0x40020428
 80047c0:	40020440 	.word	0x40020440
 80047c4:	40020458 	.word	0x40020458
 80047c8:	40020470 	.word	0x40020470
 80047cc:	40020488 	.word	0x40020488
 80047d0:	400204a0 	.word	0x400204a0
 80047d4:	400204b8 	.word	0x400204b8
 80047d8:	aaaaaaab 	.word	0xaaaaaaab
 80047dc:	0800d7f0 	.word	0x0800d7f0
 80047e0:	fffffc00 	.word	0xfffffc00

080047e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d120      	bne.n	800483a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d858      	bhi.n	80048b2 <DMA_CheckFifoParam+0xce>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <DMA_CheckFifoParam+0x24>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004819 	.word	0x08004819
 800480c:	0800482b 	.word	0x0800482b
 8004810:	08004819 	.word	0x08004819
 8004814:	080048b3 	.word	0x080048b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d048      	beq.n	80048b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004828:	e045      	b.n	80048b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004832:	d142      	bne.n	80048ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004838:	e03f      	b.n	80048ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004842:	d123      	bne.n	800488c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	2b03      	cmp	r3, #3
 800484a:	d838      	bhi.n	80048be <DMA_CheckFifoParam+0xda>
 800484c:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <DMA_CheckFifoParam+0x70>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004865 	.word	0x08004865
 8004858:	0800486b 	.word	0x0800486b
 800485c:	08004865 	.word	0x08004865
 8004860:	0800487d 	.word	0x0800487d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
        break;
 8004868:	e030      	b.n	80048cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d025      	beq.n	80048c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800487a:	e022      	b.n	80048c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004884:	d11f      	bne.n	80048c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800488a:	e01c      	b.n	80048c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	2b02      	cmp	r3, #2
 8004892:	d902      	bls.n	800489a <DMA_CheckFifoParam+0xb6>
 8004894:	2b03      	cmp	r3, #3
 8004896:	d003      	beq.n	80048a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004898:	e018      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
        break;
 800489e:	e015      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00e      	beq.n	80048ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
    break;
 80048b0:	e00b      	b.n	80048ca <DMA_CheckFifoParam+0xe6>
        break;
 80048b2:	bf00      	nop
 80048b4:	e00a      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        break;
 80048b6:	bf00      	nop
 80048b8:	e008      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        break;
 80048ba:	bf00      	nop
 80048bc:	e006      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        break;
 80048be:	bf00      	nop
 80048c0:	e004      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
        break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
    break;
 80048ca:	bf00      	nop
    }
  }

  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d022      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01d      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d018      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01a      	beq.n	800497a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3b08      	subs	r3, #8
 800494c:	4a28      	ldr	r2, [pc, #160]	; (80049f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	461a      	mov	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004968:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	2201      	movs	r2, #1
 8004972:	409a      	lsls	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004978:	e024      	b.n	80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	3b10      	subs	r3, #16
 8004982:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d806      	bhi.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d902      	bls.n	80049a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3308      	adds	r3, #8
 80049a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80049b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	58025408 	.word	0x58025408
 80049d4:	5802541c 	.word	0x5802541c
 80049d8:	58025430 	.word	0x58025430
 80049dc:	58025444 	.word	0x58025444
 80049e0:	58025458 	.word	0x58025458
 80049e4:	5802546c 	.word	0x5802546c
 80049e8:	58025480 	.word	0x58025480
 80049ec:	58025494 	.word	0x58025494
 80049f0:	cccccccd 	.word	0xcccccccd
 80049f4:	16009600 	.word	0x16009600
 80049f8:	58025880 	.word	0x58025880
 80049fc:	aaaaaaab 	.word	0xaaaaaaab
 8004a00:	400204b8 	.word	0x400204b8
 8004a04:	4002040f 	.word	0x4002040f
 8004a08:	10008200 	.word	0x10008200
 8004a0c:	40020880 	.word	0x40020880

08004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d04a      	beq.n	8004abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d847      	bhi.n	8004abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d022      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	; (8004acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d01d      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1e      	ldr	r2, [pc, #120]	; (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d101      	bne.n	8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a80:	2300      	movs	r3, #0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a15      	ldr	r2, [pc, #84]	; (8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a98:	671a      	str	r2, [r3, #112]	; 0x70
 8004a9a:	e009      	b.n	8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004aae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	58025408 	.word	0x58025408
 8004acc:	5802541c 	.word	0x5802541c
 8004ad0:	58025430 	.word	0x58025430
 8004ad4:	58025444 	.word	0x58025444
 8004ad8:	58025458 	.word	0x58025458
 8004adc:	5802546c 	.word	0x5802546c
 8004ae0:	58025480 	.word	0x58025480
 8004ae4:	58025494 	.word	0x58025494
 8004ae8:	1600963f 	.word	0x1600963f
 8004aec:	58025940 	.word	0x58025940
 8004af0:	1000823f 	.word	0x1000823f
 8004af4:	40020940 	.word	0x40020940

08004af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	; 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b06:	4b86      	ldr	r3, [pc, #536]	; (8004d20 <HAL_GPIO_Init+0x228>)
 8004b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b0a:	e18c      	b.n	8004e26 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	4013      	ands	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 817e 	beq.w	8004e20 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d005      	beq.n	8004b3c <HAL_GPIO_Init+0x44>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d130      	bne.n	8004b9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	2203      	movs	r2, #3
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b72:	2201      	movs	r2, #1
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 0201 	and.w	r2, r3, #1
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d017      	beq.n	8004bda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d123      	bne.n	8004c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	08da      	lsrs	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3208      	adds	r2, #8
 8004bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	220f      	movs	r2, #15
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	08da      	lsrs	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3208      	adds	r2, #8
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	2203      	movs	r2, #3
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0203 	and.w	r2, r3, #3
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80d8 	beq.w	8004e20 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c70:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <HAL_GPIO_Init+0x22c>)
 8004c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c76:	4a2b      	ldr	r2, [pc, #172]	; (8004d24 <HAL_GPIO_Init+0x22c>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_GPIO_Init+0x22c>)
 8004c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c8e:	4a26      	ldr	r2, [pc, #152]	; (8004d28 <HAL_GPIO_Init+0x230>)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	3302      	adds	r3, #2
 8004c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	220f      	movs	r2, #15
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <HAL_GPIO_Init+0x234>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d04a      	beq.n	8004d50 <HAL_GPIO_Init+0x258>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_GPIO_Init+0x238>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02b      	beq.n	8004d1a <HAL_GPIO_Init+0x222>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_GPIO_Init+0x23c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d025      	beq.n	8004d16 <HAL_GPIO_Init+0x21e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <HAL_GPIO_Init+0x240>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <HAL_GPIO_Init+0x21a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <HAL_GPIO_Init+0x244>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x216>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_GPIO_Init+0x248>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x212>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <HAL_GPIO_Init+0x24c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x20e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <HAL_GPIO_Init+0x250>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x20a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <HAL_GPIO_Init+0x254>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x206>
 8004cfa:	2309      	movs	r3, #9
 8004cfc:	e029      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004cfe:	230a      	movs	r3, #10
 8004d00:	e027      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d02:	2307      	movs	r3, #7
 8004d04:	e025      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d06:	2306      	movs	r3, #6
 8004d08:	e023      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	e021      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d0e:	2304      	movs	r3, #4
 8004d10:	e01f      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01d      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e01b      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e019      	b.n	8004d52 <HAL_GPIO_Init+0x25a>
 8004d1e:	bf00      	nop
 8004d20:	58000080 	.word	0x58000080
 8004d24:	58024400 	.word	0x58024400
 8004d28:	58000400 	.word	0x58000400
 8004d2c:	58020000 	.word	0x58020000
 8004d30:	58020400 	.word	0x58020400
 8004d34:	58020800 	.word	0x58020800
 8004d38:	58020c00 	.word	0x58020c00
 8004d3c:	58021000 	.word	0x58021000
 8004d40:	58021400 	.word	0x58021400
 8004d44:	58021800 	.word	0x58021800
 8004d48:	58021c00 	.word	0x58021c00
 8004d4c:	58022400 	.word	0x58022400
 8004d50:	2300      	movs	r3, #0
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	f002 0203 	and.w	r2, r2, #3
 8004d58:	0092      	lsls	r2, r2, #2
 8004d5a:	4093      	lsls	r3, r2
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d62:	4938      	ldr	r1, [pc, #224]	; (8004e44 <HAL_GPIO_Init+0x34c>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3302      	adds	r3, #2
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	43db      	mvns	r3, r3
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	4013      	ands	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f ae6b 	bne.w	8004b0c <HAL_GPIO_Init+0x14>
  }
}
 8004e36:	bf00      	nop
 8004e38:	bf00      	nop
 8004e3a:	3724      	adds	r7, #36	; 0x24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	58000400 	.word	0x58000400

08004e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
 8004e54:	4613      	mov	r3, r2
 8004e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e58:	787b      	ldrb	r3, [r7, #1]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e5e:	887a      	ldrh	r2, [r7, #2]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e64:	e003      	b.n	8004e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e66:	887b      	ldrh	r3, [r7, #2]
 8004e68:	041a      	lsls	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	619a      	str	r2, [r3, #24]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	4603      	mov	r3, r0
 8004e82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb fe63 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <HAL_PWREx_ConfigSupply+0x70>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d00a      	beq.n	8004eda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ec4:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <HAL_PWREx_ConfigSupply+0x70>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d001      	beq.n	8004ed6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e01f      	b.n	8004f16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e01d      	b.n	8004f16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004eda:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <HAL_PWREx_ConfigSupply+0x70>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f023 0207 	bic.w	r2, r3, #7
 8004ee2:	490f      	ldr	r1, [pc, #60]	; (8004f20 <HAL_PWREx_ConfigSupply+0x70>)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004eea:	f7fd faa1 	bl	8002430 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ef0:	e009      	b.n	8004f06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ef2:	f7fd fa9d 	bl	8002430 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f00:	d901      	bls.n	8004f06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e007      	b.n	8004f16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_PWREx_ConfigSupply+0x70>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f12:	d1ee      	bne.n	8004ef2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	58024800 	.word	0x58024800

08004f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e39d      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8087 	beq.w	8005052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f44:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f4e:	4b86      	ldr	r3, [pc, #536]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d007      	beq.n	8004f6a <HAL_RCC_OscConfig+0x46>
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	2b18      	cmp	r3, #24
 8004f5e:	d110      	bne.n	8004f82 <HAL_RCC_OscConfig+0x5e>
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d10b      	bne.n	8004f82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d06c      	beq.n	8005050 <HAL_RCC_OscConfig+0x12c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d168      	bne.n	8005050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e377      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8a:	d106      	bne.n	8004f9a <HAL_RCC_OscConfig+0x76>
 8004f8c:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a75      	ldr	r2, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e02e      	b.n	8004ff8 <HAL_RCC_OscConfig+0xd4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x98>
 8004fa2:	4b71      	ldr	r3, [pc, #452]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a70      	ldr	r2, [pc, #448]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b6e      	ldr	r3, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6d      	ldr	r2, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e01d      	b.n	8004ff8 <HAL_RCC_OscConfig+0xd4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0xbc>
 8004fc6:	4b68      	ldr	r3, [pc, #416]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a67      	ldr	r2, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	4b65      	ldr	r3, [pc, #404]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a64      	ldr	r2, [pc, #400]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e00b      	b.n	8004ff8 <HAL_RCC_OscConfig+0xd4>
 8004fe0:	4b61      	ldr	r3, [pc, #388]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a60      	ldr	r2, [pc, #384]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a5d      	ldr	r2, [pc, #372]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d013      	beq.n	8005028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd fa16 	bl	8002430 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005008:	f7fd fa12 	bl	8002430 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e32b      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800501a:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0xe4>
 8005026:	e014      	b.n	8005052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fd fa02 	bl	8002430 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005030:	f7fd f9fe 	bl	8002430 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e317      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005042:	4b49      	ldr	r3, [pc, #292]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x10c>
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 808c 	beq.w	8005178 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005060:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005068:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800506a:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_RCC_OscConfig+0x162>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	2b18      	cmp	r3, #24
 800507a:	d137      	bne.n	80050ec <HAL_RCC_OscConfig+0x1c8>
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d132      	bne.n	80050ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005086:	4b38      	ldr	r3, [pc, #224]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_RCC_OscConfig+0x17a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e2e9      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 0219 	bic.w	r2, r3, #25
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	492f      	ldr	r1, [pc, #188]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050b0:	f7fd f9be 	bl	8002430 <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b8:	f7fd f9ba 	bl	8002430 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e2d3      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050ca:	4b27      	ldr	r3, [pc, #156]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d6:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	061b      	lsls	r3, r3, #24
 80050e4:	4920      	ldr	r1, [pc, #128]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ea:	e045      	b.n	8005178 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d026      	beq.n	8005142 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050f4:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 0219 	bic.w	r2, r3, #25
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4919      	ldr	r1, [pc, #100]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd f993 	bl	8002430 <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510e:	f7fd f98f 	bl	8002430 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e2a8      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	490b      	ldr	r1, [pc, #44]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 800513c:	4313      	orrs	r3, r2
 800513e:	604b      	str	r3, [r1, #4]
 8005140:	e01a      	b.n	8005178 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a08      	ldr	r2, [pc, #32]	; (8005168 <HAL_RCC_OscConfig+0x244>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fd f96f 	bl	8002430 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005154:	e00a      	b.n	800516c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005156:	f7fd f96b 	bl	8002430 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d903      	bls.n	800516c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e284      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
 8005168:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800516c:	4b96      	ldr	r3, [pc, #600]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ee      	bne.n	8005156 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d06a      	beq.n	800525a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005184:	4b90      	ldr	r3, [pc, #576]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800518c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800518e:	4b8e      	ldr	r3, [pc, #568]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b08      	cmp	r3, #8
 8005198:	d007      	beq.n	80051aa <HAL_RCC_OscConfig+0x286>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b18      	cmp	r3, #24
 800519e:	d11b      	bne.n	80051d8 <HAL_RCC_OscConfig+0x2b4>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d116      	bne.n	80051d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051aa:	4b87      	ldr	r3, [pc, #540]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <HAL_RCC_OscConfig+0x29e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d001      	beq.n	80051c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e257      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051c2:	4b81      	ldr	r3, [pc, #516]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	497d      	ldr	r1, [pc, #500]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051d6:	e040      	b.n	800525a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d023      	beq.n	8005228 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051e0:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a78      	ldr	r2, [pc, #480]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80051e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fd f920 	bl	8002430 <HAL_GetTick>
 80051f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80051f4:	f7fd f91c 	bl	8002430 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e235      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005206:	4b70      	ldr	r3, [pc, #448]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005212:	4b6d      	ldr	r3, [pc, #436]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	4969      	ldr	r1, [pc, #420]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	60cb      	str	r3, [r1, #12]
 8005226:	e018      	b.n	800525a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005228:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a66      	ldr	r2, [pc, #408]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fd f8fc 	bl	8002430 <HAL_GetTick>
 8005238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800523c:	f7fd f8f8 	bl	8002430 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e211      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800524e:	4b5e      	ldr	r3, [pc, #376]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d036      	beq.n	80052d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d019      	beq.n	80052a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526e:	4b56      	ldr	r3, [pc, #344]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	4a55      	ldr	r2, [pc, #340]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527a:	f7fd f8d9 	bl	8002430 <HAL_GetTick>
 800527e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005282:	f7fd f8d5 	bl	8002430 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e1ee      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005294:	4b4c      	ldr	r3, [pc, #304]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x35e>
 80052a0:	e018      	b.n	80052d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a2:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80052a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a6:	4a48      	ldr	r2, [pc, #288]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fd f8bf 	bl	8002430 <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b6:	f7fd f8bb 	bl	8002430 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e1d4      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052c8:	4b3f      	ldr	r3, [pc, #252]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80052ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d036      	beq.n	800534e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d019      	beq.n	800531c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052e8:	4b37      	ldr	r3, [pc, #220]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a36      	ldr	r2, [pc, #216]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80052ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052f4:	f7fd f89c 	bl	8002430 <HAL_GetTick>
 80052f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052fc:	f7fd f898 	bl	8002430 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e1b1      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x3d8>
 800531a:	e018      	b.n	800534e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800531c:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005326:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005328:	f7fd f882 	bl	8002430 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005330:	f7fd f87e 	bl	8002430 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e197      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005342:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8086 	beq.w	8005468 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800535c:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <HAL_RCC_OscConfig+0x4a8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <HAL_RCC_OscConfig+0x4a8>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005368:	f7fd f862 	bl	8002430 <HAL_GetTick>
 800536c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fd f85e 	bl	8002430 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e177      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_OscConfig+0x4a8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_OscConfig+0x480>
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
 80053a2:	e032      	b.n	800540a <HAL_RCC_OscConfig+0x4e6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d111      	bne.n	80053d0 <HAL_RCC_OscConfig+0x4ac>
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	; 0x70
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a02      	ldr	r2, [pc, #8]	; (80053c8 <HAL_RCC_OscConfig+0x4a4>)
 80053be:	f023 0304 	bic.w	r3, r3, #4
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	e021      	b.n	800540a <HAL_RCC_OscConfig+0x4e6>
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	58024800 	.word	0x58024800
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCC_OscConfig+0x4ce>
 80053d8:	4b83      	ldr	r3, [pc, #524]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	4a82      	ldr	r2, [pc, #520]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80053de:	f043 0304 	orr.w	r3, r3, #4
 80053e2:	6713      	str	r3, [r2, #112]	; 0x70
 80053e4:	4b80      	ldr	r3, [pc, #512]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	4a7f      	ldr	r2, [pc, #508]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6713      	str	r3, [r2, #112]	; 0x70
 80053f0:	e00b      	b.n	800540a <HAL_RCC_OscConfig+0x4e6>
 80053f2:	4b7d      	ldr	r3, [pc, #500]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	4a7c      	ldr	r2, [pc, #496]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	6713      	str	r3, [r2, #112]	; 0x70
 80053fe:	4b7a      	ldr	r3, [pc, #488]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	4a79      	ldr	r2, [pc, #484]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d015      	beq.n	800543e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005412:	f7fd f80d 	bl	8002430 <HAL_GetTick>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fd f809 	bl	8002430 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	; 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e120      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005430:	4b6d      	ldr	r3, [pc, #436]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ee      	beq.n	800541a <HAL_RCC_OscConfig+0x4f6>
 800543c:	e014      	b.n	8005468 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543e:	f7fc fff7 	bl	8002430 <HAL_GetTick>
 8005442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005444:	e00a      	b.n	800545c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7fc fff3 	bl	8002430 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e10a      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800545c:	4b62      	ldr	r3, [pc, #392]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ee      	bne.n	8005446 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80ff 	beq.w	8005670 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005472:	4b5d      	ldr	r3, [pc, #372]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800547a:	2b18      	cmp	r3, #24
 800547c:	f000 80ba 	beq.w	80055f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	2b02      	cmp	r3, #2
 8005486:	f040 8095 	bne.w	80055b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b57      	ldr	r3, [pc, #348]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a56      	ldr	r2, [pc, #344]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fc ffcb 	bl	8002430 <HAL_GetTick>
 800549a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549e:	f7fc ffc7 	bl	8002430 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e0e0      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054b0:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f0      	bne.n	800549e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054bc:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80054be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054c0:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <HAL_RCC_OscConfig+0x6c8>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	430a      	orrs	r2, r1
 80054d0:	4945      	ldr	r1, [pc, #276]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	628b      	str	r3, [r1, #40]	; 0x28
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	3b01      	subs	r3, #1
 80054dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	3b01      	subs	r3, #1
 80054e6:	025b      	lsls	r3, r3, #9
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	3b01      	subs	r3, #1
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	3b01      	subs	r3, #1
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005506:	4938      	ldr	r1, [pc, #224]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005508:	4313      	orrs	r3, r2
 800550a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800550c:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005518:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800551a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551c:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_OscConfig+0x6cc>)
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005524:	00d2      	lsls	r2, r2, #3
 8005526:	4930      	ldr	r1, [pc, #192]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005528:	4313      	orrs	r3, r2
 800552a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800552c:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f023 020c 	bic.w	r2, r3, #12
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	492b      	ldr	r1, [pc, #172]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800553e:	4b2a      	ldr	r3, [pc, #168]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	f023 0202 	bic.w	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	4927      	ldr	r1, [pc, #156]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	4a24      	ldr	r2, [pc, #144]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555c:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005568:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800556e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005574:	4b1c      	ldr	r3, [pc, #112]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	4a1b      	ldr	r2, [pc, #108]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 8005586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc ff50 	bl	8002430 <HAL_GetTick>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005594:	f7fc ff4c 	bl	8002430 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e065      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x670>
 80055b2:	e05d      	b.n	8005670 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80055ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fc ff36 	bl	8002430 <HAL_GetTick>
 80055c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fc ff32 	bl	8002430 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e04b      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <HAL_RCC_OscConfig+0x6c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x6a4>
 80055e6:	e043      	b.n	8005670 <HAL_RCC_OscConfig+0x74c>
 80055e8:	58024400 	.word	0x58024400
 80055ec:	fffffc0c 	.word	0xfffffc0c
 80055f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <HAL_RCC_OscConfig+0x758>)
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055fa:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_RCC_OscConfig+0x758>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b01      	cmp	r3, #1
 8005606:	d031      	beq.n	800566c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f003 0203 	and.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005612:	429a      	cmp	r2, r3
 8005614:	d12a      	bne.n	800566c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d122      	bne.n	800566c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d11a      	bne.n	800566c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	0a5b      	lsrs	r3, r3, #9
 800563a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005642:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d111      	bne.n	800566c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d108      	bne.n	800566c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	0e1b      	lsrs	r3, r3, #24
 800565e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	58024400 	.word	0x58024400

08005680 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e19c      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005694:	4b8a      	ldr	r3, [pc, #552]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d910      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b87      	ldr	r3, [pc, #540]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 020f 	bic.w	r2, r3, #15
 80056aa:	4985      	ldr	r1, [pc, #532]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b83      	ldr	r3, [pc, #524]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e184      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d010      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	4b7b      	ldr	r3, [pc, #492]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056dc:	429a      	cmp	r2, r3
 80056de:	d908      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056e0:	4b78      	ldr	r3, [pc, #480]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	4975      	ldr	r1, [pc, #468]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d010      	beq.n	8005720 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	4b70      	ldr	r3, [pc, #448]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800570a:	429a      	cmp	r2, r3
 800570c:	d908      	bls.n	8005720 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800570e:	4b6d      	ldr	r3, [pc, #436]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	496a      	ldr	r1, [pc, #424]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800571c:	4313      	orrs	r3, r2
 800571e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	d010      	beq.n	800574e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	4b64      	ldr	r3, [pc, #400]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005738:	429a      	cmp	r2, r3
 800573a:	d908      	bls.n	800574e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800573c:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	495e      	ldr	r1, [pc, #376]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800574a:	4313      	orrs	r3, r2
 800574c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d010      	beq.n	800577c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	4b59      	ldr	r3, [pc, #356]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005766:	429a      	cmp	r2, r3
 8005768:	d908      	bls.n	800577c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800576a:	4b56      	ldr	r3, [pc, #344]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4953      	ldr	r1, [pc, #332]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005778:	4313      	orrs	r3, r2
 800577a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	4b4d      	ldr	r3, [pc, #308]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	429a      	cmp	r2, r3
 8005796:	d908      	bls.n	80057aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005798:	4b4a      	ldr	r3, [pc, #296]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f023 020f 	bic.w	r2, r3, #15
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4947      	ldr	r1, [pc, #284]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d055      	beq.n	8005862 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057b6:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	4940      	ldr	r1, [pc, #256]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057d0:	4b3c      	ldr	r3, [pc, #240]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d121      	bne.n	8005820 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0f6      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057e8:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d115      	bne.n	8005820 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0ea      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005800:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0de      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005810:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0d6      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005820:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f023 0207 	bic.w	r2, r3, #7
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4925      	ldr	r1, [pc, #148]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005832:	f7fc fdfd 	bl	8002430 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005838:	e00a      	b.n	8005850 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583a:	f7fc fdf9 	bl	8002430 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0be      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005850:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	429a      	cmp	r2, r3
 8005860:	d1eb      	bne.n	800583a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d010      	beq.n	8005890 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	429a      	cmp	r2, r3
 800587c:	d208      	bcs.n	8005890 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f023 020f 	bic.w	r2, r3, #15
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	490e      	ldr	r1, [pc, #56]	; (80058c4 <HAL_RCC_ClockConfig+0x244>)
 800588c:	4313      	orrs	r3, r2
 800588e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d214      	bcs.n	80058c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 020f 	bic.w	r2, r3, #15
 80058a6:	4906      	ldr	r1, [pc, #24]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <HAL_RCC_ClockConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d005      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e086      	b.n	80059ce <HAL_RCC_ClockConfig+0x34e>
 80058c0:	52002000 	.word	0x52002000
 80058c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d208      	bcs.n	80058f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058e4:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4939      	ldr	r1, [pc, #228]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800590e:	429a      	cmp	r2, r3
 8005910:	d208      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005912:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	492e      	ldr	r1, [pc, #184]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005920:	4313      	orrs	r3, r2
 8005922:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	4b28      	ldr	r3, [pc, #160]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800593c:	429a      	cmp	r2, r3
 800593e:	d208      	bcs.n	8005952 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005940:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	4922      	ldr	r1, [pc, #136]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 800594e:	4313      	orrs	r3, r2
 8005950:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d010      	beq.n	8005980 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800596a:	429a      	cmp	r2, r3
 800596c:	d208      	bcs.n	8005980 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800596e:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	4917      	ldr	r1, [pc, #92]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 800597c:	4313      	orrs	r3, r2
 800597e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005980:	f000 f834 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	4912      	ldr	r1, [pc, #72]	; (80059dc <HAL_RCC_ClockConfig+0x35c>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800599e:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <HAL_RCC_ClockConfig+0x358>)
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	4a0d      	ldr	r2, [pc, #52]	; (80059dc <HAL_RCC_ClockConfig+0x35c>)
 80059a8:	5cd3      	ldrb	r3, [r2, r3]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <HAL_RCC_ClockConfig+0x360>)
 80059b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059b8:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <HAL_RCC_ClockConfig+0x364>)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <HAL_RCC_ClockConfig+0x368>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fc fcea 	bl	800239c <HAL_InitTick>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	0800d7e0 	.word	0x0800d7e0
 80059e0:	24000008 	.word	0x24000008
 80059e4:	24000004 	.word	0x24000004
 80059e8:	2400000c 	.word	0x2400000c

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b089      	sub	sp, #36	; 0x24
 80059f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f2:	4bb3      	ldr	r3, [pc, #716]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059fa:	2b18      	cmp	r3, #24
 80059fc:	f200 8155 	bhi.w	8005caa <HAL_RCC_GetSysClockFreq+0x2be>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005cab 	.word	0x08005cab
 8005a10:	08005cab 	.word	0x08005cab
 8005a14:	08005cab 	.word	0x08005cab
 8005a18:	08005cab 	.word	0x08005cab
 8005a1c:	08005cab 	.word	0x08005cab
 8005a20:	08005cab 	.word	0x08005cab
 8005a24:	08005cab 	.word	0x08005cab
 8005a28:	08005a93 	.word	0x08005a93
 8005a2c:	08005cab 	.word	0x08005cab
 8005a30:	08005cab 	.word	0x08005cab
 8005a34:	08005cab 	.word	0x08005cab
 8005a38:	08005cab 	.word	0x08005cab
 8005a3c:	08005cab 	.word	0x08005cab
 8005a40:	08005cab 	.word	0x08005cab
 8005a44:	08005cab 	.word	0x08005cab
 8005a48:	08005a99 	.word	0x08005a99
 8005a4c:	08005cab 	.word	0x08005cab
 8005a50:	08005cab 	.word	0x08005cab
 8005a54:	08005cab 	.word	0x08005cab
 8005a58:	08005cab 	.word	0x08005cab
 8005a5c:	08005cab 	.word	0x08005cab
 8005a60:	08005cab 	.word	0x08005cab
 8005a64:	08005cab 	.word	0x08005cab
 8005a68:	08005a9f 	.word	0x08005a9f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a6c:	4b94      	ldr	r3, [pc, #592]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a78:	4b91      	ldr	r3, [pc, #580]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	08db      	lsrs	r3, r3, #3
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	4a90      	ldr	r2, [pc, #576]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005a8a:	e111      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a8c:	4b8d      	ldr	r3, [pc, #564]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a8e:	61bb      	str	r3, [r7, #24]
    break;
 8005a90:	e10e      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005a92:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a94:	61bb      	str	r3, [r7, #24]
    break;
 8005a96:	e10b      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005a98:	4b8c      	ldr	r3, [pc, #560]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a9a:	61bb      	str	r3, [r7, #24]
    break;
 8005a9c:	e108      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a9e:	4b88      	ldr	r3, [pc, #544]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005aa8:	4b85      	ldr	r3, [pc, #532]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ab4:	4b82      	ldr	r3, [pc, #520]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005abe:	4b80      	ldr	r3, [pc, #512]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	08db      	lsrs	r3, r3, #3
 8005ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80e1 	beq.w	8005ca4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f000 8083 	beq.w	8005bf0 <HAL_RCC_GetSysClockFreq+0x204>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f200 80a1 	bhi.w	8005c34 <HAL_RCC_GetSysClockFreq+0x248>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x114>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d056      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005afe:	e099      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b00:	4b6f      	ldr	r3, [pc, #444]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02d      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b0c:	4b6c      	ldr	r3, [pc, #432]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	08db      	lsrs	r3, r3, #3
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	4a6b      	ldr	r2, [pc, #428]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b36:	4b62      	ldr	r3, [pc, #392]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005b66:	e087      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b51      	ldr	r3, [pc, #324]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005baa:	e065      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bbe:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bee:	e043      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cdc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c32:	e021      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c76:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	0a5b      	lsrs	r3, r3, #9
 8005c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c82:	3301      	adds	r3, #1
 8005c84:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c9c:	ee17 3a90 	vmov	r3, s15
 8005ca0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005ca2:	e005      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
    break;
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005caa:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cac:	61bb      	str	r3, [r7, #24]
    break;
 8005cae:	bf00      	nop
  }

  return sysclockfreq;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3724      	adds	r7, #36	; 0x24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	03d09000 	.word	0x03d09000
 8005cc8:	003d0900 	.word	0x003d0900
 8005ccc:	017d7840 	.word	0x017d7840
 8005cd0:	46000000 	.word	0x46000000
 8005cd4:	4c742400 	.word	0x4c742400
 8005cd8:	4a742400 	.word	0x4a742400
 8005cdc:	4bbebc20 	.word	0x4bbebc20

08005ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ce6:	f7ff fe81 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 8005cea:	4602      	mov	r2, r0
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	490f      	ldr	r1, [pc, #60]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cf8:	5ccb      	ldrb	r3, [r1, r3]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d1e:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	58024400 	.word	0x58024400
 8005d34:	0800d7e0 	.word	0x0800d7e0
 8005d38:	24000008 	.word	0x24000008
 8005d3c:	24000004 	.word	0x24000004

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d44:	f7ff ffcc 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	091b      	lsrs	r3, r3, #4
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4904      	ldr	r1, [pc, #16]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58024400 	.word	0x58024400
 8005d68:	0800d7e0 	.word	0x0800d7e0

08005d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d70:	f7ff ffb6 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	0a1b      	lsrs	r3, r3, #8
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4904      	ldr	r1, [pc, #16]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	58024400 	.word	0x58024400
 8005d94:	0800d7e0 	.word	0x0800d7e0

08005d98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da0:	2300      	movs	r3, #0
 8005da2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da4:	2300      	movs	r3, #0
 8005da6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d03f      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dbc:	d02a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005dbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc2:	d824      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dc8:	d018      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dce:	d81e      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd8:	d007      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dda:	e018      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ddc:	4ba4      	ldr	r3, [pc, #656]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	4aa3      	ldr	r2, [pc, #652]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005de8:	e015      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2102      	movs	r1, #2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 f989 	bl	8007108 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005dfa:	e00c      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	2102      	movs	r1, #2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 fa32 	bl	800726c <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d109      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e1c:	4b94      	ldr	r3, [pc, #592]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	4991      	ldr	r1, [pc, #580]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e2e:	e001      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d03d      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d826      	bhi.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e65 	.word	0x08005e65
 8005e54:	08005e73 	.word	0x08005e73
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	08005e9d 	.word	0x08005e9d
 8005e60:	08005e9d 	.word	0x08005e9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4b82      	ldr	r3, [pc, #520]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a81      	ldr	r2, [pc, #516]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e70:	e015      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	2100      	movs	r1, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 f945 	bl	8007108 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e82:	e00c      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f9ee 	bl	800726c <RCCEx_PLL3_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e94:	e003      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea4:	4b72      	ldr	r3, [pc, #456]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	f023 0207 	bic.w	r2, r3, #7
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	496f      	ldr	r1, [pc, #444]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	650b      	str	r3, [r1, #80]	; 0x50
 8005eb6:	e001      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d051      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ece:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ed2:	d036      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ed4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ed8:	d830      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ede:	d032      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee4:	d82a      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005eea:	d02e      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005eec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ef0:	d824      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef6:	d018      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005efc:	d81e      	bhi.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005f02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f06:	d007      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005f08:	e018      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0a:	4b59      	ldr	r3, [pc, #356]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	4a58      	ldr	r2, [pc, #352]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f16:	e019      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f8f2 	bl	8007108 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005f28:	e010      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3324      	adds	r3, #36	; 0x24
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f99b 	bl	800726c <RCCEx_PLL3_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f3a:	e007      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f40:	e004      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f60:	4943      	ldr	r1, [pc, #268]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	658b      	str	r3, [r1, #88]	; 0x58
 8005f66:	e001      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d051      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f7e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f82:	d036      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005f84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f88:	d830      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005f8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f8e:	d032      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f94:	d82a      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005f96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f9a:	d02e      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005f9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fa0:	d824      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fa6:	d018      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fac:	d81e      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005fb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fb6:	d007      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005fb8:	e018      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fba:	4b2d      	ldr	r3, [pc, #180]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fc6:	e019      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f89a 	bl	8007108 <RCCEx_PLL2_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005fd8:	e010      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3324      	adds	r3, #36	; 0x24
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 f943 	bl	800726c <RCCEx_PLL3_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fea:	e007      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff0:	e004      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006010:	4917      	ldr	r1, [pc, #92]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006012:	4313      	orrs	r3, r2
 8006014:	658b      	str	r3, [r1, #88]	; 0x58
 8006016:	e001      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d035      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d01c      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006030:	2b30      	cmp	r3, #48	; 0x30
 8006032:	d817      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006034:	2b20      	cmp	r3, #32
 8006036:	d00c      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d813      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d019      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006040:	2b10      	cmp	r3, #16
 8006042:	d10f      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006044:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a09      	ldr	r2, [pc, #36]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800604a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006050:	e011      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	2102      	movs	r1, #2
 8006058:	4618      	mov	r0, r3
 800605a:	f001 f855 	bl	8007108 <RCCEx_PLL2_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006062:	e008      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
      break;
 8006068:	e005      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800606a:	bf00      	nop
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
      break;
 8006074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800607c:	4ba3      	ldr	r3, [pc, #652]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800607e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006080:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006088:	49a0      	ldr	r1, [pc, #640]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800608a:	4313      	orrs	r3, r2
 800608c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800608e:	e001      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d047      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a8:	d030      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80060aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ae:	d82a      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80060b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060b4:	d02c      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80060b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ba:	d824      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	d018      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c6:	d81e      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d007      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80060d2:	e018      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4b8d      	ldr	r3, [pc, #564]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a8c      	ldr	r2, [pc, #560]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060e0:	e017      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3304      	adds	r3, #4
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 f80d 	bl	8007108 <RCCEx_PLL2_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80060f2:	e00e      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 f8b6 	bl	800726c <RCCEx_PLL3_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006104:	e005      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
      break;
 800610a:	e002      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800610c:	bf00      	nop
 800610e:	e000      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006118:	4b7c      	ldr	r3, [pc, #496]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	4979      	ldr	r1, [pc, #484]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8006126:	4313      	orrs	r3, r2
 8006128:	650b      	str	r3, [r1, #80]	; 0x50
 800612a:	e001      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d049      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006144:	d02e      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006146:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800614a:	d828      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800614c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006150:	d02a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006156:	d822      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800615c:	d026      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x414>
 800615e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006162:	d81c      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006168:	d010      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800616a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800616e:	d816      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006178:	d111      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	2101      	movs	r1, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f000 ffc1 	bl	8007108 <RCCEx_PLL2_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800618a:	e012      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3324      	adds	r3, #36	; 0x24
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f001 f86a 	bl	800726c <RCCEx_PLL3_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800619c:	e009      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
      break;
 80061a2:	e006      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80061a4:	bf00      	nop
 80061a6:	e004      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80061a8:	bf00      	nop
 80061aa:	e002      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80061ac:	bf00      	nop
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80061b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061b8:	4b54      	ldr	r3, [pc, #336]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80061ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	4951      	ldr	r1, [pc, #324]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	650b      	str	r3, [r1, #80]	; 0x50
 80061ca:	e001      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d04b      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061e6:	d02e      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80061e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061ec:	d828      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f2:	d02a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d822      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80061fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061fe:	d026      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006200:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006204:	d81c      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800620a:	d010      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006210:	d816      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01d      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800621a:	d111      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	2101      	movs	r1, #1
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ff70 	bl	8007108 <RCCEx_PLL2_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800622c:	e012      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3324      	adds	r3, #36	; 0x24
 8006232:	2101      	movs	r1, #1
 8006234:	4618      	mov	r0, r3
 8006236:	f001 f819 	bl	800726c <RCCEx_PLL3_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800623e:	e009      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800625a:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006268:	4928      	ldr	r1, [pc, #160]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800626a:	4313      	orrs	r3, r2
 800626c:	658b      	str	r3, [r1, #88]	; 0x58
 800626e:	e001      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006288:	d00e      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800628a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628e:	d814      	bhi.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006298:	d10f      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629a:	4b1c      	ldr	r3, [pc, #112]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a1b      	ldr	r2, [pc, #108]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80062a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80062a6:	e00c      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 ff2a 	bl	8007108 <RCCEx_PLL2_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80062b8:	e003      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
      break;
 80062be:	e000      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80062c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062c8:	4b10      	ldr	r3, [pc, #64]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80062ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d4:	490d      	ldr	r1, [pc, #52]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	650b      	str	r3, [r1, #80]	; 0x50
 80062da:	e001      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d034      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d81d      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006337 	.word	0x08006337
 8006300:	08006311 	.word	0x08006311
 8006304:	0800631f 	.word	0x0800631f
 8006308:	08006337 	.word	0x08006337
 800630c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4bb1      	ldr	r3, [pc, #708]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4ab0      	ldr	r2, [pc, #704]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800631c:	e00c      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	2102      	movs	r1, #2
 8006324:	4618      	mov	r0, r3
 8006326:	f000 feef 	bl	8007108 <RCCEx_PLL2_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800632e:	e003      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
      break;
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8006336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800633e:	4ba6      	ldr	r3, [pc, #664]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	f023 0203 	bic.w	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	49a3      	ldr	r1, [pc, #652]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800634c:	4313      	orrs	r3, r2
 800634e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006350:	e001      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8086 	beq.w	8006470 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006364:	4b9d      	ldr	r3, [pc, #628]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a9c      	ldr	r2, [pc, #624]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800636a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006370:	f7fc f85e 	bl	8002430 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006376:	e009      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006378:	f7fc f85a 	bl	8002430 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d902      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	75fb      	strb	r3, [r7, #23]
        break;
 800638a:	e005      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800638c:	4b93      	ldr	r3, [pc, #588]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ef      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d166      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800639e:	4b8e      	ldr	r3, [pc, #568]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063a8:	4053      	eors	r3, r2
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b2:	4b89      	ldr	r3, [pc, #548]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063bc:	4b86      	ldr	r3, [pc, #536]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c0:	4a85      	ldr	r2, [pc, #532]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063c8:	4b83      	ldr	r3, [pc, #524]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a82      	ldr	r2, [pc, #520]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063d4:	4a80      	ldr	r2, [pc, #512]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e4:	d115      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e6:	f7fc f823 	bl	8002430 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ec:	e00b      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ee:	f7fc f81f 	bl	8002430 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d902      	bls.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	75fb      	strb	r3, [r7, #23]
            break;
 8006404:	e005      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006406:	4b74      	ldr	r3, [pc, #464]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ed      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d126      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800641e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006426:	d10d      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006428:	4b6b      	ldr	r3, [pc, #428]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006436:	0919      	lsrs	r1, r3, #4
 8006438:	4b69      	ldr	r3, [pc, #420]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800643a:	400b      	ands	r3, r1
 800643c:	4966      	ldr	r1, [pc, #408]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800643e:	4313      	orrs	r3, r2
 8006440:	610b      	str	r3, [r1, #16]
 8006442:	e005      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006444:	4b64      	ldr	r3, [pc, #400]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	4a63      	ldr	r2, [pc, #396]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800644a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800644e:	6113      	str	r3, [r2, #16]
 8006450:	4b61      	ldr	r3, [pc, #388]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800645a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645e:	495e      	ldr	r1, [pc, #376]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006460:	4313      	orrs	r3, r2
 8006462:	670b      	str	r3, [r1, #112]	; 0x70
 8006464:	e004      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	75bb      	strb	r3, [r7, #22]
 800646a:	e001      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d07e      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006480:	2b28      	cmp	r3, #40	; 0x28
 8006482:	d867      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	0800655b 	.word	0x0800655b
 8006490:	08006555 	.word	0x08006555
 8006494:	08006555 	.word	0x08006555
 8006498:	08006555 	.word	0x08006555
 800649c:	08006555 	.word	0x08006555
 80064a0:	08006555 	.word	0x08006555
 80064a4:	08006555 	.word	0x08006555
 80064a8:	08006555 	.word	0x08006555
 80064ac:	08006531 	.word	0x08006531
 80064b0:	08006555 	.word	0x08006555
 80064b4:	08006555 	.word	0x08006555
 80064b8:	08006555 	.word	0x08006555
 80064bc:	08006555 	.word	0x08006555
 80064c0:	08006555 	.word	0x08006555
 80064c4:	08006555 	.word	0x08006555
 80064c8:	08006555 	.word	0x08006555
 80064cc:	08006543 	.word	0x08006543
 80064d0:	08006555 	.word	0x08006555
 80064d4:	08006555 	.word	0x08006555
 80064d8:	08006555 	.word	0x08006555
 80064dc:	08006555 	.word	0x08006555
 80064e0:	08006555 	.word	0x08006555
 80064e4:	08006555 	.word	0x08006555
 80064e8:	08006555 	.word	0x08006555
 80064ec:	0800655b 	.word	0x0800655b
 80064f0:	08006555 	.word	0x08006555
 80064f4:	08006555 	.word	0x08006555
 80064f8:	08006555 	.word	0x08006555
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006555 	.word	0x08006555
 8006504:	08006555 	.word	0x08006555
 8006508:	08006555 	.word	0x08006555
 800650c:	0800655b 	.word	0x0800655b
 8006510:	08006555 	.word	0x08006555
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
 8006520:	08006555 	.word	0x08006555
 8006524:	08006555 	.word	0x08006555
 8006528:	08006555 	.word	0x08006555
 800652c:	0800655b 	.word	0x0800655b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fde6 	bl	8007108 <RCCEx_PLL2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006540:	e00c      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3324      	adds	r3, #36	; 0x24
 8006546:	2101      	movs	r1, #1
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fe8f 	bl	800726c <RCCEx_PLL3_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
      break;
 8006558:	e000      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800655a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006562:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	491a      	ldr	r1, [pc, #104]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006570:	4313      	orrs	r3, r2
 8006572:	654b      	str	r3, [r1, #84]	; 0x54
 8006574:	e001      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d03e      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	2b05      	cmp	r3, #5
 800658c:	d820      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065e5 	.word	0x080065e5
 8006598:	080065ad 	.word	0x080065ad
 800659c:	080065bf 	.word	0x080065bf
 80065a0:	080065e5 	.word	0x080065e5
 80065a4:	080065e5 	.word	0x080065e5
 80065a8:	080065e5 	.word	0x080065e5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fda8 	bl	8007108 <RCCEx_PLL2_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80065bc:	e013      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3324      	adds	r3, #36	; 0x24
 80065c2:	2101      	movs	r1, #1
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe51 	bl	800726c <RCCEx_PLL3_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80065ce:	e00a      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e007      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	58024800 	.word	0x58024800
 80065e0:	00ffffcf 	.word	0x00ffffcf
      break;
 80065e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065ec:	4b9f      	ldr	r3, [pc, #636]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	f023 0207 	bic.w	r2, r3, #7
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f8:	499c      	ldr	r1, [pc, #624]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	654b      	str	r3, [r1, #84]	; 0x54
 80065fe:	e001      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d039      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006616:	2b05      	cmp	r3, #5
 8006618:	d820      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006663 	.word	0x08006663
 8006624:	08006639 	.word	0x08006639
 8006628:	0800664b 	.word	0x0800664b
 800662c:	08006663 	.word	0x08006663
 8006630:	08006663 	.word	0x08006663
 8006634:	08006663 	.word	0x08006663
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2101      	movs	r1, #1
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fd62 	bl	8007108 <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006648:	e00c      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3324      	adds	r3, #36	; 0x24
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fe0b 	bl	800726c <RCCEx_PLL3_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800665a:	e003      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	75fb      	strb	r3, [r7, #23]
      break;
 8006660:	e000      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006664:	7dfb      	ldrb	r3, [r7, #23]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800666a:	4b80      	ldr	r3, [pc, #512]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666e:	f023 0207 	bic.w	r2, r3, #7
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006678:	497c      	ldr	r1, [pc, #496]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800667a:	4313      	orrs	r3, r2
 800667c:	658b      	str	r3, [r1, #88]	; 0x58
 800667e:	e001      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d04b      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800669a:	d02e      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800669c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a0:	d828      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d02a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x966>
 80066a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ac:	d822      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066b2:	d026      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80066b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066b8:	d81c      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066be:	d010      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80066c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c4:	d816      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01d      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80066ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ce:	d111      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fd16 	bl	8007108 <RCCEx_PLL2_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80066e0:	e012      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3324      	adds	r3, #36	; 0x24
 80066e6:	2102      	movs	r1, #2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fdbf 	bl	800726c <RCCEx_PLL3_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80066f2:	e009      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]
      break;
 80066f8:	e006      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80066fa:	bf00      	nop
 80066fc:	e004      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80066fe:	bf00      	nop
 8006700:	e002      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006702:	bf00      	nop
 8006704:	e000      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800670e:	4b57      	ldr	r3, [pc, #348]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	4953      	ldr	r1, [pc, #332]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	654b      	str	r3, [r1, #84]	; 0x54
 8006722:	e001      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d04b      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800673e:	d02e      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006740:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006744:	d828      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d02a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006750:	d822      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006756:	d026      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675c:	d81c      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800675e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006762:	d010      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006768:	d816      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01d      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006772:	d111      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fcc4 	bl	8007108 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006784:	e012      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3324      	adds	r3, #36	; 0x24
 800678a:	2102      	movs	r1, #2
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fd6d 	bl	800726c <RCCEx_PLL3_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006796:	e009      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
      break;
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800679e:	bf00      	nop
 80067a0:	e004      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067a2:	bf00      	nop
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80067aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067b2:	4b2e      	ldr	r3, [pc, #184]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067c0:	492a      	ldr	r1, [pc, #168]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	658b      	str	r3, [r1, #88]	; 0x58
 80067c6:	e001      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d04d      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067e2:	d02e      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80067e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067e8:	d828      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80067ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ee:	d02a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80067f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f4:	d822      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80067f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067fa:	d026      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80067fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006800:	d81c      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006806:	d010      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800680c:	d816      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01d      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006816:	d111      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fc72 	bl	8007108 <RCCEx_PLL2_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006828:	e012      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3324      	adds	r3, #36	; 0x24
 800682e:	2102      	movs	r1, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fd1b 	bl	800726c <RCCEx_PLL3_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800683a:	e009      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
      break;
 8006840:	e006      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006842:	bf00      	nop
 8006844:	e004      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800684e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10c      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006864:	4901      	ldr	r1, [pc, #4]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006866:	4313      	orrs	r3, r2
 8006868:	658b      	str	r3, [r1, #88]	; 0x58
 800686a:	e003      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800686c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d018      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006888:	d10a      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3324      	adds	r3, #36	; 0x24
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fceb 	bl	800726c <RCCEx_PLL3_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068a0:	4b8a      	ldr	r3, [pc, #552]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ac:	4987      	ldr	r1, [pc, #540]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c8:	d10a      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fccb 	bl	800726c <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e0:	4b7a      	ldr	r3, [pc, #488]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	4977      	ldr	r1, [pc, #476]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d034      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800690a:	d01d      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800690c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006910:	d817      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691a:	d009      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800691c:	e011      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3304      	adds	r3, #4
 8006922:	2100      	movs	r1, #0
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fbef 	bl	8007108 <RCCEx_PLL2_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800692e:	e00c      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3324      	adds	r3, #36	; 0x24
 8006934:	2102      	movs	r1, #2
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fc98 	bl	800726c <RCCEx_PLL3_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006940:	e003      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	75fb      	strb	r3, [r7, #23]
      break;
 8006946:	e000      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006950:	4b5e      	ldr	r3, [pc, #376]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695e:	495b      	ldr	r1, [pc, #364]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006960:	4313      	orrs	r3, r2
 8006962:	658b      	str	r3, [r1, #88]	; 0x58
 8006964:	e001      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d033      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006980:	d01c      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006986:	d816      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698c:	d003      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800698e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006992:	d007      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006994:	e00f      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006996:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	4a4c      	ldr	r2, [pc, #304]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800699c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80069a2:	e00c      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3324      	adds	r3, #36	; 0x24
 80069a8:	2101      	movs	r1, #1
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fc5e 	bl	800726c <RCCEx_PLL3_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80069b4:	e003      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	75fb      	strb	r3, [r7, #23]
      break;
 80069ba:	e000      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80069bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c4:	4b41      	ldr	r3, [pc, #260]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d2:	493e      	ldr	r1, [pc, #248]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	654b      	str	r3, [r1, #84]	; 0x54
 80069d8:	e001      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d029      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80069f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f6:	d007      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069f8:	e00f      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fa:	4b34      	ldr	r3, [pc, #208]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	4a33      	ldr	r2, [pc, #204]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a06:	e00b      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fb7a 	bl	8007108 <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a18:	e002      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a26:	4b29      	ldr	r3, [pc, #164]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	4926      	ldr	r1, [pc, #152]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a38:	e001      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3324      	adds	r3, #36	; 0x24
 8006a4e:	2102      	movs	r1, #2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fc0b 	bl	800726c <RCCEx_PLL3_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d033      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a74:	d017      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7a:	d811      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a80:	d013      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8006a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a86:	d80b      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d010      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8006a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a90:	d106      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a92:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	4a0d      	ldr	r2, [pc, #52]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006a9e:	e007      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa4:	e004      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac2:	4902      	ldr	r1, [pc, #8]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ac8:	e004      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8006aca:	bf00      	nop
 8006acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ae0:	4b29      	ldr	r3, [pc, #164]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aec:	4926      	ldr	r1, [pc, #152]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006afe:	4b22      	ldr	r3, [pc, #136]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0a:	491f      	ldr	r1, [pc, #124]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b26:	6113      	str	r3, [r2, #16]
 8006b28:	4b17      	ldr	r3, [pc, #92]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b32:	4915      	ldr	r1, [pc, #84]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da08      	bge.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	490e      	ldr	r1, [pc, #56]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6c:	4906      	ldr	r1, [pc, #24]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006b72:	7dbb      	ldrb	r3, [r7, #22]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e000      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	58024400 	.word	0x58024400

08006b8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b90:	f7ff f8a6 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	091b      	lsrs	r3, r3, #4
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	0800d7e0 	.word	0x0800d7e0

08006bb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b089      	sub	sp, #36	; 0x24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bc0:	4ba1      	ldr	r3, [pc, #644]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006bca:	4b9f      	ldr	r3, [pc, #636]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	0b1b      	lsrs	r3, r3, #12
 8006bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bd6:	4b9c      	ldr	r3, [pc, #624]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	091b      	lsrs	r3, r3, #4
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006be2:	4b99      	ldr	r3, [pc, #612]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	08db      	lsrs	r3, r3, #3
 8006be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	fb02 f303 	mul.w	r3, r2, r3
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8111 	beq.w	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	f000 8083 	beq.w	8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	f200 80a1 	bhi.w	8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d056      	beq.n	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c22:	e099      	b.n	8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c24:	4b88      	ldr	r3, [pc, #544]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02d      	beq.n	8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c30:	4b85      	ldr	r3, [pc, #532]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	4a84      	ldr	r2, [pc, #528]	; (8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b7b      	ldr	r3, [pc, #492]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c8a:	e087      	b.n	8006d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b6a      	ldr	r3, [pc, #424]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cce:	e065      	b.n	8006d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	4b59      	ldr	r3, [pc, #356]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d12:	e043      	b.n	8006d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	4b48      	ldr	r3, [pc, #288]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d56:	e021      	b.n	8006d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6a:	4b37      	ldr	r3, [pc, #220]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006d9c:	4b2a      	ldr	r3, [pc, #168]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	0a5b      	lsrs	r3, r3, #9
 8006da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc2:	ee17 2a90 	vmov	r2, s15
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006dca:	4b1f      	ldr	r3, [pc, #124]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df0:	ee17 2a90 	vmov	r2, s15
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006df8:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	0e1b      	lsrs	r3, r3, #24
 8006dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1e:	ee17 2a90 	vmov	r2, s15
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e26:	e008      	b.n	8006e3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	609a      	str	r2, [r3, #8]
}
 8006e3a:	bf00      	nop
 8006e3c:	3724      	adds	r7, #36	; 0x24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	03d09000 	.word	0x03d09000
 8006e50:	46000000 	.word	0x46000000
 8006e54:	4c742400 	.word	0x4c742400
 8006e58:	4a742400 	.word	0x4a742400
 8006e5c:	4bbebc20 	.word	0x4bbebc20

08006e60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b089      	sub	sp, #36	; 0x24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e68:	4ba1      	ldr	r3, [pc, #644]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e72:	4b9f      	ldr	r3, [pc, #636]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	0d1b      	lsrs	r3, r3, #20
 8006e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e7e:	4b9c      	ldr	r3, [pc, #624]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006e8a:	4b99      	ldr	r3, [pc, #612]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	08db      	lsrs	r3, r3, #3
 8006e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8111 	beq.w	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f000 8083 	beq.w	8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	f200 80a1 	bhi.w	8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d056      	beq.n	8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006eca:	e099      	b.n	8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ecc:	4b88      	ldr	r3, [pc, #544]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d02d      	beq.n	8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ed8:	4b85      	ldr	r3, [pc, #532]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	4a84      	ldr	r2, [pc, #528]	; (80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b7b      	ldr	r3, [pc, #492]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f16:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f32:	e087      	b.n	8007044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f46:	4b6a      	ldr	r3, [pc, #424]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f76:	e065      	b.n	8007044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8a:	4b59      	ldr	r3, [pc, #356]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fba:	e043      	b.n	8007044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fce:	4b48      	ldr	r3, [pc, #288]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ffe:	e021      	b.n	8007044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800700e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007012:	4b37      	ldr	r3, [pc, #220]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007022:	ed97 6a03 	vldr	s12, [r7, #12]
 8007026:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800702a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007042:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007044:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	0a5b      	lsrs	r3, r3, #9
 800704a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800705a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800705e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706a:	ee17 2a90 	vmov	r2, s15
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007072:	4b1f      	ldr	r3, [pc, #124]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007098:	ee17 2a90 	vmov	r2, s15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80070a0:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	0e1b      	lsrs	r3, r3, #24
 80070a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80070be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c6:	ee17 2a90 	vmov	r2, s15
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070ce:	e008      	b.n	80070e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
}
 80070e2:	bf00      	nop
 80070e4:	3724      	adds	r7, #36	; 0x24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	58024400 	.word	0x58024400
 80070f4:	03d09000 	.word	0x03d09000
 80070f8:	46000000 	.word	0x46000000
 80070fc:	4c742400 	.word	0x4c742400
 8007100:	4a742400 	.word	0x4a742400
 8007104:	4bbebc20 	.word	0x4bbebc20

08007108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007116:	4b53      	ldr	r3, [pc, #332]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	2b03      	cmp	r3, #3
 8007120:	d101      	bne.n	8007126 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e099      	b.n	800725a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007126:	4b4f      	ldr	r3, [pc, #316]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a4e      	ldr	r2, [pc, #312]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800712c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007132:	f7fb f97d 	bl	8002430 <HAL_GetTick>
 8007136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007138:	e008      	b.n	800714c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800713a:	f7fb f979 	bl	8002430 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e086      	b.n	800725a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800714c:	4b45      	ldr	r3, [pc, #276]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f0      	bne.n	800713a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007158:	4b42      	ldr	r3, [pc, #264]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	031b      	lsls	r3, r3, #12
 8007166:	493f      	ldr	r1, [pc, #252]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	628b      	str	r3, [r1, #40]	; 0x28
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	3b01      	subs	r3, #1
 8007172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	3b01      	subs	r3, #1
 800717c:	025b      	lsls	r3, r3, #9
 800717e:	b29b      	uxth	r3, r3
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	3b01      	subs	r3, #1
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	3b01      	subs	r3, #1
 8007196:	061b      	lsls	r3, r3, #24
 8007198:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800719c:	4931      	ldr	r1, [pc, #196]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071a2:	4b30      	ldr	r3, [pc, #192]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	492d      	ldr	r1, [pc, #180]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071b4:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	f023 0220 	bic.w	r2, r3, #32
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	4928      	ldr	r1, [pc, #160]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071c6:	4b27      	ldr	r3, [pc, #156]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	4a26      	ldr	r2, [pc, #152]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071cc:	f023 0310 	bic.w	r3, r3, #16
 80071d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071d2:	4b24      	ldr	r3, [pc, #144]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d6:	4b24      	ldr	r3, [pc, #144]	; (8007268 <RCCEx_PLL2_Config+0x160>)
 80071d8:	4013      	ands	r3, r2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	69d2      	ldr	r2, [r2, #28]
 80071de:	00d2      	lsls	r2, r2, #3
 80071e0:	4920      	ldr	r1, [pc, #128]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071e6:	4b1f      	ldr	r3, [pc, #124]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071ec:	f043 0310 	orr.w	r3, r3, #16
 80071f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071f8:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 80071fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007204:	e00f      	b.n	8007226 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d106      	bne.n	800721a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800720c:	4b15      	ldr	r3, [pc, #84]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	4a14      	ldr	r2, [pc, #80]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 8007212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007218:	e005      	b.n	8007226 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	4a11      	ldr	r2, [pc, #68]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 8007220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007224:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800722c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007232:	f7fb f8fd 	bl	8002430 <HAL_GetTick>
 8007236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007238:	e008      	b.n	800724c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800723a:	f7fb f8f9 	bl	8002430 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e006      	b.n	800725a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <RCCEx_PLL2_Config+0x15c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0f0      	beq.n	800723a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	58024400 	.word	0x58024400
 8007268:	ffff0007 	.word	0xffff0007

0800726c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800727a:	4b53      	ldr	r3, [pc, #332]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d101      	bne.n	800728a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e099      	b.n	80073be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800728a:	4b4f      	ldr	r3, [pc, #316]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a4e      	ldr	r2, [pc, #312]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007296:	f7fb f8cb 	bl	8002430 <HAL_GetTick>
 800729a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800729c:	e008      	b.n	80072b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800729e:	f7fb f8c7 	bl	8002430 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e086      	b.n	80073be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072b0:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f0      	bne.n	800729e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80072bc:	4b42      	ldr	r3, [pc, #264]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	051b      	lsls	r3, r3, #20
 80072ca:	493f      	ldr	r1, [pc, #252]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	628b      	str	r3, [r1, #40]	; 0x28
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	3b01      	subs	r3, #1
 80072e0:	025b      	lsls	r3, r3, #9
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	041b      	lsls	r3, r3, #16
 80072ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	061b      	lsls	r3, r3, #24
 80072fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007300:	4931      	ldr	r1, [pc, #196]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007302:	4313      	orrs	r3, r2
 8007304:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007306:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	492d      	ldr	r1, [pc, #180]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007314:	4313      	orrs	r3, r2
 8007316:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007318:	4b2b      	ldr	r3, [pc, #172]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	4928      	ldr	r1, [pc, #160]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007326:	4313      	orrs	r3, r2
 8007328:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800732a:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007336:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800733a:	4b24      	ldr	r3, [pc, #144]	; (80073cc <RCCEx_PLL3_Config+0x160>)
 800733c:	4013      	ands	r3, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	69d2      	ldr	r2, [r2, #28]
 8007342:	00d2      	lsls	r2, r2, #3
 8007344:	4920      	ldr	r1, [pc, #128]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007346:	4313      	orrs	r3, r2
 8007348:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800734a:	4b1f      	ldr	r3, [pc, #124]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800735c:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007368:	e00f      	b.n	800738a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d106      	bne.n	800737e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007370:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007376:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800737a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800737c:	e005      	b.n	800738a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	4a11      	ldr	r2, [pc, #68]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007388:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800738a:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a0e      	ldr	r2, [pc, #56]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 8007390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007396:	f7fb f84b 	bl	8002430 <HAL_GetTick>
 800739a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800739c:	e008      	b.n	80073b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800739e:	f7fb f847 	bl	8002430 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e006      	b.n	80073be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <RCCEx_PLL3_Config+0x15c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f0      	beq.n	800739e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	58024400 	.word	0x58024400
 80073cc:	ffff0007 	.word	0xffff0007

080073d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e049      	b.n	8007476 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fa fbd6 	bl	8001ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f000 fa66 	bl	80078e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d109      	bne.n	80074a4 <HAL_TIM_PWM_Start+0x24>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	e03c      	b.n	800751e <HAL_TIM_PWM_Start+0x9e>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d109      	bne.n	80074be <HAL_TIM_PWM_Start+0x3e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	bf14      	ite	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	2300      	moveq	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e02f      	b.n	800751e <HAL_TIM_PWM_Start+0x9e>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d109      	bne.n	80074d8 <HAL_TIM_PWM_Start+0x58>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	bf14      	ite	ne
 80074d0:	2301      	movne	r3, #1
 80074d2:	2300      	moveq	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	e022      	b.n	800751e <HAL_TIM_PWM_Start+0x9e>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b0c      	cmp	r3, #12
 80074dc:	d109      	bne.n	80074f2 <HAL_TIM_PWM_Start+0x72>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e015      	b.n	800751e <HAL_TIM_PWM_Start+0x9e>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d109      	bne.n	800750c <HAL_TIM_PWM_Start+0x8c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b01      	cmp	r3, #1
 8007502:	bf14      	ite	ne
 8007504:	2301      	movne	r3, #1
 8007506:	2300      	moveq	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	e008      	b.n	800751e <HAL_TIM_PWM_Start+0x9e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	bf14      	ite	ne
 8007518:	2301      	movne	r3, #1
 800751a:	2300      	moveq	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e0ab      	b.n	800767e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <HAL_TIM_PWM_Start+0xb6>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007534:	e023      	b.n	800757e <HAL_TIM_PWM_Start+0xfe>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b04      	cmp	r3, #4
 800753a:	d104      	bne.n	8007546 <HAL_TIM_PWM_Start+0xc6>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007544:	e01b      	b.n	800757e <HAL_TIM_PWM_Start+0xfe>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b08      	cmp	r3, #8
 800754a:	d104      	bne.n	8007556 <HAL_TIM_PWM_Start+0xd6>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007554:	e013      	b.n	800757e <HAL_TIM_PWM_Start+0xfe>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b0c      	cmp	r3, #12
 800755a:	d104      	bne.n	8007566 <HAL_TIM_PWM_Start+0xe6>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007564:	e00b      	b.n	800757e <HAL_TIM_PWM_Start+0xfe>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b10      	cmp	r3, #16
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Start+0xf6>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007574:	e003      	b.n	800757e <HAL_TIM_PWM_Start+0xfe>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2201      	movs	r2, #1
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fd26 	bl	8007fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a3d      	ldr	r2, [pc, #244]	; (8007688 <HAL_TIM_PWM_Start+0x208>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_TIM_PWM_Start+0x13e>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3c      	ldr	r2, [pc, #240]	; (800768c <HAL_TIM_PWM_Start+0x20c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00e      	beq.n	80075be <HAL_TIM_PWM_Start+0x13e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3a      	ldr	r2, [pc, #232]	; (8007690 <HAL_TIM_PWM_Start+0x210>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d009      	beq.n	80075be <HAL_TIM_PWM_Start+0x13e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a39      	ldr	r2, [pc, #228]	; (8007694 <HAL_TIM_PWM_Start+0x214>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_TIM_PWM_Start+0x13e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a37      	ldr	r2, [pc, #220]	; (8007698 <HAL_TIM_PWM_Start+0x218>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_PWM_Start+0x142>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_TIM_PWM_Start+0x144>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2a      	ldr	r2, [pc, #168]	; (8007688 <HAL_TIM_PWM_Start+0x208>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d02c      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ea:	d027      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a2a      	ldr	r2, [pc, #168]	; (800769c <HAL_TIM_PWM_Start+0x21c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d022      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a29      	ldr	r2, [pc, #164]	; (80076a0 <HAL_TIM_PWM_Start+0x220>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d01d      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a27      	ldr	r2, [pc, #156]	; (80076a4 <HAL_TIM_PWM_Start+0x224>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d018      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1f      	ldr	r2, [pc, #124]	; (800768c <HAL_TIM_PWM_Start+0x20c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d013      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <HAL_TIM_PWM_Start+0x228>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00e      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <HAL_TIM_PWM_Start+0x210>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d009      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <HAL_TIM_PWM_Start+0x22c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d004      	beq.n	800763c <HAL_TIM_PWM_Start+0x1bc>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <HAL_TIM_PWM_Start+0x230>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d115      	bne.n	8007668 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <HAL_TIM_PWM_Start+0x234>)
 8007644:	4013      	ands	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b06      	cmp	r3, #6
 800764c:	d015      	beq.n	800767a <HAL_TIM_PWM_Start+0x1fa>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d011      	beq.n	800767a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	e008      	b.n	800767a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e000      	b.n	800767c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	40010000 	.word	0x40010000
 800768c:	40010400 	.word	0x40010400
 8007690:	40014000 	.word	0x40014000
 8007694:	40014400 	.word	0x40014400
 8007698:	40014800 	.word	0x40014800
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40001800 	.word	0x40001800
 80076ac:	4000e000 	.word	0x4000e000
 80076b0:	4000e400 	.word	0x4000e400
 80076b4:	00010007 	.word	0x00010007

080076b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e0ff      	b.n	80078d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b14      	cmp	r3, #20
 80076e2:	f200 80f0 	bhi.w	80078c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007741 	.word	0x08007741
 80076f0:	080078c7 	.word	0x080078c7
 80076f4:	080078c7 	.word	0x080078c7
 80076f8:	080078c7 	.word	0x080078c7
 80076fc:	08007781 	.word	0x08007781
 8007700:	080078c7 	.word	0x080078c7
 8007704:	080078c7 	.word	0x080078c7
 8007708:	080078c7 	.word	0x080078c7
 800770c:	080077c3 	.word	0x080077c3
 8007710:	080078c7 	.word	0x080078c7
 8007714:	080078c7 	.word	0x080078c7
 8007718:	080078c7 	.word	0x080078c7
 800771c:	08007803 	.word	0x08007803
 8007720:	080078c7 	.word	0x080078c7
 8007724:	080078c7 	.word	0x080078c7
 8007728:	080078c7 	.word	0x080078c7
 800772c:	08007845 	.word	0x08007845
 8007730:	080078c7 	.word	0x080078c7
 8007734:	080078c7 	.word	0x080078c7
 8007738:	080078c7 	.word	0x080078c7
 800773c:	08007885 	.word	0x08007885
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f970 	bl	8007a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0208 	orr.w	r2, r2, #8
 800775a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0204 	bic.w	r2, r2, #4
 800776a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6999      	ldr	r1, [r3, #24]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	619a      	str	r2, [r3, #24]
      break;
 800777e:	e0a5      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f9e0 	bl	8007b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6999      	ldr	r1, [r3, #24]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	021a      	lsls	r2, r3, #8
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	619a      	str	r2, [r3, #24]
      break;
 80077c0:	e084      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fa49 	bl	8007c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0208 	orr.w	r2, r2, #8
 80077dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0204 	bic.w	r2, r2, #4
 80077ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69d9      	ldr	r1, [r3, #28]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	61da      	str	r2, [r3, #28]
      break;
 8007800:	e064      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68b9      	ldr	r1, [r7, #8]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fab1 	bl	8007d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800781c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69d9      	ldr	r1, [r3, #28]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	021a      	lsls	r2, r3, #8
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	61da      	str	r2, [r3, #28]
      break;
 8007842:	e043      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fafa 	bl	8007e44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0208 	orr.w	r2, r2, #8
 800785e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0204 	bic.w	r2, r2, #4
 800786e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007882:	e023      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fb3e 	bl	8007f0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800789e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	021a      	lsls	r2, r3, #8
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078c4:	e002      	b.n	80078cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop

080078e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a44      	ldr	r2, [pc, #272]	; (8007a04 <TIM_Base_SetConfig+0x124>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <TIM_Base_SetConfig+0x40>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fe:	d00f      	beq.n	8007920 <TIM_Base_SetConfig+0x40>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a41      	ldr	r2, [pc, #260]	; (8007a08 <TIM_Base_SetConfig+0x128>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00b      	beq.n	8007920 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a40      	ldr	r2, [pc, #256]	; (8007a0c <TIM_Base_SetConfig+0x12c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d007      	beq.n	8007920 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a3f      	ldr	r2, [pc, #252]	; (8007a10 <TIM_Base_SetConfig+0x130>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_Base_SetConfig+0x40>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a3e      	ldr	r2, [pc, #248]	; (8007a14 <TIM_Base_SetConfig+0x134>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d108      	bne.n	8007932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a33      	ldr	r2, [pc, #204]	; (8007a04 <TIM_Base_SetConfig+0x124>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d027      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007940:	d023      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a30      	ldr	r2, [pc, #192]	; (8007a08 <TIM_Base_SetConfig+0x128>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a2f      	ldr	r2, [pc, #188]	; (8007a0c <TIM_Base_SetConfig+0x12c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2e      	ldr	r2, [pc, #184]	; (8007a10 <TIM_Base_SetConfig+0x130>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <TIM_Base_SetConfig+0x134>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <TIM_Base_SetConfig+0x138>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a2b      	ldr	r2, [pc, #172]	; (8007a1c <TIM_Base_SetConfig+0x13c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2a      	ldr	r2, [pc, #168]	; (8007a20 <TIM_Base_SetConfig+0x140>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a29      	ldr	r2, [pc, #164]	; (8007a24 <TIM_Base_SetConfig+0x144>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a28      	ldr	r2, [pc, #160]	; (8007a28 <TIM_Base_SetConfig+0x148>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a10      	ldr	r2, [pc, #64]	; (8007a04 <TIM_Base_SetConfig+0x124>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00f      	beq.n	80079e8 <TIM_Base_SetConfig+0x108>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <TIM_Base_SetConfig+0x134>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00b      	beq.n	80079e8 <TIM_Base_SetConfig+0x108>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <TIM_Base_SetConfig+0x138>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d007      	beq.n	80079e8 <TIM_Base_SetConfig+0x108>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <TIM_Base_SetConfig+0x13c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_Base_SetConfig+0x108>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <TIM_Base_SetConfig+0x140>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d103      	bne.n	80079f0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40010400 	.word	0x40010400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800
 8007a24:	4000e000 	.word	0x4000e000
 8007a28:	4000e400 	.word	0x4000e400

08007a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 0201 	bic.w	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <TIM_OC1_SetConfig+0x108>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 0302 	bic.w	r3, r3, #2
 8007a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a2d      	ldr	r2, [pc, #180]	; (8007b38 <TIM_OC1_SetConfig+0x10c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00f      	beq.n	8007aa8 <TIM_OC1_SetConfig+0x7c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a2c      	ldr	r2, [pc, #176]	; (8007b3c <TIM_OC1_SetConfig+0x110>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00b      	beq.n	8007aa8 <TIM_OC1_SetConfig+0x7c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a2b      	ldr	r2, [pc, #172]	; (8007b40 <TIM_OC1_SetConfig+0x114>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d007      	beq.n	8007aa8 <TIM_OC1_SetConfig+0x7c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <TIM_OC1_SetConfig+0x118>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_OC1_SetConfig+0x7c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <TIM_OC1_SetConfig+0x11c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10c      	bne.n	8007ac2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0308 	bic.w	r3, r3, #8
 8007aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f023 0304 	bic.w	r3, r3, #4
 8007ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1c      	ldr	r2, [pc, #112]	; (8007b38 <TIM_OC1_SetConfig+0x10c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00f      	beq.n	8007aea <TIM_OC1_SetConfig+0xbe>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a1b      	ldr	r2, [pc, #108]	; (8007b3c <TIM_OC1_SetConfig+0x110>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00b      	beq.n	8007aea <TIM_OC1_SetConfig+0xbe>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a1a      	ldr	r2, [pc, #104]	; (8007b40 <TIM_OC1_SetConfig+0x114>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d007      	beq.n	8007aea <TIM_OC1_SetConfig+0xbe>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <TIM_OC1_SetConfig+0x118>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d003      	beq.n	8007aea <TIM_OC1_SetConfig+0xbe>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <TIM_OC1_SetConfig+0x11c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d111      	bne.n	8007b0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	fffeff8f 	.word	0xfffeff8f
 8007b38:	40010000 	.word	0x40010000
 8007b3c:	40010400 	.word	0x40010400
 8007b40:	40014000 	.word	0x40014000
 8007b44:	40014400 	.word	0x40014400
 8007b48:	40014800 	.word	0x40014800

08007b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f023 0210 	bic.w	r2, r3, #16
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4b34      	ldr	r3, [pc, #208]	; (8007c48 <TIM_OC2_SetConfig+0xfc>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0320 	bic.w	r3, r3, #32
 8007b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <TIM_OC2_SetConfig+0x100>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d003      	beq.n	8007bb4 <TIM_OC2_SetConfig+0x68>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a28      	ldr	r2, [pc, #160]	; (8007c50 <TIM_OC2_SetConfig+0x104>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d10d      	bne.n	8007bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a1e      	ldr	r2, [pc, #120]	; (8007c4c <TIM_OC2_SetConfig+0x100>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00f      	beq.n	8007bf8 <TIM_OC2_SetConfig+0xac>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a1d      	ldr	r2, [pc, #116]	; (8007c50 <TIM_OC2_SetConfig+0x104>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <TIM_OC2_SetConfig+0xac>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <TIM_OC2_SetConfig+0x108>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <TIM_OC2_SetConfig+0xac>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <TIM_OC2_SetConfig+0x10c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_OC2_SetConfig+0xac>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <TIM_OC2_SetConfig+0x110>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d113      	bne.n	8007c20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	feff8fff 	.word	0xfeff8fff
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800

08007c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4b33      	ldr	r3, [pc, #204]	; (8007d58 <TIM_OC3_SetConfig+0xf8>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a28      	ldr	r2, [pc, #160]	; (8007d5c <TIM_OC3_SetConfig+0xfc>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d003      	beq.n	8007cc6 <TIM_OC3_SetConfig+0x66>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a27      	ldr	r2, [pc, #156]	; (8007d60 <TIM_OC3_SetConfig+0x100>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d10d      	bne.n	8007ce2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a1d      	ldr	r2, [pc, #116]	; (8007d5c <TIM_OC3_SetConfig+0xfc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00f      	beq.n	8007d0a <TIM_OC3_SetConfig+0xaa>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a1c      	ldr	r2, [pc, #112]	; (8007d60 <TIM_OC3_SetConfig+0x100>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00b      	beq.n	8007d0a <TIM_OC3_SetConfig+0xaa>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a1b      	ldr	r2, [pc, #108]	; (8007d64 <TIM_OC3_SetConfig+0x104>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d007      	beq.n	8007d0a <TIM_OC3_SetConfig+0xaa>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a1a      	ldr	r2, [pc, #104]	; (8007d68 <TIM_OC3_SetConfig+0x108>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d003      	beq.n	8007d0a <TIM_OC3_SetConfig+0xaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <TIM_OC3_SetConfig+0x10c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d113      	bne.n	8007d32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	621a      	str	r2, [r3, #32]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	fffeff8f 	.word	0xfffeff8f
 8007d5c:	40010000 	.word	0x40010000
 8007d60:	40010400 	.word	0x40010400
 8007d64:	40014000 	.word	0x40014000
 8007d68:	40014400 	.word	0x40014400
 8007d6c:	40014800 	.word	0x40014800

08007d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4b24      	ldr	r3, [pc, #144]	; (8007e2c <TIM_OC4_SetConfig+0xbc>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <TIM_OC4_SetConfig+0xc0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00f      	beq.n	8007df0 <TIM_OC4_SetConfig+0x80>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <TIM_OC4_SetConfig+0xc4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <TIM_OC4_SetConfig+0x80>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <TIM_OC4_SetConfig+0xc8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d007      	beq.n	8007df0 <TIM_OC4_SetConfig+0x80>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <TIM_OC4_SetConfig+0xcc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC4_SetConfig+0x80>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <TIM_OC4_SetConfig+0xd0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d109      	bne.n	8007e04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	019b      	lsls	r3, r3, #6
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	feff8fff 	.word	0xfeff8fff
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40014400 	.word	0x40014400
 8007e40:	40014800 	.word	0x40014800

08007e44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4b21      	ldr	r3, [pc, #132]	; (8007ef4 <TIM_OC5_SetConfig+0xb0>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	041b      	lsls	r3, r3, #16
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <TIM_OC5_SetConfig+0xb4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00f      	beq.n	8007eba <TIM_OC5_SetConfig+0x76>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a17      	ldr	r2, [pc, #92]	; (8007efc <TIM_OC5_SetConfig+0xb8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00b      	beq.n	8007eba <TIM_OC5_SetConfig+0x76>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <TIM_OC5_SetConfig+0xbc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d007      	beq.n	8007eba <TIM_OC5_SetConfig+0x76>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <TIM_OC5_SetConfig+0xc0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d003      	beq.n	8007eba <TIM_OC5_SetConfig+0x76>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a14      	ldr	r2, [pc, #80]	; (8007f08 <TIM_OC5_SetConfig+0xc4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d109      	bne.n	8007ece <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	621a      	str	r2, [r3, #32]
}
 8007ee8:	bf00      	nop
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	fffeff8f 	.word	0xfffeff8f
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40010400 	.word	0x40010400
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40014400 	.word	0x40014400
 8007f08:	40014800 	.word	0x40014800

08007f0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4b22      	ldr	r3, [pc, #136]	; (8007fc0 <TIM_OC6_SetConfig+0xb4>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	021b      	lsls	r3, r3, #8
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	051b      	lsls	r3, r3, #20
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <TIM_OC6_SetConfig+0xb8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00f      	beq.n	8007f84 <TIM_OC6_SetConfig+0x78>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <TIM_OC6_SetConfig+0xbc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <TIM_OC6_SetConfig+0x78>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <TIM_OC6_SetConfig+0xc0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_OC6_SetConfig+0x78>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a16      	ldr	r2, [pc, #88]	; (8007fd0 <TIM_OC6_SetConfig+0xc4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_OC6_SetConfig+0x78>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <TIM_OC6_SetConfig+0xc8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d109      	bne.n	8007f98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	029b      	lsls	r3, r3, #10
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	621a      	str	r2, [r3, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	feff8fff 	.word	0xfeff8fff
 8007fc4:	40010000 	.word	0x40010000
 8007fc8:	40010400 	.word	0x40010400
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800

08007fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	2201      	movs	r2, #1
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1a      	ldr	r2, [r3, #32]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	43db      	mvns	r3, r3
 8007ffa:	401a      	ands	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6a1a      	ldr	r2, [r3, #32]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	fa01 f303 	lsl.w	r3, r1, r3
 8008010:	431a      	orrs	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008038:	2302      	movs	r3, #2
 800803a:	e077      	b.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a35      	ldr	r2, [pc, #212]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a34      	ldr	r2, [pc, #208]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d108      	bne.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008088:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a25      	ldr	r2, [pc, #148]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d02c      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ae:	d027      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a22      	ldr	r2, [pc, #136]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d022      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a21      	ldr	r2, [pc, #132]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d01d      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1f      	ldr	r2, [pc, #124]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d018      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1a      	ldr	r2, [pc, #104]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1b      	ldr	r2, [pc, #108]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00e      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1a      	ldr	r2, [pc, #104]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d009      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a18      	ldr	r2, [pc, #96]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10c      	bne.n	800811a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008106:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	4313      	orrs	r3, r2
 8008110:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	40010000 	.word	0x40010000
 800813c:	40010400 	.word	0x40010400
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800
 8008148:	40000c00 	.word	0x40000c00
 800814c:	40001800 	.word	0x40001800
 8008150:	40014000 	.word	0x40014000
 8008154:	4000e000 	.word	0x4000e000
 8008158:	4000e400 	.word	0x4000e400

0800815c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008174:	2302      	movs	r3, #2
 8008176:	e087      	b.n	8008288 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	041b      	lsls	r3, r3, #16
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a27      	ldr	r2, [pc, #156]	; (8008294 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a25      	ldr	r2, [pc, #148]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d106      	bne.n	8008214 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1e      	ldr	r2, [pc, #120]	; (8008294 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d126      	bne.n	8008276 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	051b      	lsls	r3, r3, #20
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a0e      	ldr	r2, [pc, #56]	; (8008294 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a0d      	ldr	r2, [pc, #52]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d106      	bne.n	8008276 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	40010000 	.word	0x40010000
 8008298:	40010400 	.word	0x40010400

0800829c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e042      	b.n	8008334 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d106      	bne.n	80082c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7f9 fccf 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2224      	movs	r2, #36	; 0x24
 80082ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc40 	bl	8008b64 <UART_SetConfig>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e022      	b.n	8008334 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 faa0 	bl	800983c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800830a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800831a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fb27 	bl	8009980 <UART_CheckIdleState>
 8008332:	4603      	mov	r3, r0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	; 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008350:	2b20      	cmp	r3, #32
 8008352:	d142      	bne.n	80083da <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <HAL_UART_Receive_IT+0x24>
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e03b      	b.n	80083dc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_UART_Receive_IT+0x36>
 800836e:	2302      	movs	r3, #2
 8008370:	e034      	b.n	80083dc <HAL_UART_Receive_IT+0xa0>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a17      	ldr	r2, [pc, #92]	; (80083e4 <HAL_UART_Receive_IT+0xa8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01f      	beq.n	80083ca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d018      	beq.n	80083ca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	613b      	str	r3, [r7, #16]
   return(result);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	623b      	str	r3, [r7, #32]
 80083b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	69f9      	ldr	r1, [r7, #28]
 80083bc:	6a3a      	ldr	r2, [r7, #32]
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e6      	bne.n	8008398 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	461a      	mov	r2, r3
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f001 fbe9 	bl	8009ba8 <UART_Start_Receive_IT>
 80083d6:	4603      	mov	r3, r0
 80083d8:	e000      	b.n	80083dc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80083da:	2302      	movs	r3, #2
  }
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3728      	adds	r7, #40	; 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	58000c00 	.word	0x58000c00

080083e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b0ba      	sub	sp, #232	; 0xe8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800840e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008412:	f640 030f 	movw	r3, #2063	; 0x80f
 8008416:	4013      	ands	r3, r2
 8008418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800841c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008420:	2b00      	cmp	r3, #0
 8008422:	d11b      	bne.n	800845c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d015      	beq.n	800845c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d105      	bne.n	8008448 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800843c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 835a 	beq.w	8008b06 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
      }
      return;
 800845a:	e354      	b.n	8008b06 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800845c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 811f 	beq.w	80086a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008466:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800846a:	4b8b      	ldr	r3, [pc, #556]	; (8008698 <HAL_UART_IRQHandler+0x2b0>)
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008476:	4b89      	ldr	r3, [pc, #548]	; (800869c <HAL_UART_IRQHandler+0x2b4>)
 8008478:	4013      	ands	r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8112 	beq.w	80086a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d011      	beq.n	80084b0 <HAL_UART_IRQHandler+0xc8>
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00b      	beq.n	80084b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2201      	movs	r2, #1
 800849e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a6:	f043 0201 	orr.w	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d011      	beq.n	80084e0 <HAL_UART_IRQHandler+0xf8>
 80084bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2202      	movs	r2, #2
 80084ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d6:	f043 0204 	orr.w	r2, r3, #4
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d011      	beq.n	8008510 <HAL_UART_IRQHandler+0x128>
 80084ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2204      	movs	r2, #4
 80084fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008506:	f043 0202 	orr.w	r2, r3, #2
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008520:	f003 0320 	and.w	r3, r3, #32
 8008524:	2b00      	cmp	r3, #0
 8008526:	d105      	bne.n	8008534 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008528:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800852c:	4b5a      	ldr	r3, [pc, #360]	; (8008698 <HAL_UART_IRQHandler+0x2b0>)
 800852e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2208      	movs	r2, #8
 800853a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008542:	f043 0208 	orr.w	r2, r3, #8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008554:	2b00      	cmp	r3, #0
 8008556:	d012      	beq.n	800857e <HAL_UART_IRQHandler+0x196>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800856c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008574:	f043 0220 	orr.w	r2, r3, #32
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 82c0 	beq.w	8008b0a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800858a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d013      	beq.n	80085be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859a:	f003 0320 	and.w	r3, r3, #32
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d2:	2b40      	cmp	r3, #64	; 0x40
 80085d4:	d005      	beq.n	80085e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d04f      	beq.n	8008682 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fc0a 	bl	8009dfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f2:	2b40      	cmp	r3, #64	; 0x40
 80085f4:	d141      	bne.n	800867a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800860c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800862e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800863a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1d9      	bne.n	80085f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d013      	beq.n	8008672 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800864e:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <HAL_UART_IRQHandler+0x2b8>)
 8008650:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008656:	4618      	mov	r0, r3
 8008658:	f7fa fea2 	bl	80033a0 <HAL_DMA_Abort_IT>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d017      	beq.n	8008692 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008670:	e00f      	b.n	8008692 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa60 	bl	8008b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008678:	e00b      	b.n	8008692 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa5c 	bl	8008b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	e007      	b.n	8008692 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa58 	bl	8008b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008690:	e23b      	b.n	8008b0a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008692:	bf00      	nop
    return;
 8008694:	e239      	b.n	8008b0a <HAL_UART_IRQHandler+0x722>
 8008696:	bf00      	nop
 8008698:	10000001 	.word	0x10000001
 800869c:	04000120 	.word	0x04000120
 80086a0:	08009ec9 	.word	0x08009ec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	f040 81ce 	bne.w	8008a4a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 81c7 	beq.w	8008a4a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 81c0 	beq.w	8008a4a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2210      	movs	r2, #16
 80086d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	f040 813b 	bne.w	8008958 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a8b      	ldr	r2, [pc, #556]	; (8008918 <HAL_UART_IRQHandler+0x530>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d059      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a89      	ldr	r2, [pc, #548]	; (800891c <HAL_UART_IRQHandler+0x534>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d053      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a87      	ldr	r2, [pc, #540]	; (8008920 <HAL_UART_IRQHandler+0x538>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d04d      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a85      	ldr	r2, [pc, #532]	; (8008924 <HAL_UART_IRQHandler+0x53c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d047      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a83      	ldr	r2, [pc, #524]	; (8008928 <HAL_UART_IRQHandler+0x540>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d041      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a81      	ldr	r2, [pc, #516]	; (800892c <HAL_UART_IRQHandler+0x544>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d03b      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a7f      	ldr	r2, [pc, #508]	; (8008930 <HAL_UART_IRQHandler+0x548>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d035      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a7d      	ldr	r2, [pc, #500]	; (8008934 <HAL_UART_IRQHandler+0x54c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d02f      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a7b      	ldr	r2, [pc, #492]	; (8008938 <HAL_UART_IRQHandler+0x550>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d029      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a79      	ldr	r2, [pc, #484]	; (800893c <HAL_UART_IRQHandler+0x554>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d023      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a77      	ldr	r2, [pc, #476]	; (8008940 <HAL_UART_IRQHandler+0x558>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01d      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a75      	ldr	r2, [pc, #468]	; (8008944 <HAL_UART_IRQHandler+0x55c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d017      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a73      	ldr	r2, [pc, #460]	; (8008948 <HAL_UART_IRQHandler+0x560>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d011      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a71      	ldr	r2, [pc, #452]	; (800894c <HAL_UART_IRQHandler+0x564>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00b      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a6f      	ldr	r2, [pc, #444]	; (8008950 <HAL_UART_IRQHandler+0x568>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d005      	beq.n	80087a2 <HAL_UART_IRQHandler+0x3ba>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a6d      	ldr	r2, [pc, #436]	; (8008954 <HAL_UART_IRQHandler+0x56c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d105      	bne.n	80087ae <HAL_UART_IRQHandler+0x3c6>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	e004      	b.n	80087b8 <HAL_UART_IRQHandler+0x3d0>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 81a4 	beq.w	8008b0e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087d0:	429a      	cmp	r2, r3
 80087d2:	f080 819c 	bcs.w	8008b0e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80087dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	f000 8086 	beq.w	80088fa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800880a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800881c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008824:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1da      	bne.n	80087ee <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800884a:	f023 0301 	bic.w	r3, r3, #1
 800884e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800885c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008860:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008864:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800886e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e1      	bne.n	8008838 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3308      	adds	r3, #8
 800887a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008898:	66fa      	str	r2, [r7, #108]	; 0x6c
 800889a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800889e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e3      	bne.n	8008874 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ca:	f023 0310 	bic.w	r3, r3, #16
 80088ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80088de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e4      	bne.n	80088ba <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fa fa35 	bl	8002d64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008906:	b29b      	uxth	r3, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	b29b      	uxth	r3, r3
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f91c 	bl	8008b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008914:	e0fb      	b.n	8008b0e <HAL_UART_IRQHandler+0x726>
 8008916:	bf00      	nop
 8008918:	40020010 	.word	0x40020010
 800891c:	40020028 	.word	0x40020028
 8008920:	40020040 	.word	0x40020040
 8008924:	40020058 	.word	0x40020058
 8008928:	40020070 	.word	0x40020070
 800892c:	40020088 	.word	0x40020088
 8008930:	400200a0 	.word	0x400200a0
 8008934:	400200b8 	.word	0x400200b8
 8008938:	40020410 	.word	0x40020410
 800893c:	40020428 	.word	0x40020428
 8008940:	40020440 	.word	0x40020440
 8008944:	40020458 	.word	0x40020458
 8008948:	40020470 	.word	0x40020470
 800894c:	40020488 	.word	0x40020488
 8008950:	400204a0 	.word	0x400204a0
 8008954:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008964:	b29b      	uxth	r3, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80cc 	beq.w	8008b12 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800897a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 80c7 	beq.w	8008b12 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089a6:	647b      	str	r3, [r7, #68]	; 0x44
 80089a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e4      	bne.n	8008984 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	623b      	str	r3, [r7, #32]
   return(result);
 80089ca:	6a3a      	ldr	r2, [r7, #32]
 80089cc:	4b54      	ldr	r3, [pc, #336]	; (8008b20 <HAL_UART_IRQHandler+0x738>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3308      	adds	r3, #8
 80089da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089de:	633a      	str	r2, [r7, #48]	; 0x30
 80089e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e3      	bne.n	80089ba <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0310 	bic.w	r3, r3, #16
 8008a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	69b9      	ldr	r1, [r7, #24]
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	617b      	str	r3, [r7, #20]
   return(result);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f882 	bl	8008b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a48:	e063      	b.n	8008b12 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00e      	beq.n	8008a74 <HAL_UART_IRQHandler+0x68c>
 8008a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fec9 	bl	800a804 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a72:	e051      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d014      	beq.n	8008aaa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d105      	bne.n	8008a98 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d008      	beq.n	8008aaa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d03a      	beq.n	8008b16 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
    }
    return;
 8008aa8:	e035      	b.n	8008b16 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d009      	beq.n	8008aca <HAL_UART_IRQHandler+0x6e2>
 8008ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 fa16 	bl	8009ef4 <UART_EndTransmit_IT>
    return;
 8008ac8:	e026      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <HAL_UART_IRQHandler+0x702>
 8008ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ada:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 fea2 	bl	800a82c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ae8:	e016      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d010      	beq.n	8008b18 <HAL_UART_IRQHandler+0x730>
 8008af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da0c      	bge.n	8008b18 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fe8a 	bl	800a818 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b04:	e008      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
      return;
 8008b06:	bf00      	nop
 8008b08:	e006      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
    return;
 8008b0a:	bf00      	nop
 8008b0c:	e004      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
      return;
 8008b0e:	bf00      	nop
 8008b10:	e002      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
      return;
 8008b12:	bf00      	nop
 8008b14:	e000      	b.n	8008b18 <HAL_UART_IRQHandler+0x730>
    return;
 8008b16:	bf00      	nop
  }
}
 8008b18:	37e8      	adds	r7, #232	; 0xe8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	effffffe 	.word	0xeffffffe

08008b24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b68:	b092      	sub	sp, #72	; 0x48
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	431a      	orrs	r2, r3
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4bbe      	ldr	r3, [pc, #760]	; (8008e8c <UART_SetConfig+0x328>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4ab3      	ldr	r2, [pc, #716]	; (8008e90 <UART_SetConfig+0x32c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d004      	beq.n	8008bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	4baf      	ldr	r3, [pc, #700]	; (8008e94 <UART_SetConfig+0x330>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008be0:	430b      	orrs	r3, r1
 8008be2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	f023 010f 	bic.w	r1, r3, #15
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4aa6      	ldr	r2, [pc, #664]	; (8008e98 <UART_SetConfig+0x334>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d177      	bne.n	8008cf4 <UART_SetConfig+0x190>
 8008c04:	4ba5      	ldr	r3, [pc, #660]	; (8008e9c <UART_SetConfig+0x338>)
 8008c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c0c:	2b28      	cmp	r3, #40	; 0x28
 8008c0e:	d86d      	bhi.n	8008cec <UART_SetConfig+0x188>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <UART_SetConfig+0xb4>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008cbd 	.word	0x08008cbd
 8008c1c:	08008ced 	.word	0x08008ced
 8008c20:	08008ced 	.word	0x08008ced
 8008c24:	08008ced 	.word	0x08008ced
 8008c28:	08008ced 	.word	0x08008ced
 8008c2c:	08008ced 	.word	0x08008ced
 8008c30:	08008ced 	.word	0x08008ced
 8008c34:	08008ced 	.word	0x08008ced
 8008c38:	08008cc5 	.word	0x08008cc5
 8008c3c:	08008ced 	.word	0x08008ced
 8008c40:	08008ced 	.word	0x08008ced
 8008c44:	08008ced 	.word	0x08008ced
 8008c48:	08008ced 	.word	0x08008ced
 8008c4c:	08008ced 	.word	0x08008ced
 8008c50:	08008ced 	.word	0x08008ced
 8008c54:	08008ced 	.word	0x08008ced
 8008c58:	08008ccd 	.word	0x08008ccd
 8008c5c:	08008ced 	.word	0x08008ced
 8008c60:	08008ced 	.word	0x08008ced
 8008c64:	08008ced 	.word	0x08008ced
 8008c68:	08008ced 	.word	0x08008ced
 8008c6c:	08008ced 	.word	0x08008ced
 8008c70:	08008ced 	.word	0x08008ced
 8008c74:	08008ced 	.word	0x08008ced
 8008c78:	08008cd5 	.word	0x08008cd5
 8008c7c:	08008ced 	.word	0x08008ced
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008ced 	.word	0x08008ced
 8008c8c:	08008ced 	.word	0x08008ced
 8008c90:	08008ced 	.word	0x08008ced
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008ced 	.word	0x08008ced
 8008ca0:	08008ced 	.word	0x08008ced
 8008ca4:	08008ced 	.word	0x08008ced
 8008ca8:	08008ced 	.word	0x08008ced
 8008cac:	08008ced 	.word	0x08008ced
 8008cb0:	08008ced 	.word	0x08008ced
 8008cb4:	08008ced 	.word	0x08008ced
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc2:	e326      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e322      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008ccc:	2308      	movs	r3, #8
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e31e      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e31a      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008cdc:	2320      	movs	r3, #32
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e316      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e312      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008cec:	2380      	movs	r3, #128	; 0x80
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf2:	e30e      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a69      	ldr	r2, [pc, #420]	; (8008ea0 <UART_SetConfig+0x33c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d130      	bne.n	8008d60 <UART_SetConfig+0x1fc>
 8008cfe:	4b67      	ldr	r3, [pc, #412]	; (8008e9c <UART_SetConfig+0x338>)
 8008d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	2b05      	cmp	r3, #5
 8008d08:	d826      	bhi.n	8008d58 <UART_SetConfig+0x1f4>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0x1ac>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d29 	.word	0x08008d29
 8008d14:	08008d31 	.word	0x08008d31
 8008d18:	08008d39 	.word	0x08008d39
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2e:	e2f0      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d30:	2304      	movs	r3, #4
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d36:	e2ec      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3e:	e2e8      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d40:	2310      	movs	r3, #16
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d46:	e2e4      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4e:	e2e0      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d50:	2340      	movs	r3, #64	; 0x40
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d56:	e2dc      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5e:	e2d8      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a4f      	ldr	r2, [pc, #316]	; (8008ea4 <UART_SetConfig+0x340>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d130      	bne.n	8008dcc <UART_SetConfig+0x268>
 8008d6a:	4b4c      	ldr	r3, [pc, #304]	; (8008e9c <UART_SetConfig+0x338>)
 8008d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d826      	bhi.n	8008dc4 <UART_SetConfig+0x260>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <UART_SetConfig+0x218>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d95 	.word	0x08008d95
 8008d80:	08008d9d 	.word	0x08008d9d
 8008d84:	08008da5 	.word	0x08008da5
 8008d88:	08008dad 	.word	0x08008dad
 8008d8c:	08008db5 	.word	0x08008db5
 8008d90:	08008dbd 	.word	0x08008dbd
 8008d94:	2300      	movs	r3, #0
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e2ba      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e2b6      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008da4:	2308      	movs	r3, #8
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e2b2      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008dac:	2310      	movs	r3, #16
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e2ae      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008db4:	2320      	movs	r3, #32
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e2aa      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008dbc:	2340      	movs	r3, #64	; 0x40
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e2a6      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008dc4:	2380      	movs	r3, #128	; 0x80
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dca:	e2a2      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a35      	ldr	r2, [pc, #212]	; (8008ea8 <UART_SetConfig+0x344>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d130      	bne.n	8008e38 <UART_SetConfig+0x2d4>
 8008dd6:	4b31      	ldr	r3, [pc, #196]	; (8008e9c <UART_SetConfig+0x338>)
 8008dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dda:	f003 0307 	and.w	r3, r3, #7
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	d826      	bhi.n	8008e30 <UART_SetConfig+0x2cc>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <UART_SetConfig+0x284>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e01 	.word	0x08008e01
 8008dec:	08008e09 	.word	0x08008e09
 8008df0:	08008e11 	.word	0x08008e11
 8008df4:	08008e19 	.word	0x08008e19
 8008df8:	08008e21 	.word	0x08008e21
 8008dfc:	08008e29 	.word	0x08008e29
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e284      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e08:	2304      	movs	r3, #4
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e280      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e10:	2308      	movs	r3, #8
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e27c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e18:	2310      	movs	r3, #16
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1e:	e278      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e20:	2320      	movs	r3, #32
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e26:	e274      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e28:	2340      	movs	r3, #64	; 0x40
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2e:	e270      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e30:	2380      	movs	r3, #128	; 0x80
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e36:	e26c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <UART_SetConfig+0x348>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d142      	bne.n	8008ec8 <UART_SetConfig+0x364>
 8008e42:	4b16      	ldr	r3, [pc, #88]	; (8008e9c <UART_SetConfig+0x338>)
 8008e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	d838      	bhi.n	8008ec0 <UART_SetConfig+0x35c>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <UART_SetConfig+0x2f0>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008e6d 	.word	0x08008e6d
 8008e58:	08008e75 	.word	0x08008e75
 8008e5c:	08008e7d 	.word	0x08008e7d
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008eb1 	.word	0x08008eb1
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e24e      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e74:	2304      	movs	r3, #4
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e24a      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e7c:	2308      	movs	r3, #8
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e246      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e84:	2310      	movs	r3, #16
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e242      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008e8c:	cfff69f3 	.word	0xcfff69f3
 8008e90:	58000c00 	.word	0x58000c00
 8008e94:	11fff4ff 	.word	0x11fff4ff
 8008e98:	40011000 	.word	0x40011000
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	40004400 	.word	0x40004400
 8008ea4:	40004800 	.word	0x40004800
 8008ea8:	40004c00 	.word	0x40004c00
 8008eac:	40005000 	.word	0x40005000
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e22c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ebe:	e228      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008ec0:	2380      	movs	r3, #128	; 0x80
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec6:	e224      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4ab1      	ldr	r2, [pc, #708]	; (8009194 <UART_SetConfig+0x630>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d176      	bne.n	8008fc0 <UART_SetConfig+0x45c>
 8008ed2:	4bb1      	ldr	r3, [pc, #708]	; (8009198 <UART_SetConfig+0x634>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eda:	2b28      	cmp	r3, #40	; 0x28
 8008edc:	d86c      	bhi.n	8008fb8 <UART_SetConfig+0x454>
 8008ede:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <UART_SetConfig+0x380>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008f89 	.word	0x08008f89
 8008ee8:	08008fb9 	.word	0x08008fb9
 8008eec:	08008fb9 	.word	0x08008fb9
 8008ef0:	08008fb9 	.word	0x08008fb9
 8008ef4:	08008fb9 	.word	0x08008fb9
 8008ef8:	08008fb9 	.word	0x08008fb9
 8008efc:	08008fb9 	.word	0x08008fb9
 8008f00:	08008fb9 	.word	0x08008fb9
 8008f04:	08008f91 	.word	0x08008f91
 8008f08:	08008fb9 	.word	0x08008fb9
 8008f0c:	08008fb9 	.word	0x08008fb9
 8008f10:	08008fb9 	.word	0x08008fb9
 8008f14:	08008fb9 	.word	0x08008fb9
 8008f18:	08008fb9 	.word	0x08008fb9
 8008f1c:	08008fb9 	.word	0x08008fb9
 8008f20:	08008fb9 	.word	0x08008fb9
 8008f24:	08008f99 	.word	0x08008f99
 8008f28:	08008fb9 	.word	0x08008fb9
 8008f2c:	08008fb9 	.word	0x08008fb9
 8008f30:	08008fb9 	.word	0x08008fb9
 8008f34:	08008fb9 	.word	0x08008fb9
 8008f38:	08008fb9 	.word	0x08008fb9
 8008f3c:	08008fb9 	.word	0x08008fb9
 8008f40:	08008fb9 	.word	0x08008fb9
 8008f44:	08008fa1 	.word	0x08008fa1
 8008f48:	08008fb9 	.word	0x08008fb9
 8008f4c:	08008fb9 	.word	0x08008fb9
 8008f50:	08008fb9 	.word	0x08008fb9
 8008f54:	08008fb9 	.word	0x08008fb9
 8008f58:	08008fb9 	.word	0x08008fb9
 8008f5c:	08008fb9 	.word	0x08008fb9
 8008f60:	08008fb9 	.word	0x08008fb9
 8008f64:	08008fa9 	.word	0x08008fa9
 8008f68:	08008fb9 	.word	0x08008fb9
 8008f6c:	08008fb9 	.word	0x08008fb9
 8008f70:	08008fb9 	.word	0x08008fb9
 8008f74:	08008fb9 	.word	0x08008fb9
 8008f78:	08008fb9 	.word	0x08008fb9
 8008f7c:	08008fb9 	.word	0x08008fb9
 8008f80:	08008fb9 	.word	0x08008fb9
 8008f84:	08008fb1 	.word	0x08008fb1
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8e:	e1c0      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008f90:	2304      	movs	r3, #4
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f96:	e1bc      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008f98:	2308      	movs	r3, #8
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9e:	e1b8      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008fa0:	2310      	movs	r3, #16
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa6:	e1b4      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008fa8:	2320      	movs	r3, #32
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fae:	e1b0      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008fb0:	2340      	movs	r3, #64	; 0x40
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb6:	e1ac      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008fb8:	2380      	movs	r3, #128	; 0x80
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fbe:	e1a8      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a75      	ldr	r2, [pc, #468]	; (800919c <UART_SetConfig+0x638>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d130      	bne.n	800902c <UART_SetConfig+0x4c8>
 8008fca:	4b73      	ldr	r3, [pc, #460]	; (8009198 <UART_SetConfig+0x634>)
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	d826      	bhi.n	8009024 <UART_SetConfig+0x4c0>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0x478>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08008ff5 	.word	0x08008ff5
 8008fe0:	08008ffd 	.word	0x08008ffd
 8008fe4:	08009005 	.word	0x08009005
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	08009015 	.word	0x08009015
 8008ff0:	0800901d 	.word	0x0800901d
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffa:	e18a      	b.n	8009312 <UART_SetConfig+0x7ae>
 8008ffc:	2304      	movs	r3, #4
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009002:	e186      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009004:	2308      	movs	r3, #8
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900a:	e182      	b.n	8009312 <UART_SetConfig+0x7ae>
 800900c:	2310      	movs	r3, #16
 800900e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009012:	e17e      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009014:	2320      	movs	r3, #32
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901a:	e17a      	b.n	8009312 <UART_SetConfig+0x7ae>
 800901c:	2340      	movs	r3, #64	; 0x40
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009022:	e176      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009024:	2380      	movs	r3, #128	; 0x80
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902a:	e172      	b.n	8009312 <UART_SetConfig+0x7ae>
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a5b      	ldr	r2, [pc, #364]	; (80091a0 <UART_SetConfig+0x63c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d130      	bne.n	8009098 <UART_SetConfig+0x534>
 8009036:	4b58      	ldr	r3, [pc, #352]	; (8009198 <UART_SetConfig+0x634>)
 8009038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	2b05      	cmp	r3, #5
 8009040:	d826      	bhi.n	8009090 <UART_SetConfig+0x52c>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <UART_SetConfig+0x4e4>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	08009061 	.word	0x08009061
 800904c:	08009069 	.word	0x08009069
 8009050:	08009071 	.word	0x08009071
 8009054:	08009079 	.word	0x08009079
 8009058:	08009081 	.word	0x08009081
 800905c:	08009089 	.word	0x08009089
 8009060:	2300      	movs	r3, #0
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009066:	e154      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009068:	2304      	movs	r3, #4
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906e:	e150      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009070:	2308      	movs	r3, #8
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009076:	e14c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009078:	2310      	movs	r3, #16
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907e:	e148      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009080:	2320      	movs	r3, #32
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009086:	e144      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009088:	2340      	movs	r3, #64	; 0x40
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908e:	e140      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009090:	2380      	movs	r3, #128	; 0x80
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e13c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a41      	ldr	r2, [pc, #260]	; (80091a4 <UART_SetConfig+0x640>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	f040 8082 	bne.w	80091a8 <UART_SetConfig+0x644>
 80090a4:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <UART_SetConfig+0x634>)
 80090a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ac:	2b28      	cmp	r3, #40	; 0x28
 80090ae:	d86d      	bhi.n	800918c <UART_SetConfig+0x628>
 80090b0:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <UART_SetConfig+0x554>)
 80090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b6:	bf00      	nop
 80090b8:	0800915d 	.word	0x0800915d
 80090bc:	0800918d 	.word	0x0800918d
 80090c0:	0800918d 	.word	0x0800918d
 80090c4:	0800918d 	.word	0x0800918d
 80090c8:	0800918d 	.word	0x0800918d
 80090cc:	0800918d 	.word	0x0800918d
 80090d0:	0800918d 	.word	0x0800918d
 80090d4:	0800918d 	.word	0x0800918d
 80090d8:	08009165 	.word	0x08009165
 80090dc:	0800918d 	.word	0x0800918d
 80090e0:	0800918d 	.word	0x0800918d
 80090e4:	0800918d 	.word	0x0800918d
 80090e8:	0800918d 	.word	0x0800918d
 80090ec:	0800918d 	.word	0x0800918d
 80090f0:	0800918d 	.word	0x0800918d
 80090f4:	0800918d 	.word	0x0800918d
 80090f8:	0800916d 	.word	0x0800916d
 80090fc:	0800918d 	.word	0x0800918d
 8009100:	0800918d 	.word	0x0800918d
 8009104:	0800918d 	.word	0x0800918d
 8009108:	0800918d 	.word	0x0800918d
 800910c:	0800918d 	.word	0x0800918d
 8009110:	0800918d 	.word	0x0800918d
 8009114:	0800918d 	.word	0x0800918d
 8009118:	08009175 	.word	0x08009175
 800911c:	0800918d 	.word	0x0800918d
 8009120:	0800918d 	.word	0x0800918d
 8009124:	0800918d 	.word	0x0800918d
 8009128:	0800918d 	.word	0x0800918d
 800912c:	0800918d 	.word	0x0800918d
 8009130:	0800918d 	.word	0x0800918d
 8009134:	0800918d 	.word	0x0800918d
 8009138:	0800917d 	.word	0x0800917d
 800913c:	0800918d 	.word	0x0800918d
 8009140:	0800918d 	.word	0x0800918d
 8009144:	0800918d 	.word	0x0800918d
 8009148:	0800918d 	.word	0x0800918d
 800914c:	0800918d 	.word	0x0800918d
 8009150:	0800918d 	.word	0x0800918d
 8009154:	0800918d 	.word	0x0800918d
 8009158:	08009185 	.word	0x08009185
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009162:	e0d6      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009164:	2304      	movs	r3, #4
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916a:	e0d2      	b.n	8009312 <UART_SetConfig+0x7ae>
 800916c:	2308      	movs	r3, #8
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009172:	e0ce      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009174:	2310      	movs	r3, #16
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917a:	e0ca      	b.n	8009312 <UART_SetConfig+0x7ae>
 800917c:	2320      	movs	r3, #32
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009182:	e0c6      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009184:	2340      	movs	r3, #64	; 0x40
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918a:	e0c2      	b.n	8009312 <UART_SetConfig+0x7ae>
 800918c:	2380      	movs	r3, #128	; 0x80
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009192:	e0be      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009194:	40011400 	.word	0x40011400
 8009198:	58024400 	.word	0x58024400
 800919c:	40007800 	.word	0x40007800
 80091a0:	40007c00 	.word	0x40007c00
 80091a4:	40011800 	.word	0x40011800
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4aad      	ldr	r2, [pc, #692]	; (8009464 <UART_SetConfig+0x900>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d176      	bne.n	80092a0 <UART_SetConfig+0x73c>
 80091b2:	4bad      	ldr	r3, [pc, #692]	; (8009468 <UART_SetConfig+0x904>)
 80091b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091ba:	2b28      	cmp	r3, #40	; 0x28
 80091bc:	d86c      	bhi.n	8009298 <UART_SetConfig+0x734>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <UART_SetConfig+0x660>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	08009269 	.word	0x08009269
 80091c8:	08009299 	.word	0x08009299
 80091cc:	08009299 	.word	0x08009299
 80091d0:	08009299 	.word	0x08009299
 80091d4:	08009299 	.word	0x08009299
 80091d8:	08009299 	.word	0x08009299
 80091dc:	08009299 	.word	0x08009299
 80091e0:	08009299 	.word	0x08009299
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009299 	.word	0x08009299
 80091ec:	08009299 	.word	0x08009299
 80091f0:	08009299 	.word	0x08009299
 80091f4:	08009299 	.word	0x08009299
 80091f8:	08009299 	.word	0x08009299
 80091fc:	08009299 	.word	0x08009299
 8009200:	08009299 	.word	0x08009299
 8009204:	08009279 	.word	0x08009279
 8009208:	08009299 	.word	0x08009299
 800920c:	08009299 	.word	0x08009299
 8009210:	08009299 	.word	0x08009299
 8009214:	08009299 	.word	0x08009299
 8009218:	08009299 	.word	0x08009299
 800921c:	08009299 	.word	0x08009299
 8009220:	08009299 	.word	0x08009299
 8009224:	08009281 	.word	0x08009281
 8009228:	08009299 	.word	0x08009299
 800922c:	08009299 	.word	0x08009299
 8009230:	08009299 	.word	0x08009299
 8009234:	08009299 	.word	0x08009299
 8009238:	08009299 	.word	0x08009299
 800923c:	08009299 	.word	0x08009299
 8009240:	08009299 	.word	0x08009299
 8009244:	08009289 	.word	0x08009289
 8009248:	08009299 	.word	0x08009299
 800924c:	08009299 	.word	0x08009299
 8009250:	08009299 	.word	0x08009299
 8009254:	08009299 	.word	0x08009299
 8009258:	08009299 	.word	0x08009299
 800925c:	08009299 	.word	0x08009299
 8009260:	08009299 	.word	0x08009299
 8009264:	08009291 	.word	0x08009291
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926e:	e050      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009270:	2304      	movs	r3, #4
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009276:	e04c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009278:	2308      	movs	r3, #8
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927e:	e048      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009280:	2310      	movs	r3, #16
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009286:	e044      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009288:	2320      	movs	r3, #32
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928e:	e040      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009296:	e03c      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009298:	2380      	movs	r3, #128	; 0x80
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929e:	e038      	b.n	8009312 <UART_SetConfig+0x7ae>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a71      	ldr	r2, [pc, #452]	; (800946c <UART_SetConfig+0x908>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d130      	bne.n	800930c <UART_SetConfig+0x7a8>
 80092aa:	4b6f      	ldr	r3, [pc, #444]	; (8009468 <UART_SetConfig+0x904>)
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d826      	bhi.n	8009304 <UART_SetConfig+0x7a0>
 80092b6:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <UART_SetConfig+0x758>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092d5 	.word	0x080092d5
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	080092e5 	.word	0x080092e5
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092f5 	.word	0x080092f5
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	2302      	movs	r3, #2
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e01a      	b.n	8009312 <UART_SetConfig+0x7ae>
 80092dc:	2304      	movs	r3, #4
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e016      	b.n	8009312 <UART_SetConfig+0x7ae>
 80092e4:	2308      	movs	r3, #8
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ea:	e012      	b.n	8009312 <UART_SetConfig+0x7ae>
 80092ec:	2310      	movs	r3, #16
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f2:	e00e      	b.n	8009312 <UART_SetConfig+0x7ae>
 80092f4:	2320      	movs	r3, #32
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e00a      	b.n	8009312 <UART_SetConfig+0x7ae>
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009302:	e006      	b.n	8009312 <UART_SetConfig+0x7ae>
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930a:	e002      	b.n	8009312 <UART_SetConfig+0x7ae>
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a55      	ldr	r2, [pc, #340]	; (800946c <UART_SetConfig+0x908>)
 8009318:	4293      	cmp	r3, r2
 800931a:	f040 80f8 	bne.w	800950e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800931e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009322:	2b20      	cmp	r3, #32
 8009324:	dc46      	bgt.n	80093b4 <UART_SetConfig+0x850>
 8009326:	2b02      	cmp	r3, #2
 8009328:	db75      	blt.n	8009416 <UART_SetConfig+0x8b2>
 800932a:	3b02      	subs	r3, #2
 800932c:	2b1e      	cmp	r3, #30
 800932e:	d872      	bhi.n	8009416 <UART_SetConfig+0x8b2>
 8009330:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <UART_SetConfig+0x7d4>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	080093bb 	.word	0x080093bb
 800933c:	08009417 	.word	0x08009417
 8009340:	080093c3 	.word	0x080093c3
 8009344:	08009417 	.word	0x08009417
 8009348:	08009417 	.word	0x08009417
 800934c:	08009417 	.word	0x08009417
 8009350:	080093d3 	.word	0x080093d3
 8009354:	08009417 	.word	0x08009417
 8009358:	08009417 	.word	0x08009417
 800935c:	08009417 	.word	0x08009417
 8009360:	08009417 	.word	0x08009417
 8009364:	08009417 	.word	0x08009417
 8009368:	08009417 	.word	0x08009417
 800936c:	08009417 	.word	0x08009417
 8009370:	080093e3 	.word	0x080093e3
 8009374:	08009417 	.word	0x08009417
 8009378:	08009417 	.word	0x08009417
 800937c:	08009417 	.word	0x08009417
 8009380:	08009417 	.word	0x08009417
 8009384:	08009417 	.word	0x08009417
 8009388:	08009417 	.word	0x08009417
 800938c:	08009417 	.word	0x08009417
 8009390:	08009417 	.word	0x08009417
 8009394:	08009417 	.word	0x08009417
 8009398:	08009417 	.word	0x08009417
 800939c:	08009417 	.word	0x08009417
 80093a0:	08009417 	.word	0x08009417
 80093a4:	08009417 	.word	0x08009417
 80093a8:	08009417 	.word	0x08009417
 80093ac:	08009417 	.word	0x08009417
 80093b0:	08009409 	.word	0x08009409
 80093b4:	2b40      	cmp	r3, #64	; 0x40
 80093b6:	d02a      	beq.n	800940e <UART_SetConfig+0x8aa>
 80093b8:	e02d      	b.n	8009416 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093ba:	f7fd fbe7 	bl	8006b8c <HAL_RCCEx_GetD3PCLK1Freq>
 80093be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093c0:	e02f      	b.n	8009422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fd fbf6 	bl	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d0:	e027      	b.n	8009422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093d2:	f107 0318 	add.w	r3, r7, #24
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fd fd42 	bl	8006e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e0:	e01f      	b.n	8009422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093e2:	4b21      	ldr	r3, [pc, #132]	; (8009468 <UART_SetConfig+0x904>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d009      	beq.n	8009402 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ee:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <UART_SetConfig+0x904>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	08db      	lsrs	r3, r3, #3
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	4a1d      	ldr	r2, [pc, #116]	; (8009470 <UART_SetConfig+0x90c>)
 80093fa:	fa22 f303 	lsr.w	r3, r2, r3
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009400:	e00f      	b.n	8009422 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009402:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <UART_SetConfig+0x90c>)
 8009404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009406:	e00c      	b.n	8009422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009408:	4b1a      	ldr	r3, [pc, #104]	; (8009474 <UART_SetConfig+0x910>)
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800940c:	e009      	b.n	8009422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800940e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009414:	e005      	b.n	8009422 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 81ee 	beq.w	8009806 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	4a12      	ldr	r2, [pc, #72]	; (8009478 <UART_SetConfig+0x914>)
 8009430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009434:	461a      	mov	r2, r3
 8009436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009438:	fbb3 f3f2 	udiv	r3, r3, r2
 800943c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	4613      	mov	r3, r2
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	4413      	add	r3, r2
 8009448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800944a:	429a      	cmp	r2, r3
 800944c:	d305      	bcc.n	800945a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009456:	429a      	cmp	r2, r3
 8009458:	d910      	bls.n	800947c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009460:	e1d1      	b.n	8009806 <UART_SetConfig+0xca2>
 8009462:	bf00      	nop
 8009464:	40011c00 	.word	0x40011c00
 8009468:	58024400 	.word	0x58024400
 800946c:	58000c00 	.word	0x58000c00
 8009470:	03d09000 	.word	0x03d09000
 8009474:	003d0900 	.word	0x003d0900
 8009478:	0800d7f8 	.word	0x0800d7f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	2200      	movs	r2, #0
 8009480:	60bb      	str	r3, [r7, #8]
 8009482:	60fa      	str	r2, [r7, #12]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	4ac0      	ldr	r2, [pc, #768]	; (800978c <UART_SetConfig+0xc28>)
 800948a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948e:	b29b      	uxth	r3, r3
 8009490:	2200      	movs	r2, #0
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800949e:	f7f7 f94b 	bl	8000738 <__aeabi_uldivmod>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4610      	mov	r0, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	f04f 0200 	mov.w	r2, #0
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	020b      	lsls	r3, r1, #8
 80094b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094b8:	0202      	lsls	r2, r0, #8
 80094ba:	6979      	ldr	r1, [r7, #20]
 80094bc:	6849      	ldr	r1, [r1, #4]
 80094be:	0849      	lsrs	r1, r1, #1
 80094c0:	2000      	movs	r0, #0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4605      	mov	r5, r0
 80094c6:	eb12 0804 	adds.w	r8, r2, r4
 80094ca:	eb43 0905 	adc.w	r9, r3, r5
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	469a      	mov	sl, r3
 80094d6:	4693      	mov	fp, r2
 80094d8:	4652      	mov	r2, sl
 80094da:	465b      	mov	r3, fp
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f7 f92a 	bl	8000738 <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4613      	mov	r3, r2
 80094ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094f2:	d308      	bcc.n	8009506 <UART_SetConfig+0x9a2>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094fa:	d204      	bcs.n	8009506 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009502:	60da      	str	r2, [r3, #12]
 8009504:	e17f      	b.n	8009806 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800950c:	e17b      	b.n	8009806 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009516:	f040 80bd 	bne.w	8009694 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800951a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800951e:	2b20      	cmp	r3, #32
 8009520:	dc48      	bgt.n	80095b4 <UART_SetConfig+0xa50>
 8009522:	2b00      	cmp	r3, #0
 8009524:	db7b      	blt.n	800961e <UART_SetConfig+0xaba>
 8009526:	2b20      	cmp	r3, #32
 8009528:	d879      	bhi.n	800961e <UART_SetConfig+0xaba>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0x9cc>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	080095bb 	.word	0x080095bb
 8009534:	080095c3 	.word	0x080095c3
 8009538:	0800961f 	.word	0x0800961f
 800953c:	0800961f 	.word	0x0800961f
 8009540:	080095cb 	.word	0x080095cb
 8009544:	0800961f 	.word	0x0800961f
 8009548:	0800961f 	.word	0x0800961f
 800954c:	0800961f 	.word	0x0800961f
 8009550:	080095db 	.word	0x080095db
 8009554:	0800961f 	.word	0x0800961f
 8009558:	0800961f 	.word	0x0800961f
 800955c:	0800961f 	.word	0x0800961f
 8009560:	0800961f 	.word	0x0800961f
 8009564:	0800961f 	.word	0x0800961f
 8009568:	0800961f 	.word	0x0800961f
 800956c:	0800961f 	.word	0x0800961f
 8009570:	080095eb 	.word	0x080095eb
 8009574:	0800961f 	.word	0x0800961f
 8009578:	0800961f 	.word	0x0800961f
 800957c:	0800961f 	.word	0x0800961f
 8009580:	0800961f 	.word	0x0800961f
 8009584:	0800961f 	.word	0x0800961f
 8009588:	0800961f 	.word	0x0800961f
 800958c:	0800961f 	.word	0x0800961f
 8009590:	0800961f 	.word	0x0800961f
 8009594:	0800961f 	.word	0x0800961f
 8009598:	0800961f 	.word	0x0800961f
 800959c:	0800961f 	.word	0x0800961f
 80095a0:	0800961f 	.word	0x0800961f
 80095a4:	0800961f 	.word	0x0800961f
 80095a8:	0800961f 	.word	0x0800961f
 80095ac:	0800961f 	.word	0x0800961f
 80095b0:	08009611 	.word	0x08009611
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d02e      	beq.n	8009616 <UART_SetConfig+0xab2>
 80095b8:	e031      	b.n	800961e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ba:	f7fc fbc1 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 80095be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c0:	e033      	b.n	800962a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c2:	f7fc fbd3 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 80095c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c8:	e02f      	b.n	800962a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd faf2 	bl	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d8:	e027      	b.n	800962a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 0318 	add.w	r3, r7, #24
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fc3e 	bl	8006e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e8:	e01f      	b.n	800962a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ea:	4b69      	ldr	r3, [pc, #420]	; (8009790 <UART_SetConfig+0xc2c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f6:	4b66      	ldr	r3, [pc, #408]	; (8009790 <UART_SetConfig+0xc2c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	4a64      	ldr	r2, [pc, #400]	; (8009794 <UART_SetConfig+0xc30>)
 8009602:	fa22 f303 	lsr.w	r3, r2, r3
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009608:	e00f      	b.n	800962a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800960a:	4b62      	ldr	r3, [pc, #392]	; (8009794 <UART_SetConfig+0xc30>)
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960e:	e00c      	b.n	800962a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009610:	4b61      	ldr	r3, [pc, #388]	; (8009798 <UART_SetConfig+0xc34>)
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009614:	e009      	b.n	800962a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800961c:	e005      	b.n	800962a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800962a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80ea 	beq.w	8009806 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	4a55      	ldr	r2, [pc, #340]	; (800978c <UART_SetConfig+0xc28>)
 8009638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800963c:	461a      	mov	r2, r3
 800963e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009640:	fbb3 f3f2 	udiv	r3, r3, r2
 8009644:	005a      	lsls	r2, r3, #1
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	085b      	lsrs	r3, r3, #1
 800964c:	441a      	add	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d916      	bls.n	800968c <UART_SetConfig+0xb28>
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009664:	d212      	bcs.n	800968c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	b29b      	uxth	r3, r3
 800966a:	f023 030f 	bic.w	r3, r3, #15
 800966e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	b29b      	uxth	r3, r3
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	b29a      	uxth	r2, r3
 800967c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800967e:	4313      	orrs	r3, r2
 8009680:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	e0bc      	b.n	8009806 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009692:	e0b8      	b.n	8009806 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009694:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009698:	2b20      	cmp	r3, #32
 800969a:	dc4b      	bgt.n	8009734 <UART_SetConfig+0xbd0>
 800969c:	2b00      	cmp	r3, #0
 800969e:	f2c0 8087 	blt.w	80097b0 <UART_SetConfig+0xc4c>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	f200 8084 	bhi.w	80097b0 <UART_SetConfig+0xc4c>
 80096a8:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <UART_SetConfig+0xb4c>)
 80096aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ae:	bf00      	nop
 80096b0:	0800973b 	.word	0x0800973b
 80096b4:	08009743 	.word	0x08009743
 80096b8:	080097b1 	.word	0x080097b1
 80096bc:	080097b1 	.word	0x080097b1
 80096c0:	0800974b 	.word	0x0800974b
 80096c4:	080097b1 	.word	0x080097b1
 80096c8:	080097b1 	.word	0x080097b1
 80096cc:	080097b1 	.word	0x080097b1
 80096d0:	0800975b 	.word	0x0800975b
 80096d4:	080097b1 	.word	0x080097b1
 80096d8:	080097b1 	.word	0x080097b1
 80096dc:	080097b1 	.word	0x080097b1
 80096e0:	080097b1 	.word	0x080097b1
 80096e4:	080097b1 	.word	0x080097b1
 80096e8:	080097b1 	.word	0x080097b1
 80096ec:	080097b1 	.word	0x080097b1
 80096f0:	0800976b 	.word	0x0800976b
 80096f4:	080097b1 	.word	0x080097b1
 80096f8:	080097b1 	.word	0x080097b1
 80096fc:	080097b1 	.word	0x080097b1
 8009700:	080097b1 	.word	0x080097b1
 8009704:	080097b1 	.word	0x080097b1
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097b1 	.word	0x080097b1
 8009714:	080097b1 	.word	0x080097b1
 8009718:	080097b1 	.word	0x080097b1
 800971c:	080097b1 	.word	0x080097b1
 8009720:	080097b1 	.word	0x080097b1
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097b1 	.word	0x080097b1
 800972c:	080097b1 	.word	0x080097b1
 8009730:	080097a3 	.word	0x080097a3
 8009734:	2b40      	cmp	r3, #64	; 0x40
 8009736:	d037      	beq.n	80097a8 <UART_SetConfig+0xc44>
 8009738:	e03a      	b.n	80097b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800973a:	f7fc fb01 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 800973e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009740:	e03c      	b.n	80097bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009742:	f7fc fb13 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8009746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009748:	e038      	b.n	80097bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800974e:	4618      	mov	r0, r3
 8009750:	f7fd fa32 	bl	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009758:	e030      	b.n	80097bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800975a:	f107 0318 	add.w	r3, r7, #24
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd fb7e 	bl	8006e60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009768:	e028      	b.n	80097bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <UART_SetConfig+0xc2c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d012      	beq.n	800979c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009776:	4b06      	ldr	r3, [pc, #24]	; (8009790 <UART_SetConfig+0xc2c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	08db      	lsrs	r3, r3, #3
 800977c:	f003 0303 	and.w	r3, r3, #3
 8009780:	4a04      	ldr	r2, [pc, #16]	; (8009794 <UART_SetConfig+0xc30>)
 8009782:	fa22 f303 	lsr.w	r3, r2, r3
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009788:	e018      	b.n	80097bc <UART_SetConfig+0xc58>
 800978a:	bf00      	nop
 800978c:	0800d7f8 	.word	0x0800d7f8
 8009790:	58024400 	.word	0x58024400
 8009794:	03d09000 	.word	0x03d09000
 8009798:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800979c:	4b24      	ldr	r3, [pc, #144]	; (8009830 <UART_SetConfig+0xccc>)
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a0:	e00c      	b.n	80097bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097a2:	4b24      	ldr	r3, [pc, #144]	; (8009834 <UART_SetConfig+0xcd0>)
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a6:	e009      	b.n	80097bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097ae:	e005      	b.n	80097bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80097ba:	bf00      	nop
    }

    if (pclk != 0U)
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d021      	beq.n	8009806 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	4a1c      	ldr	r2, [pc, #112]	; (8009838 <UART_SetConfig+0xcd4>)
 80097c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	441a      	add	r2, r3
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	2b0f      	cmp	r3, #15
 80097ea:	d909      	bls.n	8009800 <UART_SetConfig+0xc9c>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f2:	d205      	bcs.n	8009800 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	e002      	b.n	8009806 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2201      	movs	r2, #1
 800980a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2201      	movs	r2, #1
 8009812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2200      	movs	r2, #0
 800981a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2200      	movs	r2, #0
 8009820:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009822:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009826:	4618      	mov	r0, r3
 8009828:	3748      	adds	r7, #72	; 0x48
 800982a:	46bd      	mov	sp, r7
 800982c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009830:	03d09000 	.word	0x03d09000
 8009834:	003d0900 	.word	0x003d0900
 8009838:	0800d7f8 	.word	0x0800d7f8

0800983c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01a      	beq.n	8009952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800993a:	d10a      	bne.n	8009952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	605a      	str	r2, [r3, #4]
  }
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af02      	add	r7, sp, #8
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009990:	f7f8 fd4e 	bl	8002430 <HAL_GetTick>
 8009994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0308 	and.w	r3, r3, #8
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d10e      	bne.n	80099c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f82f 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e025      	b.n	8009a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d10e      	bne.n	80099ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f819 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e00f      	b.n	8009a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2220      	movs	r2, #32
 80099fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b09c      	sub	sp, #112	; 0x70
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	603b      	str	r3, [r7, #0]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a26:	e0a9      	b.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	f000 80a5 	beq.w	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a32:	f7f8 fcfd 	bl	8002430 <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d302      	bcc.n	8009a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d140      	bne.n	8009aca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	663b      	str	r3, [r7, #96]	; 0x60
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e069      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d051      	beq.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ae6:	d149      	bne.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009af0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
 8009b12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3308      	adds	r3, #8
 8009b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f023 0301 	bic.w	r3, r3, #1
 8009b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3308      	adds	r3, #8
 8009b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b44:	623a      	str	r2, [r7, #32]
 8009b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69f9      	ldr	r1, [r7, #28]
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e5      	bne.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e010      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69da      	ldr	r2, [r3, #28]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4013      	ands	r3, r2
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	bf0c      	ite	eq
 8009b8c:	2301      	moveq	r3, #1
 8009b8e:	2300      	movne	r3, #0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	461a      	mov	r2, r3
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	f43f af46 	beq.w	8009a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3770      	adds	r7, #112	; 0x70
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b0a3      	sub	sp, #140	; 0x8c
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	88fa      	ldrh	r2, [r7, #6]
 8009bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	88fa      	ldrh	r2, [r7, #6]
 8009bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bda:	d10e      	bne.n	8009bfa <UART_Start_Receive_IT+0x52>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d105      	bne.n	8009bf0 <UART_Start_Receive_IT+0x48>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009bee:	e02d      	b.n	8009c4c <UART_Start_Receive_IT+0xa4>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	22ff      	movs	r2, #255	; 0xff
 8009bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009bf8:	e028      	b.n	8009c4c <UART_Start_Receive_IT+0xa4>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10d      	bne.n	8009c1e <UART_Start_Receive_IT+0x76>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <UART_Start_Receive_IT+0x6c>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	22ff      	movs	r2, #255	; 0xff
 8009c0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c12:	e01b      	b.n	8009c4c <UART_Start_Receive_IT+0xa4>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	227f      	movs	r2, #127	; 0x7f
 8009c18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c1c:	e016      	b.n	8009c4c <UART_Start_Receive_IT+0xa4>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c26:	d10d      	bne.n	8009c44 <UART_Start_Receive_IT+0x9c>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d104      	bne.n	8009c3a <UART_Start_Receive_IT+0x92>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	227f      	movs	r2, #127	; 0x7f
 8009c34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c38:	e008      	b.n	8009c4c <UART_Start_Receive_IT+0xa4>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	223f      	movs	r2, #63	; 0x3f
 8009c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c42:	e003      	b.n	8009c4c <UART_Start_Receive_IT+0xa4>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2222      	movs	r2, #34	; 0x22
 8009c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009c80:	673a      	str	r2, [r7, #112]	; 0x70
 8009c82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009c86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e3      	bne.n	8009c5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c9c:	d153      	bne.n	8009d46 <UART_Start_Receive_IT+0x19e>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ca4:	88fa      	ldrh	r2, [r7, #6]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d34d      	bcc.n	8009d46 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb2:	d107      	bne.n	8009cc4 <UART_Start_Receive_IT+0x11c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4a4b      	ldr	r2, [pc, #300]	; (8009dec <UART_Start_Receive_IT+0x244>)
 8009cc0:	671a      	str	r2, [r3, #112]	; 0x70
 8009cc2:	e002      	b.n	8009cca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4a4a      	ldr	r2, [pc, #296]	; (8009df0 <UART_Start_Receive_IT+0x248>)
 8009cc8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d01a      	beq.n	8009d10 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cfe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d04:	e841 2300 	strex	r3, r2, [r1]
 8009d08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e4      	bne.n	8009cda <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3308      	adds	r3, #8
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d30:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e5      	bne.n	8009d10 <UART_Start_Receive_IT+0x168>
 8009d44:	e04a      	b.n	8009ddc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4e:	d107      	bne.n	8009d60 <UART_Start_Receive_IT+0x1b8>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d103      	bne.n	8009d60 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a26      	ldr	r2, [pc, #152]	; (8009df4 <UART_Start_Receive_IT+0x24c>)
 8009d5c:	671a      	str	r2, [r3, #112]	; 0x70
 8009d5e:	e002      	b.n	8009d66 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <UART_Start_Receive_IT+0x250>)
 8009d64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d019      	beq.n	8009daa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	e853 3f00 	ldrex	r3, [r3]
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009d8a:	677b      	str	r3, [r7, #116]	; 0x74
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d94:	637b      	str	r3, [r7, #52]	; 0x34
 8009d96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e6      	bne.n	8009d76 <UART_Start_Receive_IT+0x1ce>
 8009da8:	e018      	b.n	8009ddc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	613b      	str	r3, [r7, #16]
   return(result);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f043 0320 	orr.w	r3, r3, #32
 8009dbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dc8:	623b      	str	r3, [r7, #32]
 8009dca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	69f9      	ldr	r1, [r7, #28]
 8009dce:	6a3a      	ldr	r2, [r7, #32]
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e6      	bne.n	8009daa <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	378c      	adds	r7, #140	; 0x8c
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	0800a505 	.word	0x0800a505
 8009df0:	0800a20d 	.word	0x0800a20d
 8009df4:	0800a0ab 	.word	0x0800a0ab
 8009df8:	08009f4b 	.word	0x08009f4b

08009dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b095      	sub	sp, #84	; 0x54
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e22:	643b      	str	r3, [r7, #64]	; 0x40
 8009e24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e6      	bne.n	8009e04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <UART_EndRxTransfer+0xc8>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3308      	adds	r3, #8
 8009e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e5      	bne.n	8009e36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d118      	bne.n	8009ea4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f023 0310 	bic.w	r3, r3, #16
 8009e86:	647b      	str	r3, [r7, #68]	; 0x44
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6979      	ldr	r1, [r7, #20]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e6      	bne.n	8009e72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009eb8:	bf00      	nop
 8009eba:	3754      	adds	r7, #84	; 0x54
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	effffffe 	.word	0xeffffffe

08009ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7fe fe26 	bl	8008b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	61bb      	str	r3, [r7, #24]
 8009f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6979      	ldr	r1, [r7, #20]
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	613b      	str	r3, [r7, #16]
   return(result);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e6      	bne.n	8009efc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7fe fdf1 	bl	8008b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f42:	bf00      	nop
 8009f44:	3720      	adds	r7, #32
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b096      	sub	sp, #88	; 0x58
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f62:	2b22      	cmp	r3, #34	; 0x22
 8009f64:	f040 8095 	bne.w	800a092 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f72:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009f76:	b2d9      	uxtb	r1, r3
 8009f78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f82:	400a      	ands	r2, r1
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d178      	bne.n	800a0a2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fce:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e6      	bne.n	8009fb0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a002:	633a      	str	r2, [r7, #48]	; 0x30
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e5      	bne.n	8009fe2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2220      	movs	r2, #32
 800a01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d12e      	bne.n	800a08a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0310 	bic.w	r3, r3, #16
 800a046:	64bb      	str	r3, [r7, #72]	; 0x48
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	461a      	mov	r2, r3
 800a04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	69b9      	ldr	r1, [r7, #24]
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	617b      	str	r3, [r7, #20]
   return(result);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e6      	bne.n	800a032 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	f003 0310 	and.w	r3, r3, #16
 800a06e:	2b10      	cmp	r3, #16
 800a070:	d103      	bne.n	800a07a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2210      	movs	r2, #16
 800a078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7fe fd62 	bl	8008b4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a088:	e00b      	b.n	800a0a2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f7 faf6 	bl	800167c <HAL_UART_RxCpltCallback>
}
 800a090:	e007      	b.n	800a0a2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	699a      	ldr	r2, [r3, #24]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f042 0208 	orr.w	r2, r2, #8
 800a0a0:	619a      	str	r2, [r3, #24]
}
 800a0a2:	bf00      	nop
 800a0a4:	3758      	adds	r7, #88	; 0x58
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b096      	sub	sp, #88	; 0x58
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	2b22      	cmp	r3, #34	; 0x22
 800a0c4:	f040 8095 	bne.w	800a1f2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a0d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a0dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ec:	1c9a      	adds	r2, r3, #2
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d178      	bne.n	800a202 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a124:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12e:	643b      	str	r3, [r7, #64]	; 0x40
 800a130:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e6      	bne.n	800a110 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3308      	adds	r3, #8
 800a148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	61fb      	str	r3, [r7, #28]
   return(result);
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	64bb      	str	r3, [r7, #72]	; 0x48
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a162:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e5      	bne.n	800a142 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d12e      	bne.n	800a1ea <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f023 0310 	bic.w	r3, r3, #16
 800a1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	6979      	ldr	r1, [r7, #20]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e6      	bne.n	800a192 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f003 0310 	and.w	r3, r3, #16
 800a1ce:	2b10      	cmp	r3, #16
 800a1d0:	d103      	bne.n	800a1da <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2210      	movs	r2, #16
 800a1d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7fe fcb2 	bl	8008b4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1e8:	e00b      	b.n	800a202 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7f7 fa46 	bl	800167c <HAL_UART_RxCpltCallback>
}
 800a1f0:	e007      	b.n	800a202 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f042 0208 	orr.w	r2, r2, #8
 800a200:	619a      	str	r2, [r3, #24]
}
 800a202:	bf00      	nop
 800a204:	3758      	adds	r7, #88	; 0x58
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b0a6      	sub	sp, #152	; 0x98
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a21a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	2b22      	cmp	r3, #34	; 0x22
 800a244:	f040 814d 	bne.w	800a4e2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a24e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a252:	e0f4      	b.n	800a43e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a25e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a262:	b2d9      	uxtb	r1, r3
 800a264:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26e:	400a      	ands	r2, r1
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a29a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d053      	beq.n	800a34e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d011      	beq.n	800a2d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a2b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2cc:	f043 0201 	orr.w	r2, r3, #1
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d011      	beq.n	800a306 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a2e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2fc:	f043 0204 	orr.w	r2, r3, #4
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d011      	beq.n	800a336 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00b      	beq.n	800a336 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2204      	movs	r2, #4
 800a324:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a32c:	f043 0202 	orr.w	r2, r3, #2
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d006      	beq.n	800a34e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7fe fbf9 	bl	8008b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d171      	bne.n	800a43e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a36a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a36e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a37c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a37e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a38a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e4      	bne.n	800a35a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3a2:	4b56      	ldr	r3, [pc, #344]	; (800a4fc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a3b0:	657a      	str	r2, [r7, #84]	; 0x54
 800a3b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e5      	bne.n	800a390 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d12e      	bne.n	800a438 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	f023 0310 	bic.w	r3, r3, #16
 800a3f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3fe:	643b      	str	r3, [r7, #64]	; 0x40
 800a400:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e6      	bne.n	800a3e0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f003 0310 	and.w	r3, r3, #16
 800a41c:	2b10      	cmp	r3, #16
 800a41e:	d103      	bne.n	800a428 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2210      	movs	r2, #16
 800a426:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7fe fb8b 	bl	8008b4c <HAL_UARTEx_RxEventCallback>
 800a436:	e002      	b.n	800a43e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7f7 f91f 	bl	800167c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a43e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a442:	2b00      	cmp	r3, #0
 800a444:	d006      	beq.n	800a454 <UART_RxISR_8BIT_FIFOEN+0x248>
 800a446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f47f af00 	bne.w	800a254 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a45a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a45e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a462:	2b00      	cmp	r3, #0
 800a464:	d045      	beq.n	800a4f2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a46c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a470:	429a      	cmp	r2, r3
 800a472:	d23e      	bcs.n	800a4f2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	e853 3f00 	ldrex	r3, [r3]
 800a482:	61fb      	str	r3, [r7, #28]
   return(result);
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a48a:	673b      	str	r3, [r7, #112]	; 0x70
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3308      	adds	r3, #8
 800a492:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a494:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a49c:	e841 2300 	strex	r3, r2, [r1]
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e5      	bne.n	800a474 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a15      	ldr	r2, [pc, #84]	; (800a500 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a4ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	e853 3f00 	ldrex	r3, [r3]
 800a4ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f043 0320 	orr.w	r3, r3, #32
 800a4c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4cc:	61bb      	str	r3, [r7, #24]
 800a4ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d0:	6979      	ldr	r1, [r7, #20]
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	e841 2300 	strex	r3, r2, [r1]
 800a4d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1e6      	bne.n	800a4ae <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4e0:	e007      	b.n	800a4f2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699a      	ldr	r2, [r3, #24]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f042 0208 	orr.w	r2, r2, #8
 800a4f0:	619a      	str	r2, [r3, #24]
}
 800a4f2:	bf00      	nop
 800a4f4:	3798      	adds	r7, #152	; 0x98
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	effffffe 	.word	0xeffffffe
 800a500:	08009f4b 	.word	0x08009f4b

0800a504 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b0a8      	sub	sp, #160	; 0xa0
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a512:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53a:	2b22      	cmp	r3, #34	; 0x22
 800a53c:	f040 8151 	bne.w	800a7e2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a546:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a54a:	e0f8      	b.n	800a73e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a55e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a562:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a566:	4013      	ands	r3, r2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a56e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	1c9a      	adds	r2, r3, #2
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a580:	b29b      	uxth	r3, r3
 800a582:	3b01      	subs	r3, #1
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d053      	beq.n	800a64a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d011      	beq.n	800a5d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a5ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00b      	beq.n	800a5d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5c8:	f043 0201 	orr.w	r2, r3, #1
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d011      	beq.n	800a602 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a5de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00b      	beq.n	800a602 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5f8:	f043 0204 	orr.w	r2, r3, #4
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a606:	f003 0304 	and.w	r3, r3, #4
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d011      	beq.n	800a632 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a60e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00b      	beq.n	800a632 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2204      	movs	r2, #4
 800a620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a628:	f043 0202 	orr.w	r2, r3, #2
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7fe fa7b 	bl	8008b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a650:	b29b      	uxth	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d173      	bne.n	800a73e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a66a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a67a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a67e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a680:	e841 2300 	strex	r3, r2, [r1]
 800a684:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e4      	bne.n	800a656 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3308      	adds	r3, #8
 800a692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a696:	e853 3f00 	ldrex	r3, [r3]
 800a69a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a69c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a69e:	4b57      	ldr	r3, [pc, #348]	; (800a7fc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e3      	bne.n	800a68c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d12e      	bne.n	800a738 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	f023 0310 	bic.w	r3, r3, #16
 800a6f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a700:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a706:	e841 2300 	strex	r3, r2, [r1]
 800a70a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1e6      	bne.n	800a6e0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b10      	cmp	r3, #16
 800a71e:	d103      	bne.n	800a728 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2210      	movs	r2, #16
 800a726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7fe fa0b 	bl	8008b4c <HAL_UARTEx_RxEventCallback>
 800a736:	e002      	b.n	800a73e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7f6 ff9f 	bl	800167c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a73e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a742:	2b00      	cmp	r3, #0
 800a744:	d006      	beq.n	800a754 <UART_RxISR_16BIT_FIFOEN+0x250>
 800a746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f47f aefc 	bne.w	800a54c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a75a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a75e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a762:	2b00      	cmp	r3, #0
 800a764:	d045      	beq.n	800a7f2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a76c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a770:	429a      	cmp	r2, r3
 800a772:	d23e      	bcs.n	800a7f2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	623b      	str	r3, [r7, #32]
   return(result);
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a78a:	677b      	str	r3, [r7, #116]	; 0x74
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3308      	adds	r3, #8
 800a792:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a794:	633a      	str	r2, [r7, #48]	; 0x30
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a79a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e5      	bne.n	800a774 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a15      	ldr	r2, [pc, #84]	; (800a800 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a7ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f043 0320 	orr.w	r3, r3, #32
 800a7c2:	673b      	str	r3, [r7, #112]	; 0x70
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	69b9      	ldr	r1, [r7, #24]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e6      	bne.n	800a7ae <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7e0:	e007      	b.n	800a7f2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	699a      	ldr	r2, [r3, #24]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f042 0208 	orr.w	r2, r2, #8
 800a7f0:	619a      	str	r2, [r3, #24]
}
 800a7f2:	bf00      	nop
 800a7f4:	37a0      	adds	r7, #160	; 0xa0
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	effffffe 	.word	0xeffffffe
 800a800:	0800a0ab 	.word	0x0800a0ab

0800a804 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <HAL_UARTEx_DisableFifoMode+0x16>
 800a852:	2302      	movs	r3, #2
 800a854:	e027      	b.n	800a8a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2224      	movs	r2, #36	; 0x24
 800a862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a884:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2220      	movs	r2, #32
 800a898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e02d      	b.n	800a926 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2224      	movs	r2, #36	; 0x24
 800a8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0201 	bic.w	r2, r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f850 	bl	800a9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a942:	2302      	movs	r3, #2
 800a944:	e02d      	b.n	800a9a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2224      	movs	r2, #36	; 0x24
 800a952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0201 	bic.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f812 	bl	800a9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2220      	movs	r2, #32
 800a994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d108      	bne.n	800a9ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9cc:	e031      	b.n	800aa32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9ce:	2310      	movs	r3, #16
 800a9d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9d2:	2310      	movs	r3, #16
 800a9d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	0e5b      	lsrs	r3, r3, #25
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0307 	and.w	r3, r3, #7
 800a9e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	0f5b      	lsrs	r3, r3, #29
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	7b3a      	ldrb	r2, [r7, #12]
 800a9fa:	4911      	ldr	r1, [pc, #68]	; (800aa40 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fc:	5c8a      	ldrb	r2, [r1, r2]
 800a9fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa02:	7b3a      	ldrb	r2, [r7, #12]
 800aa04:	490f      	ldr	r1, [pc, #60]	; (800aa44 <UARTEx_SetNbDataToProcess+0x98>)
 800aa06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa08:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	7b7a      	ldrb	r2, [r7, #13]
 800aa18:	4909      	ldr	r1, [pc, #36]	; (800aa40 <UARTEx_SetNbDataToProcess+0x94>)
 800aa1a:	5c8a      	ldrb	r2, [r1, r2]
 800aa1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa20:	7b7a      	ldrb	r2, [r7, #13]
 800aa22:	4908      	ldr	r1, [pc, #32]	; (800aa44 <UARTEx_SetNbDataToProcess+0x98>)
 800aa24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa26:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa32:	bf00      	nop
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	0800d810 	.word	0x0800d810
 800aa44:	0800d818 	.word	0x0800d818

0800aa48 <atof>:
 800aa48:	2100      	movs	r1, #0
 800aa4a:	f000 be03 	b.w	800b654 <strtod>
	...

0800aa50 <__errno>:
 800aa50:	4b01      	ldr	r3, [pc, #4]	; (800aa58 <__errno+0x8>)
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	24000014 	.word	0x24000014

0800aa5c <__libc_init_array>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4d0d      	ldr	r5, [pc, #52]	; (800aa94 <__libc_init_array+0x38>)
 800aa60:	4c0d      	ldr	r4, [pc, #52]	; (800aa98 <__libc_init_array+0x3c>)
 800aa62:	1b64      	subs	r4, r4, r5
 800aa64:	10a4      	asrs	r4, r4, #2
 800aa66:	2600      	movs	r6, #0
 800aa68:	42a6      	cmp	r6, r4
 800aa6a:	d109      	bne.n	800aa80 <__libc_init_array+0x24>
 800aa6c:	4d0b      	ldr	r5, [pc, #44]	; (800aa9c <__libc_init_array+0x40>)
 800aa6e:	4c0c      	ldr	r4, [pc, #48]	; (800aaa0 <__libc_init_array+0x44>)
 800aa70:	f002 fe86 	bl	800d780 <_init>
 800aa74:	1b64      	subs	r4, r4, r5
 800aa76:	10a4      	asrs	r4, r4, #2
 800aa78:	2600      	movs	r6, #0
 800aa7a:	42a6      	cmp	r6, r4
 800aa7c:	d105      	bne.n	800aa8a <__libc_init_array+0x2e>
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa84:	4798      	blx	r3
 800aa86:	3601      	adds	r6, #1
 800aa88:	e7ee      	b.n	800aa68 <__libc_init_array+0xc>
 800aa8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa8e:	4798      	blx	r3
 800aa90:	3601      	adds	r6, #1
 800aa92:	e7f2      	b.n	800aa7a <__libc_init_array+0x1e>
 800aa94:	0800dc54 	.word	0x0800dc54
 800aa98:	0800dc54 	.word	0x0800dc54
 800aa9c:	0800dc54 	.word	0x0800dc54
 800aaa0:	0800dc58 	.word	0x0800dc58

0800aaa4 <memset>:
 800aaa4:	4402      	add	r2, r0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d100      	bne.n	800aaae <memset+0xa>
 800aaac:	4770      	bx	lr
 800aaae:	f803 1b01 	strb.w	r1, [r3], #1
 800aab2:	e7f9      	b.n	800aaa8 <memset+0x4>

0800aab4 <sulp>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	4616      	mov	r6, r2
 800aabc:	ec45 4b10 	vmov	d0, r4, r5
 800aac0:	f001 fcd6 	bl	800c470 <__ulp>
 800aac4:	b17e      	cbz	r6, 800aae6 <sulp+0x32>
 800aac6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aace:	2b00      	cmp	r3, #0
 800aad0:	dd09      	ble.n	800aae6 <sulp+0x32>
 800aad2:	051b      	lsls	r3, r3, #20
 800aad4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800aad8:	2000      	movs	r0, #0
 800aada:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800aade:	ec41 0b17 	vmov	d7, r0, r1
 800aae2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aae6:	bd70      	pop	{r4, r5, r6, pc}

0800aae8 <_strtod_l>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	ed2d 8b0e 	vpush	{d8-d14}
 800aaf0:	b097      	sub	sp, #92	; 0x5c
 800aaf2:	461f      	mov	r7, r3
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9312      	str	r3, [sp, #72]	; 0x48
 800aaf8:	4ba1      	ldr	r3, [pc, #644]	; (800ad80 <_strtod_l+0x298>)
 800aafa:	920d      	str	r2, [sp, #52]	; 0x34
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	4604      	mov	r4, r0
 800ab02:	4618      	mov	r0, r3
 800ab04:	468b      	mov	fp, r1
 800ab06:	f7f5 fc03 	bl	8000310 <strlen>
 800ab0a:	f04f 0800 	mov.w	r8, #0
 800ab0e:	4605      	mov	r5, r0
 800ab10:	f04f 0900 	mov.w	r9, #0
 800ab14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ab18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab1a:	7813      	ldrb	r3, [r2, #0]
 800ab1c:	2b2b      	cmp	r3, #43	; 0x2b
 800ab1e:	d04d      	beq.n	800abbc <_strtod_l+0xd4>
 800ab20:	d83a      	bhi.n	800ab98 <_strtod_l+0xb0>
 800ab22:	2b0d      	cmp	r3, #13
 800ab24:	d833      	bhi.n	800ab8e <_strtod_l+0xa6>
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d833      	bhi.n	800ab92 <_strtod_l+0xaa>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d03d      	beq.n	800abaa <_strtod_l+0xc2>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9308      	str	r3, [sp, #32]
 800ab32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ab34:	7833      	ldrb	r3, [r6, #0]
 800ab36:	2b30      	cmp	r3, #48	; 0x30
 800ab38:	f040 80b0 	bne.w	800ac9c <_strtod_l+0x1b4>
 800ab3c:	7873      	ldrb	r3, [r6, #1]
 800ab3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab42:	2b58      	cmp	r3, #88	; 0x58
 800ab44:	d167      	bne.n	800ac16 <_strtod_l+0x12e>
 800ab46:	9b08      	ldr	r3, [sp, #32]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	ab12      	add	r3, sp, #72	; 0x48
 800ab4c:	9702      	str	r7, [sp, #8]
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	4a8c      	ldr	r2, [pc, #560]	; (800ad84 <_strtod_l+0x29c>)
 800ab52:	ab13      	add	r3, sp, #76	; 0x4c
 800ab54:	a911      	add	r1, sp, #68	; 0x44
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fdf0 	bl	800b73c <__gethex>
 800ab5c:	f010 0507 	ands.w	r5, r0, #7
 800ab60:	4607      	mov	r7, r0
 800ab62:	d005      	beq.n	800ab70 <_strtod_l+0x88>
 800ab64:	2d06      	cmp	r5, #6
 800ab66:	d12b      	bne.n	800abc0 <_strtod_l+0xd8>
 800ab68:	3601      	adds	r6, #1
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9611      	str	r6, [sp, #68]	; 0x44
 800ab6e:	9308      	str	r3, [sp, #32]
 800ab70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f040 854e 	bne.w	800b614 <_strtod_l+0xb2c>
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	b1e3      	cbz	r3, 800abb6 <_strtod_l+0xce>
 800ab7c:	ec49 8b17 	vmov	d7, r8, r9
 800ab80:	eeb1 0b47 	vneg.f64	d0, d7
 800ab84:	b017      	add	sp, #92	; 0x5c
 800ab86:	ecbd 8b0e 	vpop	{d8-d14}
 800ab8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d1cd      	bne.n	800ab2e <_strtod_l+0x46>
 800ab92:	3201      	adds	r2, #1
 800ab94:	9211      	str	r2, [sp, #68]	; 0x44
 800ab96:	e7bf      	b.n	800ab18 <_strtod_l+0x30>
 800ab98:	2b2d      	cmp	r3, #45	; 0x2d
 800ab9a:	d1c8      	bne.n	800ab2e <_strtod_l+0x46>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	9308      	str	r3, [sp, #32]
 800aba0:	1c53      	adds	r3, r2, #1
 800aba2:	9311      	str	r3, [sp, #68]	; 0x44
 800aba4:	7853      	ldrb	r3, [r2, #1]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1c3      	bne.n	800ab32 <_strtod_l+0x4a>
 800abaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 852d 	bne.w	800b610 <_strtod_l+0xb28>
 800abb6:	ec49 8b10 	vmov	d0, r8, r9
 800abba:	e7e3      	b.n	800ab84 <_strtod_l+0x9c>
 800abbc:	2300      	movs	r3, #0
 800abbe:	e7ee      	b.n	800ab9e <_strtod_l+0xb6>
 800abc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abc2:	b13a      	cbz	r2, 800abd4 <_strtod_l+0xec>
 800abc4:	2135      	movs	r1, #53	; 0x35
 800abc6:	a814      	add	r0, sp, #80	; 0x50
 800abc8:	f001 fd5a 	bl	800c680 <__copybits>
 800abcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800abce:	4620      	mov	r0, r4
 800abd0:	f001 f91c 	bl	800be0c <_Bfree>
 800abd4:	3d01      	subs	r5, #1
 800abd6:	2d04      	cmp	r5, #4
 800abd8:	d806      	bhi.n	800abe8 <_strtod_l+0x100>
 800abda:	e8df f005 	tbb	[pc, r5]
 800abde:	030a      	.short	0x030a
 800abe0:	1714      	.short	0x1714
 800abe2:	0a          	.byte	0x0a
 800abe3:	00          	.byte	0x00
 800abe4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800abe8:	073f      	lsls	r7, r7, #28
 800abea:	d5c1      	bpl.n	800ab70 <_strtod_l+0x88>
 800abec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800abf0:	e7be      	b.n	800ab70 <_strtod_l+0x88>
 800abf2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800abf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abfc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ac04:	e7f0      	b.n	800abe8 <_strtod_l+0x100>
 800ac06:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800ad88 <_strtod_l+0x2a0>
 800ac0a:	e7ed      	b.n	800abe8 <_strtod_l+0x100>
 800ac0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ac10:	f04f 38ff 	mov.w	r8, #4294967295
 800ac14:	e7e8      	b.n	800abe8 <_strtod_l+0x100>
 800ac16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	9211      	str	r2, [sp, #68]	; 0x44
 800ac1c:	785b      	ldrb	r3, [r3, #1]
 800ac1e:	2b30      	cmp	r3, #48	; 0x30
 800ac20:	d0f9      	beq.n	800ac16 <_strtod_l+0x12e>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0a4      	beq.n	800ab70 <_strtod_l+0x88>
 800ac26:	2301      	movs	r3, #1
 800ac28:	f04f 0a00 	mov.w	sl, #0
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac30:	930a      	str	r3, [sp, #40]	; 0x28
 800ac32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ac36:	f8cd a018 	str.w	sl, [sp, #24]
 800ac3a:	220a      	movs	r2, #10
 800ac3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ac3e:	7807      	ldrb	r7, [r0, #0]
 800ac40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ac44:	b2d9      	uxtb	r1, r3
 800ac46:	2909      	cmp	r1, #9
 800ac48:	d92a      	bls.n	800aca0 <_strtod_l+0x1b8>
 800ac4a:	9907      	ldr	r1, [sp, #28]
 800ac4c:	462a      	mov	r2, r5
 800ac4e:	f001 fe1f 	bl	800c890 <strncmp>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d033      	beq.n	800acbe <_strtod_l+0x1d6>
 800ac56:	2000      	movs	r0, #0
 800ac58:	9b06      	ldr	r3, [sp, #24]
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	4607      	mov	r7, r0
 800ac60:	2a65      	cmp	r2, #101	; 0x65
 800ac62:	d001      	beq.n	800ac68 <_strtod_l+0x180>
 800ac64:	2a45      	cmp	r2, #69	; 0x45
 800ac66:	d117      	bne.n	800ac98 <_strtod_l+0x1b0>
 800ac68:	b91b      	cbnz	r3, 800ac72 <_strtod_l+0x18a>
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	4303      	orrs	r3, r0
 800ac6e:	d09c      	beq.n	800abaa <_strtod_l+0xc2>
 800ac70:	2300      	movs	r3, #0
 800ac72:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800ac76:	f10b 0201 	add.w	r2, fp, #1
 800ac7a:	9211      	str	r2, [sp, #68]	; 0x44
 800ac7c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800ac80:	2a2b      	cmp	r2, #43	; 0x2b
 800ac82:	d071      	beq.n	800ad68 <_strtod_l+0x280>
 800ac84:	2a2d      	cmp	r2, #45	; 0x2d
 800ac86:	d077      	beq.n	800ad78 <_strtod_l+0x290>
 800ac88:	f04f 0e00 	mov.w	lr, #0
 800ac8c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ac90:	2d09      	cmp	r5, #9
 800ac92:	d97f      	bls.n	800ad94 <_strtod_l+0x2ac>
 800ac94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ac98:	2500      	movs	r5, #0
 800ac9a:	e09b      	b.n	800add4 <_strtod_l+0x2ec>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e7c3      	b.n	800ac28 <_strtod_l+0x140>
 800aca0:	9906      	ldr	r1, [sp, #24]
 800aca2:	2908      	cmp	r1, #8
 800aca4:	bfdd      	ittte	le
 800aca6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800aca8:	fb02 3301 	mlale	r3, r2, r1, r3
 800acac:	9309      	strle	r3, [sp, #36]	; 0x24
 800acae:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	3001      	adds	r0, #1
 800acb6:	3301      	adds	r3, #1
 800acb8:	9306      	str	r3, [sp, #24]
 800acba:	9011      	str	r0, [sp, #68]	; 0x44
 800acbc:	e7be      	b.n	800ac3c <_strtod_l+0x154>
 800acbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acc0:	195a      	adds	r2, r3, r5
 800acc2:	9211      	str	r2, [sp, #68]	; 0x44
 800acc4:	5d5a      	ldrb	r2, [r3, r5]
 800acc6:	9b06      	ldr	r3, [sp, #24]
 800acc8:	b3a3      	cbz	r3, 800ad34 <_strtod_l+0x24c>
 800acca:	4607      	mov	r7, r0
 800accc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800acd0:	2909      	cmp	r1, #9
 800acd2:	d912      	bls.n	800acfa <_strtod_l+0x212>
 800acd4:	2101      	movs	r1, #1
 800acd6:	e7c3      	b.n	800ac60 <_strtod_l+0x178>
 800acd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	9211      	str	r2, [sp, #68]	; 0x44
 800acde:	785a      	ldrb	r2, [r3, #1]
 800ace0:	3001      	adds	r0, #1
 800ace2:	2a30      	cmp	r2, #48	; 0x30
 800ace4:	d0f8      	beq.n	800acd8 <_strtod_l+0x1f0>
 800ace6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800acea:	2b08      	cmp	r3, #8
 800acec:	f200 8497 	bhi.w	800b61e <_strtod_l+0xb36>
 800acf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acf2:	930a      	str	r3, [sp, #40]	; 0x28
 800acf4:	4607      	mov	r7, r0
 800acf6:	2000      	movs	r0, #0
 800acf8:	4603      	mov	r3, r0
 800acfa:	3a30      	subs	r2, #48	; 0x30
 800acfc:	f100 0101 	add.w	r1, r0, #1
 800ad00:	d012      	beq.n	800ad28 <_strtod_l+0x240>
 800ad02:	440f      	add	r7, r1
 800ad04:	eb00 0c03 	add.w	ip, r0, r3
 800ad08:	4619      	mov	r1, r3
 800ad0a:	250a      	movs	r5, #10
 800ad0c:	4561      	cmp	r1, ip
 800ad0e:	d113      	bne.n	800ad38 <_strtod_l+0x250>
 800ad10:	1819      	adds	r1, r3, r0
 800ad12:	2908      	cmp	r1, #8
 800ad14:	f103 0301 	add.w	r3, r3, #1
 800ad18:	4403      	add	r3, r0
 800ad1a:	dc1c      	bgt.n	800ad56 <_strtod_l+0x26e>
 800ad1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad1e:	210a      	movs	r1, #10
 800ad20:	fb01 2200 	mla	r2, r1, r0, r2
 800ad24:	9209      	str	r2, [sp, #36]	; 0x24
 800ad26:	2100      	movs	r1, #0
 800ad28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad2a:	1c50      	adds	r0, r2, #1
 800ad2c:	9011      	str	r0, [sp, #68]	; 0x44
 800ad2e:	7852      	ldrb	r2, [r2, #1]
 800ad30:	4608      	mov	r0, r1
 800ad32:	e7cb      	b.n	800accc <_strtod_l+0x1e4>
 800ad34:	9806      	ldr	r0, [sp, #24]
 800ad36:	e7d4      	b.n	800ace2 <_strtod_l+0x1fa>
 800ad38:	2908      	cmp	r1, #8
 800ad3a:	dc04      	bgt.n	800ad46 <_strtod_l+0x25e>
 800ad3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ad3e:	436e      	muls	r6, r5
 800ad40:	9609      	str	r6, [sp, #36]	; 0x24
 800ad42:	3101      	adds	r1, #1
 800ad44:	e7e2      	b.n	800ad0c <_strtod_l+0x224>
 800ad46:	f101 0e01 	add.w	lr, r1, #1
 800ad4a:	f1be 0f10 	cmp.w	lr, #16
 800ad4e:	bfd8      	it	le
 800ad50:	fb05 fa0a 	mulle.w	sl, r5, sl
 800ad54:	e7f5      	b.n	800ad42 <_strtod_l+0x25a>
 800ad56:	2b10      	cmp	r3, #16
 800ad58:	bfdc      	itt	le
 800ad5a:	210a      	movle	r1, #10
 800ad5c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800ad60:	e7e1      	b.n	800ad26 <_strtod_l+0x23e>
 800ad62:	2700      	movs	r7, #0
 800ad64:	2101      	movs	r1, #1
 800ad66:	e780      	b.n	800ac6a <_strtod_l+0x182>
 800ad68:	f04f 0e00 	mov.w	lr, #0
 800ad6c:	f10b 0202 	add.w	r2, fp, #2
 800ad70:	9211      	str	r2, [sp, #68]	; 0x44
 800ad72:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800ad76:	e789      	b.n	800ac8c <_strtod_l+0x1a4>
 800ad78:	f04f 0e01 	mov.w	lr, #1
 800ad7c:	e7f6      	b.n	800ad6c <_strtod_l+0x284>
 800ad7e:	bf00      	nop
 800ad80:	0800d8f8 	.word	0x0800d8f8
 800ad84:	0800d830 	.word	0x0800d830
 800ad88:	7ff00000 	.word	0x7ff00000
 800ad8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad8e:	1c55      	adds	r5, r2, #1
 800ad90:	9511      	str	r5, [sp, #68]	; 0x44
 800ad92:	7852      	ldrb	r2, [r2, #1]
 800ad94:	2a30      	cmp	r2, #48	; 0x30
 800ad96:	d0f9      	beq.n	800ad8c <_strtod_l+0x2a4>
 800ad98:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ad9c:	2d08      	cmp	r5, #8
 800ad9e:	f63f af7b 	bhi.w	800ac98 <_strtod_l+0x1b0>
 800ada2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ada6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ada8:	9207      	str	r2, [sp, #28]
 800adaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800adac:	1c55      	adds	r5, r2, #1
 800adae:	9511      	str	r5, [sp, #68]	; 0x44
 800adb0:	7852      	ldrb	r2, [r2, #1]
 800adb2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800adb6:	2e09      	cmp	r6, #9
 800adb8:	d937      	bls.n	800ae2a <_strtod_l+0x342>
 800adba:	9e07      	ldr	r6, [sp, #28]
 800adbc:	1bad      	subs	r5, r5, r6
 800adbe:	2d08      	cmp	r5, #8
 800adc0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800adc4:	dc02      	bgt.n	800adcc <_strtod_l+0x2e4>
 800adc6:	4565      	cmp	r5, ip
 800adc8:	bfa8      	it	ge
 800adca:	4665      	movge	r5, ip
 800adcc:	f1be 0f00 	cmp.w	lr, #0
 800add0:	d000      	beq.n	800add4 <_strtod_l+0x2ec>
 800add2:	426d      	negs	r5, r5
 800add4:	2b00      	cmp	r3, #0
 800add6:	d14d      	bne.n	800ae74 <_strtod_l+0x38c>
 800add8:	9b04      	ldr	r3, [sp, #16]
 800adda:	4303      	orrs	r3, r0
 800addc:	f47f aec8 	bne.w	800ab70 <_strtod_l+0x88>
 800ade0:	2900      	cmp	r1, #0
 800ade2:	f47f aee2 	bne.w	800abaa <_strtod_l+0xc2>
 800ade6:	2a69      	cmp	r2, #105	; 0x69
 800ade8:	d027      	beq.n	800ae3a <_strtod_l+0x352>
 800adea:	dc24      	bgt.n	800ae36 <_strtod_l+0x34e>
 800adec:	2a49      	cmp	r2, #73	; 0x49
 800adee:	d024      	beq.n	800ae3a <_strtod_l+0x352>
 800adf0:	2a4e      	cmp	r2, #78	; 0x4e
 800adf2:	f47f aeda 	bne.w	800abaa <_strtod_l+0xc2>
 800adf6:	4996      	ldr	r1, [pc, #600]	; (800b050 <_strtod_l+0x568>)
 800adf8:	a811      	add	r0, sp, #68	; 0x44
 800adfa:	f000 fef7 	bl	800bbec <__match>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f aed3 	beq.w	800abaa <_strtod_l+0xc2>
 800ae04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b28      	cmp	r3, #40	; 0x28
 800ae0a:	d12d      	bne.n	800ae68 <_strtod_l+0x380>
 800ae0c:	4991      	ldr	r1, [pc, #580]	; (800b054 <_strtod_l+0x56c>)
 800ae0e:	aa14      	add	r2, sp, #80	; 0x50
 800ae10:	a811      	add	r0, sp, #68	; 0x44
 800ae12:	f000 feff 	bl	800bc14 <__hexnan>
 800ae16:	2805      	cmp	r0, #5
 800ae18:	d126      	bne.n	800ae68 <_strtod_l+0x380>
 800ae1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ae20:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ae24:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ae28:	e6a2      	b.n	800ab70 <_strtod_l+0x88>
 800ae2a:	250a      	movs	r5, #10
 800ae2c:	fb05 250c 	mla	r5, r5, ip, r2
 800ae30:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800ae34:	e7b9      	b.n	800adaa <_strtod_l+0x2c2>
 800ae36:	2a6e      	cmp	r2, #110	; 0x6e
 800ae38:	e7db      	b.n	800adf2 <_strtod_l+0x30a>
 800ae3a:	4987      	ldr	r1, [pc, #540]	; (800b058 <_strtod_l+0x570>)
 800ae3c:	a811      	add	r0, sp, #68	; 0x44
 800ae3e:	f000 fed5 	bl	800bbec <__match>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	f43f aeb1 	beq.w	800abaa <_strtod_l+0xc2>
 800ae48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae4a:	4984      	ldr	r1, [pc, #528]	; (800b05c <_strtod_l+0x574>)
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	a811      	add	r0, sp, #68	; 0x44
 800ae50:	9311      	str	r3, [sp, #68]	; 0x44
 800ae52:	f000 fecb 	bl	800bbec <__match>
 800ae56:	b910      	cbnz	r0, 800ae5e <_strtod_l+0x376>
 800ae58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	9311      	str	r3, [sp, #68]	; 0x44
 800ae5e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800b070 <_strtod_l+0x588>
 800ae62:	f04f 0800 	mov.w	r8, #0
 800ae66:	e683      	b.n	800ab70 <_strtod_l+0x88>
 800ae68:	487d      	ldr	r0, [pc, #500]	; (800b060 <_strtod_l+0x578>)
 800ae6a:	f001 fcf9 	bl	800c860 <nan>
 800ae6e:	ec59 8b10 	vmov	r8, r9, d0
 800ae72:	e67d      	b.n	800ab70 <_strtod_l+0x88>
 800ae74:	1bea      	subs	r2, r5, r7
 800ae76:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ae7a:	9207      	str	r2, [sp, #28]
 800ae7c:	9a06      	ldr	r2, [sp, #24]
 800ae7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ae82:	2a00      	cmp	r2, #0
 800ae84:	bf08      	it	eq
 800ae86:	461a      	moveq	r2, r3
 800ae88:	2b10      	cmp	r3, #16
 800ae8a:	9206      	str	r2, [sp, #24]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	bfa8      	it	ge
 800ae90:	2210      	movge	r2, #16
 800ae92:	2b09      	cmp	r3, #9
 800ae94:	ec59 8b17 	vmov	r8, r9, d7
 800ae98:	dd0c      	ble.n	800aeb4 <_strtod_l+0x3cc>
 800ae9a:	4972      	ldr	r1, [pc, #456]	; (800b064 <_strtod_l+0x57c>)
 800ae9c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aea0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800aea4:	ee06 aa90 	vmov	s13, sl
 800aea8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800aeac:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aeb0:	ec59 8b16 	vmov	r8, r9, d6
 800aeb4:	2b0f      	cmp	r3, #15
 800aeb6:	dc36      	bgt.n	800af26 <_strtod_l+0x43e>
 800aeb8:	9907      	ldr	r1, [sp, #28]
 800aeba:	2900      	cmp	r1, #0
 800aebc:	f43f ae58 	beq.w	800ab70 <_strtod_l+0x88>
 800aec0:	dd23      	ble.n	800af0a <_strtod_l+0x422>
 800aec2:	2916      	cmp	r1, #22
 800aec4:	dc0b      	bgt.n	800aede <_strtod_l+0x3f6>
 800aec6:	4b67      	ldr	r3, [pc, #412]	; (800b064 <_strtod_l+0x57c>)
 800aec8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800aecc:	ed93 7b00 	vldr	d7, [r3]
 800aed0:	ec49 8b16 	vmov	d6, r8, r9
 800aed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aed8:	ec59 8b17 	vmov	r8, r9, d7
 800aedc:	e648      	b.n	800ab70 <_strtod_l+0x88>
 800aede:	9807      	ldr	r0, [sp, #28]
 800aee0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800aee4:	4281      	cmp	r1, r0
 800aee6:	db1e      	blt.n	800af26 <_strtod_l+0x43e>
 800aee8:	4a5e      	ldr	r2, [pc, #376]	; (800b064 <_strtod_l+0x57c>)
 800aeea:	f1c3 030f 	rsb	r3, r3, #15
 800aeee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800aef2:	ed91 7b00 	vldr	d7, [r1]
 800aef6:	ec49 8b16 	vmov	d6, r8, r9
 800aefa:	1ac3      	subs	r3, r0, r3
 800aefc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800af00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af04:	ed92 6b00 	vldr	d6, [r2]
 800af08:	e7e4      	b.n	800aed4 <_strtod_l+0x3ec>
 800af0a:	9907      	ldr	r1, [sp, #28]
 800af0c:	3116      	adds	r1, #22
 800af0e:	db0a      	blt.n	800af26 <_strtod_l+0x43e>
 800af10:	4b54      	ldr	r3, [pc, #336]	; (800b064 <_strtod_l+0x57c>)
 800af12:	1b7d      	subs	r5, r7, r5
 800af14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800af18:	ed95 7b00 	vldr	d7, [r5]
 800af1c:	ec49 8b16 	vmov	d6, r8, r9
 800af20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800af24:	e7d8      	b.n	800aed8 <_strtod_l+0x3f0>
 800af26:	9907      	ldr	r1, [sp, #28]
 800af28:	1a9a      	subs	r2, r3, r2
 800af2a:	440a      	add	r2, r1
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	dd6f      	ble.n	800b010 <_strtod_l+0x528>
 800af30:	f012 000f 	ands.w	r0, r2, #15
 800af34:	d00a      	beq.n	800af4c <_strtod_l+0x464>
 800af36:	494b      	ldr	r1, [pc, #300]	; (800b064 <_strtod_l+0x57c>)
 800af38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800af3c:	ed91 7b00 	vldr	d7, [r1]
 800af40:	ec49 8b16 	vmov	d6, r8, r9
 800af44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af48:	ec59 8b17 	vmov	r8, r9, d7
 800af4c:	f032 020f 	bics.w	r2, r2, #15
 800af50:	d04f      	beq.n	800aff2 <_strtod_l+0x50a>
 800af52:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800af56:	dd22      	ble.n	800af9e <_strtod_l+0x4b6>
 800af58:	2500      	movs	r5, #0
 800af5a:	462e      	mov	r6, r5
 800af5c:	9506      	str	r5, [sp, #24]
 800af5e:	462f      	mov	r7, r5
 800af60:	2322      	movs	r3, #34	; 0x22
 800af62:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b070 <_strtod_l+0x588>
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	f04f 0800 	mov.w	r8, #0
 800af6c:	9b06      	ldr	r3, [sp, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f43f adfe 	beq.w	800ab70 <_strtod_l+0x88>
 800af74:	9912      	ldr	r1, [sp, #72]	; 0x48
 800af76:	4620      	mov	r0, r4
 800af78:	f000 ff48 	bl	800be0c <_Bfree>
 800af7c:	4639      	mov	r1, r7
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 ff44 	bl	800be0c <_Bfree>
 800af84:	4631      	mov	r1, r6
 800af86:	4620      	mov	r0, r4
 800af88:	f000 ff40 	bl	800be0c <_Bfree>
 800af8c:	9906      	ldr	r1, [sp, #24]
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 ff3c 	bl	800be0c <_Bfree>
 800af94:	4629      	mov	r1, r5
 800af96:	4620      	mov	r0, r4
 800af98:	f000 ff38 	bl	800be0c <_Bfree>
 800af9c:	e5e8      	b.n	800ab70 <_strtod_l+0x88>
 800af9e:	2000      	movs	r0, #0
 800afa0:	ec49 8b17 	vmov	d7, r8, r9
 800afa4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800b068 <_strtod_l+0x580>
 800afa8:	1112      	asrs	r2, r2, #4
 800afaa:	4601      	mov	r1, r0
 800afac:	2a01      	cmp	r2, #1
 800afae:	dc23      	bgt.n	800aff8 <_strtod_l+0x510>
 800afb0:	b108      	cbz	r0, 800afb6 <_strtod_l+0x4ce>
 800afb2:	ec59 8b17 	vmov	r8, r9, d7
 800afb6:	4a2c      	ldr	r2, [pc, #176]	; (800b068 <_strtod_l+0x580>)
 800afb8:	482c      	ldr	r0, [pc, #176]	; (800b06c <_strtod_l+0x584>)
 800afba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800afbe:	ed92 7b00 	vldr	d7, [r2]
 800afc2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800afc6:	ec49 8b16 	vmov	d6, r8, r9
 800afca:	4a29      	ldr	r2, [pc, #164]	; (800b070 <_strtod_l+0x588>)
 800afcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afd0:	ee17 1a90 	vmov	r1, s15
 800afd4:	400a      	ands	r2, r1
 800afd6:	4282      	cmp	r2, r0
 800afd8:	ec59 8b17 	vmov	r8, r9, d7
 800afdc:	d8bc      	bhi.n	800af58 <_strtod_l+0x470>
 800afde:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800afe2:	4282      	cmp	r2, r0
 800afe4:	bf86      	itte	hi
 800afe6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b074 <_strtod_l+0x58c>
 800afea:	f04f 38ff 	movhi.w	r8, #4294967295
 800afee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800aff2:	2200      	movs	r2, #0
 800aff4:	9204      	str	r2, [sp, #16]
 800aff6:	e078      	b.n	800b0ea <_strtod_l+0x602>
 800aff8:	07d6      	lsls	r6, r2, #31
 800affa:	d504      	bpl.n	800b006 <_strtod_l+0x51e>
 800affc:	ed9c 6b00 	vldr	d6, [ip]
 800b000:	2001      	movs	r0, #1
 800b002:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b006:	3101      	adds	r1, #1
 800b008:	1052      	asrs	r2, r2, #1
 800b00a:	f10c 0c08 	add.w	ip, ip, #8
 800b00e:	e7cd      	b.n	800afac <_strtod_l+0x4c4>
 800b010:	d0ef      	beq.n	800aff2 <_strtod_l+0x50a>
 800b012:	4252      	negs	r2, r2
 800b014:	f012 000f 	ands.w	r0, r2, #15
 800b018:	d00a      	beq.n	800b030 <_strtod_l+0x548>
 800b01a:	4912      	ldr	r1, [pc, #72]	; (800b064 <_strtod_l+0x57c>)
 800b01c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b020:	ed91 7b00 	vldr	d7, [r1]
 800b024:	ec49 8b16 	vmov	d6, r8, r9
 800b028:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b02c:	ec59 8b17 	vmov	r8, r9, d7
 800b030:	1112      	asrs	r2, r2, #4
 800b032:	d0de      	beq.n	800aff2 <_strtod_l+0x50a>
 800b034:	2a1f      	cmp	r2, #31
 800b036:	dd1f      	ble.n	800b078 <_strtod_l+0x590>
 800b038:	2500      	movs	r5, #0
 800b03a:	462e      	mov	r6, r5
 800b03c:	9506      	str	r5, [sp, #24]
 800b03e:	462f      	mov	r7, r5
 800b040:	2322      	movs	r3, #34	; 0x22
 800b042:	f04f 0800 	mov.w	r8, #0
 800b046:	f04f 0900 	mov.w	r9, #0
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	e78e      	b.n	800af6c <_strtod_l+0x484>
 800b04e:	bf00      	nop
 800b050:	0800d82d 	.word	0x0800d82d
 800b054:	0800d844 	.word	0x0800d844
 800b058:	0800d824 	.word	0x0800d824
 800b05c:	0800d827 	.word	0x0800d827
 800b060:	0800dab7 	.word	0x0800dab7
 800b064:	0800d9a8 	.word	0x0800d9a8
 800b068:	0800d980 	.word	0x0800d980
 800b06c:	7ca00000 	.word	0x7ca00000
 800b070:	7ff00000 	.word	0x7ff00000
 800b074:	7fefffff 	.word	0x7fefffff
 800b078:	f012 0110 	ands.w	r1, r2, #16
 800b07c:	bf18      	it	ne
 800b07e:	216a      	movne	r1, #106	; 0x6a
 800b080:	9104      	str	r1, [sp, #16]
 800b082:	ec49 8b17 	vmov	d7, r8, r9
 800b086:	49be      	ldr	r1, [pc, #760]	; (800b380 <_strtod_l+0x898>)
 800b088:	2000      	movs	r0, #0
 800b08a:	07d6      	lsls	r6, r2, #31
 800b08c:	d504      	bpl.n	800b098 <_strtod_l+0x5b0>
 800b08e:	ed91 6b00 	vldr	d6, [r1]
 800b092:	2001      	movs	r0, #1
 800b094:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b098:	1052      	asrs	r2, r2, #1
 800b09a:	f101 0108 	add.w	r1, r1, #8
 800b09e:	d1f4      	bne.n	800b08a <_strtod_l+0x5a2>
 800b0a0:	b108      	cbz	r0, 800b0a6 <_strtod_l+0x5be>
 800b0a2:	ec59 8b17 	vmov	r8, r9, d7
 800b0a6:	9a04      	ldr	r2, [sp, #16]
 800b0a8:	b1c2      	cbz	r2, 800b0dc <_strtod_l+0x5f4>
 800b0aa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b0ae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	4648      	mov	r0, r9
 800b0b6:	dd11      	ble.n	800b0dc <_strtod_l+0x5f4>
 800b0b8:	2a1f      	cmp	r2, #31
 800b0ba:	f340 812e 	ble.w	800b31a <_strtod_l+0x832>
 800b0be:	2a34      	cmp	r2, #52	; 0x34
 800b0c0:	bfde      	ittt	le
 800b0c2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b0c6:	f04f 32ff 	movle.w	r2, #4294967295
 800b0ca:	fa02 f101 	lslle.w	r1, r2, r1
 800b0ce:	f04f 0800 	mov.w	r8, #0
 800b0d2:	bfcc      	ite	gt
 800b0d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b0d8:	ea01 0900 	andle.w	r9, r1, r0
 800b0dc:	ec49 8b17 	vmov	d7, r8, r9
 800b0e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e8:	d0a6      	beq.n	800b038 <_strtod_l+0x550>
 800b0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ec:	9200      	str	r2, [sp, #0]
 800b0ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0f0:	9a06      	ldr	r2, [sp, #24]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fef2 	bl	800bedc <__s2b>
 800b0f8:	9006      	str	r0, [sp, #24]
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f43f af2c 	beq.w	800af58 <_strtod_l+0x470>
 800b100:	9b07      	ldr	r3, [sp, #28]
 800b102:	1b7d      	subs	r5, r7, r5
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfb4      	ite	lt
 800b108:	462b      	movlt	r3, r5
 800b10a:	2300      	movge	r3, #0
 800b10c:	9309      	str	r3, [sp, #36]	; 0x24
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800b360 <_strtod_l+0x878>
 800b114:	ed9f ab94 	vldr	d10, [pc, #592]	; 800b368 <_strtod_l+0x880>
 800b118:	ed9f bb95 	vldr	d11, [pc, #596]	; 800b370 <_strtod_l+0x888>
 800b11c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b120:	2500      	movs	r5, #0
 800b122:	930c      	str	r3, [sp, #48]	; 0x30
 800b124:	462e      	mov	r6, r5
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	4620      	mov	r0, r4
 800b12a:	6859      	ldr	r1, [r3, #4]
 800b12c:	f000 fe2e 	bl	800bd8c <_Balloc>
 800b130:	4607      	mov	r7, r0
 800b132:	2800      	cmp	r0, #0
 800b134:	f43f af14 	beq.w	800af60 <_strtod_l+0x478>
 800b138:	9b06      	ldr	r3, [sp, #24]
 800b13a:	691a      	ldr	r2, [r3, #16]
 800b13c:	3202      	adds	r2, #2
 800b13e:	f103 010c 	add.w	r1, r3, #12
 800b142:	0092      	lsls	r2, r2, #2
 800b144:	300c      	adds	r0, #12
 800b146:	f000 fe13 	bl	800bd70 <memcpy>
 800b14a:	ec49 8b10 	vmov	d0, r8, r9
 800b14e:	aa14      	add	r2, sp, #80	; 0x50
 800b150:	a913      	add	r1, sp, #76	; 0x4c
 800b152:	4620      	mov	r0, r4
 800b154:	f001 fa08 	bl	800c568 <__d2b>
 800b158:	ec49 8b18 	vmov	d8, r8, r9
 800b15c:	9012      	str	r0, [sp, #72]	; 0x48
 800b15e:	2800      	cmp	r0, #0
 800b160:	f43f aefe 	beq.w	800af60 <_strtod_l+0x478>
 800b164:	2101      	movs	r1, #1
 800b166:	4620      	mov	r0, r4
 800b168:	f000 ff52 	bl	800c010 <__i2b>
 800b16c:	4606      	mov	r6, r0
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f aef6 	beq.w	800af60 <_strtod_l+0x478>
 800b174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b176:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bfab      	itete	ge
 800b17c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b17e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b180:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b184:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b188:	bfac      	ite	ge
 800b18a:	eb03 0b02 	addge.w	fp, r3, r2
 800b18e:	eba2 0a03 	sublt.w	sl, r2, r3
 800b192:	9a04      	ldr	r2, [sp, #16]
 800b194:	1a9b      	subs	r3, r3, r2
 800b196:	440b      	add	r3, r1
 800b198:	4a7a      	ldr	r2, [pc, #488]	; (800b384 <_strtod_l+0x89c>)
 800b19a:	3b01      	subs	r3, #1
 800b19c:	4293      	cmp	r3, r2
 800b19e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b1a2:	f280 80cd 	bge.w	800b340 <_strtod_l+0x858>
 800b1a6:	1ad2      	subs	r2, r2, r3
 800b1a8:	2a1f      	cmp	r2, #31
 800b1aa:	eba1 0102 	sub.w	r1, r1, r2
 800b1ae:	f04f 0001 	mov.w	r0, #1
 800b1b2:	f300 80b9 	bgt.w	800b328 <_strtod_l+0x840>
 800b1b6:	fa00 f302 	lsl.w	r3, r0, r2
 800b1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1bc:	2300      	movs	r3, #0
 800b1be:	930a      	str	r3, [sp, #40]	; 0x28
 800b1c0:	eb0b 0301 	add.w	r3, fp, r1
 800b1c4:	9a04      	ldr	r2, [sp, #16]
 800b1c6:	459b      	cmp	fp, r3
 800b1c8:	448a      	add	sl, r1
 800b1ca:	4492      	add	sl, r2
 800b1cc:	465a      	mov	r2, fp
 800b1ce:	bfa8      	it	ge
 800b1d0:	461a      	movge	r2, r3
 800b1d2:	4552      	cmp	r2, sl
 800b1d4:	bfa8      	it	ge
 800b1d6:	4652      	movge	r2, sl
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	bfc2      	ittt	gt
 800b1dc:	1a9b      	subgt	r3, r3, r2
 800b1de:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b1e2:	ebab 0b02 	subgt.w	fp, fp, r2
 800b1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e8:	2a00      	cmp	r2, #0
 800b1ea:	dd18      	ble.n	800b21e <_strtod_l+0x736>
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f2:	f000 ffcd 	bl	800c190 <__pow5mult>
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	f43f aeb1 	beq.w	800af60 <_strtod_l+0x478>
 800b1fe:	4601      	mov	r1, r0
 800b200:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b202:	4620      	mov	r0, r4
 800b204:	f000 ff1a 	bl	800c03c <__multiply>
 800b208:	900e      	str	r0, [sp, #56]	; 0x38
 800b20a:	2800      	cmp	r0, #0
 800b20c:	f43f aea8 	beq.w	800af60 <_strtod_l+0x478>
 800b210:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b212:	4620      	mov	r0, r4
 800b214:	f000 fdfa 	bl	800be0c <_Bfree>
 800b218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b21c:	9212      	str	r2, [sp, #72]	; 0x48
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f300 8093 	bgt.w	800b34a <_strtod_l+0x862>
 800b224:	9b07      	ldr	r3, [sp, #28]
 800b226:	2b00      	cmp	r3, #0
 800b228:	dd08      	ble.n	800b23c <_strtod_l+0x754>
 800b22a:	4639      	mov	r1, r7
 800b22c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 ffae 	bl	800c190 <__pow5mult>
 800b234:	4607      	mov	r7, r0
 800b236:	2800      	cmp	r0, #0
 800b238:	f43f ae92 	beq.w	800af60 <_strtod_l+0x478>
 800b23c:	f1ba 0f00 	cmp.w	sl, #0
 800b240:	dd08      	ble.n	800b254 <_strtod_l+0x76c>
 800b242:	4639      	mov	r1, r7
 800b244:	4652      	mov	r2, sl
 800b246:	4620      	mov	r0, r4
 800b248:	f000 fffc 	bl	800c244 <__lshift>
 800b24c:	4607      	mov	r7, r0
 800b24e:	2800      	cmp	r0, #0
 800b250:	f43f ae86 	beq.w	800af60 <_strtod_l+0x478>
 800b254:	f1bb 0f00 	cmp.w	fp, #0
 800b258:	dd08      	ble.n	800b26c <_strtod_l+0x784>
 800b25a:	4631      	mov	r1, r6
 800b25c:	465a      	mov	r2, fp
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 fff0 	bl	800c244 <__lshift>
 800b264:	4606      	mov	r6, r0
 800b266:	2800      	cmp	r0, #0
 800b268:	f43f ae7a 	beq.w	800af60 <_strtod_l+0x478>
 800b26c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b26e:	463a      	mov	r2, r7
 800b270:	4620      	mov	r0, r4
 800b272:	f001 f873 	bl	800c35c <__mdiff>
 800b276:	4605      	mov	r5, r0
 800b278:	2800      	cmp	r0, #0
 800b27a:	f43f ae71 	beq.w	800af60 <_strtod_l+0x478>
 800b27e:	2300      	movs	r3, #0
 800b280:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b284:	60c3      	str	r3, [r0, #12]
 800b286:	4631      	mov	r1, r6
 800b288:	f001 f84c 	bl	800c324 <__mcmp>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	da7d      	bge.n	800b38c <_strtod_l+0x8a4>
 800b290:	ea5a 0308 	orrs.w	r3, sl, r8
 800b294:	f040 80a3 	bne.w	800b3de <_strtod_l+0x8f6>
 800b298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f040 809e 	bne.w	800b3de <_strtod_l+0x8f6>
 800b2a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2a6:	0d1b      	lsrs	r3, r3, #20
 800b2a8:	051b      	lsls	r3, r3, #20
 800b2aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2ae:	f240 8096 	bls.w	800b3de <_strtod_l+0x8f6>
 800b2b2:	696b      	ldr	r3, [r5, #20]
 800b2b4:	b91b      	cbnz	r3, 800b2be <_strtod_l+0x7d6>
 800b2b6:	692b      	ldr	r3, [r5, #16]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	f340 8090 	ble.w	800b3de <_strtod_l+0x8f6>
 800b2be:	4629      	mov	r1, r5
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 ffbe 	bl	800c244 <__lshift>
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	f001 f82a 	bl	800c324 <__mcmp>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	f340 8084 	ble.w	800b3de <_strtod_l+0x8f6>
 800b2d6:	9904      	ldr	r1, [sp, #16]
 800b2d8:	4a2b      	ldr	r2, [pc, #172]	; (800b388 <_strtod_l+0x8a0>)
 800b2da:	464b      	mov	r3, r9
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	f000 809d 	beq.w	800b41c <_strtod_l+0x934>
 800b2e2:	ea02 0109 	and.w	r1, r2, r9
 800b2e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2ea:	f300 8097 	bgt.w	800b41c <_strtod_l+0x934>
 800b2ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2f2:	f77f aea5 	ble.w	800b040 <_strtod_l+0x558>
 800b2f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b378 <_strtod_l+0x890>
 800b2fa:	ec49 8b16 	vmov	d6, r8, r9
 800b2fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b302:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b306:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	bf08      	it	eq
 800b30e:	2322      	moveq	r3, #34	; 0x22
 800b310:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b314:	bf08      	it	eq
 800b316:	6023      	streq	r3, [r4, #0]
 800b318:	e62c      	b.n	800af74 <_strtod_l+0x48c>
 800b31a:	f04f 31ff 	mov.w	r1, #4294967295
 800b31e:	fa01 f202 	lsl.w	r2, r1, r2
 800b322:	ea02 0808 	and.w	r8, r2, r8
 800b326:	e6d9      	b.n	800b0dc <_strtod_l+0x5f4>
 800b328:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b32c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b330:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b334:	33e2      	adds	r3, #226	; 0xe2
 800b336:	fa00 f303 	lsl.w	r3, r0, r3
 800b33a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b33e:	e73f      	b.n	800b1c0 <_strtod_l+0x6d8>
 800b340:	2200      	movs	r2, #0
 800b342:	2301      	movs	r3, #1
 800b344:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b348:	e73a      	b.n	800b1c0 <_strtod_l+0x6d8>
 800b34a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b34c:	461a      	mov	r2, r3
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 ff78 	bl	800c244 <__lshift>
 800b354:	9012      	str	r0, [sp, #72]	; 0x48
 800b356:	2800      	cmp	r0, #0
 800b358:	f47f af64 	bne.w	800b224 <_strtod_l+0x73c>
 800b35c:	e600      	b.n	800af60 <_strtod_l+0x478>
 800b35e:	bf00      	nop
 800b360:	94a03595 	.word	0x94a03595
 800b364:	3fcfffff 	.word	0x3fcfffff
 800b368:	94a03595 	.word	0x94a03595
 800b36c:	3fdfffff 	.word	0x3fdfffff
 800b370:	35afe535 	.word	0x35afe535
 800b374:	3fe00000 	.word	0x3fe00000
 800b378:	00000000 	.word	0x00000000
 800b37c:	39500000 	.word	0x39500000
 800b380:	0800d858 	.word	0x0800d858
 800b384:	fffffc02 	.word	0xfffffc02
 800b388:	7ff00000 	.word	0x7ff00000
 800b38c:	46cb      	mov	fp, r9
 800b38e:	d15f      	bne.n	800b450 <_strtod_l+0x968>
 800b390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b394:	f1ba 0f00 	cmp.w	sl, #0
 800b398:	d02a      	beq.n	800b3f0 <_strtod_l+0x908>
 800b39a:	4aa7      	ldr	r2, [pc, #668]	; (800b638 <_strtod_l+0xb50>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d12b      	bne.n	800b3f8 <_strtod_l+0x910>
 800b3a0:	9b04      	ldr	r3, [sp, #16]
 800b3a2:	4642      	mov	r2, r8
 800b3a4:	b1fb      	cbz	r3, 800b3e6 <_strtod_l+0x8fe>
 800b3a6:	4ba5      	ldr	r3, [pc, #660]	; (800b63c <_strtod_l+0xb54>)
 800b3a8:	ea09 0303 	and.w	r3, r9, r3
 800b3ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3b0:	f04f 31ff 	mov.w	r1, #4294967295
 800b3b4:	d81a      	bhi.n	800b3ec <_strtod_l+0x904>
 800b3b6:	0d1b      	lsrs	r3, r3, #20
 800b3b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b3bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d119      	bne.n	800b3f8 <_strtod_l+0x910>
 800b3c4:	4b9e      	ldr	r3, [pc, #632]	; (800b640 <_strtod_l+0xb58>)
 800b3c6:	459b      	cmp	fp, r3
 800b3c8:	d102      	bne.n	800b3d0 <_strtod_l+0x8e8>
 800b3ca:	3201      	adds	r2, #1
 800b3cc:	f43f adc8 	beq.w	800af60 <_strtod_l+0x478>
 800b3d0:	4b9a      	ldr	r3, [pc, #616]	; (800b63c <_strtod_l+0xb54>)
 800b3d2:	ea0b 0303 	and.w	r3, fp, r3
 800b3d6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b3da:	f04f 0800 	mov.w	r8, #0
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d188      	bne.n	800b2f6 <_strtod_l+0x80e>
 800b3e4:	e5c6      	b.n	800af74 <_strtod_l+0x48c>
 800b3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ea:	e7e9      	b.n	800b3c0 <_strtod_l+0x8d8>
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	e7e7      	b.n	800b3c0 <_strtod_l+0x8d8>
 800b3f0:	ea53 0308 	orrs.w	r3, r3, r8
 800b3f4:	f43f af6f 	beq.w	800b2d6 <_strtod_l+0x7ee>
 800b3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fa:	b1cb      	cbz	r3, 800b430 <_strtod_l+0x948>
 800b3fc:	ea13 0f0b 	tst.w	r3, fp
 800b400:	d0ed      	beq.n	800b3de <_strtod_l+0x8f6>
 800b402:	9a04      	ldr	r2, [sp, #16]
 800b404:	4640      	mov	r0, r8
 800b406:	4649      	mov	r1, r9
 800b408:	f1ba 0f00 	cmp.w	sl, #0
 800b40c:	d014      	beq.n	800b438 <_strtod_l+0x950>
 800b40e:	f7ff fb51 	bl	800aab4 <sulp>
 800b412:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b416:	ec59 8b17 	vmov	r8, r9, d7
 800b41a:	e7e0      	b.n	800b3de <_strtod_l+0x8f6>
 800b41c:	4013      	ands	r3, r2
 800b41e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b422:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b426:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b42a:	f04f 38ff 	mov.w	r8, #4294967295
 800b42e:	e7d6      	b.n	800b3de <_strtod_l+0x8f6>
 800b430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b432:	ea13 0f08 	tst.w	r3, r8
 800b436:	e7e3      	b.n	800b400 <_strtod_l+0x918>
 800b438:	f7ff fb3c 	bl	800aab4 <sulp>
 800b43c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800b440:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b448:	ec59 8b10 	vmov	r8, r9, d0
 800b44c:	d1c7      	bne.n	800b3de <_strtod_l+0x8f6>
 800b44e:	e5f7      	b.n	800b040 <_strtod_l+0x558>
 800b450:	4631      	mov	r1, r6
 800b452:	4628      	mov	r0, r5
 800b454:	f001 f8e4 	bl	800c620 <__ratio>
 800b458:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b45c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b464:	d865      	bhi.n	800b532 <_strtod_l+0xa4a>
 800b466:	f1ba 0f00 	cmp.w	sl, #0
 800b46a:	d042      	beq.n	800b4f2 <_strtod_l+0xa0a>
 800b46c:	4b75      	ldr	r3, [pc, #468]	; (800b644 <_strtod_l+0xb5c>)
 800b46e:	2200      	movs	r2, #0
 800b470:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b474:	4871      	ldr	r0, [pc, #452]	; (800b63c <_strtod_l+0xb54>)
 800b476:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b650 <_strtod_l+0xb68>
 800b47a:	ea0b 0100 	and.w	r1, fp, r0
 800b47e:	4561      	cmp	r1, ip
 800b480:	f040 808e 	bne.w	800b5a0 <_strtod_l+0xab8>
 800b484:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b488:	ec49 8b10 	vmov	d0, r8, r9
 800b48c:	ec43 2b1c 	vmov	d12, r2, r3
 800b490:	910a      	str	r1, [sp, #40]	; 0x28
 800b492:	f000 ffed 	bl	800c470 <__ulp>
 800b496:	ec49 8b1e 	vmov	d14, r8, r9
 800b49a:	4868      	ldr	r0, [pc, #416]	; (800b63c <_strtod_l+0xb54>)
 800b49c:	eeac eb00 	vfma.f64	d14, d12, d0
 800b4a0:	ee1e 3a90 	vmov	r3, s29
 800b4a4:	4a68      	ldr	r2, [pc, #416]	; (800b648 <_strtod_l+0xb60>)
 800b4a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4a8:	4018      	ands	r0, r3
 800b4aa:	4290      	cmp	r0, r2
 800b4ac:	ec59 8b1e 	vmov	r8, r9, d14
 800b4b0:	d94e      	bls.n	800b550 <_strtod_l+0xa68>
 800b4b2:	ee18 3a90 	vmov	r3, s17
 800b4b6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d104      	bne.n	800b4c8 <_strtod_l+0x9e0>
 800b4be:	ee18 3a10 	vmov	r3, s16
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	f43f ad4c 	beq.w	800af60 <_strtod_l+0x478>
 800b4c8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b640 <_strtod_l+0xb58>
 800b4cc:	f04f 38ff 	mov.w	r8, #4294967295
 800b4d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 fc9a 	bl	800be0c <_Bfree>
 800b4d8:	4639      	mov	r1, r7
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fc96 	bl	800be0c <_Bfree>
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fc92 	bl	800be0c <_Bfree>
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fc8e 	bl	800be0c <_Bfree>
 800b4f0:	e619      	b.n	800b126 <_strtod_l+0x63e>
 800b4f2:	f1b8 0f00 	cmp.w	r8, #0
 800b4f6:	d112      	bne.n	800b51e <_strtod_l+0xa36>
 800b4f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4fc:	b9b3      	cbnz	r3, 800b52c <_strtod_l+0xa44>
 800b4fe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b502:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b50e:	bf58      	it	pl
 800b510:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b514:	eeb1 7b4d 	vneg.f64	d7, d13
 800b518:	ec53 2b17 	vmov	r2, r3, d7
 800b51c:	e7aa      	b.n	800b474 <_strtod_l+0x98c>
 800b51e:	f1b8 0f01 	cmp.w	r8, #1
 800b522:	d103      	bne.n	800b52c <_strtod_l+0xa44>
 800b524:	f1b9 0f00 	cmp.w	r9, #0
 800b528:	f43f ad8a 	beq.w	800b040 <_strtod_l+0x558>
 800b52c:	4b47      	ldr	r3, [pc, #284]	; (800b64c <_strtod_l+0xb64>)
 800b52e:	2200      	movs	r2, #0
 800b530:	e79e      	b.n	800b470 <_strtod_l+0x988>
 800b532:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b536:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b53a:	f1ba 0f00 	cmp.w	sl, #0
 800b53e:	d104      	bne.n	800b54a <_strtod_l+0xa62>
 800b540:	eeb1 7b4d 	vneg.f64	d7, d13
 800b544:	ec53 2b17 	vmov	r2, r3, d7
 800b548:	e794      	b.n	800b474 <_strtod_l+0x98c>
 800b54a:	eeb0 7b4d 	vmov.f64	d7, d13
 800b54e:	e7f9      	b.n	800b544 <_strtod_l+0xa5c>
 800b550:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b554:	9b04      	ldr	r3, [sp, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1ba      	bne.n	800b4d0 <_strtod_l+0x9e8>
 800b55a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b55e:	0d1b      	lsrs	r3, r3, #20
 800b560:	051b      	lsls	r3, r3, #20
 800b562:	4299      	cmp	r1, r3
 800b564:	d1b4      	bne.n	800b4d0 <_strtod_l+0x9e8>
 800b566:	ec51 0b1d 	vmov	r0, r1, d13
 800b56a:	f7f5 f8fd 	bl	8000768 <__aeabi_d2lz>
 800b56e:	f7f5 f8b5 	bl	80006dc <__aeabi_l2d>
 800b572:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b576:	ec41 0b17 	vmov	d7, r0, r1
 800b57a:	ea43 0308 	orr.w	r3, r3, r8
 800b57e:	ea53 030a 	orrs.w	r3, r3, sl
 800b582:	ee3d db47 	vsub.f64	d13, d13, d7
 800b586:	d03c      	beq.n	800b602 <_strtod_l+0xb1a>
 800b588:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b590:	f53f acf0 	bmi.w	800af74 <_strtod_l+0x48c>
 800b594:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	dd98      	ble.n	800b4d0 <_strtod_l+0x9e8>
 800b59e:	e4e9      	b.n	800af74 <_strtod_l+0x48c>
 800b5a0:	9804      	ldr	r0, [sp, #16]
 800b5a2:	b1f0      	cbz	r0, 800b5e2 <_strtod_l+0xafa>
 800b5a4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b5a8:	d81b      	bhi.n	800b5e2 <_strtod_l+0xafa>
 800b5aa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b630 <_strtod_l+0xb48>
 800b5ae:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b6:	d811      	bhi.n	800b5dc <_strtod_l+0xaf4>
 800b5b8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b5bc:	ee1d 3a10 	vmov	r3, s26
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	bf38      	it	cc
 800b5c4:	2301      	movcc	r3, #1
 800b5c6:	ee0d 3a10 	vmov	s26, r3
 800b5ca:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b5ce:	f1ba 0f00 	cmp.w	sl, #0
 800b5d2:	d113      	bne.n	800b5fc <_strtod_l+0xb14>
 800b5d4:	eeb1 7b4d 	vneg.f64	d7, d13
 800b5d8:	ec53 2b17 	vmov	r2, r3, d7
 800b5dc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b5e0:	1a43      	subs	r3, r0, r1
 800b5e2:	eeb0 0b48 	vmov.f64	d0, d8
 800b5e6:	ec43 2b1c 	vmov	d12, r2, r3
 800b5ea:	910a      	str	r1, [sp, #40]	; 0x28
 800b5ec:	f000 ff40 	bl	800c470 <__ulp>
 800b5f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5f2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b5f6:	ec59 8b18 	vmov	r8, r9, d8
 800b5fa:	e7ab      	b.n	800b554 <_strtod_l+0xa6c>
 800b5fc:	eeb0 7b4d 	vmov.f64	d7, d13
 800b600:	e7ea      	b.n	800b5d8 <_strtod_l+0xaf0>
 800b602:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60a:	f57f af61 	bpl.w	800b4d0 <_strtod_l+0x9e8>
 800b60e:	e4b1      	b.n	800af74 <_strtod_l+0x48c>
 800b610:	2300      	movs	r3, #0
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	f7ff baad 	b.w	800ab78 <_strtod_l+0x90>
 800b61e:	2a65      	cmp	r2, #101	; 0x65
 800b620:	f43f ab9f 	beq.w	800ad62 <_strtod_l+0x27a>
 800b624:	2a45      	cmp	r2, #69	; 0x45
 800b626:	f43f ab9c 	beq.w	800ad62 <_strtod_l+0x27a>
 800b62a:	2101      	movs	r1, #1
 800b62c:	f7ff bbd4 	b.w	800add8 <_strtod_l+0x2f0>
 800b630:	ffc00000 	.word	0xffc00000
 800b634:	41dfffff 	.word	0x41dfffff
 800b638:	000fffff 	.word	0x000fffff
 800b63c:	7ff00000 	.word	0x7ff00000
 800b640:	7fefffff 	.word	0x7fefffff
 800b644:	3ff00000 	.word	0x3ff00000
 800b648:	7c9fffff 	.word	0x7c9fffff
 800b64c:	bff00000 	.word	0xbff00000
 800b650:	7fe00000 	.word	0x7fe00000

0800b654 <strtod>:
 800b654:	460a      	mov	r2, r1
 800b656:	4601      	mov	r1, r0
 800b658:	4802      	ldr	r0, [pc, #8]	; (800b664 <strtod+0x10>)
 800b65a:	4b03      	ldr	r3, [pc, #12]	; (800b668 <strtod+0x14>)
 800b65c:	6800      	ldr	r0, [r0, #0]
 800b65e:	f7ff ba43 	b.w	800aae8 <_strtod_l>
 800b662:	bf00      	nop
 800b664:	24000014 	.word	0x24000014
 800b668:	2400007c 	.word	0x2400007c

0800b66c <rshift>:
 800b66c:	6903      	ldr	r3, [r0, #16]
 800b66e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b676:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b67a:	f100 0414 	add.w	r4, r0, #20
 800b67e:	dd45      	ble.n	800b70c <rshift+0xa0>
 800b680:	f011 011f 	ands.w	r1, r1, #31
 800b684:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b688:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b68c:	d10c      	bne.n	800b6a8 <rshift+0x3c>
 800b68e:	f100 0710 	add.w	r7, r0, #16
 800b692:	4629      	mov	r1, r5
 800b694:	42b1      	cmp	r1, r6
 800b696:	d334      	bcc.n	800b702 <rshift+0x96>
 800b698:	1a9b      	subs	r3, r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	1eea      	subs	r2, r5, #3
 800b69e:	4296      	cmp	r6, r2
 800b6a0:	bf38      	it	cc
 800b6a2:	2300      	movcc	r3, #0
 800b6a4:	4423      	add	r3, r4
 800b6a6:	e015      	b.n	800b6d4 <rshift+0x68>
 800b6a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6ac:	f1c1 0820 	rsb	r8, r1, #32
 800b6b0:	40cf      	lsrs	r7, r1
 800b6b2:	f105 0e04 	add.w	lr, r5, #4
 800b6b6:	46a1      	mov	r9, r4
 800b6b8:	4576      	cmp	r6, lr
 800b6ba:	46f4      	mov	ip, lr
 800b6bc:	d815      	bhi.n	800b6ea <rshift+0x7e>
 800b6be:	1a9a      	subs	r2, r3, r2
 800b6c0:	0092      	lsls	r2, r2, #2
 800b6c2:	3a04      	subs	r2, #4
 800b6c4:	3501      	adds	r5, #1
 800b6c6:	42ae      	cmp	r6, r5
 800b6c8:	bf38      	it	cc
 800b6ca:	2200      	movcc	r2, #0
 800b6cc:	18a3      	adds	r3, r4, r2
 800b6ce:	50a7      	str	r7, [r4, r2]
 800b6d0:	b107      	cbz	r7, 800b6d4 <rshift+0x68>
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	1b1a      	subs	r2, r3, r4
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6dc:	bf08      	it	eq
 800b6de:	2300      	moveq	r3, #0
 800b6e0:	6102      	str	r2, [r0, #16]
 800b6e2:	bf08      	it	eq
 800b6e4:	6143      	streq	r3, [r0, #20]
 800b6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ea:	f8dc c000 	ldr.w	ip, [ip]
 800b6ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6f2:	ea4c 0707 	orr.w	r7, ip, r7
 800b6f6:	f849 7b04 	str.w	r7, [r9], #4
 800b6fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6fe:	40cf      	lsrs	r7, r1
 800b700:	e7da      	b.n	800b6b8 <rshift+0x4c>
 800b702:	f851 cb04 	ldr.w	ip, [r1], #4
 800b706:	f847 cf04 	str.w	ip, [r7, #4]!
 800b70a:	e7c3      	b.n	800b694 <rshift+0x28>
 800b70c:	4623      	mov	r3, r4
 800b70e:	e7e1      	b.n	800b6d4 <rshift+0x68>

0800b710 <__hexdig_fun>:
 800b710:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b714:	2b09      	cmp	r3, #9
 800b716:	d802      	bhi.n	800b71e <__hexdig_fun+0xe>
 800b718:	3820      	subs	r0, #32
 800b71a:	b2c0      	uxtb	r0, r0
 800b71c:	4770      	bx	lr
 800b71e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b722:	2b05      	cmp	r3, #5
 800b724:	d801      	bhi.n	800b72a <__hexdig_fun+0x1a>
 800b726:	3847      	subs	r0, #71	; 0x47
 800b728:	e7f7      	b.n	800b71a <__hexdig_fun+0xa>
 800b72a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b72e:	2b05      	cmp	r3, #5
 800b730:	d801      	bhi.n	800b736 <__hexdig_fun+0x26>
 800b732:	3827      	subs	r0, #39	; 0x27
 800b734:	e7f1      	b.n	800b71a <__hexdig_fun+0xa>
 800b736:	2000      	movs	r0, #0
 800b738:	4770      	bx	lr
	...

0800b73c <__gethex>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	ed2d 8b02 	vpush	{d8}
 800b744:	b089      	sub	sp, #36	; 0x24
 800b746:	ee08 0a10 	vmov	s16, r0
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	4bb4      	ldr	r3, [pc, #720]	; (800ba20 <__gethex+0x2e4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	4618      	mov	r0, r3
 800b754:	468b      	mov	fp, r1
 800b756:	4690      	mov	r8, r2
 800b758:	f7f4 fdda 	bl	8000310 <strlen>
 800b75c:	9b01      	ldr	r3, [sp, #4]
 800b75e:	f8db 2000 	ldr.w	r2, [fp]
 800b762:	4403      	add	r3, r0
 800b764:	4682      	mov	sl, r0
 800b766:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	1c93      	adds	r3, r2, #2
 800b76e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b772:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b776:	32fe      	adds	r2, #254	; 0xfe
 800b778:	18d1      	adds	r1, r2, r3
 800b77a:	461f      	mov	r7, r3
 800b77c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b780:	9100      	str	r1, [sp, #0]
 800b782:	2830      	cmp	r0, #48	; 0x30
 800b784:	d0f8      	beq.n	800b778 <__gethex+0x3c>
 800b786:	f7ff ffc3 	bl	800b710 <__hexdig_fun>
 800b78a:	4604      	mov	r4, r0
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d13a      	bne.n	800b806 <__gethex+0xca>
 800b790:	9901      	ldr	r1, [sp, #4]
 800b792:	4652      	mov	r2, sl
 800b794:	4638      	mov	r0, r7
 800b796:	f001 f87b 	bl	800c890 <strncmp>
 800b79a:	4605      	mov	r5, r0
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d168      	bne.n	800b872 <__gethex+0x136>
 800b7a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b7a4:	eb07 060a 	add.w	r6, r7, sl
 800b7a8:	f7ff ffb2 	bl	800b710 <__hexdig_fun>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d062      	beq.n	800b876 <__gethex+0x13a>
 800b7b0:	4633      	mov	r3, r6
 800b7b2:	7818      	ldrb	r0, [r3, #0]
 800b7b4:	2830      	cmp	r0, #48	; 0x30
 800b7b6:	461f      	mov	r7, r3
 800b7b8:	f103 0301 	add.w	r3, r3, #1
 800b7bc:	d0f9      	beq.n	800b7b2 <__gethex+0x76>
 800b7be:	f7ff ffa7 	bl	800b710 <__hexdig_fun>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	fab0 f480 	clz	r4, r0
 800b7c8:	0964      	lsrs	r4, r4, #5
 800b7ca:	4635      	mov	r5, r6
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	463a      	mov	r2, r7
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	3201      	adds	r2, #1
 800b7d4:	7830      	ldrb	r0, [r6, #0]
 800b7d6:	f7ff ff9b 	bl	800b710 <__hexdig_fun>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d1f8      	bne.n	800b7d0 <__gethex+0x94>
 800b7de:	9901      	ldr	r1, [sp, #4]
 800b7e0:	4652      	mov	r2, sl
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f001 f854 	bl	800c890 <strncmp>
 800b7e8:	b980      	cbnz	r0, 800b80c <__gethex+0xd0>
 800b7ea:	b94d      	cbnz	r5, 800b800 <__gethex+0xc4>
 800b7ec:	eb06 050a 	add.w	r5, r6, sl
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4616      	mov	r6, r2
 800b7f4:	3201      	adds	r2, #1
 800b7f6:	7830      	ldrb	r0, [r6, #0]
 800b7f8:	f7ff ff8a 	bl	800b710 <__hexdig_fun>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d1f8      	bne.n	800b7f2 <__gethex+0xb6>
 800b800:	1bad      	subs	r5, r5, r6
 800b802:	00ad      	lsls	r5, r5, #2
 800b804:	e004      	b.n	800b810 <__gethex+0xd4>
 800b806:	2400      	movs	r4, #0
 800b808:	4625      	mov	r5, r4
 800b80a:	e7e0      	b.n	800b7ce <__gethex+0x92>
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	d1f7      	bne.n	800b800 <__gethex+0xc4>
 800b810:	7833      	ldrb	r3, [r6, #0]
 800b812:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b816:	2b50      	cmp	r3, #80	; 0x50
 800b818:	d13b      	bne.n	800b892 <__gethex+0x156>
 800b81a:	7873      	ldrb	r3, [r6, #1]
 800b81c:	2b2b      	cmp	r3, #43	; 0x2b
 800b81e:	d02c      	beq.n	800b87a <__gethex+0x13e>
 800b820:	2b2d      	cmp	r3, #45	; 0x2d
 800b822:	d02e      	beq.n	800b882 <__gethex+0x146>
 800b824:	1c71      	adds	r1, r6, #1
 800b826:	f04f 0900 	mov.w	r9, #0
 800b82a:	7808      	ldrb	r0, [r1, #0]
 800b82c:	f7ff ff70 	bl	800b710 <__hexdig_fun>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b18      	cmp	r3, #24
 800b836:	d82c      	bhi.n	800b892 <__gethex+0x156>
 800b838:	f1a0 0210 	sub.w	r2, r0, #16
 800b83c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b840:	f7ff ff66 	bl	800b710 <__hexdig_fun>
 800b844:	1e43      	subs	r3, r0, #1
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b18      	cmp	r3, #24
 800b84a:	d91d      	bls.n	800b888 <__gethex+0x14c>
 800b84c:	f1b9 0f00 	cmp.w	r9, #0
 800b850:	d000      	beq.n	800b854 <__gethex+0x118>
 800b852:	4252      	negs	r2, r2
 800b854:	4415      	add	r5, r2
 800b856:	f8cb 1000 	str.w	r1, [fp]
 800b85a:	b1e4      	cbz	r4, 800b896 <__gethex+0x15a>
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bf14      	ite	ne
 800b862:	2700      	movne	r7, #0
 800b864:	2706      	moveq	r7, #6
 800b866:	4638      	mov	r0, r7
 800b868:	b009      	add	sp, #36	; 0x24
 800b86a:	ecbd 8b02 	vpop	{d8}
 800b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b872:	463e      	mov	r6, r7
 800b874:	4625      	mov	r5, r4
 800b876:	2401      	movs	r4, #1
 800b878:	e7ca      	b.n	800b810 <__gethex+0xd4>
 800b87a:	f04f 0900 	mov.w	r9, #0
 800b87e:	1cb1      	adds	r1, r6, #2
 800b880:	e7d3      	b.n	800b82a <__gethex+0xee>
 800b882:	f04f 0901 	mov.w	r9, #1
 800b886:	e7fa      	b.n	800b87e <__gethex+0x142>
 800b888:	230a      	movs	r3, #10
 800b88a:	fb03 0202 	mla	r2, r3, r2, r0
 800b88e:	3a10      	subs	r2, #16
 800b890:	e7d4      	b.n	800b83c <__gethex+0x100>
 800b892:	4631      	mov	r1, r6
 800b894:	e7df      	b.n	800b856 <__gethex+0x11a>
 800b896:	1bf3      	subs	r3, r6, r7
 800b898:	3b01      	subs	r3, #1
 800b89a:	4621      	mov	r1, r4
 800b89c:	2b07      	cmp	r3, #7
 800b89e:	dc0b      	bgt.n	800b8b8 <__gethex+0x17c>
 800b8a0:	ee18 0a10 	vmov	r0, s16
 800b8a4:	f000 fa72 	bl	800bd8c <_Balloc>
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	b940      	cbnz	r0, 800b8be <__gethex+0x182>
 800b8ac:	4b5d      	ldr	r3, [pc, #372]	; (800ba24 <__gethex+0x2e8>)
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	21de      	movs	r1, #222	; 0xde
 800b8b2:	485d      	ldr	r0, [pc, #372]	; (800ba28 <__gethex+0x2ec>)
 800b8b4:	f001 f80e 	bl	800c8d4 <__assert_func>
 800b8b8:	3101      	adds	r1, #1
 800b8ba:	105b      	asrs	r3, r3, #1
 800b8bc:	e7ee      	b.n	800b89c <__gethex+0x160>
 800b8be:	f100 0914 	add.w	r9, r0, #20
 800b8c2:	f04f 0b00 	mov.w	fp, #0
 800b8c6:	f1ca 0301 	rsb	r3, sl, #1
 800b8ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800b8ce:	f8cd b000 	str.w	fp, [sp]
 800b8d2:	9306      	str	r3, [sp, #24]
 800b8d4:	42b7      	cmp	r7, r6
 800b8d6:	d340      	bcc.n	800b95a <__gethex+0x21e>
 800b8d8:	9802      	ldr	r0, [sp, #8]
 800b8da:	9b00      	ldr	r3, [sp, #0]
 800b8dc:	f840 3b04 	str.w	r3, [r0], #4
 800b8e0:	eba0 0009 	sub.w	r0, r0, r9
 800b8e4:	1080      	asrs	r0, r0, #2
 800b8e6:	0146      	lsls	r6, r0, #5
 800b8e8:	6120      	str	r0, [r4, #16]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 fb40 	bl	800bf70 <__hi0bits>
 800b8f0:	1a30      	subs	r0, r6, r0
 800b8f2:	f8d8 6000 	ldr.w	r6, [r8]
 800b8f6:	42b0      	cmp	r0, r6
 800b8f8:	dd63      	ble.n	800b9c2 <__gethex+0x286>
 800b8fa:	1b87      	subs	r7, r0, r6
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 fee1 	bl	800c6c6 <__any_on>
 800b904:	4682      	mov	sl, r0
 800b906:	b1a8      	cbz	r0, 800b934 <__gethex+0x1f8>
 800b908:	1e7b      	subs	r3, r7, #1
 800b90a:	1159      	asrs	r1, r3, #5
 800b90c:	f003 021f 	and.w	r2, r3, #31
 800b910:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b914:	f04f 0a01 	mov.w	sl, #1
 800b918:	fa0a f202 	lsl.w	r2, sl, r2
 800b91c:	420a      	tst	r2, r1
 800b91e:	d009      	beq.n	800b934 <__gethex+0x1f8>
 800b920:	4553      	cmp	r3, sl
 800b922:	dd05      	ble.n	800b930 <__gethex+0x1f4>
 800b924:	1eb9      	subs	r1, r7, #2
 800b926:	4620      	mov	r0, r4
 800b928:	f000 fecd 	bl	800c6c6 <__any_on>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d145      	bne.n	800b9bc <__gethex+0x280>
 800b930:	f04f 0a02 	mov.w	sl, #2
 800b934:	4639      	mov	r1, r7
 800b936:	4620      	mov	r0, r4
 800b938:	f7ff fe98 	bl	800b66c <rshift>
 800b93c:	443d      	add	r5, r7
 800b93e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b942:	42ab      	cmp	r3, r5
 800b944:	da4c      	bge.n	800b9e0 <__gethex+0x2a4>
 800b946:	ee18 0a10 	vmov	r0, s16
 800b94a:	4621      	mov	r1, r4
 800b94c:	f000 fa5e 	bl	800be0c <_Bfree>
 800b950:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b952:	2300      	movs	r3, #0
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	27a3      	movs	r7, #163	; 0xa3
 800b958:	e785      	b.n	800b866 <__gethex+0x12a>
 800b95a:	1e73      	subs	r3, r6, #1
 800b95c:	9a05      	ldr	r2, [sp, #20]
 800b95e:	9303      	str	r3, [sp, #12]
 800b960:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b964:	4293      	cmp	r3, r2
 800b966:	d019      	beq.n	800b99c <__gethex+0x260>
 800b968:	f1bb 0f20 	cmp.w	fp, #32
 800b96c:	d107      	bne.n	800b97e <__gethex+0x242>
 800b96e:	9b02      	ldr	r3, [sp, #8]
 800b970:	9a00      	ldr	r2, [sp, #0]
 800b972:	f843 2b04 	str.w	r2, [r3], #4
 800b976:	9302      	str	r3, [sp, #8]
 800b978:	2300      	movs	r3, #0
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	469b      	mov	fp, r3
 800b97e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b982:	f7ff fec5 	bl	800b710 <__hexdig_fun>
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	f000 000f 	and.w	r0, r0, #15
 800b98c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b990:	4303      	orrs	r3, r0
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	f10b 0b04 	add.w	fp, fp, #4
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	e00d      	b.n	800b9b8 <__gethex+0x27c>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	9a06      	ldr	r2, [sp, #24]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	42bb      	cmp	r3, r7
 800b9a4:	d3e0      	bcc.n	800b968 <__gethex+0x22c>
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	9901      	ldr	r1, [sp, #4]
 800b9aa:	9307      	str	r3, [sp, #28]
 800b9ac:	4652      	mov	r2, sl
 800b9ae:	f000 ff6f 	bl	800c890 <strncmp>
 800b9b2:	9b07      	ldr	r3, [sp, #28]
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d1d7      	bne.n	800b968 <__gethex+0x22c>
 800b9b8:	461e      	mov	r6, r3
 800b9ba:	e78b      	b.n	800b8d4 <__gethex+0x198>
 800b9bc:	f04f 0a03 	mov.w	sl, #3
 800b9c0:	e7b8      	b.n	800b934 <__gethex+0x1f8>
 800b9c2:	da0a      	bge.n	800b9da <__gethex+0x29e>
 800b9c4:	1a37      	subs	r7, r6, r0
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	ee18 0a10 	vmov	r0, s16
 800b9cc:	463a      	mov	r2, r7
 800b9ce:	f000 fc39 	bl	800c244 <__lshift>
 800b9d2:	1bed      	subs	r5, r5, r7
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	f100 0914 	add.w	r9, r0, #20
 800b9da:	f04f 0a00 	mov.w	sl, #0
 800b9de:	e7ae      	b.n	800b93e <__gethex+0x202>
 800b9e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9e4:	42a8      	cmp	r0, r5
 800b9e6:	dd72      	ble.n	800bace <__gethex+0x392>
 800b9e8:	1b45      	subs	r5, r0, r5
 800b9ea:	42ae      	cmp	r6, r5
 800b9ec:	dc36      	bgt.n	800ba5c <__gethex+0x320>
 800b9ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d02a      	beq.n	800ba4c <__gethex+0x310>
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	d02c      	beq.n	800ba54 <__gethex+0x318>
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d11c      	bne.n	800ba38 <__gethex+0x2fc>
 800b9fe:	42ae      	cmp	r6, r5
 800ba00:	d11a      	bne.n	800ba38 <__gethex+0x2fc>
 800ba02:	2e01      	cmp	r6, #1
 800ba04:	d112      	bne.n	800ba2c <__gethex+0x2f0>
 800ba06:	9a04      	ldr	r2, [sp, #16]
 800ba08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba0c:	6013      	str	r3, [r2, #0]
 800ba0e:	2301      	movs	r3, #1
 800ba10:	6123      	str	r3, [r4, #16]
 800ba12:	f8c9 3000 	str.w	r3, [r9]
 800ba16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba18:	2762      	movs	r7, #98	; 0x62
 800ba1a:	601c      	str	r4, [r3, #0]
 800ba1c:	e723      	b.n	800b866 <__gethex+0x12a>
 800ba1e:	bf00      	nop
 800ba20:	0800d8f8 	.word	0x0800d8f8
 800ba24:	0800d880 	.word	0x0800d880
 800ba28:	0800d891 	.word	0x0800d891
 800ba2c:	1e71      	subs	r1, r6, #1
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fe49 	bl	800c6c6 <__any_on>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1e6      	bne.n	800ba06 <__gethex+0x2ca>
 800ba38:	ee18 0a10 	vmov	r0, s16
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	f000 f9e5 	bl	800be0c <_Bfree>
 800ba42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba44:	2300      	movs	r3, #0
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	2750      	movs	r7, #80	; 0x50
 800ba4a:	e70c      	b.n	800b866 <__gethex+0x12a>
 800ba4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1f2      	bne.n	800ba38 <__gethex+0x2fc>
 800ba52:	e7d8      	b.n	800ba06 <__gethex+0x2ca>
 800ba54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1d5      	bne.n	800ba06 <__gethex+0x2ca>
 800ba5a:	e7ed      	b.n	800ba38 <__gethex+0x2fc>
 800ba5c:	1e6f      	subs	r7, r5, #1
 800ba5e:	f1ba 0f00 	cmp.w	sl, #0
 800ba62:	d131      	bne.n	800bac8 <__gethex+0x38c>
 800ba64:	b127      	cbz	r7, 800ba70 <__gethex+0x334>
 800ba66:	4639      	mov	r1, r7
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f000 fe2c 	bl	800c6c6 <__any_on>
 800ba6e:	4682      	mov	sl, r0
 800ba70:	117b      	asrs	r3, r7, #5
 800ba72:	2101      	movs	r1, #1
 800ba74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ba78:	f007 071f 	and.w	r7, r7, #31
 800ba7c:	fa01 f707 	lsl.w	r7, r1, r7
 800ba80:	421f      	tst	r7, r3
 800ba82:	4629      	mov	r1, r5
 800ba84:	4620      	mov	r0, r4
 800ba86:	bf18      	it	ne
 800ba88:	f04a 0a02 	orrne.w	sl, sl, #2
 800ba8c:	1b76      	subs	r6, r6, r5
 800ba8e:	f7ff fded 	bl	800b66c <rshift>
 800ba92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba96:	2702      	movs	r7, #2
 800ba98:	f1ba 0f00 	cmp.w	sl, #0
 800ba9c:	d048      	beq.n	800bb30 <__gethex+0x3f4>
 800ba9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800baa2:	2b02      	cmp	r3, #2
 800baa4:	d015      	beq.n	800bad2 <__gethex+0x396>
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d017      	beq.n	800bada <__gethex+0x39e>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d109      	bne.n	800bac2 <__gethex+0x386>
 800baae:	f01a 0f02 	tst.w	sl, #2
 800bab2:	d006      	beq.n	800bac2 <__gethex+0x386>
 800bab4:	f8d9 0000 	ldr.w	r0, [r9]
 800bab8:	ea4a 0a00 	orr.w	sl, sl, r0
 800babc:	f01a 0f01 	tst.w	sl, #1
 800bac0:	d10e      	bne.n	800bae0 <__gethex+0x3a4>
 800bac2:	f047 0710 	orr.w	r7, r7, #16
 800bac6:	e033      	b.n	800bb30 <__gethex+0x3f4>
 800bac8:	f04f 0a01 	mov.w	sl, #1
 800bacc:	e7d0      	b.n	800ba70 <__gethex+0x334>
 800bace:	2701      	movs	r7, #1
 800bad0:	e7e2      	b.n	800ba98 <__gethex+0x35c>
 800bad2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bad4:	f1c3 0301 	rsb	r3, r3, #1
 800bad8:	9315      	str	r3, [sp, #84]	; 0x54
 800bada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800badc:	2b00      	cmp	r3, #0
 800bade:	d0f0      	beq.n	800bac2 <__gethex+0x386>
 800bae0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bae4:	f104 0314 	add.w	r3, r4, #20
 800bae8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800baec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800baf0:	f04f 0c00 	mov.w	ip, #0
 800baf4:	4618      	mov	r0, r3
 800baf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bafe:	d01c      	beq.n	800bb3a <__gethex+0x3fe>
 800bb00:	3201      	adds	r2, #1
 800bb02:	6002      	str	r2, [r0, #0]
 800bb04:	2f02      	cmp	r7, #2
 800bb06:	f104 0314 	add.w	r3, r4, #20
 800bb0a:	d13f      	bne.n	800bb8c <__gethex+0x450>
 800bb0c:	f8d8 2000 	ldr.w	r2, [r8]
 800bb10:	3a01      	subs	r2, #1
 800bb12:	42b2      	cmp	r2, r6
 800bb14:	d10a      	bne.n	800bb2c <__gethex+0x3f0>
 800bb16:	1171      	asrs	r1, r6, #5
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb1e:	f006 061f 	and.w	r6, r6, #31
 800bb22:	fa02 f606 	lsl.w	r6, r2, r6
 800bb26:	421e      	tst	r6, r3
 800bb28:	bf18      	it	ne
 800bb2a:	4617      	movne	r7, r2
 800bb2c:	f047 0720 	orr.w	r7, r7, #32
 800bb30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb32:	601c      	str	r4, [r3, #0]
 800bb34:	9b04      	ldr	r3, [sp, #16]
 800bb36:	601d      	str	r5, [r3, #0]
 800bb38:	e695      	b.n	800b866 <__gethex+0x12a>
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb40:	d8d8      	bhi.n	800baf4 <__gethex+0x3b8>
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	459b      	cmp	fp, r3
 800bb46:	db19      	blt.n	800bb7c <__gethex+0x440>
 800bb48:	6861      	ldr	r1, [r4, #4]
 800bb4a:	ee18 0a10 	vmov	r0, s16
 800bb4e:	3101      	adds	r1, #1
 800bb50:	f000 f91c 	bl	800bd8c <_Balloc>
 800bb54:	4681      	mov	r9, r0
 800bb56:	b918      	cbnz	r0, 800bb60 <__gethex+0x424>
 800bb58:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <__gethex+0x488>)
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	2184      	movs	r1, #132	; 0x84
 800bb5e:	e6a8      	b.n	800b8b2 <__gethex+0x176>
 800bb60:	6922      	ldr	r2, [r4, #16]
 800bb62:	3202      	adds	r2, #2
 800bb64:	f104 010c 	add.w	r1, r4, #12
 800bb68:	0092      	lsls	r2, r2, #2
 800bb6a:	300c      	adds	r0, #12
 800bb6c:	f000 f900 	bl	800bd70 <memcpy>
 800bb70:	4621      	mov	r1, r4
 800bb72:	ee18 0a10 	vmov	r0, s16
 800bb76:	f000 f949 	bl	800be0c <_Bfree>
 800bb7a:	464c      	mov	r4, r9
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb84:	6122      	str	r2, [r4, #16]
 800bb86:	2201      	movs	r2, #1
 800bb88:	615a      	str	r2, [r3, #20]
 800bb8a:	e7bb      	b.n	800bb04 <__gethex+0x3c8>
 800bb8c:	6922      	ldr	r2, [r4, #16]
 800bb8e:	455a      	cmp	r2, fp
 800bb90:	dd0b      	ble.n	800bbaa <__gethex+0x46e>
 800bb92:	2101      	movs	r1, #1
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7ff fd69 	bl	800b66c <rshift>
 800bb9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb9e:	3501      	adds	r5, #1
 800bba0:	42ab      	cmp	r3, r5
 800bba2:	f6ff aed0 	blt.w	800b946 <__gethex+0x20a>
 800bba6:	2701      	movs	r7, #1
 800bba8:	e7c0      	b.n	800bb2c <__gethex+0x3f0>
 800bbaa:	f016 061f 	ands.w	r6, r6, #31
 800bbae:	d0fa      	beq.n	800bba6 <__gethex+0x46a>
 800bbb0:	4453      	add	r3, sl
 800bbb2:	f1c6 0620 	rsb	r6, r6, #32
 800bbb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bbba:	f000 f9d9 	bl	800bf70 <__hi0bits>
 800bbbe:	42b0      	cmp	r0, r6
 800bbc0:	dbe7      	blt.n	800bb92 <__gethex+0x456>
 800bbc2:	e7f0      	b.n	800bba6 <__gethex+0x46a>
 800bbc4:	0800d880 	.word	0x0800d880

0800bbc8 <L_shift>:
 800bbc8:	f1c2 0208 	rsb	r2, r2, #8
 800bbcc:	0092      	lsls	r2, r2, #2
 800bbce:	b570      	push	{r4, r5, r6, lr}
 800bbd0:	f1c2 0620 	rsb	r6, r2, #32
 800bbd4:	6843      	ldr	r3, [r0, #4]
 800bbd6:	6804      	ldr	r4, [r0, #0]
 800bbd8:	fa03 f506 	lsl.w	r5, r3, r6
 800bbdc:	432c      	orrs	r4, r5
 800bbde:	40d3      	lsrs	r3, r2
 800bbe0:	6004      	str	r4, [r0, #0]
 800bbe2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bbe6:	4288      	cmp	r0, r1
 800bbe8:	d3f4      	bcc.n	800bbd4 <L_shift+0xc>
 800bbea:	bd70      	pop	{r4, r5, r6, pc}

0800bbec <__match>:
 800bbec:	b530      	push	{r4, r5, lr}
 800bbee:	6803      	ldr	r3, [r0, #0]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf6:	b914      	cbnz	r4, 800bbfe <__match+0x12>
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	bd30      	pop	{r4, r5, pc}
 800bbfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bc06:	2d19      	cmp	r5, #25
 800bc08:	bf98      	it	ls
 800bc0a:	3220      	addls	r2, #32
 800bc0c:	42a2      	cmp	r2, r4
 800bc0e:	d0f0      	beq.n	800bbf2 <__match+0x6>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e7f3      	b.n	800bbfc <__match+0x10>

0800bc14 <__hexnan>:
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	680b      	ldr	r3, [r1, #0]
 800bc1a:	115e      	asrs	r6, r3, #5
 800bc1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc20:	f013 031f 	ands.w	r3, r3, #31
 800bc24:	b087      	sub	sp, #28
 800bc26:	bf18      	it	ne
 800bc28:	3604      	addne	r6, #4
 800bc2a:	2500      	movs	r5, #0
 800bc2c:	1f37      	subs	r7, r6, #4
 800bc2e:	4690      	mov	r8, r2
 800bc30:	6802      	ldr	r2, [r0, #0]
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	4682      	mov	sl, r0
 800bc36:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc3a:	46b9      	mov	r9, r7
 800bc3c:	463c      	mov	r4, r7
 800bc3e:	9502      	str	r5, [sp, #8]
 800bc40:	46ab      	mov	fp, r5
 800bc42:	7851      	ldrb	r1, [r2, #1]
 800bc44:	1c53      	adds	r3, r2, #1
 800bc46:	9303      	str	r3, [sp, #12]
 800bc48:	b341      	cbz	r1, 800bc9c <__hexnan+0x88>
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	9205      	str	r2, [sp, #20]
 800bc4e:	9104      	str	r1, [sp, #16]
 800bc50:	f7ff fd5e 	bl	800b710 <__hexdig_fun>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d14f      	bne.n	800bcf8 <__hexnan+0xe4>
 800bc58:	9904      	ldr	r1, [sp, #16]
 800bc5a:	9a05      	ldr	r2, [sp, #20]
 800bc5c:	2920      	cmp	r1, #32
 800bc5e:	d818      	bhi.n	800bc92 <__hexnan+0x7e>
 800bc60:	9b02      	ldr	r3, [sp, #8]
 800bc62:	459b      	cmp	fp, r3
 800bc64:	dd13      	ble.n	800bc8e <__hexnan+0x7a>
 800bc66:	454c      	cmp	r4, r9
 800bc68:	d206      	bcs.n	800bc78 <__hexnan+0x64>
 800bc6a:	2d07      	cmp	r5, #7
 800bc6c:	dc04      	bgt.n	800bc78 <__hexnan+0x64>
 800bc6e:	462a      	mov	r2, r5
 800bc70:	4649      	mov	r1, r9
 800bc72:	4620      	mov	r0, r4
 800bc74:	f7ff ffa8 	bl	800bbc8 <L_shift>
 800bc78:	4544      	cmp	r4, r8
 800bc7a:	d950      	bls.n	800bd1e <__hexnan+0x10a>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f1a4 0904 	sub.w	r9, r4, #4
 800bc82:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc86:	f8cd b008 	str.w	fp, [sp, #8]
 800bc8a:	464c      	mov	r4, r9
 800bc8c:	461d      	mov	r5, r3
 800bc8e:	9a03      	ldr	r2, [sp, #12]
 800bc90:	e7d7      	b.n	800bc42 <__hexnan+0x2e>
 800bc92:	2929      	cmp	r1, #41	; 0x29
 800bc94:	d156      	bne.n	800bd44 <__hexnan+0x130>
 800bc96:	3202      	adds	r2, #2
 800bc98:	f8ca 2000 	str.w	r2, [sl]
 800bc9c:	f1bb 0f00 	cmp.w	fp, #0
 800bca0:	d050      	beq.n	800bd44 <__hexnan+0x130>
 800bca2:	454c      	cmp	r4, r9
 800bca4:	d206      	bcs.n	800bcb4 <__hexnan+0xa0>
 800bca6:	2d07      	cmp	r5, #7
 800bca8:	dc04      	bgt.n	800bcb4 <__hexnan+0xa0>
 800bcaa:	462a      	mov	r2, r5
 800bcac:	4649      	mov	r1, r9
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7ff ff8a 	bl	800bbc8 <L_shift>
 800bcb4:	4544      	cmp	r4, r8
 800bcb6:	d934      	bls.n	800bd22 <__hexnan+0x10e>
 800bcb8:	f1a8 0204 	sub.w	r2, r8, #4
 800bcbc:	4623      	mov	r3, r4
 800bcbe:	f853 1b04 	ldr.w	r1, [r3], #4
 800bcc2:	f842 1f04 	str.w	r1, [r2, #4]!
 800bcc6:	429f      	cmp	r7, r3
 800bcc8:	d2f9      	bcs.n	800bcbe <__hexnan+0xaa>
 800bcca:	1b3b      	subs	r3, r7, r4
 800bccc:	f023 0303 	bic.w	r3, r3, #3
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	3e03      	subs	r6, #3
 800bcd6:	42b4      	cmp	r4, r6
 800bcd8:	bf88      	it	hi
 800bcda:	2304      	movhi	r3, #4
 800bcdc:	4443      	add	r3, r8
 800bcde:	2200      	movs	r2, #0
 800bce0:	f843 2b04 	str.w	r2, [r3], #4
 800bce4:	429f      	cmp	r7, r3
 800bce6:	d2fb      	bcs.n	800bce0 <__hexnan+0xcc>
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	b91b      	cbnz	r3, 800bcf4 <__hexnan+0xe0>
 800bcec:	4547      	cmp	r7, r8
 800bcee:	d127      	bne.n	800bd40 <__hexnan+0x12c>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	2005      	movs	r0, #5
 800bcf6:	e026      	b.n	800bd46 <__hexnan+0x132>
 800bcf8:	3501      	adds	r5, #1
 800bcfa:	2d08      	cmp	r5, #8
 800bcfc:	f10b 0b01 	add.w	fp, fp, #1
 800bd00:	dd06      	ble.n	800bd10 <__hexnan+0xfc>
 800bd02:	4544      	cmp	r4, r8
 800bd04:	d9c3      	bls.n	800bc8e <__hexnan+0x7a>
 800bd06:	2300      	movs	r3, #0
 800bd08:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd0c:	2501      	movs	r5, #1
 800bd0e:	3c04      	subs	r4, #4
 800bd10:	6822      	ldr	r2, [r4, #0]
 800bd12:	f000 000f 	and.w	r0, r0, #15
 800bd16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bd1a:	6022      	str	r2, [r4, #0]
 800bd1c:	e7b7      	b.n	800bc8e <__hexnan+0x7a>
 800bd1e:	2508      	movs	r5, #8
 800bd20:	e7b5      	b.n	800bc8e <__hexnan+0x7a>
 800bd22:	9b01      	ldr	r3, [sp, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d0df      	beq.n	800bce8 <__hexnan+0xd4>
 800bd28:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2c:	f1c3 0320 	rsb	r3, r3, #32
 800bd30:	fa22 f303 	lsr.w	r3, r2, r3
 800bd34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd38:	401a      	ands	r2, r3
 800bd3a:	f846 2c04 	str.w	r2, [r6, #-4]
 800bd3e:	e7d3      	b.n	800bce8 <__hexnan+0xd4>
 800bd40:	3f04      	subs	r7, #4
 800bd42:	e7d1      	b.n	800bce8 <__hexnan+0xd4>
 800bd44:	2004      	movs	r0, #4
 800bd46:	b007      	add	sp, #28
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd4c <__ascii_mbtowc>:
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	b901      	cbnz	r1, 800bd52 <__ascii_mbtowc+0x6>
 800bd50:	a901      	add	r1, sp, #4
 800bd52:	b142      	cbz	r2, 800bd66 <__ascii_mbtowc+0x1a>
 800bd54:	b14b      	cbz	r3, 800bd6a <__ascii_mbtowc+0x1e>
 800bd56:	7813      	ldrb	r3, [r2, #0]
 800bd58:	600b      	str	r3, [r1, #0]
 800bd5a:	7812      	ldrb	r2, [r2, #0]
 800bd5c:	1e10      	subs	r0, r2, #0
 800bd5e:	bf18      	it	ne
 800bd60:	2001      	movne	r0, #1
 800bd62:	b002      	add	sp, #8
 800bd64:	4770      	bx	lr
 800bd66:	4610      	mov	r0, r2
 800bd68:	e7fb      	b.n	800bd62 <__ascii_mbtowc+0x16>
 800bd6a:	f06f 0001 	mvn.w	r0, #1
 800bd6e:	e7f8      	b.n	800bd62 <__ascii_mbtowc+0x16>

0800bd70 <memcpy>:
 800bd70:	440a      	add	r2, r1
 800bd72:	4291      	cmp	r1, r2
 800bd74:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd78:	d100      	bne.n	800bd7c <memcpy+0xc>
 800bd7a:	4770      	bx	lr
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd86:	4291      	cmp	r1, r2
 800bd88:	d1f9      	bne.n	800bd7e <memcpy+0xe>
 800bd8a:	bd10      	pop	{r4, pc}

0800bd8c <_Balloc>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd90:	4604      	mov	r4, r0
 800bd92:	460d      	mov	r5, r1
 800bd94:	b976      	cbnz	r6, 800bdb4 <_Balloc+0x28>
 800bd96:	2010      	movs	r0, #16
 800bd98:	f000 fdcc 	bl	800c934 <malloc>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	6260      	str	r0, [r4, #36]	; 0x24
 800bda0:	b920      	cbnz	r0, 800bdac <_Balloc+0x20>
 800bda2:	4b18      	ldr	r3, [pc, #96]	; (800be04 <_Balloc+0x78>)
 800bda4:	4818      	ldr	r0, [pc, #96]	; (800be08 <_Balloc+0x7c>)
 800bda6:	2166      	movs	r1, #102	; 0x66
 800bda8:	f000 fd94 	bl	800c8d4 <__assert_func>
 800bdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdb0:	6006      	str	r6, [r0, #0]
 800bdb2:	60c6      	str	r6, [r0, #12]
 800bdb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdb6:	68f3      	ldr	r3, [r6, #12]
 800bdb8:	b183      	cbz	r3, 800bddc <_Balloc+0x50>
 800bdba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdc2:	b9b8      	cbnz	r0, 800bdf4 <_Balloc+0x68>
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	fa01 f605 	lsl.w	r6, r1, r5
 800bdca:	1d72      	adds	r2, r6, #5
 800bdcc:	0092      	lsls	r2, r2, #2
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f000 fc9a 	bl	800c708 <_calloc_r>
 800bdd4:	b160      	cbz	r0, 800bdf0 <_Balloc+0x64>
 800bdd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdda:	e00e      	b.n	800bdfa <_Balloc+0x6e>
 800bddc:	2221      	movs	r2, #33	; 0x21
 800bdde:	2104      	movs	r1, #4
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 fc91 	bl	800c708 <_calloc_r>
 800bde6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde8:	60f0      	str	r0, [r6, #12]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e4      	bne.n	800bdba <_Balloc+0x2e>
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
 800bdf4:	6802      	ldr	r2, [r0, #0]
 800bdf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be00:	e7f7      	b.n	800bdf2 <_Balloc+0x66>
 800be02:	bf00      	nop
 800be04:	0800d90c 	.word	0x0800d90c
 800be08:	0800d923 	.word	0x0800d923

0800be0c <_Bfree>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be10:	4605      	mov	r5, r0
 800be12:	460c      	mov	r4, r1
 800be14:	b976      	cbnz	r6, 800be34 <_Bfree+0x28>
 800be16:	2010      	movs	r0, #16
 800be18:	f000 fd8c 	bl	800c934 <malloc>
 800be1c:	4602      	mov	r2, r0
 800be1e:	6268      	str	r0, [r5, #36]	; 0x24
 800be20:	b920      	cbnz	r0, 800be2c <_Bfree+0x20>
 800be22:	4b09      	ldr	r3, [pc, #36]	; (800be48 <_Bfree+0x3c>)
 800be24:	4809      	ldr	r0, [pc, #36]	; (800be4c <_Bfree+0x40>)
 800be26:	218a      	movs	r1, #138	; 0x8a
 800be28:	f000 fd54 	bl	800c8d4 <__assert_func>
 800be2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be30:	6006      	str	r6, [r0, #0]
 800be32:	60c6      	str	r6, [r0, #12]
 800be34:	b13c      	cbz	r4, 800be46 <_Bfree+0x3a>
 800be36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be38:	6862      	ldr	r2, [r4, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be40:	6021      	str	r1, [r4, #0]
 800be42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be46:	bd70      	pop	{r4, r5, r6, pc}
 800be48:	0800d90c 	.word	0x0800d90c
 800be4c:	0800d923 	.word	0x0800d923

0800be50 <__multadd>:
 800be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be54:	690d      	ldr	r5, [r1, #16]
 800be56:	4607      	mov	r7, r0
 800be58:	460c      	mov	r4, r1
 800be5a:	461e      	mov	r6, r3
 800be5c:	f101 0c14 	add.w	ip, r1, #20
 800be60:	2000      	movs	r0, #0
 800be62:	f8dc 3000 	ldr.w	r3, [ip]
 800be66:	b299      	uxth	r1, r3
 800be68:	fb02 6101 	mla	r1, r2, r1, r6
 800be6c:	0c1e      	lsrs	r6, r3, #16
 800be6e:	0c0b      	lsrs	r3, r1, #16
 800be70:	fb02 3306 	mla	r3, r2, r6, r3
 800be74:	b289      	uxth	r1, r1
 800be76:	3001      	adds	r0, #1
 800be78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be7c:	4285      	cmp	r5, r0
 800be7e:	f84c 1b04 	str.w	r1, [ip], #4
 800be82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be86:	dcec      	bgt.n	800be62 <__multadd+0x12>
 800be88:	b30e      	cbz	r6, 800bece <__multadd+0x7e>
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	42ab      	cmp	r3, r5
 800be8e:	dc19      	bgt.n	800bec4 <__multadd+0x74>
 800be90:	6861      	ldr	r1, [r4, #4]
 800be92:	4638      	mov	r0, r7
 800be94:	3101      	adds	r1, #1
 800be96:	f7ff ff79 	bl	800bd8c <_Balloc>
 800be9a:	4680      	mov	r8, r0
 800be9c:	b928      	cbnz	r0, 800beaa <__multadd+0x5a>
 800be9e:	4602      	mov	r2, r0
 800bea0:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <__multadd+0x84>)
 800bea2:	480d      	ldr	r0, [pc, #52]	; (800bed8 <__multadd+0x88>)
 800bea4:	21b5      	movs	r1, #181	; 0xb5
 800bea6:	f000 fd15 	bl	800c8d4 <__assert_func>
 800beaa:	6922      	ldr	r2, [r4, #16]
 800beac:	3202      	adds	r2, #2
 800beae:	f104 010c 	add.w	r1, r4, #12
 800beb2:	0092      	lsls	r2, r2, #2
 800beb4:	300c      	adds	r0, #12
 800beb6:	f7ff ff5b 	bl	800bd70 <memcpy>
 800beba:	4621      	mov	r1, r4
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7ff ffa5 	bl	800be0c <_Bfree>
 800bec2:	4644      	mov	r4, r8
 800bec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bec8:	3501      	adds	r5, #1
 800beca:	615e      	str	r6, [r3, #20]
 800becc:	6125      	str	r5, [r4, #16]
 800bece:	4620      	mov	r0, r4
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed4:	0800d880 	.word	0x0800d880
 800bed8:	0800d923 	.word	0x0800d923

0800bedc <__s2b>:
 800bedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bee0:	460c      	mov	r4, r1
 800bee2:	4615      	mov	r5, r2
 800bee4:	461f      	mov	r7, r3
 800bee6:	2209      	movs	r2, #9
 800bee8:	3308      	adds	r3, #8
 800beea:	4606      	mov	r6, r0
 800beec:	fb93 f3f2 	sdiv	r3, r3, r2
 800bef0:	2100      	movs	r1, #0
 800bef2:	2201      	movs	r2, #1
 800bef4:	429a      	cmp	r2, r3
 800bef6:	db09      	blt.n	800bf0c <__s2b+0x30>
 800bef8:	4630      	mov	r0, r6
 800befa:	f7ff ff47 	bl	800bd8c <_Balloc>
 800befe:	b940      	cbnz	r0, 800bf12 <__s2b+0x36>
 800bf00:	4602      	mov	r2, r0
 800bf02:	4b19      	ldr	r3, [pc, #100]	; (800bf68 <__s2b+0x8c>)
 800bf04:	4819      	ldr	r0, [pc, #100]	; (800bf6c <__s2b+0x90>)
 800bf06:	21ce      	movs	r1, #206	; 0xce
 800bf08:	f000 fce4 	bl	800c8d4 <__assert_func>
 800bf0c:	0052      	lsls	r2, r2, #1
 800bf0e:	3101      	adds	r1, #1
 800bf10:	e7f0      	b.n	800bef4 <__s2b+0x18>
 800bf12:	9b08      	ldr	r3, [sp, #32]
 800bf14:	6143      	str	r3, [r0, #20]
 800bf16:	2d09      	cmp	r5, #9
 800bf18:	f04f 0301 	mov.w	r3, #1
 800bf1c:	6103      	str	r3, [r0, #16]
 800bf1e:	dd16      	ble.n	800bf4e <__s2b+0x72>
 800bf20:	f104 0909 	add.w	r9, r4, #9
 800bf24:	46c8      	mov	r8, r9
 800bf26:	442c      	add	r4, r5
 800bf28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf2c:	4601      	mov	r1, r0
 800bf2e:	3b30      	subs	r3, #48	; 0x30
 800bf30:	220a      	movs	r2, #10
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7ff ff8c 	bl	800be50 <__multadd>
 800bf38:	45a0      	cmp	r8, r4
 800bf3a:	d1f5      	bne.n	800bf28 <__s2b+0x4c>
 800bf3c:	f1a5 0408 	sub.w	r4, r5, #8
 800bf40:	444c      	add	r4, r9
 800bf42:	1b2d      	subs	r5, r5, r4
 800bf44:	1963      	adds	r3, r4, r5
 800bf46:	42bb      	cmp	r3, r7
 800bf48:	db04      	blt.n	800bf54 <__s2b+0x78>
 800bf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf4e:	340a      	adds	r4, #10
 800bf50:	2509      	movs	r5, #9
 800bf52:	e7f6      	b.n	800bf42 <__s2b+0x66>
 800bf54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf58:	4601      	mov	r1, r0
 800bf5a:	3b30      	subs	r3, #48	; 0x30
 800bf5c:	220a      	movs	r2, #10
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f7ff ff76 	bl	800be50 <__multadd>
 800bf64:	e7ee      	b.n	800bf44 <__s2b+0x68>
 800bf66:	bf00      	nop
 800bf68:	0800d880 	.word	0x0800d880
 800bf6c:	0800d923 	.word	0x0800d923

0800bf70 <__hi0bits>:
 800bf70:	0c03      	lsrs	r3, r0, #16
 800bf72:	041b      	lsls	r3, r3, #16
 800bf74:	b9d3      	cbnz	r3, 800bfac <__hi0bits+0x3c>
 800bf76:	0400      	lsls	r0, r0, #16
 800bf78:	2310      	movs	r3, #16
 800bf7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf7e:	bf04      	itt	eq
 800bf80:	0200      	lsleq	r0, r0, #8
 800bf82:	3308      	addeq	r3, #8
 800bf84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf88:	bf04      	itt	eq
 800bf8a:	0100      	lsleq	r0, r0, #4
 800bf8c:	3304      	addeq	r3, #4
 800bf8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf92:	bf04      	itt	eq
 800bf94:	0080      	lsleq	r0, r0, #2
 800bf96:	3302      	addeq	r3, #2
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	db05      	blt.n	800bfa8 <__hi0bits+0x38>
 800bf9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfa0:	f103 0301 	add.w	r3, r3, #1
 800bfa4:	bf08      	it	eq
 800bfa6:	2320      	moveq	r3, #32
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	4770      	bx	lr
 800bfac:	2300      	movs	r3, #0
 800bfae:	e7e4      	b.n	800bf7a <__hi0bits+0xa>

0800bfb0 <__lo0bits>:
 800bfb0:	6803      	ldr	r3, [r0, #0]
 800bfb2:	f013 0207 	ands.w	r2, r3, #7
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	d00b      	beq.n	800bfd2 <__lo0bits+0x22>
 800bfba:	07da      	lsls	r2, r3, #31
 800bfbc:	d423      	bmi.n	800c006 <__lo0bits+0x56>
 800bfbe:	0798      	lsls	r0, r3, #30
 800bfc0:	bf49      	itett	mi
 800bfc2:	085b      	lsrmi	r3, r3, #1
 800bfc4:	089b      	lsrpl	r3, r3, #2
 800bfc6:	2001      	movmi	r0, #1
 800bfc8:	600b      	strmi	r3, [r1, #0]
 800bfca:	bf5c      	itt	pl
 800bfcc:	600b      	strpl	r3, [r1, #0]
 800bfce:	2002      	movpl	r0, #2
 800bfd0:	4770      	bx	lr
 800bfd2:	b298      	uxth	r0, r3
 800bfd4:	b9a8      	cbnz	r0, 800c002 <__lo0bits+0x52>
 800bfd6:	0c1b      	lsrs	r3, r3, #16
 800bfd8:	2010      	movs	r0, #16
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	b90a      	cbnz	r2, 800bfe2 <__lo0bits+0x32>
 800bfde:	3008      	adds	r0, #8
 800bfe0:	0a1b      	lsrs	r3, r3, #8
 800bfe2:	071a      	lsls	r2, r3, #28
 800bfe4:	bf04      	itt	eq
 800bfe6:	091b      	lsreq	r3, r3, #4
 800bfe8:	3004      	addeq	r0, #4
 800bfea:	079a      	lsls	r2, r3, #30
 800bfec:	bf04      	itt	eq
 800bfee:	089b      	lsreq	r3, r3, #2
 800bff0:	3002      	addeq	r0, #2
 800bff2:	07da      	lsls	r2, r3, #31
 800bff4:	d403      	bmi.n	800bffe <__lo0bits+0x4e>
 800bff6:	085b      	lsrs	r3, r3, #1
 800bff8:	f100 0001 	add.w	r0, r0, #1
 800bffc:	d005      	beq.n	800c00a <__lo0bits+0x5a>
 800bffe:	600b      	str	r3, [r1, #0]
 800c000:	4770      	bx	lr
 800c002:	4610      	mov	r0, r2
 800c004:	e7e9      	b.n	800bfda <__lo0bits+0x2a>
 800c006:	2000      	movs	r0, #0
 800c008:	4770      	bx	lr
 800c00a:	2020      	movs	r0, #32
 800c00c:	4770      	bx	lr
	...

0800c010 <__i2b>:
 800c010:	b510      	push	{r4, lr}
 800c012:	460c      	mov	r4, r1
 800c014:	2101      	movs	r1, #1
 800c016:	f7ff feb9 	bl	800bd8c <_Balloc>
 800c01a:	4602      	mov	r2, r0
 800c01c:	b928      	cbnz	r0, 800c02a <__i2b+0x1a>
 800c01e:	4b05      	ldr	r3, [pc, #20]	; (800c034 <__i2b+0x24>)
 800c020:	4805      	ldr	r0, [pc, #20]	; (800c038 <__i2b+0x28>)
 800c022:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c026:	f000 fc55 	bl	800c8d4 <__assert_func>
 800c02a:	2301      	movs	r3, #1
 800c02c:	6144      	str	r4, [r0, #20]
 800c02e:	6103      	str	r3, [r0, #16]
 800c030:	bd10      	pop	{r4, pc}
 800c032:	bf00      	nop
 800c034:	0800d880 	.word	0x0800d880
 800c038:	0800d923 	.word	0x0800d923

0800c03c <__multiply>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	4691      	mov	r9, r2
 800c042:	690a      	ldr	r2, [r1, #16]
 800c044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c048:	429a      	cmp	r2, r3
 800c04a:	bfb8      	it	lt
 800c04c:	460b      	movlt	r3, r1
 800c04e:	460c      	mov	r4, r1
 800c050:	bfbc      	itt	lt
 800c052:	464c      	movlt	r4, r9
 800c054:	4699      	movlt	r9, r3
 800c056:	6927      	ldr	r7, [r4, #16]
 800c058:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c05c:	68a3      	ldr	r3, [r4, #8]
 800c05e:	6861      	ldr	r1, [r4, #4]
 800c060:	eb07 060a 	add.w	r6, r7, sl
 800c064:	42b3      	cmp	r3, r6
 800c066:	b085      	sub	sp, #20
 800c068:	bfb8      	it	lt
 800c06a:	3101      	addlt	r1, #1
 800c06c:	f7ff fe8e 	bl	800bd8c <_Balloc>
 800c070:	b930      	cbnz	r0, 800c080 <__multiply+0x44>
 800c072:	4602      	mov	r2, r0
 800c074:	4b44      	ldr	r3, [pc, #272]	; (800c188 <__multiply+0x14c>)
 800c076:	4845      	ldr	r0, [pc, #276]	; (800c18c <__multiply+0x150>)
 800c078:	f240 115d 	movw	r1, #349	; 0x15d
 800c07c:	f000 fc2a 	bl	800c8d4 <__assert_func>
 800c080:	f100 0514 	add.w	r5, r0, #20
 800c084:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c088:	462b      	mov	r3, r5
 800c08a:	2200      	movs	r2, #0
 800c08c:	4543      	cmp	r3, r8
 800c08e:	d321      	bcc.n	800c0d4 <__multiply+0x98>
 800c090:	f104 0314 	add.w	r3, r4, #20
 800c094:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c098:	f109 0314 	add.w	r3, r9, #20
 800c09c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0a0:	9202      	str	r2, [sp, #8]
 800c0a2:	1b3a      	subs	r2, r7, r4
 800c0a4:	3a15      	subs	r2, #21
 800c0a6:	f022 0203 	bic.w	r2, r2, #3
 800c0aa:	3204      	adds	r2, #4
 800c0ac:	f104 0115 	add.w	r1, r4, #21
 800c0b0:	428f      	cmp	r7, r1
 800c0b2:	bf38      	it	cc
 800c0b4:	2204      	movcc	r2, #4
 800c0b6:	9201      	str	r2, [sp, #4]
 800c0b8:	9a02      	ldr	r2, [sp, #8]
 800c0ba:	9303      	str	r3, [sp, #12]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d80c      	bhi.n	800c0da <__multiply+0x9e>
 800c0c0:	2e00      	cmp	r6, #0
 800c0c2:	dd03      	ble.n	800c0cc <__multiply+0x90>
 800c0c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d05a      	beq.n	800c182 <__multiply+0x146>
 800c0cc:	6106      	str	r6, [r0, #16]
 800c0ce:	b005      	add	sp, #20
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	f843 2b04 	str.w	r2, [r3], #4
 800c0d8:	e7d8      	b.n	800c08c <__multiply+0x50>
 800c0da:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0de:	f1ba 0f00 	cmp.w	sl, #0
 800c0e2:	d024      	beq.n	800c12e <__multiply+0xf2>
 800c0e4:	f104 0e14 	add.w	lr, r4, #20
 800c0e8:	46a9      	mov	r9, r5
 800c0ea:	f04f 0c00 	mov.w	ip, #0
 800c0ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0f2:	f8d9 1000 	ldr.w	r1, [r9]
 800c0f6:	fa1f fb82 	uxth.w	fp, r2
 800c0fa:	b289      	uxth	r1, r1
 800c0fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c100:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c104:	f8d9 2000 	ldr.w	r2, [r9]
 800c108:	4461      	add	r1, ip
 800c10a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c10e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c112:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c116:	b289      	uxth	r1, r1
 800c118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c11c:	4577      	cmp	r7, lr
 800c11e:	f849 1b04 	str.w	r1, [r9], #4
 800c122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c126:	d8e2      	bhi.n	800c0ee <__multiply+0xb2>
 800c128:	9a01      	ldr	r2, [sp, #4]
 800c12a:	f845 c002 	str.w	ip, [r5, r2]
 800c12e:	9a03      	ldr	r2, [sp, #12]
 800c130:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c134:	3304      	adds	r3, #4
 800c136:	f1b9 0f00 	cmp.w	r9, #0
 800c13a:	d020      	beq.n	800c17e <__multiply+0x142>
 800c13c:	6829      	ldr	r1, [r5, #0]
 800c13e:	f104 0c14 	add.w	ip, r4, #20
 800c142:	46ae      	mov	lr, r5
 800c144:	f04f 0a00 	mov.w	sl, #0
 800c148:	f8bc b000 	ldrh.w	fp, [ip]
 800c14c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c150:	fb09 220b 	mla	r2, r9, fp, r2
 800c154:	4492      	add	sl, r2
 800c156:	b289      	uxth	r1, r1
 800c158:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c15c:	f84e 1b04 	str.w	r1, [lr], #4
 800c160:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c164:	f8be 1000 	ldrh.w	r1, [lr]
 800c168:	0c12      	lsrs	r2, r2, #16
 800c16a:	fb09 1102 	mla	r1, r9, r2, r1
 800c16e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c172:	4567      	cmp	r7, ip
 800c174:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c178:	d8e6      	bhi.n	800c148 <__multiply+0x10c>
 800c17a:	9a01      	ldr	r2, [sp, #4]
 800c17c:	50a9      	str	r1, [r5, r2]
 800c17e:	3504      	adds	r5, #4
 800c180:	e79a      	b.n	800c0b8 <__multiply+0x7c>
 800c182:	3e01      	subs	r6, #1
 800c184:	e79c      	b.n	800c0c0 <__multiply+0x84>
 800c186:	bf00      	nop
 800c188:	0800d880 	.word	0x0800d880
 800c18c:	0800d923 	.word	0x0800d923

0800c190 <__pow5mult>:
 800c190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c194:	4615      	mov	r5, r2
 800c196:	f012 0203 	ands.w	r2, r2, #3
 800c19a:	4606      	mov	r6, r0
 800c19c:	460f      	mov	r7, r1
 800c19e:	d007      	beq.n	800c1b0 <__pow5mult+0x20>
 800c1a0:	4c25      	ldr	r4, [pc, #148]	; (800c238 <__pow5mult+0xa8>)
 800c1a2:	3a01      	subs	r2, #1
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1aa:	f7ff fe51 	bl	800be50 <__multadd>
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	10ad      	asrs	r5, r5, #2
 800c1b2:	d03d      	beq.n	800c230 <__pow5mult+0xa0>
 800c1b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1b6:	b97c      	cbnz	r4, 800c1d8 <__pow5mult+0x48>
 800c1b8:	2010      	movs	r0, #16
 800c1ba:	f000 fbbb 	bl	800c934 <malloc>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	6270      	str	r0, [r6, #36]	; 0x24
 800c1c2:	b928      	cbnz	r0, 800c1d0 <__pow5mult+0x40>
 800c1c4:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <__pow5mult+0xac>)
 800c1c6:	481e      	ldr	r0, [pc, #120]	; (800c240 <__pow5mult+0xb0>)
 800c1c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1cc:	f000 fb82 	bl	800c8d4 <__assert_func>
 800c1d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1d4:	6004      	str	r4, [r0, #0]
 800c1d6:	60c4      	str	r4, [r0, #12]
 800c1d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1e0:	b94c      	cbnz	r4, 800c1f6 <__pow5mult+0x66>
 800c1e2:	f240 2171 	movw	r1, #625	; 0x271
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f7ff ff12 	bl	800c010 <__i2b>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	6003      	str	r3, [r0, #0]
 800c1f6:	f04f 0900 	mov.w	r9, #0
 800c1fa:	07eb      	lsls	r3, r5, #31
 800c1fc:	d50a      	bpl.n	800c214 <__pow5mult+0x84>
 800c1fe:	4639      	mov	r1, r7
 800c200:	4622      	mov	r2, r4
 800c202:	4630      	mov	r0, r6
 800c204:	f7ff ff1a 	bl	800c03c <__multiply>
 800c208:	4639      	mov	r1, r7
 800c20a:	4680      	mov	r8, r0
 800c20c:	4630      	mov	r0, r6
 800c20e:	f7ff fdfd 	bl	800be0c <_Bfree>
 800c212:	4647      	mov	r7, r8
 800c214:	106d      	asrs	r5, r5, #1
 800c216:	d00b      	beq.n	800c230 <__pow5mult+0xa0>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	b938      	cbnz	r0, 800c22c <__pow5mult+0x9c>
 800c21c:	4622      	mov	r2, r4
 800c21e:	4621      	mov	r1, r4
 800c220:	4630      	mov	r0, r6
 800c222:	f7ff ff0b 	bl	800c03c <__multiply>
 800c226:	6020      	str	r0, [r4, #0]
 800c228:	f8c0 9000 	str.w	r9, [r0]
 800c22c:	4604      	mov	r4, r0
 800c22e:	e7e4      	b.n	800c1fa <__pow5mult+0x6a>
 800c230:	4638      	mov	r0, r7
 800c232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c236:	bf00      	nop
 800c238:	0800da70 	.word	0x0800da70
 800c23c:	0800d90c 	.word	0x0800d90c
 800c240:	0800d923 	.word	0x0800d923

0800c244 <__lshift>:
 800c244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c248:	460c      	mov	r4, r1
 800c24a:	6849      	ldr	r1, [r1, #4]
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c252:	68a3      	ldr	r3, [r4, #8]
 800c254:	4607      	mov	r7, r0
 800c256:	4691      	mov	r9, r2
 800c258:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c25c:	f108 0601 	add.w	r6, r8, #1
 800c260:	42b3      	cmp	r3, r6
 800c262:	db0b      	blt.n	800c27c <__lshift+0x38>
 800c264:	4638      	mov	r0, r7
 800c266:	f7ff fd91 	bl	800bd8c <_Balloc>
 800c26a:	4605      	mov	r5, r0
 800c26c:	b948      	cbnz	r0, 800c282 <__lshift+0x3e>
 800c26e:	4602      	mov	r2, r0
 800c270:	4b2a      	ldr	r3, [pc, #168]	; (800c31c <__lshift+0xd8>)
 800c272:	482b      	ldr	r0, [pc, #172]	; (800c320 <__lshift+0xdc>)
 800c274:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c278:	f000 fb2c 	bl	800c8d4 <__assert_func>
 800c27c:	3101      	adds	r1, #1
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	e7ee      	b.n	800c260 <__lshift+0x1c>
 800c282:	2300      	movs	r3, #0
 800c284:	f100 0114 	add.w	r1, r0, #20
 800c288:	f100 0210 	add.w	r2, r0, #16
 800c28c:	4618      	mov	r0, r3
 800c28e:	4553      	cmp	r3, sl
 800c290:	db37      	blt.n	800c302 <__lshift+0xbe>
 800c292:	6920      	ldr	r0, [r4, #16]
 800c294:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c298:	f104 0314 	add.w	r3, r4, #20
 800c29c:	f019 091f 	ands.w	r9, r9, #31
 800c2a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2a8:	d02f      	beq.n	800c30a <__lshift+0xc6>
 800c2aa:	f1c9 0e20 	rsb	lr, r9, #32
 800c2ae:	468a      	mov	sl, r1
 800c2b0:	f04f 0c00 	mov.w	ip, #0
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	fa02 f209 	lsl.w	r2, r2, r9
 800c2ba:	ea42 020c 	orr.w	r2, r2, ip
 800c2be:	f84a 2b04 	str.w	r2, [sl], #4
 800c2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c6:	4298      	cmp	r0, r3
 800c2c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c2cc:	d8f2      	bhi.n	800c2b4 <__lshift+0x70>
 800c2ce:	1b03      	subs	r3, r0, r4
 800c2d0:	3b15      	subs	r3, #21
 800c2d2:	f023 0303 	bic.w	r3, r3, #3
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	f104 0215 	add.w	r2, r4, #21
 800c2dc:	4290      	cmp	r0, r2
 800c2de:	bf38      	it	cc
 800c2e0:	2304      	movcc	r3, #4
 800c2e2:	f841 c003 	str.w	ip, [r1, r3]
 800c2e6:	f1bc 0f00 	cmp.w	ip, #0
 800c2ea:	d001      	beq.n	800c2f0 <__lshift+0xac>
 800c2ec:	f108 0602 	add.w	r6, r8, #2
 800c2f0:	3e01      	subs	r6, #1
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	612e      	str	r6, [r5, #16]
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	f7ff fd88 	bl	800be0c <_Bfree>
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	f842 0f04 	str.w	r0, [r2, #4]!
 800c306:	3301      	adds	r3, #1
 800c308:	e7c1      	b.n	800c28e <__lshift+0x4a>
 800c30a:	3904      	subs	r1, #4
 800c30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c310:	f841 2f04 	str.w	r2, [r1, #4]!
 800c314:	4298      	cmp	r0, r3
 800c316:	d8f9      	bhi.n	800c30c <__lshift+0xc8>
 800c318:	e7ea      	b.n	800c2f0 <__lshift+0xac>
 800c31a:	bf00      	nop
 800c31c:	0800d880 	.word	0x0800d880
 800c320:	0800d923 	.word	0x0800d923

0800c324 <__mcmp>:
 800c324:	b530      	push	{r4, r5, lr}
 800c326:	6902      	ldr	r2, [r0, #16]
 800c328:	690c      	ldr	r4, [r1, #16]
 800c32a:	1b12      	subs	r2, r2, r4
 800c32c:	d10e      	bne.n	800c34c <__mcmp+0x28>
 800c32e:	f100 0314 	add.w	r3, r0, #20
 800c332:	3114      	adds	r1, #20
 800c334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c33c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c344:	42a5      	cmp	r5, r4
 800c346:	d003      	beq.n	800c350 <__mcmp+0x2c>
 800c348:	d305      	bcc.n	800c356 <__mcmp+0x32>
 800c34a:	2201      	movs	r2, #1
 800c34c:	4610      	mov	r0, r2
 800c34e:	bd30      	pop	{r4, r5, pc}
 800c350:	4283      	cmp	r3, r0
 800c352:	d3f3      	bcc.n	800c33c <__mcmp+0x18>
 800c354:	e7fa      	b.n	800c34c <__mcmp+0x28>
 800c356:	f04f 32ff 	mov.w	r2, #4294967295
 800c35a:	e7f7      	b.n	800c34c <__mcmp+0x28>

0800c35c <__mdiff>:
 800c35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	460c      	mov	r4, r1
 800c362:	4606      	mov	r6, r0
 800c364:	4611      	mov	r1, r2
 800c366:	4620      	mov	r0, r4
 800c368:	4690      	mov	r8, r2
 800c36a:	f7ff ffdb 	bl	800c324 <__mcmp>
 800c36e:	1e05      	subs	r5, r0, #0
 800c370:	d110      	bne.n	800c394 <__mdiff+0x38>
 800c372:	4629      	mov	r1, r5
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff fd09 	bl	800bd8c <_Balloc>
 800c37a:	b930      	cbnz	r0, 800c38a <__mdiff+0x2e>
 800c37c:	4b3a      	ldr	r3, [pc, #232]	; (800c468 <__mdiff+0x10c>)
 800c37e:	4602      	mov	r2, r0
 800c380:	f240 2132 	movw	r1, #562	; 0x232
 800c384:	4839      	ldr	r0, [pc, #228]	; (800c46c <__mdiff+0x110>)
 800c386:	f000 faa5 	bl	800c8d4 <__assert_func>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	bfa4      	itt	ge
 800c396:	4643      	movge	r3, r8
 800c398:	46a0      	movge	r8, r4
 800c39a:	4630      	mov	r0, r6
 800c39c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3a0:	bfa6      	itte	ge
 800c3a2:	461c      	movge	r4, r3
 800c3a4:	2500      	movge	r5, #0
 800c3a6:	2501      	movlt	r5, #1
 800c3a8:	f7ff fcf0 	bl	800bd8c <_Balloc>
 800c3ac:	b920      	cbnz	r0, 800c3b8 <__mdiff+0x5c>
 800c3ae:	4b2e      	ldr	r3, [pc, #184]	; (800c468 <__mdiff+0x10c>)
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3b6:	e7e5      	b.n	800c384 <__mdiff+0x28>
 800c3b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3bc:	6926      	ldr	r6, [r4, #16]
 800c3be:	60c5      	str	r5, [r0, #12]
 800c3c0:	f104 0914 	add.w	r9, r4, #20
 800c3c4:	f108 0514 	add.w	r5, r8, #20
 800c3c8:	f100 0e14 	add.w	lr, r0, #20
 800c3cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3d4:	f108 0210 	add.w	r2, r8, #16
 800c3d8:	46f2      	mov	sl, lr
 800c3da:	2100      	movs	r1, #0
 800c3dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3e4:	fa1f f883 	uxth.w	r8, r3
 800c3e8:	fa11 f18b 	uxtah	r1, r1, fp
 800c3ec:	0c1b      	lsrs	r3, r3, #16
 800c3ee:	eba1 0808 	sub.w	r8, r1, r8
 800c3f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3fa:	fa1f f888 	uxth.w	r8, r8
 800c3fe:	1419      	asrs	r1, r3, #16
 800c400:	454e      	cmp	r6, r9
 800c402:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c406:	f84a 3b04 	str.w	r3, [sl], #4
 800c40a:	d8e7      	bhi.n	800c3dc <__mdiff+0x80>
 800c40c:	1b33      	subs	r3, r6, r4
 800c40e:	3b15      	subs	r3, #21
 800c410:	f023 0303 	bic.w	r3, r3, #3
 800c414:	3304      	adds	r3, #4
 800c416:	3415      	adds	r4, #21
 800c418:	42a6      	cmp	r6, r4
 800c41a:	bf38      	it	cc
 800c41c:	2304      	movcc	r3, #4
 800c41e:	441d      	add	r5, r3
 800c420:	4473      	add	r3, lr
 800c422:	469e      	mov	lr, r3
 800c424:	462e      	mov	r6, r5
 800c426:	4566      	cmp	r6, ip
 800c428:	d30e      	bcc.n	800c448 <__mdiff+0xec>
 800c42a:	f10c 0203 	add.w	r2, ip, #3
 800c42e:	1b52      	subs	r2, r2, r5
 800c430:	f022 0203 	bic.w	r2, r2, #3
 800c434:	3d03      	subs	r5, #3
 800c436:	45ac      	cmp	ip, r5
 800c438:	bf38      	it	cc
 800c43a:	2200      	movcc	r2, #0
 800c43c:	441a      	add	r2, r3
 800c43e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c442:	b17b      	cbz	r3, 800c464 <__mdiff+0x108>
 800c444:	6107      	str	r7, [r0, #16]
 800c446:	e7a3      	b.n	800c390 <__mdiff+0x34>
 800c448:	f856 8b04 	ldr.w	r8, [r6], #4
 800c44c:	fa11 f288 	uxtah	r2, r1, r8
 800c450:	1414      	asrs	r4, r2, #16
 800c452:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c456:	b292      	uxth	r2, r2
 800c458:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c45c:	f84e 2b04 	str.w	r2, [lr], #4
 800c460:	1421      	asrs	r1, r4, #16
 800c462:	e7e0      	b.n	800c426 <__mdiff+0xca>
 800c464:	3f01      	subs	r7, #1
 800c466:	e7ea      	b.n	800c43e <__mdiff+0xe2>
 800c468:	0800d880 	.word	0x0800d880
 800c46c:	0800d923 	.word	0x0800d923

0800c470 <__ulp>:
 800c470:	b082      	sub	sp, #8
 800c472:	ed8d 0b00 	vstr	d0, [sp]
 800c476:	9b01      	ldr	r3, [sp, #4]
 800c478:	4912      	ldr	r1, [pc, #72]	; (800c4c4 <__ulp+0x54>)
 800c47a:	4019      	ands	r1, r3
 800c47c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c480:	2900      	cmp	r1, #0
 800c482:	dd05      	ble.n	800c490 <__ulp+0x20>
 800c484:	2200      	movs	r2, #0
 800c486:	460b      	mov	r3, r1
 800c488:	ec43 2b10 	vmov	d0, r2, r3
 800c48c:	b002      	add	sp, #8
 800c48e:	4770      	bx	lr
 800c490:	4249      	negs	r1, r1
 800c492:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c496:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c49a:	f04f 0200 	mov.w	r2, #0
 800c49e:	f04f 0300 	mov.w	r3, #0
 800c4a2:	da04      	bge.n	800c4ae <__ulp+0x3e>
 800c4a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c4a8:	fa41 f300 	asr.w	r3, r1, r0
 800c4ac:	e7ec      	b.n	800c488 <__ulp+0x18>
 800c4ae:	f1a0 0114 	sub.w	r1, r0, #20
 800c4b2:	291e      	cmp	r1, #30
 800c4b4:	bfda      	itte	le
 800c4b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c4ba:	fa20 f101 	lsrle.w	r1, r0, r1
 800c4be:	2101      	movgt	r1, #1
 800c4c0:	460a      	mov	r2, r1
 800c4c2:	e7e1      	b.n	800c488 <__ulp+0x18>
 800c4c4:	7ff00000 	.word	0x7ff00000

0800c4c8 <__b2d>:
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	6905      	ldr	r5, [r0, #16]
 800c4cc:	f100 0714 	add.w	r7, r0, #20
 800c4d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c4d4:	1f2e      	subs	r6, r5, #4
 800c4d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f7ff fd48 	bl	800bf70 <__hi0bits>
 800c4e0:	f1c0 0320 	rsb	r3, r0, #32
 800c4e4:	280a      	cmp	r0, #10
 800c4e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c564 <__b2d+0x9c>
 800c4ea:	600b      	str	r3, [r1, #0]
 800c4ec:	dc14      	bgt.n	800c518 <__b2d+0x50>
 800c4ee:	f1c0 0e0b 	rsb	lr, r0, #11
 800c4f2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c4f6:	42b7      	cmp	r7, r6
 800c4f8:	ea41 030c 	orr.w	r3, r1, ip
 800c4fc:	bf34      	ite	cc
 800c4fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c502:	2100      	movcs	r1, #0
 800c504:	3015      	adds	r0, #21
 800c506:	fa04 f000 	lsl.w	r0, r4, r0
 800c50a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c50e:	ea40 0201 	orr.w	r2, r0, r1
 800c512:	ec43 2b10 	vmov	d0, r2, r3
 800c516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c518:	42b7      	cmp	r7, r6
 800c51a:	bf3a      	itte	cc
 800c51c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c520:	f1a5 0608 	subcc.w	r6, r5, #8
 800c524:	2100      	movcs	r1, #0
 800c526:	380b      	subs	r0, #11
 800c528:	d017      	beq.n	800c55a <__b2d+0x92>
 800c52a:	f1c0 0c20 	rsb	ip, r0, #32
 800c52e:	fa04 f500 	lsl.w	r5, r4, r0
 800c532:	42be      	cmp	r6, r7
 800c534:	fa21 f40c 	lsr.w	r4, r1, ip
 800c538:	ea45 0504 	orr.w	r5, r5, r4
 800c53c:	bf8c      	ite	hi
 800c53e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c542:	2400      	movls	r4, #0
 800c544:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c548:	fa01 f000 	lsl.w	r0, r1, r0
 800c54c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c550:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c554:	ea40 0204 	orr.w	r2, r0, r4
 800c558:	e7db      	b.n	800c512 <__b2d+0x4a>
 800c55a:	ea44 030c 	orr.w	r3, r4, ip
 800c55e:	460a      	mov	r2, r1
 800c560:	e7d7      	b.n	800c512 <__b2d+0x4a>
 800c562:	bf00      	nop
 800c564:	3ff00000 	.word	0x3ff00000

0800c568 <__d2b>:
 800c568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	4689      	mov	r9, r1
 800c56e:	2101      	movs	r1, #1
 800c570:	ec57 6b10 	vmov	r6, r7, d0
 800c574:	4690      	mov	r8, r2
 800c576:	f7ff fc09 	bl	800bd8c <_Balloc>
 800c57a:	4604      	mov	r4, r0
 800c57c:	b930      	cbnz	r0, 800c58c <__d2b+0x24>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b25      	ldr	r3, [pc, #148]	; (800c618 <__d2b+0xb0>)
 800c582:	4826      	ldr	r0, [pc, #152]	; (800c61c <__d2b+0xb4>)
 800c584:	f240 310a 	movw	r1, #778	; 0x30a
 800c588:	f000 f9a4 	bl	800c8d4 <__assert_func>
 800c58c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c594:	bb35      	cbnz	r5, 800c5e4 <__d2b+0x7c>
 800c596:	2e00      	cmp	r6, #0
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	d028      	beq.n	800c5ee <__d2b+0x86>
 800c59c:	4668      	mov	r0, sp
 800c59e:	9600      	str	r6, [sp, #0]
 800c5a0:	f7ff fd06 	bl	800bfb0 <__lo0bits>
 800c5a4:	9900      	ldr	r1, [sp, #0]
 800c5a6:	b300      	cbz	r0, 800c5ea <__d2b+0x82>
 800c5a8:	9a01      	ldr	r2, [sp, #4]
 800c5aa:	f1c0 0320 	rsb	r3, r0, #32
 800c5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	40c2      	lsrs	r2, r0
 800c5b6:	6163      	str	r3, [r4, #20]
 800c5b8:	9201      	str	r2, [sp, #4]
 800c5ba:	9b01      	ldr	r3, [sp, #4]
 800c5bc:	61a3      	str	r3, [r4, #24]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	bf14      	ite	ne
 800c5c2:	2202      	movne	r2, #2
 800c5c4:	2201      	moveq	r2, #1
 800c5c6:	6122      	str	r2, [r4, #16]
 800c5c8:	b1d5      	cbz	r5, 800c600 <__d2b+0x98>
 800c5ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5ce:	4405      	add	r5, r0
 800c5d0:	f8c9 5000 	str.w	r5, [r9]
 800c5d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5d8:	f8c8 0000 	str.w	r0, [r8]
 800c5dc:	4620      	mov	r0, r4
 800c5de:	b003      	add	sp, #12
 800c5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5e8:	e7d5      	b.n	800c596 <__d2b+0x2e>
 800c5ea:	6161      	str	r1, [r4, #20]
 800c5ec:	e7e5      	b.n	800c5ba <__d2b+0x52>
 800c5ee:	a801      	add	r0, sp, #4
 800c5f0:	f7ff fcde 	bl	800bfb0 <__lo0bits>
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	6163      	str	r3, [r4, #20]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	6122      	str	r2, [r4, #16]
 800c5fc:	3020      	adds	r0, #32
 800c5fe:	e7e3      	b.n	800c5c8 <__d2b+0x60>
 800c600:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c604:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c608:	f8c9 0000 	str.w	r0, [r9]
 800c60c:	6918      	ldr	r0, [r3, #16]
 800c60e:	f7ff fcaf 	bl	800bf70 <__hi0bits>
 800c612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c616:	e7df      	b.n	800c5d8 <__d2b+0x70>
 800c618:	0800d880 	.word	0x0800d880
 800c61c:	0800d923 	.word	0x0800d923

0800c620 <__ratio>:
 800c620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	4688      	mov	r8, r1
 800c626:	4669      	mov	r1, sp
 800c628:	4681      	mov	r9, r0
 800c62a:	f7ff ff4d 	bl	800c4c8 <__b2d>
 800c62e:	a901      	add	r1, sp, #4
 800c630:	4640      	mov	r0, r8
 800c632:	ec55 4b10 	vmov	r4, r5, d0
 800c636:	ee10 aa10 	vmov	sl, s0
 800c63a:	f7ff ff45 	bl	800c4c8 <__b2d>
 800c63e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c642:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c646:	1a59      	subs	r1, r3, r1
 800c648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c652:	ec57 6b10 	vmov	r6, r7, d0
 800c656:	2b00      	cmp	r3, #0
 800c658:	bfd6      	itet	le
 800c65a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c65e:	462a      	movgt	r2, r5
 800c660:	463a      	movle	r2, r7
 800c662:	46ab      	mov	fp, r5
 800c664:	bfd6      	itet	le
 800c666:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c66a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c66e:	ee00 3a90 	vmovle	s1, r3
 800c672:	ec4b ab17 	vmov	d7, sl, fp
 800c676:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c67a:	b003      	add	sp, #12
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c680 <__copybits>:
 800c680:	3901      	subs	r1, #1
 800c682:	b570      	push	{r4, r5, r6, lr}
 800c684:	1149      	asrs	r1, r1, #5
 800c686:	6914      	ldr	r4, [r2, #16]
 800c688:	3101      	adds	r1, #1
 800c68a:	f102 0314 	add.w	r3, r2, #20
 800c68e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c692:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c696:	1f05      	subs	r5, r0, #4
 800c698:	42a3      	cmp	r3, r4
 800c69a:	d30c      	bcc.n	800c6b6 <__copybits+0x36>
 800c69c:	1aa3      	subs	r3, r4, r2
 800c69e:	3b11      	subs	r3, #17
 800c6a0:	f023 0303 	bic.w	r3, r3, #3
 800c6a4:	3211      	adds	r2, #17
 800c6a6:	42a2      	cmp	r2, r4
 800c6a8:	bf88      	it	hi
 800c6aa:	2300      	movhi	r3, #0
 800c6ac:	4418      	add	r0, r3
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	4288      	cmp	r0, r1
 800c6b2:	d305      	bcc.n	800c6c0 <__copybits+0x40>
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800c6ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800c6be:	e7eb      	b.n	800c698 <__copybits+0x18>
 800c6c0:	f840 3b04 	str.w	r3, [r0], #4
 800c6c4:	e7f4      	b.n	800c6b0 <__copybits+0x30>

0800c6c6 <__any_on>:
 800c6c6:	f100 0214 	add.w	r2, r0, #20
 800c6ca:	6900      	ldr	r0, [r0, #16]
 800c6cc:	114b      	asrs	r3, r1, #5
 800c6ce:	4298      	cmp	r0, r3
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	db11      	blt.n	800c6f8 <__any_on+0x32>
 800c6d4:	dd0a      	ble.n	800c6ec <__any_on+0x26>
 800c6d6:	f011 011f 	ands.w	r1, r1, #31
 800c6da:	d007      	beq.n	800c6ec <__any_on+0x26>
 800c6dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6e0:	fa24 f001 	lsr.w	r0, r4, r1
 800c6e4:	fa00 f101 	lsl.w	r1, r0, r1
 800c6e8:	428c      	cmp	r4, r1
 800c6ea:	d10b      	bne.n	800c704 <__any_on+0x3e>
 800c6ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d803      	bhi.n	800c6fc <__any_on+0x36>
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	bd10      	pop	{r4, pc}
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	e7f7      	b.n	800c6ec <__any_on+0x26>
 800c6fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c700:	2900      	cmp	r1, #0
 800c702:	d0f5      	beq.n	800c6f0 <__any_on+0x2a>
 800c704:	2001      	movs	r0, #1
 800c706:	e7f6      	b.n	800c6f6 <__any_on+0x30>

0800c708 <_calloc_r>:
 800c708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c70a:	fba1 2402 	umull	r2, r4, r1, r2
 800c70e:	b94c      	cbnz	r4, 800c724 <_calloc_r+0x1c>
 800c710:	4611      	mov	r1, r2
 800c712:	9201      	str	r2, [sp, #4]
 800c714:	f000 f82e 	bl	800c774 <_malloc_r>
 800c718:	9a01      	ldr	r2, [sp, #4]
 800c71a:	4605      	mov	r5, r0
 800c71c:	b930      	cbnz	r0, 800c72c <_calloc_r+0x24>
 800c71e:	4628      	mov	r0, r5
 800c720:	b003      	add	sp, #12
 800c722:	bd30      	pop	{r4, r5, pc}
 800c724:	220c      	movs	r2, #12
 800c726:	6002      	str	r2, [r0, #0]
 800c728:	2500      	movs	r5, #0
 800c72a:	e7f8      	b.n	800c71e <_calloc_r+0x16>
 800c72c:	4621      	mov	r1, r4
 800c72e:	f7fe f9b9 	bl	800aaa4 <memset>
 800c732:	e7f4      	b.n	800c71e <_calloc_r+0x16>

0800c734 <sbrk_aligned>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	4e0e      	ldr	r6, [pc, #56]	; (800c770 <sbrk_aligned+0x3c>)
 800c738:	460c      	mov	r4, r1
 800c73a:	6831      	ldr	r1, [r6, #0]
 800c73c:	4605      	mov	r5, r0
 800c73e:	b911      	cbnz	r1, 800c746 <sbrk_aligned+0x12>
 800c740:	f000 f896 	bl	800c870 <_sbrk_r>
 800c744:	6030      	str	r0, [r6, #0]
 800c746:	4621      	mov	r1, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	f000 f891 	bl	800c870 <_sbrk_r>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	d00a      	beq.n	800c768 <sbrk_aligned+0x34>
 800c752:	1cc4      	adds	r4, r0, #3
 800c754:	f024 0403 	bic.w	r4, r4, #3
 800c758:	42a0      	cmp	r0, r4
 800c75a:	d007      	beq.n	800c76c <sbrk_aligned+0x38>
 800c75c:	1a21      	subs	r1, r4, r0
 800c75e:	4628      	mov	r0, r5
 800c760:	f000 f886 	bl	800c870 <_sbrk_r>
 800c764:	3001      	adds	r0, #1
 800c766:	d101      	bne.n	800c76c <sbrk_aligned+0x38>
 800c768:	f04f 34ff 	mov.w	r4, #4294967295
 800c76c:	4620      	mov	r0, r4
 800c76e:	bd70      	pop	{r4, r5, r6, pc}
 800c770:	2400057c 	.word	0x2400057c

0800c774 <_malloc_r>:
 800c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	1ccd      	adds	r5, r1, #3
 800c77a:	f025 0503 	bic.w	r5, r5, #3
 800c77e:	3508      	adds	r5, #8
 800c780:	2d0c      	cmp	r5, #12
 800c782:	bf38      	it	cc
 800c784:	250c      	movcc	r5, #12
 800c786:	2d00      	cmp	r5, #0
 800c788:	4607      	mov	r7, r0
 800c78a:	db01      	blt.n	800c790 <_malloc_r+0x1c>
 800c78c:	42a9      	cmp	r1, r5
 800c78e:	d905      	bls.n	800c79c <_malloc_r+0x28>
 800c790:	230c      	movs	r3, #12
 800c792:	603b      	str	r3, [r7, #0]
 800c794:	2600      	movs	r6, #0
 800c796:	4630      	mov	r0, r6
 800c798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79c:	4e2e      	ldr	r6, [pc, #184]	; (800c858 <_malloc_r+0xe4>)
 800c79e:	f000 f8d1 	bl	800c944 <__malloc_lock>
 800c7a2:	6833      	ldr	r3, [r6, #0]
 800c7a4:	461c      	mov	r4, r3
 800c7a6:	bb34      	cbnz	r4, 800c7f6 <_malloc_r+0x82>
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	f7ff ffc2 	bl	800c734 <sbrk_aligned>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	d14d      	bne.n	800c852 <_malloc_r+0xde>
 800c7b6:	6834      	ldr	r4, [r6, #0]
 800c7b8:	4626      	mov	r6, r4
 800c7ba:	2e00      	cmp	r6, #0
 800c7bc:	d140      	bne.n	800c840 <_malloc_r+0xcc>
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	eb04 0803 	add.w	r8, r4, r3
 800c7c8:	f000 f852 	bl	800c870 <_sbrk_r>
 800c7cc:	4580      	cmp	r8, r0
 800c7ce:	d13a      	bne.n	800c846 <_malloc_r+0xd2>
 800c7d0:	6821      	ldr	r1, [r4, #0]
 800c7d2:	3503      	adds	r5, #3
 800c7d4:	1a6d      	subs	r5, r5, r1
 800c7d6:	f025 0503 	bic.w	r5, r5, #3
 800c7da:	3508      	adds	r5, #8
 800c7dc:	2d0c      	cmp	r5, #12
 800c7de:	bf38      	it	cc
 800c7e0:	250c      	movcc	r5, #12
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7ff ffa5 	bl	800c734 <sbrk_aligned>
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	d02b      	beq.n	800c846 <_malloc_r+0xd2>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	442b      	add	r3, r5
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	e00e      	b.n	800c814 <_malloc_r+0xa0>
 800c7f6:	6822      	ldr	r2, [r4, #0]
 800c7f8:	1b52      	subs	r2, r2, r5
 800c7fa:	d41e      	bmi.n	800c83a <_malloc_r+0xc6>
 800c7fc:	2a0b      	cmp	r2, #11
 800c7fe:	d916      	bls.n	800c82e <_malloc_r+0xba>
 800c800:	1961      	adds	r1, r4, r5
 800c802:	42a3      	cmp	r3, r4
 800c804:	6025      	str	r5, [r4, #0]
 800c806:	bf18      	it	ne
 800c808:	6059      	strne	r1, [r3, #4]
 800c80a:	6863      	ldr	r3, [r4, #4]
 800c80c:	bf08      	it	eq
 800c80e:	6031      	streq	r1, [r6, #0]
 800c810:	5162      	str	r2, [r4, r5]
 800c812:	604b      	str	r3, [r1, #4]
 800c814:	4638      	mov	r0, r7
 800c816:	f104 060b 	add.w	r6, r4, #11
 800c81a:	f000 f899 	bl	800c950 <__malloc_unlock>
 800c81e:	f026 0607 	bic.w	r6, r6, #7
 800c822:	1d23      	adds	r3, r4, #4
 800c824:	1af2      	subs	r2, r6, r3
 800c826:	d0b6      	beq.n	800c796 <_malloc_r+0x22>
 800c828:	1b9b      	subs	r3, r3, r6
 800c82a:	50a3      	str	r3, [r4, r2]
 800c82c:	e7b3      	b.n	800c796 <_malloc_r+0x22>
 800c82e:	6862      	ldr	r2, [r4, #4]
 800c830:	42a3      	cmp	r3, r4
 800c832:	bf0c      	ite	eq
 800c834:	6032      	streq	r2, [r6, #0]
 800c836:	605a      	strne	r2, [r3, #4]
 800c838:	e7ec      	b.n	800c814 <_malloc_r+0xa0>
 800c83a:	4623      	mov	r3, r4
 800c83c:	6864      	ldr	r4, [r4, #4]
 800c83e:	e7b2      	b.n	800c7a6 <_malloc_r+0x32>
 800c840:	4634      	mov	r4, r6
 800c842:	6876      	ldr	r6, [r6, #4]
 800c844:	e7b9      	b.n	800c7ba <_malloc_r+0x46>
 800c846:	230c      	movs	r3, #12
 800c848:	603b      	str	r3, [r7, #0]
 800c84a:	4638      	mov	r0, r7
 800c84c:	f000 f880 	bl	800c950 <__malloc_unlock>
 800c850:	e7a1      	b.n	800c796 <_malloc_r+0x22>
 800c852:	6025      	str	r5, [r4, #0]
 800c854:	e7de      	b.n	800c814 <_malloc_r+0xa0>
 800c856:	bf00      	nop
 800c858:	24000578 	.word	0x24000578
 800c85c:	00000000 	.word	0x00000000

0800c860 <nan>:
 800c860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c868 <nan+0x8>
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	00000000 	.word	0x00000000
 800c86c:	7ff80000 	.word	0x7ff80000

0800c870 <_sbrk_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d06      	ldr	r5, [pc, #24]	; (800c88c <_sbrk_r+0x1c>)
 800c874:	2300      	movs	r3, #0
 800c876:	4604      	mov	r4, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f5 fc7a 	bl	8002174 <_sbrk>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_sbrk_r+0x1a>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_sbrk_r+0x1a>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	24000580 	.word	0x24000580

0800c890 <strncmp>:
 800c890:	b510      	push	{r4, lr}
 800c892:	b17a      	cbz	r2, 800c8b4 <strncmp+0x24>
 800c894:	4603      	mov	r3, r0
 800c896:	3901      	subs	r1, #1
 800c898:	1884      	adds	r4, r0, r2
 800c89a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c89e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8a2:	4290      	cmp	r0, r2
 800c8a4:	d101      	bne.n	800c8aa <strncmp+0x1a>
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	d101      	bne.n	800c8ae <strncmp+0x1e>
 800c8aa:	1a80      	subs	r0, r0, r2
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d1f3      	bne.n	800c89a <strncmp+0xa>
 800c8b2:	e7fa      	b.n	800c8aa <strncmp+0x1a>
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	e7f9      	b.n	800c8ac <strncmp+0x1c>

0800c8b8 <__ascii_wctomb>:
 800c8b8:	b149      	cbz	r1, 800c8ce <__ascii_wctomb+0x16>
 800c8ba:	2aff      	cmp	r2, #255	; 0xff
 800c8bc:	bf85      	ittet	hi
 800c8be:	238a      	movhi	r3, #138	; 0x8a
 800c8c0:	6003      	strhi	r3, [r0, #0]
 800c8c2:	700a      	strbls	r2, [r1, #0]
 800c8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8c8:	bf98      	it	ls
 800c8ca:	2001      	movls	r0, #1
 800c8cc:	4770      	bx	lr
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4770      	bx	lr
	...

0800c8d4 <__assert_func>:
 800c8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8d6:	4614      	mov	r4, r2
 800c8d8:	461a      	mov	r2, r3
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <__assert_func+0x2c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4605      	mov	r5, r0
 800c8e0:	68d8      	ldr	r0, [r3, #12]
 800c8e2:	b14c      	cbz	r4, 800c8f8 <__assert_func+0x24>
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <__assert_func+0x30>)
 800c8e6:	9100      	str	r1, [sp, #0]
 800c8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8ec:	4906      	ldr	r1, [pc, #24]	; (800c908 <__assert_func+0x34>)
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	f000 f80e 	bl	800c910 <fiprintf>
 800c8f4:	f000 fc2c 	bl	800d150 <abort>
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <__assert_func+0x38>)
 800c8fa:	461c      	mov	r4, r3
 800c8fc:	e7f3      	b.n	800c8e6 <__assert_func+0x12>
 800c8fe:	bf00      	nop
 800c900:	24000014 	.word	0x24000014
 800c904:	0800da7c 	.word	0x0800da7c
 800c908:	0800da89 	.word	0x0800da89
 800c90c:	0800dab7 	.word	0x0800dab7

0800c910 <fiprintf>:
 800c910:	b40e      	push	{r1, r2, r3}
 800c912:	b503      	push	{r0, r1, lr}
 800c914:	4601      	mov	r1, r0
 800c916:	ab03      	add	r3, sp, #12
 800c918:	4805      	ldr	r0, [pc, #20]	; (800c930 <fiprintf+0x20>)
 800c91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91e:	6800      	ldr	r0, [r0, #0]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	f000 f891 	bl	800ca48 <_vfiprintf_r>
 800c926:	b002      	add	sp, #8
 800c928:	f85d eb04 	ldr.w	lr, [sp], #4
 800c92c:	b003      	add	sp, #12
 800c92e:	4770      	bx	lr
 800c930:	24000014 	.word	0x24000014

0800c934 <malloc>:
 800c934:	4b02      	ldr	r3, [pc, #8]	; (800c940 <malloc+0xc>)
 800c936:	4601      	mov	r1, r0
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	f7ff bf1b 	b.w	800c774 <_malloc_r>
 800c93e:	bf00      	nop
 800c940:	24000014 	.word	0x24000014

0800c944 <__malloc_lock>:
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <__malloc_lock+0x8>)
 800c946:	f000 bdc3 	b.w	800d4d0 <__retarget_lock_acquire_recursive>
 800c94a:	bf00      	nop
 800c94c:	24000584 	.word	0x24000584

0800c950 <__malloc_unlock>:
 800c950:	4801      	ldr	r0, [pc, #4]	; (800c958 <__malloc_unlock+0x8>)
 800c952:	f000 bdbe 	b.w	800d4d2 <__retarget_lock_release_recursive>
 800c956:	bf00      	nop
 800c958:	24000584 	.word	0x24000584

0800c95c <_free_r>:
 800c95c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c95e:	2900      	cmp	r1, #0
 800c960:	d044      	beq.n	800c9ec <_free_r+0x90>
 800c962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c966:	9001      	str	r0, [sp, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f1a1 0404 	sub.w	r4, r1, #4
 800c96e:	bfb8      	it	lt
 800c970:	18e4      	addlt	r4, r4, r3
 800c972:	f7ff ffe7 	bl	800c944 <__malloc_lock>
 800c976:	4a1e      	ldr	r2, [pc, #120]	; (800c9f0 <_free_r+0x94>)
 800c978:	9801      	ldr	r0, [sp, #4]
 800c97a:	6813      	ldr	r3, [r2, #0]
 800c97c:	b933      	cbnz	r3, 800c98c <_free_r+0x30>
 800c97e:	6063      	str	r3, [r4, #4]
 800c980:	6014      	str	r4, [r2, #0]
 800c982:	b003      	add	sp, #12
 800c984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c988:	f7ff bfe2 	b.w	800c950 <__malloc_unlock>
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	d908      	bls.n	800c9a2 <_free_r+0x46>
 800c990:	6825      	ldr	r5, [r4, #0]
 800c992:	1961      	adds	r1, r4, r5
 800c994:	428b      	cmp	r3, r1
 800c996:	bf01      	itttt	eq
 800c998:	6819      	ldreq	r1, [r3, #0]
 800c99a:	685b      	ldreq	r3, [r3, #4]
 800c99c:	1949      	addeq	r1, r1, r5
 800c99e:	6021      	streq	r1, [r4, #0]
 800c9a0:	e7ed      	b.n	800c97e <_free_r+0x22>
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	b10b      	cbz	r3, 800c9ac <_free_r+0x50>
 800c9a8:	42a3      	cmp	r3, r4
 800c9aa:	d9fa      	bls.n	800c9a2 <_free_r+0x46>
 800c9ac:	6811      	ldr	r1, [r2, #0]
 800c9ae:	1855      	adds	r5, r2, r1
 800c9b0:	42a5      	cmp	r5, r4
 800c9b2:	d10b      	bne.n	800c9cc <_free_r+0x70>
 800c9b4:	6824      	ldr	r4, [r4, #0]
 800c9b6:	4421      	add	r1, r4
 800c9b8:	1854      	adds	r4, r2, r1
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	6011      	str	r1, [r2, #0]
 800c9be:	d1e0      	bne.n	800c982 <_free_r+0x26>
 800c9c0:	681c      	ldr	r4, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	6053      	str	r3, [r2, #4]
 800c9c6:	4421      	add	r1, r4
 800c9c8:	6011      	str	r1, [r2, #0]
 800c9ca:	e7da      	b.n	800c982 <_free_r+0x26>
 800c9cc:	d902      	bls.n	800c9d4 <_free_r+0x78>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	6003      	str	r3, [r0, #0]
 800c9d2:	e7d6      	b.n	800c982 <_free_r+0x26>
 800c9d4:	6825      	ldr	r5, [r4, #0]
 800c9d6:	1961      	adds	r1, r4, r5
 800c9d8:	428b      	cmp	r3, r1
 800c9da:	bf04      	itt	eq
 800c9dc:	6819      	ldreq	r1, [r3, #0]
 800c9de:	685b      	ldreq	r3, [r3, #4]
 800c9e0:	6063      	str	r3, [r4, #4]
 800c9e2:	bf04      	itt	eq
 800c9e4:	1949      	addeq	r1, r1, r5
 800c9e6:	6021      	streq	r1, [r4, #0]
 800c9e8:	6054      	str	r4, [r2, #4]
 800c9ea:	e7ca      	b.n	800c982 <_free_r+0x26>
 800c9ec:	b003      	add	sp, #12
 800c9ee:	bd30      	pop	{r4, r5, pc}
 800c9f0:	24000578 	.word	0x24000578

0800c9f4 <__sfputc_r>:
 800c9f4:	6893      	ldr	r3, [r2, #8]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	b410      	push	{r4}
 800c9fc:	6093      	str	r3, [r2, #8]
 800c9fe:	da08      	bge.n	800ca12 <__sfputc_r+0x1e>
 800ca00:	6994      	ldr	r4, [r2, #24]
 800ca02:	42a3      	cmp	r3, r4
 800ca04:	db01      	blt.n	800ca0a <__sfputc_r+0x16>
 800ca06:	290a      	cmp	r1, #10
 800ca08:	d103      	bne.n	800ca12 <__sfputc_r+0x1e>
 800ca0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca0e:	f000 badf 	b.w	800cfd0 <__swbuf_r>
 800ca12:	6813      	ldr	r3, [r2, #0]
 800ca14:	1c58      	adds	r0, r3, #1
 800ca16:	6010      	str	r0, [r2, #0]
 800ca18:	7019      	strb	r1, [r3, #0]
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <__sfputs_r>:
 800ca22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca24:	4606      	mov	r6, r0
 800ca26:	460f      	mov	r7, r1
 800ca28:	4614      	mov	r4, r2
 800ca2a:	18d5      	adds	r5, r2, r3
 800ca2c:	42ac      	cmp	r4, r5
 800ca2e:	d101      	bne.n	800ca34 <__sfputs_r+0x12>
 800ca30:	2000      	movs	r0, #0
 800ca32:	e007      	b.n	800ca44 <__sfputs_r+0x22>
 800ca34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca38:	463a      	mov	r2, r7
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f7ff ffda 	bl	800c9f4 <__sfputc_r>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d1f3      	bne.n	800ca2c <__sfputs_r+0xa>
 800ca44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca48 <_vfiprintf_r>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	b09d      	sub	sp, #116	; 0x74
 800ca50:	4614      	mov	r4, r2
 800ca52:	4698      	mov	r8, r3
 800ca54:	4606      	mov	r6, r0
 800ca56:	b118      	cbz	r0, 800ca60 <_vfiprintf_r+0x18>
 800ca58:	6983      	ldr	r3, [r0, #24]
 800ca5a:	b90b      	cbnz	r3, 800ca60 <_vfiprintf_r+0x18>
 800ca5c:	f000 fc9a 	bl	800d394 <__sinit>
 800ca60:	4b89      	ldr	r3, [pc, #548]	; (800cc88 <_vfiprintf_r+0x240>)
 800ca62:	429d      	cmp	r5, r3
 800ca64:	d11b      	bne.n	800ca9e <_vfiprintf_r+0x56>
 800ca66:	6875      	ldr	r5, [r6, #4]
 800ca68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca6a:	07d9      	lsls	r1, r3, #31
 800ca6c:	d405      	bmi.n	800ca7a <_vfiprintf_r+0x32>
 800ca6e:	89ab      	ldrh	r3, [r5, #12]
 800ca70:	059a      	lsls	r2, r3, #22
 800ca72:	d402      	bmi.n	800ca7a <_vfiprintf_r+0x32>
 800ca74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca76:	f000 fd2b 	bl	800d4d0 <__retarget_lock_acquire_recursive>
 800ca7a:	89ab      	ldrh	r3, [r5, #12]
 800ca7c:	071b      	lsls	r3, r3, #28
 800ca7e:	d501      	bpl.n	800ca84 <_vfiprintf_r+0x3c>
 800ca80:	692b      	ldr	r3, [r5, #16]
 800ca82:	b9eb      	cbnz	r3, 800cac0 <_vfiprintf_r+0x78>
 800ca84:	4629      	mov	r1, r5
 800ca86:	4630      	mov	r0, r6
 800ca88:	f000 faf4 	bl	800d074 <__swsetup_r>
 800ca8c:	b1c0      	cbz	r0, 800cac0 <_vfiprintf_r+0x78>
 800ca8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca90:	07dc      	lsls	r4, r3, #31
 800ca92:	d50e      	bpl.n	800cab2 <_vfiprintf_r+0x6a>
 800ca94:	f04f 30ff 	mov.w	r0, #4294967295
 800ca98:	b01d      	add	sp, #116	; 0x74
 800ca9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9e:	4b7b      	ldr	r3, [pc, #492]	; (800cc8c <_vfiprintf_r+0x244>)
 800caa0:	429d      	cmp	r5, r3
 800caa2:	d101      	bne.n	800caa8 <_vfiprintf_r+0x60>
 800caa4:	68b5      	ldr	r5, [r6, #8]
 800caa6:	e7df      	b.n	800ca68 <_vfiprintf_r+0x20>
 800caa8:	4b79      	ldr	r3, [pc, #484]	; (800cc90 <_vfiprintf_r+0x248>)
 800caaa:	429d      	cmp	r5, r3
 800caac:	bf08      	it	eq
 800caae:	68f5      	ldreq	r5, [r6, #12]
 800cab0:	e7da      	b.n	800ca68 <_vfiprintf_r+0x20>
 800cab2:	89ab      	ldrh	r3, [r5, #12]
 800cab4:	0598      	lsls	r0, r3, #22
 800cab6:	d4ed      	bmi.n	800ca94 <_vfiprintf_r+0x4c>
 800cab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caba:	f000 fd0a 	bl	800d4d2 <__retarget_lock_release_recursive>
 800cabe:	e7e9      	b.n	800ca94 <_vfiprintf_r+0x4c>
 800cac0:	2300      	movs	r3, #0
 800cac2:	9309      	str	r3, [sp, #36]	; 0x24
 800cac4:	2320      	movs	r3, #32
 800cac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800caca:	f8cd 800c 	str.w	r8, [sp, #12]
 800cace:	2330      	movs	r3, #48	; 0x30
 800cad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc94 <_vfiprintf_r+0x24c>
 800cad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cad8:	f04f 0901 	mov.w	r9, #1
 800cadc:	4623      	mov	r3, r4
 800cade:	469a      	mov	sl, r3
 800cae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cae4:	b10a      	cbz	r2, 800caea <_vfiprintf_r+0xa2>
 800cae6:	2a25      	cmp	r2, #37	; 0x25
 800cae8:	d1f9      	bne.n	800cade <_vfiprintf_r+0x96>
 800caea:	ebba 0b04 	subs.w	fp, sl, r4
 800caee:	d00b      	beq.n	800cb08 <_vfiprintf_r+0xc0>
 800caf0:	465b      	mov	r3, fp
 800caf2:	4622      	mov	r2, r4
 800caf4:	4629      	mov	r1, r5
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7ff ff93 	bl	800ca22 <__sfputs_r>
 800cafc:	3001      	adds	r0, #1
 800cafe:	f000 80aa 	beq.w	800cc56 <_vfiprintf_r+0x20e>
 800cb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb04:	445a      	add	r2, fp
 800cb06:	9209      	str	r2, [sp, #36]	; 0x24
 800cb08:	f89a 3000 	ldrb.w	r3, [sl]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 80a2 	beq.w	800cc56 <_vfiprintf_r+0x20e>
 800cb12:	2300      	movs	r3, #0
 800cb14:	f04f 32ff 	mov.w	r2, #4294967295
 800cb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb1c:	f10a 0a01 	add.w	sl, sl, #1
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	9307      	str	r3, [sp, #28]
 800cb24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb28:	931a      	str	r3, [sp, #104]	; 0x68
 800cb2a:	4654      	mov	r4, sl
 800cb2c:	2205      	movs	r2, #5
 800cb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb32:	4858      	ldr	r0, [pc, #352]	; (800cc94 <_vfiprintf_r+0x24c>)
 800cb34:	f7f3 fbf4 	bl	8000320 <memchr>
 800cb38:	9a04      	ldr	r2, [sp, #16]
 800cb3a:	b9d8      	cbnz	r0, 800cb74 <_vfiprintf_r+0x12c>
 800cb3c:	06d1      	lsls	r1, r2, #27
 800cb3e:	bf44      	itt	mi
 800cb40:	2320      	movmi	r3, #32
 800cb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb46:	0713      	lsls	r3, r2, #28
 800cb48:	bf44      	itt	mi
 800cb4a:	232b      	movmi	r3, #43	; 0x2b
 800cb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb50:	f89a 3000 	ldrb.w	r3, [sl]
 800cb54:	2b2a      	cmp	r3, #42	; 0x2a
 800cb56:	d015      	beq.n	800cb84 <_vfiprintf_r+0x13c>
 800cb58:	9a07      	ldr	r2, [sp, #28]
 800cb5a:	4654      	mov	r4, sl
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	f04f 0c0a 	mov.w	ip, #10
 800cb62:	4621      	mov	r1, r4
 800cb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb68:	3b30      	subs	r3, #48	; 0x30
 800cb6a:	2b09      	cmp	r3, #9
 800cb6c:	d94e      	bls.n	800cc0c <_vfiprintf_r+0x1c4>
 800cb6e:	b1b0      	cbz	r0, 800cb9e <_vfiprintf_r+0x156>
 800cb70:	9207      	str	r2, [sp, #28]
 800cb72:	e014      	b.n	800cb9e <_vfiprintf_r+0x156>
 800cb74:	eba0 0308 	sub.w	r3, r0, r8
 800cb78:	fa09 f303 	lsl.w	r3, r9, r3
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	9304      	str	r3, [sp, #16]
 800cb80:	46a2      	mov	sl, r4
 800cb82:	e7d2      	b.n	800cb2a <_vfiprintf_r+0xe2>
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	1d19      	adds	r1, r3, #4
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	9103      	str	r1, [sp, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	bfbb      	ittet	lt
 800cb90:	425b      	neglt	r3, r3
 800cb92:	f042 0202 	orrlt.w	r2, r2, #2
 800cb96:	9307      	strge	r3, [sp, #28]
 800cb98:	9307      	strlt	r3, [sp, #28]
 800cb9a:	bfb8      	it	lt
 800cb9c:	9204      	strlt	r2, [sp, #16]
 800cb9e:	7823      	ldrb	r3, [r4, #0]
 800cba0:	2b2e      	cmp	r3, #46	; 0x2e
 800cba2:	d10c      	bne.n	800cbbe <_vfiprintf_r+0x176>
 800cba4:	7863      	ldrb	r3, [r4, #1]
 800cba6:	2b2a      	cmp	r3, #42	; 0x2a
 800cba8:	d135      	bne.n	800cc16 <_vfiprintf_r+0x1ce>
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	1d1a      	adds	r2, r3, #4
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	9203      	str	r2, [sp, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	bfb8      	it	lt
 800cbb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbba:	3402      	adds	r4, #2
 800cbbc:	9305      	str	r3, [sp, #20]
 800cbbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cca4 <_vfiprintf_r+0x25c>
 800cbc2:	7821      	ldrb	r1, [r4, #0]
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	f7f3 fbaa 	bl	8000320 <memchr>
 800cbcc:	b140      	cbz	r0, 800cbe0 <_vfiprintf_r+0x198>
 800cbce:	2340      	movs	r3, #64	; 0x40
 800cbd0:	eba0 000a 	sub.w	r0, r0, sl
 800cbd4:	fa03 f000 	lsl.w	r0, r3, r0
 800cbd8:	9b04      	ldr	r3, [sp, #16]
 800cbda:	4303      	orrs	r3, r0
 800cbdc:	3401      	adds	r4, #1
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe4:	482c      	ldr	r0, [pc, #176]	; (800cc98 <_vfiprintf_r+0x250>)
 800cbe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbea:	2206      	movs	r2, #6
 800cbec:	f7f3 fb98 	bl	8000320 <memchr>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d03f      	beq.n	800cc74 <_vfiprintf_r+0x22c>
 800cbf4:	4b29      	ldr	r3, [pc, #164]	; (800cc9c <_vfiprintf_r+0x254>)
 800cbf6:	bb1b      	cbnz	r3, 800cc40 <_vfiprintf_r+0x1f8>
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	3307      	adds	r3, #7
 800cbfc:	f023 0307 	bic.w	r3, r3, #7
 800cc00:	3308      	adds	r3, #8
 800cc02:	9303      	str	r3, [sp, #12]
 800cc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc06:	443b      	add	r3, r7
 800cc08:	9309      	str	r3, [sp, #36]	; 0x24
 800cc0a:	e767      	b.n	800cadc <_vfiprintf_r+0x94>
 800cc0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc10:	460c      	mov	r4, r1
 800cc12:	2001      	movs	r0, #1
 800cc14:	e7a5      	b.n	800cb62 <_vfiprintf_r+0x11a>
 800cc16:	2300      	movs	r3, #0
 800cc18:	3401      	adds	r4, #1
 800cc1a:	9305      	str	r3, [sp, #20]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	f04f 0c0a 	mov.w	ip, #10
 800cc22:	4620      	mov	r0, r4
 800cc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc28:	3a30      	subs	r2, #48	; 0x30
 800cc2a:	2a09      	cmp	r2, #9
 800cc2c:	d903      	bls.n	800cc36 <_vfiprintf_r+0x1ee>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0c5      	beq.n	800cbbe <_vfiprintf_r+0x176>
 800cc32:	9105      	str	r1, [sp, #20]
 800cc34:	e7c3      	b.n	800cbbe <_vfiprintf_r+0x176>
 800cc36:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e7f0      	b.n	800cc22 <_vfiprintf_r+0x1da>
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	462a      	mov	r2, r5
 800cc46:	4b16      	ldr	r3, [pc, #88]	; (800cca0 <_vfiprintf_r+0x258>)
 800cc48:	a904      	add	r1, sp, #16
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f3af 8000 	nop.w
 800cc50:	4607      	mov	r7, r0
 800cc52:	1c78      	adds	r0, r7, #1
 800cc54:	d1d6      	bne.n	800cc04 <_vfiprintf_r+0x1bc>
 800cc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc58:	07d9      	lsls	r1, r3, #31
 800cc5a:	d405      	bmi.n	800cc68 <_vfiprintf_r+0x220>
 800cc5c:	89ab      	ldrh	r3, [r5, #12]
 800cc5e:	059a      	lsls	r2, r3, #22
 800cc60:	d402      	bmi.n	800cc68 <_vfiprintf_r+0x220>
 800cc62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc64:	f000 fc35 	bl	800d4d2 <__retarget_lock_release_recursive>
 800cc68:	89ab      	ldrh	r3, [r5, #12]
 800cc6a:	065b      	lsls	r3, r3, #25
 800cc6c:	f53f af12 	bmi.w	800ca94 <_vfiprintf_r+0x4c>
 800cc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc72:	e711      	b.n	800ca98 <_vfiprintf_r+0x50>
 800cc74:	ab03      	add	r3, sp, #12
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	462a      	mov	r2, r5
 800cc7a:	4b09      	ldr	r3, [pc, #36]	; (800cca0 <_vfiprintf_r+0x258>)
 800cc7c:	a904      	add	r1, sp, #16
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f000 f880 	bl	800cd84 <_printf_i>
 800cc84:	e7e4      	b.n	800cc50 <_vfiprintf_r+0x208>
 800cc86:	bf00      	nop
 800cc88:	0800dc0c 	.word	0x0800dc0c
 800cc8c:	0800dc2c 	.word	0x0800dc2c
 800cc90:	0800dbec 	.word	0x0800dbec
 800cc94:	0800dbb9 	.word	0x0800dbb9
 800cc98:	0800dbc3 	.word	0x0800dbc3
 800cc9c:	00000000 	.word	0x00000000
 800cca0:	0800ca23 	.word	0x0800ca23
 800cca4:	0800dbbf 	.word	0x0800dbbf

0800cca8 <_printf_common>:
 800cca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	4616      	mov	r6, r2
 800ccae:	4699      	mov	r9, r3
 800ccb0:	688a      	ldr	r2, [r1, #8]
 800ccb2:	690b      	ldr	r3, [r1, #16]
 800ccb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	bfb8      	it	lt
 800ccbc:	4613      	movlt	r3, r2
 800ccbe:	6033      	str	r3, [r6, #0]
 800ccc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b10a      	cbz	r2, 800ccce <_printf_common+0x26>
 800ccca:	3301      	adds	r3, #1
 800cccc:	6033      	str	r3, [r6, #0]
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	0699      	lsls	r1, r3, #26
 800ccd2:	bf42      	ittt	mi
 800ccd4:	6833      	ldrmi	r3, [r6, #0]
 800ccd6:	3302      	addmi	r3, #2
 800ccd8:	6033      	strmi	r3, [r6, #0]
 800ccda:	6825      	ldr	r5, [r4, #0]
 800ccdc:	f015 0506 	ands.w	r5, r5, #6
 800cce0:	d106      	bne.n	800ccf0 <_printf_common+0x48>
 800cce2:	f104 0a19 	add.w	sl, r4, #25
 800cce6:	68e3      	ldr	r3, [r4, #12]
 800cce8:	6832      	ldr	r2, [r6, #0]
 800ccea:	1a9b      	subs	r3, r3, r2
 800ccec:	42ab      	cmp	r3, r5
 800ccee:	dc26      	bgt.n	800cd3e <_printf_common+0x96>
 800ccf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccf4:	1e13      	subs	r3, r2, #0
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	bf18      	it	ne
 800ccfa:	2301      	movne	r3, #1
 800ccfc:	0692      	lsls	r2, r2, #26
 800ccfe:	d42b      	bmi.n	800cd58 <_printf_common+0xb0>
 800cd00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd04:	4649      	mov	r1, r9
 800cd06:	4638      	mov	r0, r7
 800cd08:	47c0      	blx	r8
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	d01e      	beq.n	800cd4c <_printf_common+0xa4>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	68e5      	ldr	r5, [r4, #12]
 800cd12:	6832      	ldr	r2, [r6, #0]
 800cd14:	f003 0306 	and.w	r3, r3, #6
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	bf08      	it	eq
 800cd1c:	1aad      	subeq	r5, r5, r2
 800cd1e:	68a3      	ldr	r3, [r4, #8]
 800cd20:	6922      	ldr	r2, [r4, #16]
 800cd22:	bf0c      	ite	eq
 800cd24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd28:	2500      	movne	r5, #0
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	bfc4      	itt	gt
 800cd2e:	1a9b      	subgt	r3, r3, r2
 800cd30:	18ed      	addgt	r5, r5, r3
 800cd32:	2600      	movs	r6, #0
 800cd34:	341a      	adds	r4, #26
 800cd36:	42b5      	cmp	r5, r6
 800cd38:	d11a      	bne.n	800cd70 <_printf_common+0xc8>
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	e008      	b.n	800cd50 <_printf_common+0xa8>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	4652      	mov	r2, sl
 800cd42:	4649      	mov	r1, r9
 800cd44:	4638      	mov	r0, r7
 800cd46:	47c0      	blx	r8
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d103      	bne.n	800cd54 <_printf_common+0xac>
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd54:	3501      	adds	r5, #1
 800cd56:	e7c6      	b.n	800cce6 <_printf_common+0x3e>
 800cd58:	18e1      	adds	r1, r4, r3
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	2030      	movs	r0, #48	; 0x30
 800cd5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd62:	4422      	add	r2, r4
 800cd64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd6c:	3302      	adds	r3, #2
 800cd6e:	e7c7      	b.n	800cd00 <_printf_common+0x58>
 800cd70:	2301      	movs	r3, #1
 800cd72:	4622      	mov	r2, r4
 800cd74:	4649      	mov	r1, r9
 800cd76:	4638      	mov	r0, r7
 800cd78:	47c0      	blx	r8
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d0e6      	beq.n	800cd4c <_printf_common+0xa4>
 800cd7e:	3601      	adds	r6, #1
 800cd80:	e7d9      	b.n	800cd36 <_printf_common+0x8e>
	...

0800cd84 <_printf_i>:
 800cd84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd88:	7e0f      	ldrb	r7, [r1, #24]
 800cd8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd8c:	2f78      	cmp	r7, #120	; 0x78
 800cd8e:	4691      	mov	r9, r2
 800cd90:	4680      	mov	r8, r0
 800cd92:	460c      	mov	r4, r1
 800cd94:	469a      	mov	sl, r3
 800cd96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd9a:	d807      	bhi.n	800cdac <_printf_i+0x28>
 800cd9c:	2f62      	cmp	r7, #98	; 0x62
 800cd9e:	d80a      	bhi.n	800cdb6 <_printf_i+0x32>
 800cda0:	2f00      	cmp	r7, #0
 800cda2:	f000 80d8 	beq.w	800cf56 <_printf_i+0x1d2>
 800cda6:	2f58      	cmp	r7, #88	; 0x58
 800cda8:	f000 80a3 	beq.w	800cef2 <_printf_i+0x16e>
 800cdac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdb4:	e03a      	b.n	800ce2c <_printf_i+0xa8>
 800cdb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdba:	2b15      	cmp	r3, #21
 800cdbc:	d8f6      	bhi.n	800cdac <_printf_i+0x28>
 800cdbe:	a101      	add	r1, pc, #4	; (adr r1, 800cdc4 <_printf_i+0x40>)
 800cdc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdc4:	0800ce1d 	.word	0x0800ce1d
 800cdc8:	0800ce31 	.word	0x0800ce31
 800cdcc:	0800cdad 	.word	0x0800cdad
 800cdd0:	0800cdad 	.word	0x0800cdad
 800cdd4:	0800cdad 	.word	0x0800cdad
 800cdd8:	0800cdad 	.word	0x0800cdad
 800cddc:	0800ce31 	.word	0x0800ce31
 800cde0:	0800cdad 	.word	0x0800cdad
 800cde4:	0800cdad 	.word	0x0800cdad
 800cde8:	0800cdad 	.word	0x0800cdad
 800cdec:	0800cdad 	.word	0x0800cdad
 800cdf0:	0800cf3d 	.word	0x0800cf3d
 800cdf4:	0800ce61 	.word	0x0800ce61
 800cdf8:	0800cf1f 	.word	0x0800cf1f
 800cdfc:	0800cdad 	.word	0x0800cdad
 800ce00:	0800cdad 	.word	0x0800cdad
 800ce04:	0800cf5f 	.word	0x0800cf5f
 800ce08:	0800cdad 	.word	0x0800cdad
 800ce0c:	0800ce61 	.word	0x0800ce61
 800ce10:	0800cdad 	.word	0x0800cdad
 800ce14:	0800cdad 	.word	0x0800cdad
 800ce18:	0800cf27 	.word	0x0800cf27
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	1d1a      	adds	r2, r3, #4
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	602a      	str	r2, [r5, #0]
 800ce24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e0a3      	b.n	800cf78 <_printf_i+0x1f4>
 800ce30:	6820      	ldr	r0, [r4, #0]
 800ce32:	6829      	ldr	r1, [r5, #0]
 800ce34:	0606      	lsls	r6, r0, #24
 800ce36:	f101 0304 	add.w	r3, r1, #4
 800ce3a:	d50a      	bpl.n	800ce52 <_printf_i+0xce>
 800ce3c:	680e      	ldr	r6, [r1, #0]
 800ce3e:	602b      	str	r3, [r5, #0]
 800ce40:	2e00      	cmp	r6, #0
 800ce42:	da03      	bge.n	800ce4c <_printf_i+0xc8>
 800ce44:	232d      	movs	r3, #45	; 0x2d
 800ce46:	4276      	negs	r6, r6
 800ce48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce4c:	485e      	ldr	r0, [pc, #376]	; (800cfc8 <_printf_i+0x244>)
 800ce4e:	230a      	movs	r3, #10
 800ce50:	e019      	b.n	800ce86 <_printf_i+0x102>
 800ce52:	680e      	ldr	r6, [r1, #0]
 800ce54:	602b      	str	r3, [r5, #0]
 800ce56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce5a:	bf18      	it	ne
 800ce5c:	b236      	sxthne	r6, r6
 800ce5e:	e7ef      	b.n	800ce40 <_printf_i+0xbc>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	6820      	ldr	r0, [r4, #0]
 800ce64:	1d19      	adds	r1, r3, #4
 800ce66:	6029      	str	r1, [r5, #0]
 800ce68:	0601      	lsls	r1, r0, #24
 800ce6a:	d501      	bpl.n	800ce70 <_printf_i+0xec>
 800ce6c:	681e      	ldr	r6, [r3, #0]
 800ce6e:	e002      	b.n	800ce76 <_printf_i+0xf2>
 800ce70:	0646      	lsls	r6, r0, #25
 800ce72:	d5fb      	bpl.n	800ce6c <_printf_i+0xe8>
 800ce74:	881e      	ldrh	r6, [r3, #0]
 800ce76:	4854      	ldr	r0, [pc, #336]	; (800cfc8 <_printf_i+0x244>)
 800ce78:	2f6f      	cmp	r7, #111	; 0x6f
 800ce7a:	bf0c      	ite	eq
 800ce7c:	2308      	moveq	r3, #8
 800ce7e:	230a      	movne	r3, #10
 800ce80:	2100      	movs	r1, #0
 800ce82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce86:	6865      	ldr	r5, [r4, #4]
 800ce88:	60a5      	str	r5, [r4, #8]
 800ce8a:	2d00      	cmp	r5, #0
 800ce8c:	bfa2      	ittt	ge
 800ce8e:	6821      	ldrge	r1, [r4, #0]
 800ce90:	f021 0104 	bicge.w	r1, r1, #4
 800ce94:	6021      	strge	r1, [r4, #0]
 800ce96:	b90e      	cbnz	r6, 800ce9c <_printf_i+0x118>
 800ce98:	2d00      	cmp	r5, #0
 800ce9a:	d04d      	beq.n	800cf38 <_printf_i+0x1b4>
 800ce9c:	4615      	mov	r5, r2
 800ce9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cea2:	fb03 6711 	mls	r7, r3, r1, r6
 800cea6:	5dc7      	ldrb	r7, [r0, r7]
 800cea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ceac:	4637      	mov	r7, r6
 800ceae:	42bb      	cmp	r3, r7
 800ceb0:	460e      	mov	r6, r1
 800ceb2:	d9f4      	bls.n	800ce9e <_printf_i+0x11a>
 800ceb4:	2b08      	cmp	r3, #8
 800ceb6:	d10b      	bne.n	800ced0 <_printf_i+0x14c>
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	07de      	lsls	r6, r3, #31
 800cebc:	d508      	bpl.n	800ced0 <_printf_i+0x14c>
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	6861      	ldr	r1, [r4, #4]
 800cec2:	4299      	cmp	r1, r3
 800cec4:	bfde      	ittt	le
 800cec6:	2330      	movle	r3, #48	; 0x30
 800cec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ced0:	1b52      	subs	r2, r2, r5
 800ced2:	6122      	str	r2, [r4, #16]
 800ced4:	f8cd a000 	str.w	sl, [sp]
 800ced8:	464b      	mov	r3, r9
 800ceda:	aa03      	add	r2, sp, #12
 800cedc:	4621      	mov	r1, r4
 800cede:	4640      	mov	r0, r8
 800cee0:	f7ff fee2 	bl	800cca8 <_printf_common>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d14c      	bne.n	800cf82 <_printf_i+0x1fe>
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceec:	b004      	add	sp, #16
 800ceee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef2:	4835      	ldr	r0, [pc, #212]	; (800cfc8 <_printf_i+0x244>)
 800cef4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cef8:	6829      	ldr	r1, [r5, #0]
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf00:	6029      	str	r1, [r5, #0]
 800cf02:	061d      	lsls	r5, r3, #24
 800cf04:	d514      	bpl.n	800cf30 <_printf_i+0x1ac>
 800cf06:	07df      	lsls	r7, r3, #31
 800cf08:	bf44      	itt	mi
 800cf0a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf0e:	6023      	strmi	r3, [r4, #0]
 800cf10:	b91e      	cbnz	r6, 800cf1a <_printf_i+0x196>
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	f023 0320 	bic.w	r3, r3, #32
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	2310      	movs	r3, #16
 800cf1c:	e7b0      	b.n	800ce80 <_printf_i+0xfc>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	f043 0320 	orr.w	r3, r3, #32
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	2378      	movs	r3, #120	; 0x78
 800cf28:	4828      	ldr	r0, [pc, #160]	; (800cfcc <_printf_i+0x248>)
 800cf2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf2e:	e7e3      	b.n	800cef8 <_printf_i+0x174>
 800cf30:	0659      	lsls	r1, r3, #25
 800cf32:	bf48      	it	mi
 800cf34:	b2b6      	uxthmi	r6, r6
 800cf36:	e7e6      	b.n	800cf06 <_printf_i+0x182>
 800cf38:	4615      	mov	r5, r2
 800cf3a:	e7bb      	b.n	800ceb4 <_printf_i+0x130>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	6826      	ldr	r6, [r4, #0]
 800cf40:	6961      	ldr	r1, [r4, #20]
 800cf42:	1d18      	adds	r0, r3, #4
 800cf44:	6028      	str	r0, [r5, #0]
 800cf46:	0635      	lsls	r5, r6, #24
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	d501      	bpl.n	800cf50 <_printf_i+0x1cc>
 800cf4c:	6019      	str	r1, [r3, #0]
 800cf4e:	e002      	b.n	800cf56 <_printf_i+0x1d2>
 800cf50:	0670      	lsls	r0, r6, #25
 800cf52:	d5fb      	bpl.n	800cf4c <_printf_i+0x1c8>
 800cf54:	8019      	strh	r1, [r3, #0]
 800cf56:	2300      	movs	r3, #0
 800cf58:	6123      	str	r3, [r4, #16]
 800cf5a:	4615      	mov	r5, r2
 800cf5c:	e7ba      	b.n	800ced4 <_printf_i+0x150>
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	602a      	str	r2, [r5, #0]
 800cf64:	681d      	ldr	r5, [r3, #0]
 800cf66:	6862      	ldr	r2, [r4, #4]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	f7f3 f9d8 	bl	8000320 <memchr>
 800cf70:	b108      	cbz	r0, 800cf76 <_printf_i+0x1f2>
 800cf72:	1b40      	subs	r0, r0, r5
 800cf74:	6060      	str	r0, [r4, #4]
 800cf76:	6863      	ldr	r3, [r4, #4]
 800cf78:	6123      	str	r3, [r4, #16]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf80:	e7a8      	b.n	800ced4 <_printf_i+0x150>
 800cf82:	6923      	ldr	r3, [r4, #16]
 800cf84:	462a      	mov	r2, r5
 800cf86:	4649      	mov	r1, r9
 800cf88:	4640      	mov	r0, r8
 800cf8a:	47d0      	blx	sl
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d0ab      	beq.n	800cee8 <_printf_i+0x164>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	079b      	lsls	r3, r3, #30
 800cf94:	d413      	bmi.n	800cfbe <_printf_i+0x23a>
 800cf96:	68e0      	ldr	r0, [r4, #12]
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	4298      	cmp	r0, r3
 800cf9c:	bfb8      	it	lt
 800cf9e:	4618      	movlt	r0, r3
 800cfa0:	e7a4      	b.n	800ceec <_printf_i+0x168>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	47d0      	blx	sl
 800cfac:	3001      	adds	r0, #1
 800cfae:	d09b      	beq.n	800cee8 <_printf_i+0x164>
 800cfb0:	3501      	adds	r5, #1
 800cfb2:	68e3      	ldr	r3, [r4, #12]
 800cfb4:	9903      	ldr	r1, [sp, #12]
 800cfb6:	1a5b      	subs	r3, r3, r1
 800cfb8:	42ab      	cmp	r3, r5
 800cfba:	dcf2      	bgt.n	800cfa2 <_printf_i+0x21e>
 800cfbc:	e7eb      	b.n	800cf96 <_printf_i+0x212>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	f104 0619 	add.w	r6, r4, #25
 800cfc4:	e7f5      	b.n	800cfb2 <_printf_i+0x22e>
 800cfc6:	bf00      	nop
 800cfc8:	0800dbca 	.word	0x0800dbca
 800cfcc:	0800dbdb 	.word	0x0800dbdb

0800cfd0 <__swbuf_r>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	460e      	mov	r6, r1
 800cfd4:	4614      	mov	r4, r2
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	b118      	cbz	r0, 800cfe2 <__swbuf_r+0x12>
 800cfda:	6983      	ldr	r3, [r0, #24]
 800cfdc:	b90b      	cbnz	r3, 800cfe2 <__swbuf_r+0x12>
 800cfde:	f000 f9d9 	bl	800d394 <__sinit>
 800cfe2:	4b21      	ldr	r3, [pc, #132]	; (800d068 <__swbuf_r+0x98>)
 800cfe4:	429c      	cmp	r4, r3
 800cfe6:	d12b      	bne.n	800d040 <__swbuf_r+0x70>
 800cfe8:	686c      	ldr	r4, [r5, #4]
 800cfea:	69a3      	ldr	r3, [r4, #24]
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	071a      	lsls	r2, r3, #28
 800cff2:	d52f      	bpl.n	800d054 <__swbuf_r+0x84>
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	b36b      	cbz	r3, 800d054 <__swbuf_r+0x84>
 800cff8:	6923      	ldr	r3, [r4, #16]
 800cffa:	6820      	ldr	r0, [r4, #0]
 800cffc:	1ac0      	subs	r0, r0, r3
 800cffe:	6963      	ldr	r3, [r4, #20]
 800d000:	b2f6      	uxtb	r6, r6
 800d002:	4283      	cmp	r3, r0
 800d004:	4637      	mov	r7, r6
 800d006:	dc04      	bgt.n	800d012 <__swbuf_r+0x42>
 800d008:	4621      	mov	r1, r4
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f92e 	bl	800d26c <_fflush_r>
 800d010:	bb30      	cbnz	r0, 800d060 <__swbuf_r+0x90>
 800d012:	68a3      	ldr	r3, [r4, #8]
 800d014:	3b01      	subs	r3, #1
 800d016:	60a3      	str	r3, [r4, #8]
 800d018:	6823      	ldr	r3, [r4, #0]
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	6022      	str	r2, [r4, #0]
 800d01e:	701e      	strb	r6, [r3, #0]
 800d020:	6963      	ldr	r3, [r4, #20]
 800d022:	3001      	adds	r0, #1
 800d024:	4283      	cmp	r3, r0
 800d026:	d004      	beq.n	800d032 <__swbuf_r+0x62>
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	07db      	lsls	r3, r3, #31
 800d02c:	d506      	bpl.n	800d03c <__swbuf_r+0x6c>
 800d02e:	2e0a      	cmp	r6, #10
 800d030:	d104      	bne.n	800d03c <__swbuf_r+0x6c>
 800d032:	4621      	mov	r1, r4
 800d034:	4628      	mov	r0, r5
 800d036:	f000 f919 	bl	800d26c <_fflush_r>
 800d03a:	b988      	cbnz	r0, 800d060 <__swbuf_r+0x90>
 800d03c:	4638      	mov	r0, r7
 800d03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d040:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <__swbuf_r+0x9c>)
 800d042:	429c      	cmp	r4, r3
 800d044:	d101      	bne.n	800d04a <__swbuf_r+0x7a>
 800d046:	68ac      	ldr	r4, [r5, #8]
 800d048:	e7cf      	b.n	800cfea <__swbuf_r+0x1a>
 800d04a:	4b09      	ldr	r3, [pc, #36]	; (800d070 <__swbuf_r+0xa0>)
 800d04c:	429c      	cmp	r4, r3
 800d04e:	bf08      	it	eq
 800d050:	68ec      	ldreq	r4, [r5, #12]
 800d052:	e7ca      	b.n	800cfea <__swbuf_r+0x1a>
 800d054:	4621      	mov	r1, r4
 800d056:	4628      	mov	r0, r5
 800d058:	f000 f80c 	bl	800d074 <__swsetup_r>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d0cb      	beq.n	800cff8 <__swbuf_r+0x28>
 800d060:	f04f 37ff 	mov.w	r7, #4294967295
 800d064:	e7ea      	b.n	800d03c <__swbuf_r+0x6c>
 800d066:	bf00      	nop
 800d068:	0800dc0c 	.word	0x0800dc0c
 800d06c:	0800dc2c 	.word	0x0800dc2c
 800d070:	0800dbec 	.word	0x0800dbec

0800d074 <__swsetup_r>:
 800d074:	4b32      	ldr	r3, [pc, #200]	; (800d140 <__swsetup_r+0xcc>)
 800d076:	b570      	push	{r4, r5, r6, lr}
 800d078:	681d      	ldr	r5, [r3, #0]
 800d07a:	4606      	mov	r6, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	b125      	cbz	r5, 800d08a <__swsetup_r+0x16>
 800d080:	69ab      	ldr	r3, [r5, #24]
 800d082:	b913      	cbnz	r3, 800d08a <__swsetup_r+0x16>
 800d084:	4628      	mov	r0, r5
 800d086:	f000 f985 	bl	800d394 <__sinit>
 800d08a:	4b2e      	ldr	r3, [pc, #184]	; (800d144 <__swsetup_r+0xd0>)
 800d08c:	429c      	cmp	r4, r3
 800d08e:	d10f      	bne.n	800d0b0 <__swsetup_r+0x3c>
 800d090:	686c      	ldr	r4, [r5, #4]
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d098:	0719      	lsls	r1, r3, #28
 800d09a:	d42c      	bmi.n	800d0f6 <__swsetup_r+0x82>
 800d09c:	06dd      	lsls	r5, r3, #27
 800d09e:	d411      	bmi.n	800d0c4 <__swsetup_r+0x50>
 800d0a0:	2309      	movs	r3, #9
 800d0a2:	6033      	str	r3, [r6, #0]
 800d0a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ae:	e03e      	b.n	800d12e <__swsetup_r+0xba>
 800d0b0:	4b25      	ldr	r3, [pc, #148]	; (800d148 <__swsetup_r+0xd4>)
 800d0b2:	429c      	cmp	r4, r3
 800d0b4:	d101      	bne.n	800d0ba <__swsetup_r+0x46>
 800d0b6:	68ac      	ldr	r4, [r5, #8]
 800d0b8:	e7eb      	b.n	800d092 <__swsetup_r+0x1e>
 800d0ba:	4b24      	ldr	r3, [pc, #144]	; (800d14c <__swsetup_r+0xd8>)
 800d0bc:	429c      	cmp	r4, r3
 800d0be:	bf08      	it	eq
 800d0c0:	68ec      	ldreq	r4, [r5, #12]
 800d0c2:	e7e6      	b.n	800d092 <__swsetup_r+0x1e>
 800d0c4:	0758      	lsls	r0, r3, #29
 800d0c6:	d512      	bpl.n	800d0ee <__swsetup_r+0x7a>
 800d0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ca:	b141      	cbz	r1, 800d0de <__swsetup_r+0x6a>
 800d0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0d0:	4299      	cmp	r1, r3
 800d0d2:	d002      	beq.n	800d0da <__swsetup_r+0x66>
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7ff fc41 	bl	800c95c <_free_r>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	6363      	str	r3, [r4, #52]	; 0x34
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	6063      	str	r3, [r4, #4]
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	f043 0308 	orr.w	r3, r3, #8
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	b94b      	cbnz	r3, 800d10e <__swsetup_r+0x9a>
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d104:	d003      	beq.n	800d10e <__swsetup_r+0x9a>
 800d106:	4621      	mov	r1, r4
 800d108:	4630      	mov	r0, r6
 800d10a:	f000 fa09 	bl	800d520 <__smakebuf_r>
 800d10e:	89a0      	ldrh	r0, [r4, #12]
 800d110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d114:	f010 0301 	ands.w	r3, r0, #1
 800d118:	d00a      	beq.n	800d130 <__swsetup_r+0xbc>
 800d11a:	2300      	movs	r3, #0
 800d11c:	60a3      	str	r3, [r4, #8]
 800d11e:	6963      	ldr	r3, [r4, #20]
 800d120:	425b      	negs	r3, r3
 800d122:	61a3      	str	r3, [r4, #24]
 800d124:	6923      	ldr	r3, [r4, #16]
 800d126:	b943      	cbnz	r3, 800d13a <__swsetup_r+0xc6>
 800d128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d12c:	d1ba      	bne.n	800d0a4 <__swsetup_r+0x30>
 800d12e:	bd70      	pop	{r4, r5, r6, pc}
 800d130:	0781      	lsls	r1, r0, #30
 800d132:	bf58      	it	pl
 800d134:	6963      	ldrpl	r3, [r4, #20]
 800d136:	60a3      	str	r3, [r4, #8]
 800d138:	e7f4      	b.n	800d124 <__swsetup_r+0xb0>
 800d13a:	2000      	movs	r0, #0
 800d13c:	e7f7      	b.n	800d12e <__swsetup_r+0xba>
 800d13e:	bf00      	nop
 800d140:	24000014 	.word	0x24000014
 800d144:	0800dc0c 	.word	0x0800dc0c
 800d148:	0800dc2c 	.word	0x0800dc2c
 800d14c:	0800dbec 	.word	0x0800dbec

0800d150 <abort>:
 800d150:	b508      	push	{r3, lr}
 800d152:	2006      	movs	r0, #6
 800d154:	f000 fa4c 	bl	800d5f0 <raise>
 800d158:	2001      	movs	r0, #1
 800d15a:	f7f4 ff93 	bl	8002084 <_exit>
	...

0800d160 <__sflush_r>:
 800d160:	898a      	ldrh	r2, [r1, #12]
 800d162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d166:	4605      	mov	r5, r0
 800d168:	0710      	lsls	r0, r2, #28
 800d16a:	460c      	mov	r4, r1
 800d16c:	d458      	bmi.n	800d220 <__sflush_r+0xc0>
 800d16e:	684b      	ldr	r3, [r1, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	dc05      	bgt.n	800d180 <__sflush_r+0x20>
 800d174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d176:	2b00      	cmp	r3, #0
 800d178:	dc02      	bgt.n	800d180 <__sflush_r+0x20>
 800d17a:	2000      	movs	r0, #0
 800d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d182:	2e00      	cmp	r6, #0
 800d184:	d0f9      	beq.n	800d17a <__sflush_r+0x1a>
 800d186:	2300      	movs	r3, #0
 800d188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d18c:	682f      	ldr	r7, [r5, #0]
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	d032      	beq.n	800d1f8 <__sflush_r+0x98>
 800d192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	075a      	lsls	r2, r3, #29
 800d198:	d505      	bpl.n	800d1a6 <__sflush_r+0x46>
 800d19a:	6863      	ldr	r3, [r4, #4]
 800d19c:	1ac0      	subs	r0, r0, r3
 800d19e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1a0:	b10b      	cbz	r3, 800d1a6 <__sflush_r+0x46>
 800d1a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1a4:	1ac0      	subs	r0, r0, r3
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ac:	6a21      	ldr	r1, [r4, #32]
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b0      	blx	r6
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	d106      	bne.n	800d1c6 <__sflush_r+0x66>
 800d1b8:	6829      	ldr	r1, [r5, #0]
 800d1ba:	291d      	cmp	r1, #29
 800d1bc:	d82c      	bhi.n	800d218 <__sflush_r+0xb8>
 800d1be:	4a2a      	ldr	r2, [pc, #168]	; (800d268 <__sflush_r+0x108>)
 800d1c0:	40ca      	lsrs	r2, r1
 800d1c2:	07d6      	lsls	r6, r2, #31
 800d1c4:	d528      	bpl.n	800d218 <__sflush_r+0xb8>
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	6062      	str	r2, [r4, #4]
 800d1ca:	04d9      	lsls	r1, r3, #19
 800d1cc:	6922      	ldr	r2, [r4, #16]
 800d1ce:	6022      	str	r2, [r4, #0]
 800d1d0:	d504      	bpl.n	800d1dc <__sflush_r+0x7c>
 800d1d2:	1c42      	adds	r2, r0, #1
 800d1d4:	d101      	bne.n	800d1da <__sflush_r+0x7a>
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	b903      	cbnz	r3, 800d1dc <__sflush_r+0x7c>
 800d1da:	6560      	str	r0, [r4, #84]	; 0x54
 800d1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1de:	602f      	str	r7, [r5, #0]
 800d1e0:	2900      	cmp	r1, #0
 800d1e2:	d0ca      	beq.n	800d17a <__sflush_r+0x1a>
 800d1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1e8:	4299      	cmp	r1, r3
 800d1ea:	d002      	beq.n	800d1f2 <__sflush_r+0x92>
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f7ff fbb5 	bl	800c95c <_free_r>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	6360      	str	r0, [r4, #52]	; 0x34
 800d1f6:	e7c1      	b.n	800d17c <__sflush_r+0x1c>
 800d1f8:	6a21      	ldr	r1, [r4, #32]
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b0      	blx	r6
 800d200:	1c41      	adds	r1, r0, #1
 800d202:	d1c7      	bne.n	800d194 <__sflush_r+0x34>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0c4      	beq.n	800d194 <__sflush_r+0x34>
 800d20a:	2b1d      	cmp	r3, #29
 800d20c:	d001      	beq.n	800d212 <__sflush_r+0xb2>
 800d20e:	2b16      	cmp	r3, #22
 800d210:	d101      	bne.n	800d216 <__sflush_r+0xb6>
 800d212:	602f      	str	r7, [r5, #0]
 800d214:	e7b1      	b.n	800d17a <__sflush_r+0x1a>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d21c:	81a3      	strh	r3, [r4, #12]
 800d21e:	e7ad      	b.n	800d17c <__sflush_r+0x1c>
 800d220:	690f      	ldr	r7, [r1, #16]
 800d222:	2f00      	cmp	r7, #0
 800d224:	d0a9      	beq.n	800d17a <__sflush_r+0x1a>
 800d226:	0793      	lsls	r3, r2, #30
 800d228:	680e      	ldr	r6, [r1, #0]
 800d22a:	bf08      	it	eq
 800d22c:	694b      	ldreq	r3, [r1, #20]
 800d22e:	600f      	str	r7, [r1, #0]
 800d230:	bf18      	it	ne
 800d232:	2300      	movne	r3, #0
 800d234:	eba6 0807 	sub.w	r8, r6, r7
 800d238:	608b      	str	r3, [r1, #8]
 800d23a:	f1b8 0f00 	cmp.w	r8, #0
 800d23e:	dd9c      	ble.n	800d17a <__sflush_r+0x1a>
 800d240:	6a21      	ldr	r1, [r4, #32]
 800d242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d244:	4643      	mov	r3, r8
 800d246:	463a      	mov	r2, r7
 800d248:	4628      	mov	r0, r5
 800d24a:	47b0      	blx	r6
 800d24c:	2800      	cmp	r0, #0
 800d24e:	dc06      	bgt.n	800d25e <__sflush_r+0xfe>
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	f04f 30ff 	mov.w	r0, #4294967295
 800d25c:	e78e      	b.n	800d17c <__sflush_r+0x1c>
 800d25e:	4407      	add	r7, r0
 800d260:	eba8 0800 	sub.w	r8, r8, r0
 800d264:	e7e9      	b.n	800d23a <__sflush_r+0xda>
 800d266:	bf00      	nop
 800d268:	20400001 	.word	0x20400001

0800d26c <_fflush_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	690b      	ldr	r3, [r1, #16]
 800d270:	4605      	mov	r5, r0
 800d272:	460c      	mov	r4, r1
 800d274:	b913      	cbnz	r3, 800d27c <_fflush_r+0x10>
 800d276:	2500      	movs	r5, #0
 800d278:	4628      	mov	r0, r5
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	b118      	cbz	r0, 800d286 <_fflush_r+0x1a>
 800d27e:	6983      	ldr	r3, [r0, #24]
 800d280:	b90b      	cbnz	r3, 800d286 <_fflush_r+0x1a>
 800d282:	f000 f887 	bl	800d394 <__sinit>
 800d286:	4b14      	ldr	r3, [pc, #80]	; (800d2d8 <_fflush_r+0x6c>)
 800d288:	429c      	cmp	r4, r3
 800d28a:	d11b      	bne.n	800d2c4 <_fflush_r+0x58>
 800d28c:	686c      	ldr	r4, [r5, #4]
 800d28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0ef      	beq.n	800d276 <_fflush_r+0xa>
 800d296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d298:	07d0      	lsls	r0, r2, #31
 800d29a:	d404      	bmi.n	800d2a6 <_fflush_r+0x3a>
 800d29c:	0599      	lsls	r1, r3, #22
 800d29e:	d402      	bmi.n	800d2a6 <_fflush_r+0x3a>
 800d2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a2:	f000 f915 	bl	800d4d0 <__retarget_lock_acquire_recursive>
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	f7ff ff59 	bl	800d160 <__sflush_r>
 800d2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2b0:	07da      	lsls	r2, r3, #31
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	d4e0      	bmi.n	800d278 <_fflush_r+0xc>
 800d2b6:	89a3      	ldrh	r3, [r4, #12]
 800d2b8:	059b      	lsls	r3, r3, #22
 800d2ba:	d4dd      	bmi.n	800d278 <_fflush_r+0xc>
 800d2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2be:	f000 f908 	bl	800d4d2 <__retarget_lock_release_recursive>
 800d2c2:	e7d9      	b.n	800d278 <_fflush_r+0xc>
 800d2c4:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <_fflush_r+0x70>)
 800d2c6:	429c      	cmp	r4, r3
 800d2c8:	d101      	bne.n	800d2ce <_fflush_r+0x62>
 800d2ca:	68ac      	ldr	r4, [r5, #8]
 800d2cc:	e7df      	b.n	800d28e <_fflush_r+0x22>
 800d2ce:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <_fflush_r+0x74>)
 800d2d0:	429c      	cmp	r4, r3
 800d2d2:	bf08      	it	eq
 800d2d4:	68ec      	ldreq	r4, [r5, #12]
 800d2d6:	e7da      	b.n	800d28e <_fflush_r+0x22>
 800d2d8:	0800dc0c 	.word	0x0800dc0c
 800d2dc:	0800dc2c 	.word	0x0800dc2c
 800d2e0:	0800dbec 	.word	0x0800dbec

0800d2e4 <std>:
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2f2:	6083      	str	r3, [r0, #8]
 800d2f4:	8181      	strh	r1, [r0, #12]
 800d2f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d2f8:	81c2      	strh	r2, [r0, #14]
 800d2fa:	6183      	str	r3, [r0, #24]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	2208      	movs	r2, #8
 800d300:	305c      	adds	r0, #92	; 0x5c
 800d302:	f7fd fbcf 	bl	800aaa4 <memset>
 800d306:	4b05      	ldr	r3, [pc, #20]	; (800d31c <std+0x38>)
 800d308:	6263      	str	r3, [r4, #36]	; 0x24
 800d30a:	4b05      	ldr	r3, [pc, #20]	; (800d320 <std+0x3c>)
 800d30c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <std+0x40>)
 800d310:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d312:	4b05      	ldr	r3, [pc, #20]	; (800d328 <std+0x44>)
 800d314:	6224      	str	r4, [r4, #32]
 800d316:	6323      	str	r3, [r4, #48]	; 0x30
 800d318:	bd10      	pop	{r4, pc}
 800d31a:	bf00      	nop
 800d31c:	0800d629 	.word	0x0800d629
 800d320:	0800d64b 	.word	0x0800d64b
 800d324:	0800d683 	.word	0x0800d683
 800d328:	0800d6a7 	.word	0x0800d6a7

0800d32c <_cleanup_r>:
 800d32c:	4901      	ldr	r1, [pc, #4]	; (800d334 <_cleanup_r+0x8>)
 800d32e:	f000 b8af 	b.w	800d490 <_fwalk_reent>
 800d332:	bf00      	nop
 800d334:	0800d26d 	.word	0x0800d26d

0800d338 <__sfmoreglue>:
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	2268      	movs	r2, #104	; 0x68
 800d33c:	1e4d      	subs	r5, r1, #1
 800d33e:	4355      	muls	r5, r2
 800d340:	460e      	mov	r6, r1
 800d342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d346:	f7ff fa15 	bl	800c774 <_malloc_r>
 800d34a:	4604      	mov	r4, r0
 800d34c:	b140      	cbz	r0, 800d360 <__sfmoreglue+0x28>
 800d34e:	2100      	movs	r1, #0
 800d350:	e9c0 1600 	strd	r1, r6, [r0]
 800d354:	300c      	adds	r0, #12
 800d356:	60a0      	str	r0, [r4, #8]
 800d358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d35c:	f7fd fba2 	bl	800aaa4 <memset>
 800d360:	4620      	mov	r0, r4
 800d362:	bd70      	pop	{r4, r5, r6, pc}

0800d364 <__sfp_lock_acquire>:
 800d364:	4801      	ldr	r0, [pc, #4]	; (800d36c <__sfp_lock_acquire+0x8>)
 800d366:	f000 b8b3 	b.w	800d4d0 <__retarget_lock_acquire_recursive>
 800d36a:	bf00      	nop
 800d36c:	24000585 	.word	0x24000585

0800d370 <__sfp_lock_release>:
 800d370:	4801      	ldr	r0, [pc, #4]	; (800d378 <__sfp_lock_release+0x8>)
 800d372:	f000 b8ae 	b.w	800d4d2 <__retarget_lock_release_recursive>
 800d376:	bf00      	nop
 800d378:	24000585 	.word	0x24000585

0800d37c <__sinit_lock_acquire>:
 800d37c:	4801      	ldr	r0, [pc, #4]	; (800d384 <__sinit_lock_acquire+0x8>)
 800d37e:	f000 b8a7 	b.w	800d4d0 <__retarget_lock_acquire_recursive>
 800d382:	bf00      	nop
 800d384:	24000586 	.word	0x24000586

0800d388 <__sinit_lock_release>:
 800d388:	4801      	ldr	r0, [pc, #4]	; (800d390 <__sinit_lock_release+0x8>)
 800d38a:	f000 b8a2 	b.w	800d4d2 <__retarget_lock_release_recursive>
 800d38e:	bf00      	nop
 800d390:	24000586 	.word	0x24000586

0800d394 <__sinit>:
 800d394:	b510      	push	{r4, lr}
 800d396:	4604      	mov	r4, r0
 800d398:	f7ff fff0 	bl	800d37c <__sinit_lock_acquire>
 800d39c:	69a3      	ldr	r3, [r4, #24]
 800d39e:	b11b      	cbz	r3, 800d3a8 <__sinit+0x14>
 800d3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a4:	f7ff bff0 	b.w	800d388 <__sinit_lock_release>
 800d3a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3ac:	6523      	str	r3, [r4, #80]	; 0x50
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <__sinit+0x68>)
 800d3b0:	4a13      	ldr	r2, [pc, #76]	; (800d400 <__sinit+0x6c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3b6:	42a3      	cmp	r3, r4
 800d3b8:	bf04      	itt	eq
 800d3ba:	2301      	moveq	r3, #1
 800d3bc:	61a3      	streq	r3, [r4, #24]
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 f820 	bl	800d404 <__sfp>
 800d3c4:	6060      	str	r0, [r4, #4]
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f000 f81c 	bl	800d404 <__sfp>
 800d3cc:	60a0      	str	r0, [r4, #8]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 f818 	bl	800d404 <__sfp>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	60e0      	str	r0, [r4, #12]
 800d3d8:	2104      	movs	r1, #4
 800d3da:	6860      	ldr	r0, [r4, #4]
 800d3dc:	f7ff ff82 	bl	800d2e4 <std>
 800d3e0:	68a0      	ldr	r0, [r4, #8]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	2109      	movs	r1, #9
 800d3e6:	f7ff ff7d 	bl	800d2e4 <std>
 800d3ea:	68e0      	ldr	r0, [r4, #12]
 800d3ec:	2202      	movs	r2, #2
 800d3ee:	2112      	movs	r1, #18
 800d3f0:	f7ff ff78 	bl	800d2e4 <std>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	61a3      	str	r3, [r4, #24]
 800d3f8:	e7d2      	b.n	800d3a0 <__sinit+0xc>
 800d3fa:	bf00      	nop
 800d3fc:	0800d820 	.word	0x0800d820
 800d400:	0800d32d 	.word	0x0800d32d

0800d404 <__sfp>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	4607      	mov	r7, r0
 800d408:	f7ff ffac 	bl	800d364 <__sfp_lock_acquire>
 800d40c:	4b1e      	ldr	r3, [pc, #120]	; (800d488 <__sfp+0x84>)
 800d40e:	681e      	ldr	r6, [r3, #0]
 800d410:	69b3      	ldr	r3, [r6, #24]
 800d412:	b913      	cbnz	r3, 800d41a <__sfp+0x16>
 800d414:	4630      	mov	r0, r6
 800d416:	f7ff ffbd 	bl	800d394 <__sinit>
 800d41a:	3648      	adds	r6, #72	; 0x48
 800d41c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d420:	3b01      	subs	r3, #1
 800d422:	d503      	bpl.n	800d42c <__sfp+0x28>
 800d424:	6833      	ldr	r3, [r6, #0]
 800d426:	b30b      	cbz	r3, 800d46c <__sfp+0x68>
 800d428:	6836      	ldr	r6, [r6, #0]
 800d42a:	e7f7      	b.n	800d41c <__sfp+0x18>
 800d42c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d430:	b9d5      	cbnz	r5, 800d468 <__sfp+0x64>
 800d432:	4b16      	ldr	r3, [pc, #88]	; (800d48c <__sfp+0x88>)
 800d434:	60e3      	str	r3, [r4, #12]
 800d436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d43a:	6665      	str	r5, [r4, #100]	; 0x64
 800d43c:	f000 f847 	bl	800d4ce <__retarget_lock_init_recursive>
 800d440:	f7ff ff96 	bl	800d370 <__sfp_lock_release>
 800d444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d44c:	6025      	str	r5, [r4, #0]
 800d44e:	61a5      	str	r5, [r4, #24]
 800d450:	2208      	movs	r2, #8
 800d452:	4629      	mov	r1, r5
 800d454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d458:	f7fd fb24 	bl	800aaa4 <memset>
 800d45c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d464:	4620      	mov	r0, r4
 800d466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d468:	3468      	adds	r4, #104	; 0x68
 800d46a:	e7d9      	b.n	800d420 <__sfp+0x1c>
 800d46c:	2104      	movs	r1, #4
 800d46e:	4638      	mov	r0, r7
 800d470:	f7ff ff62 	bl	800d338 <__sfmoreglue>
 800d474:	4604      	mov	r4, r0
 800d476:	6030      	str	r0, [r6, #0]
 800d478:	2800      	cmp	r0, #0
 800d47a:	d1d5      	bne.n	800d428 <__sfp+0x24>
 800d47c:	f7ff ff78 	bl	800d370 <__sfp_lock_release>
 800d480:	230c      	movs	r3, #12
 800d482:	603b      	str	r3, [r7, #0]
 800d484:	e7ee      	b.n	800d464 <__sfp+0x60>
 800d486:	bf00      	nop
 800d488:	0800d820 	.word	0x0800d820
 800d48c:	ffff0001 	.word	0xffff0001

0800d490 <_fwalk_reent>:
 800d490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d494:	4606      	mov	r6, r0
 800d496:	4688      	mov	r8, r1
 800d498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d49c:	2700      	movs	r7, #0
 800d49e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4a2:	f1b9 0901 	subs.w	r9, r9, #1
 800d4a6:	d505      	bpl.n	800d4b4 <_fwalk_reent+0x24>
 800d4a8:	6824      	ldr	r4, [r4, #0]
 800d4aa:	2c00      	cmp	r4, #0
 800d4ac:	d1f7      	bne.n	800d49e <_fwalk_reent+0xe>
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b4:	89ab      	ldrh	r3, [r5, #12]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d907      	bls.n	800d4ca <_fwalk_reent+0x3a>
 800d4ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	d003      	beq.n	800d4ca <_fwalk_reent+0x3a>
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	4630      	mov	r0, r6
 800d4c6:	47c0      	blx	r8
 800d4c8:	4307      	orrs	r7, r0
 800d4ca:	3568      	adds	r5, #104	; 0x68
 800d4cc:	e7e9      	b.n	800d4a2 <_fwalk_reent+0x12>

0800d4ce <__retarget_lock_init_recursive>:
 800d4ce:	4770      	bx	lr

0800d4d0 <__retarget_lock_acquire_recursive>:
 800d4d0:	4770      	bx	lr

0800d4d2 <__retarget_lock_release_recursive>:
 800d4d2:	4770      	bx	lr

0800d4d4 <__swhatbuf_r>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	460e      	mov	r6, r1
 800d4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	b096      	sub	sp, #88	; 0x58
 800d4e0:	4614      	mov	r4, r2
 800d4e2:	461d      	mov	r5, r3
 800d4e4:	da08      	bge.n	800d4f8 <__swhatbuf_r+0x24>
 800d4e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	602a      	str	r2, [r5, #0]
 800d4ee:	061a      	lsls	r2, r3, #24
 800d4f0:	d410      	bmi.n	800d514 <__swhatbuf_r+0x40>
 800d4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4f6:	e00e      	b.n	800d516 <__swhatbuf_r+0x42>
 800d4f8:	466a      	mov	r2, sp
 800d4fa:	f000 f8fb 	bl	800d6f4 <_fstat_r>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	dbf1      	blt.n	800d4e6 <__swhatbuf_r+0x12>
 800d502:	9a01      	ldr	r2, [sp, #4]
 800d504:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d508:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d50c:	425a      	negs	r2, r3
 800d50e:	415a      	adcs	r2, r3
 800d510:	602a      	str	r2, [r5, #0]
 800d512:	e7ee      	b.n	800d4f2 <__swhatbuf_r+0x1e>
 800d514:	2340      	movs	r3, #64	; 0x40
 800d516:	2000      	movs	r0, #0
 800d518:	6023      	str	r3, [r4, #0]
 800d51a:	b016      	add	sp, #88	; 0x58
 800d51c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d520 <__smakebuf_r>:
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d524:	079d      	lsls	r5, r3, #30
 800d526:	4606      	mov	r6, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	d507      	bpl.n	800d53c <__smakebuf_r+0x1c>
 800d52c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	6123      	str	r3, [r4, #16]
 800d534:	2301      	movs	r3, #1
 800d536:	6163      	str	r3, [r4, #20]
 800d538:	b002      	add	sp, #8
 800d53a:	bd70      	pop	{r4, r5, r6, pc}
 800d53c:	ab01      	add	r3, sp, #4
 800d53e:	466a      	mov	r2, sp
 800d540:	f7ff ffc8 	bl	800d4d4 <__swhatbuf_r>
 800d544:	9900      	ldr	r1, [sp, #0]
 800d546:	4605      	mov	r5, r0
 800d548:	4630      	mov	r0, r6
 800d54a:	f7ff f913 	bl	800c774 <_malloc_r>
 800d54e:	b948      	cbnz	r0, 800d564 <__smakebuf_r+0x44>
 800d550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d554:	059a      	lsls	r2, r3, #22
 800d556:	d4ef      	bmi.n	800d538 <__smakebuf_r+0x18>
 800d558:	f023 0303 	bic.w	r3, r3, #3
 800d55c:	f043 0302 	orr.w	r3, r3, #2
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	e7e3      	b.n	800d52c <__smakebuf_r+0xc>
 800d564:	4b0d      	ldr	r3, [pc, #52]	; (800d59c <__smakebuf_r+0x7c>)
 800d566:	62b3      	str	r3, [r6, #40]	; 0x28
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	6020      	str	r0, [r4, #0]
 800d56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	9b00      	ldr	r3, [sp, #0]
 800d574:	6163      	str	r3, [r4, #20]
 800d576:	9b01      	ldr	r3, [sp, #4]
 800d578:	6120      	str	r0, [r4, #16]
 800d57a:	b15b      	cbz	r3, 800d594 <__smakebuf_r+0x74>
 800d57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d580:	4630      	mov	r0, r6
 800d582:	f000 f8c9 	bl	800d718 <_isatty_r>
 800d586:	b128      	cbz	r0, 800d594 <__smakebuf_r+0x74>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	f023 0303 	bic.w	r3, r3, #3
 800d58e:	f043 0301 	orr.w	r3, r3, #1
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	89a0      	ldrh	r0, [r4, #12]
 800d596:	4305      	orrs	r5, r0
 800d598:	81a5      	strh	r5, [r4, #12]
 800d59a:	e7cd      	b.n	800d538 <__smakebuf_r+0x18>
 800d59c:	0800d32d 	.word	0x0800d32d

0800d5a0 <_raise_r>:
 800d5a0:	291f      	cmp	r1, #31
 800d5a2:	b538      	push	{r3, r4, r5, lr}
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	d904      	bls.n	800d5b4 <_raise_r+0x14>
 800d5aa:	2316      	movs	r3, #22
 800d5ac:	6003      	str	r3, [r0, #0]
 800d5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5b6:	b112      	cbz	r2, 800d5be <_raise_r+0x1e>
 800d5b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5bc:	b94b      	cbnz	r3, 800d5d2 <_raise_r+0x32>
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 f830 	bl	800d624 <_getpid_r>
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5ce:	f000 b817 	b.w	800d600 <_kill_r>
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d00a      	beq.n	800d5ec <_raise_r+0x4c>
 800d5d6:	1c59      	adds	r1, r3, #1
 800d5d8:	d103      	bne.n	800d5e2 <_raise_r+0x42>
 800d5da:	2316      	movs	r3, #22
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	2001      	movs	r0, #1
 800d5e0:	e7e7      	b.n	800d5b2 <_raise_r+0x12>
 800d5e2:	2400      	movs	r4, #0
 800d5e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	4798      	blx	r3
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e7e0      	b.n	800d5b2 <_raise_r+0x12>

0800d5f0 <raise>:
 800d5f0:	4b02      	ldr	r3, [pc, #8]	; (800d5fc <raise+0xc>)
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	f7ff bfd3 	b.w	800d5a0 <_raise_r>
 800d5fa:	bf00      	nop
 800d5fc:	24000014 	.word	0x24000014

0800d600 <_kill_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4d07      	ldr	r5, [pc, #28]	; (800d620 <_kill_r+0x20>)
 800d604:	2300      	movs	r3, #0
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	4611      	mov	r1, r2
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	f7f4 fd29 	bl	8002064 <_kill>
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	d102      	bne.n	800d61c <_kill_r+0x1c>
 800d616:	682b      	ldr	r3, [r5, #0]
 800d618:	b103      	cbz	r3, 800d61c <_kill_r+0x1c>
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
 800d61e:	bf00      	nop
 800d620:	24000580 	.word	0x24000580

0800d624 <_getpid_r>:
 800d624:	f7f4 bd16 	b.w	8002054 <_getpid>

0800d628 <__sread>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	460c      	mov	r4, r1
 800d62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d630:	f000 f894 	bl	800d75c <_read_r>
 800d634:	2800      	cmp	r0, #0
 800d636:	bfab      	itete	ge
 800d638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d63a:	89a3      	ldrhlt	r3, [r4, #12]
 800d63c:	181b      	addge	r3, r3, r0
 800d63e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d642:	bfac      	ite	ge
 800d644:	6563      	strge	r3, [r4, #84]	; 0x54
 800d646:	81a3      	strhlt	r3, [r4, #12]
 800d648:	bd10      	pop	{r4, pc}

0800d64a <__swrite>:
 800d64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64e:	461f      	mov	r7, r3
 800d650:	898b      	ldrh	r3, [r1, #12]
 800d652:	05db      	lsls	r3, r3, #23
 800d654:	4605      	mov	r5, r0
 800d656:	460c      	mov	r4, r1
 800d658:	4616      	mov	r6, r2
 800d65a:	d505      	bpl.n	800d668 <__swrite+0x1e>
 800d65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d660:	2302      	movs	r3, #2
 800d662:	2200      	movs	r2, #0
 800d664:	f000 f868 	bl	800d738 <_lseek_r>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d66e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	4632      	mov	r2, r6
 800d676:	463b      	mov	r3, r7
 800d678:	4628      	mov	r0, r5
 800d67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d67e:	f000 b817 	b.w	800d6b0 <_write_r>

0800d682 <__sseek>:
 800d682:	b510      	push	{r4, lr}
 800d684:	460c      	mov	r4, r1
 800d686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d68a:	f000 f855 	bl	800d738 <_lseek_r>
 800d68e:	1c43      	adds	r3, r0, #1
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	bf15      	itete	ne
 800d694:	6560      	strne	r0, [r4, #84]	; 0x54
 800d696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d69a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d69e:	81a3      	strheq	r3, [r4, #12]
 800d6a0:	bf18      	it	ne
 800d6a2:	81a3      	strhne	r3, [r4, #12]
 800d6a4:	bd10      	pop	{r4, pc}

0800d6a6 <__sclose>:
 800d6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6aa:	f000 b813 	b.w	800d6d4 <_close_r>
	...

0800d6b0 <_write_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4d07      	ldr	r5, [pc, #28]	; (800d6d0 <_write_r+0x20>)
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	4608      	mov	r0, r1
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	602a      	str	r2, [r5, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	f7f4 fd07 	bl	80020d2 <_write>
 800d6c4:	1c43      	adds	r3, r0, #1
 800d6c6:	d102      	bne.n	800d6ce <_write_r+0x1e>
 800d6c8:	682b      	ldr	r3, [r5, #0]
 800d6ca:	b103      	cbz	r3, 800d6ce <_write_r+0x1e>
 800d6cc:	6023      	str	r3, [r4, #0]
 800d6ce:	bd38      	pop	{r3, r4, r5, pc}
 800d6d0:	24000580 	.word	0x24000580

0800d6d4 <_close_r>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	4d06      	ldr	r5, [pc, #24]	; (800d6f0 <_close_r+0x1c>)
 800d6d8:	2300      	movs	r3, #0
 800d6da:	4604      	mov	r4, r0
 800d6dc:	4608      	mov	r0, r1
 800d6de:	602b      	str	r3, [r5, #0]
 800d6e0:	f7f4 fd13 	bl	800210a <_close>
 800d6e4:	1c43      	adds	r3, r0, #1
 800d6e6:	d102      	bne.n	800d6ee <_close_r+0x1a>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	b103      	cbz	r3, 800d6ee <_close_r+0x1a>
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	24000580 	.word	0x24000580

0800d6f4 <_fstat_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	4d07      	ldr	r5, [pc, #28]	; (800d714 <_fstat_r+0x20>)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	4608      	mov	r0, r1
 800d6fe:	4611      	mov	r1, r2
 800d700:	602b      	str	r3, [r5, #0]
 800d702:	f7f4 fd0e 	bl	8002122 <_fstat>
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	d102      	bne.n	800d710 <_fstat_r+0x1c>
 800d70a:	682b      	ldr	r3, [r5, #0]
 800d70c:	b103      	cbz	r3, 800d710 <_fstat_r+0x1c>
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	bd38      	pop	{r3, r4, r5, pc}
 800d712:	bf00      	nop
 800d714:	24000580 	.word	0x24000580

0800d718 <_isatty_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4d06      	ldr	r5, [pc, #24]	; (800d734 <_isatty_r+0x1c>)
 800d71c:	2300      	movs	r3, #0
 800d71e:	4604      	mov	r4, r0
 800d720:	4608      	mov	r0, r1
 800d722:	602b      	str	r3, [r5, #0]
 800d724:	f7f4 fd0d 	bl	8002142 <_isatty>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d102      	bne.n	800d732 <_isatty_r+0x1a>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	b103      	cbz	r3, 800d732 <_isatty_r+0x1a>
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	24000580 	.word	0x24000580

0800d738 <_lseek_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4d07      	ldr	r5, [pc, #28]	; (800d758 <_lseek_r+0x20>)
 800d73c:	4604      	mov	r4, r0
 800d73e:	4608      	mov	r0, r1
 800d740:	4611      	mov	r1, r2
 800d742:	2200      	movs	r2, #0
 800d744:	602a      	str	r2, [r5, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	f7f4 fd06 	bl	8002158 <_lseek>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_lseek_r+0x1e>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	b103      	cbz	r3, 800d756 <_lseek_r+0x1e>
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	24000580 	.word	0x24000580

0800d75c <_read_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4d07      	ldr	r5, [pc, #28]	; (800d77c <_read_r+0x20>)
 800d760:	4604      	mov	r4, r0
 800d762:	4608      	mov	r0, r1
 800d764:	4611      	mov	r1, r2
 800d766:	2200      	movs	r2, #0
 800d768:	602a      	str	r2, [r5, #0]
 800d76a:	461a      	mov	r2, r3
 800d76c:	f7f4 fc94 	bl	8002098 <_read>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d102      	bne.n	800d77a <_read_r+0x1e>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	b103      	cbz	r3, 800d77a <_read_r+0x1e>
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	bd38      	pop	{r3, r4, r5, pc}
 800d77c:	24000580 	.word	0x24000580

0800d780 <_init>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	bf00      	nop
 800d784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d786:	bc08      	pop	{r3}
 800d788:	469e      	mov	lr, r3
 800d78a:	4770      	bx	lr

0800d78c <_fini>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr
