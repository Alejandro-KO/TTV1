
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d168  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800d438  0800d438  0001d438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d8cc  0800d8cc  0001d8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d8d4  0800d8d4  0001d8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d8d8  0800d8d8  0001d8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0800d8dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000388  240001e8  0800dac4  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000570  0800dac4  00020570  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016c69  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002739  00000000  00000000  00036e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  000395b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010c8  00000000  00000000  0003a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033744  00000000  00000000  0003b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000171ca  00000000  00000000  0006ef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014db21  00000000  00000000  0008613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3c5f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c24  00000000  00000000  001d3cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d420 	.word	0x0800d420

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800d420 	.word	0x0800d420

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <radianes_a_valor>:
uint8_t tx2_buffer[20]="Welcome \n\r";

uint8_t rx1_buffer;
uint8_t received_data;

uint32_t radianes_a_valor(float radianes) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes < 0) radianes = 0;
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d502      	bpl.n	8000ace <radianes_a_valor+0x1e>
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
    if (radianes > M_PI) radianes = M_PI;
 8000ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000b18 <radianes_a_valor+0x68>
 8000ada:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	dd01      	ble.n	8000ae8 <radianes_a_valor+0x38>
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <radianes_a_valor+0x78>)
 8000ae6:	607b      	str	r3, [r7, #4]

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000af0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000b18 <radianes_a_valor+0x68>
 8000af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000af8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000b20 <radianes_a_valor+0x70>
 8000afc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b04:	ee17 3a90 	vmov	r3, s15
 8000b08:	3341      	adds	r3, #65	; 0x41
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	54442d18 	.word	0x54442d18
 8000b1c:	400921fb 	.word	0x400921fb
 8000b20:	00000000 	.word	0x00000000
 8000b24:	406d6000 	.word	0x406d6000
 8000b28:	40490fdb 	.word	0x40490fdb

08000b2c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <milimetros_a_pasos+0x3c>)
 8000b38:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8000b42:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b56:	ee17 3a90 	vmov	r3, s15
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	41c80000 	.word	0x41c80000

08000b6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint8_t motor_running = 1;// Variable to control motor state
volatile uint8_t motor_running1 = 1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b7c:	d102      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x18>
        motor_running = 0; // Stop the motor when the interrupt occurs
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_13) {
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8a:	d102      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x26>
    	motor_running1 = 0; // Stop the motor when the interrupt occurs
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	24000000 	.word	0x24000000
 8000ba4:	24000001 	.word	0x24000001

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b093      	sub	sp, #76	; 0x4c
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char q1[]="1.5708";
 8000bae:	4a5f      	ldr	r2, [pc, #380]	; (8000d2c <main+0x184>)
 8000bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb8:	6018      	str	r0, [r3, #0]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	8019      	strh	r1, [r3, #0]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	0c0a      	lsrs	r2, r1, #16
 8000bc2:	701a      	strb	r2, [r3, #0]
	char q2[]="35.058";
 8000bc4:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <main+0x188>)
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bce:	6018      	str	r0, [r3, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	8019      	strh	r1, [r3, #0]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	0c0a      	lsrs	r2, r1, #16
 8000bd8:	701a      	strb	r2, [r3, #0]
	char q3[]="55.758";
 8000bda:	4a56      	ldr	r2, [pc, #344]	; (8000d34 <main+0x18c>)
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be4:	6018      	str	r0, [r3, #0]
 8000be6:	3304      	adds	r3, #4
 8000be8:	8019      	strh	r1, [r3, #0]
 8000bea:	3302      	adds	r3, #2
 8000bec:	0c0a      	lsrs	r2, r1, #16
 8000bee:	701a      	strb	r2, [r3, #0]
	char q4[]="3.1416";
 8000bf0:	4a51      	ldr	r2, [pc, #324]	; (8000d38 <main+0x190>)
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfa:	6018      	str	r0, [r3, #0]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	8019      	strh	r1, [r3, #0]
 8000c00:	3302      	adds	r3, #2
 8000c02:	0c0a      	lsrs	r2, r1, #16
 8000c04:	701a      	strb	r2, [r3, #0]

	 // Conversión de q1 y q4 a float
	    float q1_float = atof(q1);
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f009 fcc6 	bl	800a59c <atof>
 8000c10:	eeb0 7b40 	vmov.f64	d7, d0
 8000c14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c18:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	    float q4_float = atof(q4);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4618      	mov	r0, r3
 8000c22:	f009 fcbb 	bl	800a59c <atof>
 8000c26:	eeb0 7b40 	vmov.f64	d7, d0
 8000c2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	    // Conversión de q2 y q3 a int (truncando los valores decimales)
	    int q2_int = (int)atof(q2);
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	4618      	mov	r0, r3
 8000c38:	f009 fcb0 	bl	800a59c <atof>
 8000c3c:	eeb0 7b40 	vmov.f64	d7, d0
 8000c40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c44:	ee17 3a90 	vmov	r3, s15
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
	    int q3_int = (int)atof(q3);
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f009 fca4 	bl	800a59c <atof>
 8000c54:	eeb0 7b40 	vmov.f64	d7, d0
 8000c58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c5c:	ee17 3a90 	vmov	r3, s15
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38

    char cadena[7] = "123005";
 8000c62:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <main+0x194>)
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c6c:	6018      	str	r0, [r3, #0]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	8019      	strh	r1, [r3, #0]
 8000c72:	3302      	adds	r3, #2
 8000c74:	0c0a      	lsrs	r2, r1, #16
 8000c76:	701a      	strb	r2, [r3, #0]

    // Definir dos arreglos para almacenar las partes de 3 caracteres cada una
    char parte1[4], parte2[4];

    // Copiar los primeros 3 caracteres en parte1
    strncpy(parte1, cadena, 3);
 8000c78:	f107 0108 	add.w	r1, r7, #8
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2203      	movs	r2, #3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f009 fcc5 	bl	800a610 <strncpy>
    parte1[3] = '\0'; // Asegurarse de que parte1 sea una cadena de caracteres válida
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]

    // Copiar los últimos 3 caracteres en parte2
    strncpy(parte2, cadena + 3, 3);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	3303      	adds	r3, #3
 8000c90:	4638      	mov	r0, r7
 8000c92:	2203      	movs	r2, #3
 8000c94:	4619      	mov	r1, r3
 8000c96:	f009 fcbb 	bl	800a610 <strncpy>
    parte2[3] = '\0'; // Asegurarse de que parte2 sea una cadena de caracteres válida
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	70fb      	strb	r3, [r7, #3]

    // Convertir las partes a números enteros
    int numero1 = atoi(parte1);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f009 fc7e 	bl	800a5a2 <atoi>
 8000ca6:	6378      	str	r0, [r7, #52]	; 0x34
    int numero2 = atoi(parte2);
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4618      	mov	r0, r3
 8000cac:	f009 fc79 	bl	800a5a2 <atoi>
 8000cb0:	6338      	str	r0, [r7, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f001 f8e1 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f84b 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 fa15 	bl	80010e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cbe:	f000 f943 	bl	8000f48 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000cc2:	f000 f9d9 	bl	8001078 <MX_DMA_Init>
  MX_TIM1_Init();
 8000cc6:	f000 f8a3 	bl	8000e10 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000cca:	f000 f989 	bl	8000fe0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000cce:	210c      	movs	r1, #12
 8000cd0:	481b      	ldr	r0, [pc, #108]	; (8000d40 <main+0x198>)
 8000cd2:	f006 f97f 	bl	8006fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4819      	ldr	r0, [pc, #100]	; (8000d40 <main+0x198>)
 8000cda:	f006 f97b 	bl	8006fd4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <main+0x19c>)
 8000ce2:	4819      	ldr	r0, [pc, #100]	; (8000d48 <main+0x1a0>)
 8000ce4:	f007 f8d4 	bl	8007e90 <HAL_UART_Receive_IT>

  A4988_Setup();
 8000ce8:	f000 fae2 	bl	80012b0 <A4988_Setup>
  //motor_control1();
  Home();
 8000cec:	f000 fafc 	bl	80012e8 <Home>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mover_motorq1(q1_float);
 8000cf0:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8000cf4:	f000 fb10 	bl	8001318 <mover_motorq1>
	  mover_motorq2_mm(q2_int);
 8000cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	eeb0 0a67 	vmov.f32	s0, s15
 8000d06:	f000 fc59 	bl	80015bc <mover_motorq2_mm>
	  mover_motorq3_mm(q3_int);
 8000d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0c:	ee07 3a90 	vmov	s15, r3
 8000d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d14:	eeb0 0a67 	vmov.f32	s0, s15
 8000d18:	f000 fc92 	bl	8001640 <mover_motorq3_mm>
	  TIM1->CCR2 = radianes_a_valor(q4_float);
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <main+0x1a4>)
 8000d1e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8000d22:	f7ff fec5 	bl	8000ab0 <radianes_a_valor>
 8000d26:	4603      	mov	r3, r0
 8000d28:	63a3      	str	r3, [r4, #56]	; 0x38
	  mover_motorq1(q1_float);
 8000d2a:	e7e1      	b.n	8000cf0 <main+0x148>
 8000d2c:	0800d438 	.word	0x0800d438
 8000d30:	0800d440 	.word	0x0800d440
 8000d34:	0800d448 	.word	0x0800d448
 8000d38:	0800d450 	.word	0x0800d450
 8000d3c:	0800d458 	.word	0x0800d458
 8000d40:	24000204 	.word	0x24000204
 8000d44:	24000550 	.word	0x24000550
 8000d48:	240002e0 	.word	0x240002e0
 8000d4c:	40010000 	.word	0x40010000

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09c      	sub	sp, #112	; 0x70
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	224c      	movs	r2, #76	; 0x4c
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f009 fc4e 	bl	800a600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f009 fc48 	bl	800a600 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f003 fe47 	bl	8004a04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <SystemClock_Config+0xbc>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <SystemClock_Config+0xbc>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <SystemClock_Config+0xbc>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d96:	bf00      	nop
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <SystemClock_Config+0xbc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da4:	d1f8      	bne.n	8000d98 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da6:	2302      	movs	r3, #2
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fe5c 	bl	8004a78 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000dc6:	f000 fc79 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	233f      	movs	r3, #63	; 0x3f
 8000dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8000dd2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 f9ee 	bl	80051d4 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000dfe:	f000 fc5d 	bl	80016bc <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	3770      	adds	r7, #112	; 0x70
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	58024800 	.word	0x58024800

08000e10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b098      	sub	sp, #96	; 0x60
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2234      	movs	r2, #52	; 0x34
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fbdf 	bl	800a600 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e44:	4a3f      	ldr	r2, [pc, #252]	; (8000f44 <MX_TIM1_Init+0x134>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e4a:	2240      	movs	r2, #64	; 0x40
 8000e4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8000e54:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e56:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e6e:	4834      	ldr	r0, [pc, #208]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e70:	f006 f858 	bl	8006f24 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 fc1f 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482b      	ldr	r0, [pc, #172]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000e92:	f006 fe71 	bl	8007b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e9c:	f000 fc0e 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea0:	2360      	movs	r3, #96	; 0x60
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000ec6:	f006 f9a1 	bl	800720c <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ed0:	f000 fbf4 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed8:	220c      	movs	r2, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	4818      	ldr	r0, [pc, #96]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000ede:	f006 f995 	bl	800720c <HAL_TIM_PWM_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000ee8:	f000 fbe8 	bl	80016bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000f22:	f006 fec5 	bl	8007cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000f2c:	f000 fbc6 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM1_Init+0x130>)
 8000f32:	f000 fc05 	bl	8001740 <HAL_TIM_MspPostInit>

}
 8000f36:	bf00      	nop
 8000f38:	3760      	adds	r7, #96	; 0x60
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24000204 	.word	0x24000204
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000f92:	f006 ff2d 	bl	8007df0 <HAL_UART_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f9c:	f000 fb8e 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000fa4:	f009 fa2f 	bl	800a406 <HAL_UARTEx_SetTxFifoThreshold>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fae:	f000 fb85 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000fb6:	f009 fa64 	bl	800a482 <HAL_UARTEx_SetRxFifoThreshold>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f000 fb7c 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_USART1_UART_Init+0x90>)
 8000fc6:	f009 f9e5 	bl	800a394 <HAL_UARTEx_DisableFifoMode>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fd0:	f000 fb74 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	24000250 	.word	0x24000250
 8000fdc:	40011000 	.word	0x40011000

08000fe0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800102a:	f006 fee1 	bl	8007df0 <HAL_UART_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001034:	f000 fb42 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800103c:	f009 f9e3 	bl	800a406 <HAL_UARTEx_SetTxFifoThreshold>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001046:	f000 fb39 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800104e:	f009 fa18 	bl	800a482 <HAL_UARTEx_SetRxFifoThreshold>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001058:	f000 fb30 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800105e:	f009 f999 	bl	800a394 <HAL_UARTEx_DisableFifoMode>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001068:	f000 fb28 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	240002e0 	.word	0x240002e0
 8001074:	40004800 	.word	0x40004800

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_DMA_Init+0x6c>)
 8001080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <MX_DMA_Init+0x6c>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_DMA_Init+0x6c>)
 8001090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	200b      	movs	r0, #11
 80010a2:	f001 f87a 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010a6:	200b      	movs	r0, #11
 80010a8:	f001 f891 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	200c      	movs	r0, #12
 80010b2:	f001 f872 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010b6:	200c      	movs	r0, #12
 80010b8:	f001 f889 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	200d      	movs	r0, #13
 80010c2:	f001 f86a 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010c6:	200d      	movs	r0, #13
 80010c8:	f001 f881 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	200e      	movs	r0, #14
 80010d2:	f001 f862 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010d6:	200e      	movs	r0, #14
 80010d8:	f001 f879 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b59      	ldr	r3, [pc, #356]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a57      	ldr	r2, [pc, #348]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b55      	ldr	r3, [pc, #340]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111c:	4b51      	ldr	r3, [pc, #324]	; (8001264 <MX_GPIO_Init+0x17c>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a50      	ldr	r2, [pc, #320]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <MX_GPIO_Init+0x17c>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <MX_GPIO_Init+0x17c>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <MX_GPIO_Init+0x17c>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <MX_GPIO_Init+0x17c>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a41      	ldr	r2, [pc, #260]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <MX_GPIO_Init+0x17c>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a39      	ldr	r2, [pc, #228]	; (8001264 <MX_GPIO_Init+0x17c>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <MX_GPIO_Init+0x17c>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f640 2128 	movw	r1, #2600	; 0xa28
 800119a:	4833      	ldr	r0, [pc, #204]	; (8001268 <MX_GPIO_Init+0x180>)
 800119c:	f003 fbfe 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	210a      	movs	r1, #10
 80011a4:	4831      	ldr	r0, [pc, #196]	; (800126c <MX_GPIO_Init+0x184>)
 80011a6:	f003 fbf9 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80011aa:	2200      	movs	r2, #0
 80011ac:	21ae      	movs	r1, #174	; 0xae
 80011ae:	4830      	ldr	r0, [pc, #192]	; (8001270 <MX_GPIO_Init+0x188>)
 80011b0:	f003 fbf4 	bl	800499c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2120      	movs	r1, #32
 80011b8:	482e      	ldr	r0, [pc, #184]	; (8001274 <MX_GPIO_Init+0x18c>)
 80011ba:	f003 fbef 	bl	800499c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 80011be:	f640 2328 	movw	r3, #2600	; 0xa28
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4824      	ldr	r0, [pc, #144]	; (8001268 <MX_GPIO_Init+0x180>)
 80011d8:	f003 fa38 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011dc:	230a      	movs	r3, #10
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	481e      	ldr	r0, [pc, #120]	; (800126c <MX_GPIO_Init+0x184>)
 80011f4:	f003 fa2a 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80011f8:	23ae      	movs	r3, #174	; 0xae
 80011fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_GPIO_Init+0x188>)
 8001210:	f003 fa1c 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001214:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <MX_GPIO_Init+0x18c>)
 800122c:	f003 fa0e 	bl	800464c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001230:	2320      	movs	r3, #32
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0x18c>)
 8001248:	f003 fa00 	bl	800464c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2028      	movs	r0, #40	; 0x28
 8001252:	f000 ffa2 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f000 ffb9 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	58024400 	.word	0x58024400
 8001268:	58021000 	.word	0x58021000
 800126c:	58020800 	.word	0x58020800
 8001270:	58020000 	.word	0x58020000
 8001274:	58020400 	.word	0x58020400

08001278 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d108      	bne.n	800129a <HAL_UART_RxCpltCallback+0x22>
		received_data = rx1_buffer;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_UART_RxCpltCallback+0x30>)
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_UART_RxCpltCallback+0x34>)
 800128e:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer)); // Restart interrupt
 8001290:	2201      	movs	r2, #1
 8001292:	4905      	ldr	r1, [pc, #20]	; (80012a8 <HAL_UART_RxCpltCallback+0x30>)
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001296:	f006 fdfb 	bl	8007e90 <HAL_UART_Receive_IT>
	  }
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	240002e0 	.word	0x240002e0
 80012a8:	24000550 	.word	0x24000550
 80012ac:	24000551 	.word	0x24000551

080012b0 <A4988_Setup>:

void A4988_Setup() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    // Configurar pines de modo (MS0, MS1, MS2) para medio paso
    HAL_GPIO_WritePin(GPIOE, MS0_PIN, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2120      	movs	r1, #32
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <A4988_Setup+0x30>)
 80012ba:	f003 fb6f 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS1_PIN, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2102      	movs	r1, #2
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <A4988_Setup+0x34>)
 80012c4:	f003 fb6a 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS2_PIN, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2108      	movs	r1, #8
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <A4988_Setup+0x34>)
 80012ce:	f003 fb65 	bl	800499c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, ENABLE_PIN, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2108      	movs	r1, #8
 80012d6:	4802      	ldr	r0, [pc, #8]	; (80012e0 <A4988_Setup+0x30>)
 80012d8:	f003 fb60 	bl	800499c <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58021000 	.word	0x58021000
 80012e4:	58020800 	.word	0x58020800

080012e8 <Home>:

void Home (void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	TIM1->CCR4 = 183;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <Home+0x24>)
 80012ee:	22b7      	movs	r2, #183	; 0xb7
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR2 =183;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <Home+0x24>)
 80012f4:	22b7      	movs	r2, #183	; 0xb7
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
	mover_motorq1(0);
 80012f8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001310 <Home+0x28>
 80012fc:	f000 f80c 	bl	8001318 <mover_motorq1>

	motor_control1();
 8001300:	f000 f8ec 	bl	80014dc <motor_control1>
	motor_control();
 8001304:	f000 f884 	bl	8001410 <motor_control>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010000 	.word	0x40010000
	...

08001318 <mover_motorq1>:


void mover_motorq1(float radianes) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Convertir radianes a pasos
    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800132a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80013f8 <mover_motorq1+0xe0>
 800132e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001332:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001400 <mover_motorq1+0xe8>
 8001336:	ee27 7b06 	vmul.f64	d7, d7, d6
 800133a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800133e:	ee17 3a90 	vmov	r3, s15
 8001342:	617b      	str	r3, [r7, #20]

    // Calcular el nuevo paso deseado
    int nuevo_paso = pasos;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <mover_motorq1+0xf0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd1f      	ble.n	8001398 <mover_motorq1+0x80>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2108      	movs	r1, #8
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <mover_motorq1+0xf4>)
 800135e:	f003 fb1d 	bl	800499c <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e012      	b.n	800138e <mover_motorq1+0x76>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2102      	movs	r1, #2
 800136c:	4827      	ldr	r0, [pc, #156]	; (800140c <mover_motorq1+0xf4>)
 800136e:	f003 fb15 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fe12 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	4823      	ldr	r0, [pc, #140]	; (800140c <mover_motorq1+0xf4>)
 800137e:	f003 fb0d 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 fe0a 	bl	8001f9c <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	3301      	adds	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbe8      	blt.n	8001368 <mover_motorq1+0x50>
 8001396:	e024      	b.n	80013e2 <mover_motorq1+0xca>
        }
    } else if (diferencia_pasos < 0) {
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	da21      	bge.n	80013e2 <mover_motorq1+0xca>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2108      	movs	r1, #8
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <mover_motorq1+0xf4>)
 80013a4:	f003 fafa 	bl	800499c <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	425b      	negs	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e012      	b.n	80013da <mover_motorq1+0xc2>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2102      	movs	r1, #2
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <mover_motorq1+0xf4>)
 80013ba:	f003 faef 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 fdec 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2102      	movs	r1, #2
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <mover_motorq1+0xf4>)
 80013ca:	f003 fae7 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 fde4 	bl	8001f9c <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3301      	adds	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbe8      	blt.n	80013b4 <mover_motorq1+0x9c>
        }
    }

    // Actualizar el paso actual
    paso_actual = nuevo_paso;
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <mover_motorq1+0xf0>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f000 fdd6 	bl	8001f9c <HAL_Delay>
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	54442d18 	.word	0x54442d18
 80013fc:	401921fb 	.word	0x401921fb
 8001400:	00000000 	.word	0x00000000
 8001404:	40790000 	.word	0x40790000
 8001408:	24000554 	.word	0x24000554
 800140c:	58020000 	.word	0x58020000

08001410 <motor_control>:

void motor_control(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    while (motor_running) {
 8001416:	e02c      	b.n	8001472 <motor_control+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	482d      	ldr	r0, [pc, #180]	; (80014d4 <motor_control+0xc4>)
 800141e:	f003 fabd 	bl	800499c <HAL_GPIO_WritePin>
        for (int i = 0; i < 1000 && motor_running; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	e012      	b.n	800144e <motor_control+0x3e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	4829      	ldr	r0, [pc, #164]	; (80014d4 <motor_control+0xc4>)
 800142e:	f003 fab5 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fdb2 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2120      	movs	r1, #32
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <motor_control+0xc4>)
 800143e:	f003 faad 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fdaa 	bl	8001f9c <HAL_Delay>
        for (int i = 0; i < 1000 && motor_running; i++) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001454:	da04      	bge.n	8001460 <motor_control+0x50>
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <motor_control+0xc8>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e3      	bne.n	8001428 <motor_control+0x18>
        }
        if (!motor_running) break; // Check if motor_running is false
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <motor_control+0xc8>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <motor_control+0x6e>

        HAL_Delay(500);
 800146a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146e:	f000 fd95 	bl	8001f9c <HAL_Delay>
    while (motor_running) {
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <motor_control+0xc8>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1cd      	bne.n	8001418 <motor_control+0x8>
 800147c:	e000      	b.n	8001480 <motor_control+0x70>
        if (!motor_running) break; // Check if motor_running is false
 800147e:	bf00      	nop
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <motor_control+0xc4>)
 8001486:	f003 fa89 	bl	800499c <HAL_GPIO_WritePin>
    for (int i = 0; i < 2000; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	e012      	b.n	80014b6 <motor_control+0xa6>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	2120      	movs	r1, #32
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <motor_control+0xc4>)
 8001496:	f003 fa81 	bl	800499c <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 800149a:	2001      	movs	r0, #1
 800149c:	f000 fd7e 	bl	8001f9c <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2120      	movs	r1, #32
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <motor_control+0xc4>)
 80014a6:	f003 fa79 	bl	800499c <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 fd76 	bl	8001f9c <HAL_Delay>
    for (int i = 0; i < 2000; i++) {
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014bc:	dbe8      	blt.n	8001490 <motor_control+0x80>
    }
    HAL_Delay(500);
 80014be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c2:	f000 fd6b 	bl	8001f9c <HAL_Delay>
    motor_running = 1;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <motor_control+0xc8>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	58020000 	.word	0x58020000
 80014d8:	24000000 	.word	0x24000000

080014dc <motor_control1>:

void motor_control1(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
    while (motor_running1) {
 80014e2:	e032      	b.n	800154a <motor_control1+0x6e>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ea:	4832      	ldr	r0, [pc, #200]	; (80015b4 <motor_control1+0xd8>)
 80014ec:	f003 fa56 	bl	800499c <HAL_GPIO_WritePin>
        for (int i = 0; i < 1000 && motor_running1; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	e014      	b.n	8001520 <motor_control1+0x44>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	482d      	ldr	r0, [pc, #180]	; (80015b4 <motor_control1+0xd8>)
 80014fe:	f003 fa4d 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f000 fd4a 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4829      	ldr	r0, [pc, #164]	; (80015b4 <motor_control1+0xd8>)
 8001510:	f003 fa44 	bl	800499c <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f000 fd41 	bl	8001f9c <HAL_Delay>
        for (int i = 0; i < 1000 && motor_running1; i++) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3301      	adds	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001526:	da04      	bge.n	8001532 <motor_control1+0x56>
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <motor_control1+0xdc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1e1      	bne.n	80014f6 <motor_control1+0x1a>
        }
        HAL_Delay(10);
 8001532:	200a      	movs	r0, #10
 8001534:	f000 fd32 	bl	8001f9c <HAL_Delay>
        if (!motor_running1) break; // Check if motor_running is false
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <motor_control1+0xdc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <motor_control1+0x7a>
        HAL_Delay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f000 fd29 	bl	8001f9c <HAL_Delay>
    while (motor_running1) {
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <motor_control1+0xdc>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1c7      	bne.n	80014e4 <motor_control1+0x8>
 8001554:	e000      	b.n	8001558 <motor_control1+0x7c>
        if (!motor_running1) break; // Check if motor_running is false
 8001556:	bf00      	nop

    }

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155e:	4815      	ldr	r0, [pc, #84]	; (80015b4 <motor_control1+0xd8>)
 8001560:	f003 fa1c 	bl	800499c <HAL_GPIO_WritePin>
    for (int i = 0; i < 2000; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	e014      	b.n	8001594 <motor_control1+0xb8>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <motor_control1+0xd8>)
 8001572:	f003 fa13 	bl	800499c <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fd10 	bl	8001f9c <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <motor_control1+0xd8>)
 8001584:	f003 fa0a 	bl	800499c <HAL_GPIO_WritePin>
    	HAL_Delay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f000 fd07 	bl	8001f9c <HAL_Delay>
    for (int i = 0; i < 2000; i++) {
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800159a:	dbe6      	blt.n	800156a <motor_control1+0x8e>
    }
    HAL_Delay(500);
 800159c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a0:	f000 fcfc 	bl	8001f9c <HAL_Delay>

    motor_running1 = 1;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <motor_control1+0xdc>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	58021000 	.word	0x58021000
 80015b8:	24000001 	.word	0x24000001

080015bc <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t pasos = milimetros_a_pasos(milimetros);
 80015c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015ca:	f7ff faaf 	bl	8000b2c <milimetros_a_pasos>
 80015ce:	60b8      	str	r0, [r7, #8]

    // Configurar la dirección del motor según la distancia (positiva o negativa)
    if (milimetros >= 0) {
 80015d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	db06      	blt.n	80015ec <mover_motorq2_mm+0x30>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); // Dirección positiva
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e4:	4815      	ldr	r0, [pc, #84]	; (800163c <mover_motorq2_mm+0x80>)
 80015e6:	f003 f9d9 	bl	800499c <HAL_GPIO_WritePin>
 80015ea:	e005      	b.n	80015f8 <mover_motorq2_mm+0x3c>
    } else {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // Dirección negativa
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <mover_motorq2_mm+0x80>)
 80015f4:	f003 f9d2 	bl	800499c <HAL_GPIO_WritePin>
    }

    for (uint32_t i = 0; i < pasos; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e014      	b.n	8001628 <mover_motorq2_mm+0x6c>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET); // Generar pulso
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <mover_motorq2_mm+0x80>)
 8001606:	f003 f9c9 	bl	800499c <HAL_GPIO_WritePin>
        HAL_Delay(1); // Ajustar el delay según sea necesario para la velocidad
 800160a:	2001      	movs	r0, #1
 800160c:	f000 fcc6 	bl	8001f9c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); // Terminar pulso
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <mover_motorq2_mm+0x80>)
 8001618:	f003 f9c0 	bl	800499c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f000 fcbd 	bl	8001f9c <HAL_Delay>
    for (uint32_t i = 0; i < pasos; i++) {
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3e6      	bcc.n	80015fe <mover_motorq2_mm+0x42>
    }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	58021000 	.word	0x58021000

08001640 <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t pasos = milimetros_a_pasos(milimetros);
 800164a:	ed97 0a01 	vldr	s0, [r7, #4]
 800164e:	f7ff fa6d 	bl	8000b2c <milimetros_a_pasos>
 8001652:	60b8      	str	r0, [r7, #8]

    // Configurar la dirección del motor según la distancia (positiva o negativa)
    if (milimetros >= 0) {
 8001654:	edd7 7a01 	vldr	s15, [r7, #4]
 8001658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	db05      	blt.n	800166e <mover_motorq3_mm+0x2e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Dirección positiva
 8001662:	2201      	movs	r2, #1
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <mover_motorq3_mm+0x78>)
 8001668:	f003 f998 	bl	800499c <HAL_GPIO_WritePin>
 800166c:	e004      	b.n	8001678 <mover_motorq3_mm+0x38>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Dirección negativa
 800166e:	2200      	movs	r2, #0
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <mover_motorq3_mm+0x78>)
 8001674:	f003 f992 	bl	800499c <HAL_GPIO_WritePin>
    }

    for (uint32_t i = 0; i < pasos; i++) {
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e012      	b.n	80016a4 <mover_motorq3_mm+0x64>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Generar pulso
 800167e:	2201      	movs	r2, #1
 8001680:	2120      	movs	r1, #32
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <mover_motorq3_mm+0x78>)
 8001684:	f003 f98a 	bl	800499c <HAL_GPIO_WritePin>
        HAL_Delay(1); // Ajustar el delay según sea necesario para la velocidad
 8001688:	2001      	movs	r0, #1
 800168a:	f000 fc87 	bl	8001f9c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Terminar pulso
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <mover_motorq3_mm+0x78>)
 8001694:	f003 f982 	bl	800499c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f000 fc7f 	bl	8001f9c <HAL_Delay>
    for (uint32_t i = 0; i < pasos; i++) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3e8      	bcc.n	800167e <mover_motorq3_mm+0x3e>
    }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	58020000 	.word	0x58020000

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_MspInit+0x30>)
 80016d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d4:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x30>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x30>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	58024400 	.word	0x58024400

080016fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_TIM_PWM_MspInit+0x3c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10e      	bne.n	800172c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_TIM_PWM_MspInit+0x40>)
 8001710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_TIM_PWM_MspInit+0x40>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_TIM_PWM_MspInit+0x40>)
 8001720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40010000 	.word	0x40010000
 800173c:	58024400 	.word	0x58024400

08001740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_TIM_MspPostInit+0x6c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d11f      	bne.n	80017a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_TIM_MspPostInit+0x70>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_TIM_MspPostInit+0x70>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_TIM_MspPostInit+0x70>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001780:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001784:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001792:	2301      	movs	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_TIM_MspPostInit+0x74>)
 800179e:	f002 ff55 	bl	800464c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40010000 	.word	0x40010000
 80017b0:	58024400 	.word	0x58024400
 80017b4:	58020000 	.word	0x58020000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0b8      	sub	sp, #224	; 0xe0
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	22b4      	movs	r2, #180	; 0xb4
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f008 ff11 	bl	800a600 <memset>
  if(huart->Instance==USART1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4aac      	ldr	r2, [pc, #688]	; (8001a94 <HAL_UART_MspInit+0x2dc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	f040 80a6 	bne.w	8001936 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 f877 	bl	80058ec <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001804:	f7ff ff5a 	bl	80016bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001808:	4ba3      	ldr	r3, [pc, #652]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 800180a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800180e:	4aa2      	ldr	r2, [pc, #648]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001818:	4b9f      	ldr	r3, [pc, #636]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 800181a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b9c      	ldr	r3, [pc, #624]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a9a      	ldr	r2, [pc, #616]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001844:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800185e:	2304      	movs	r3, #4
 8001860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001868:	4619      	mov	r1, r3
 800186a:	488c      	ldr	r0, [pc, #560]	; (8001a9c <HAL_UART_MspInit+0x2e4>)
 800186c:	f002 feee 	bl	800464c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001870:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 8001872:	4a8c      	ldr	r2, [pc, #560]	; (8001aa4 <HAL_UART_MspInit+0x2ec>)
 8001874:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001876:	4b8a      	ldr	r3, [pc, #552]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 8001878:	2229      	movs	r2, #41	; 0x29
 800187a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187c:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001882:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001888:	4b85      	ldr	r3, [pc, #532]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 800188a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001890:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001896:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800189c:	4b80      	ldr	r3, [pc, #512]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018a2:	4b7f      	ldr	r3, [pc, #508]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a8:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018ae:	487c      	ldr	r0, [pc, #496]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 80018b0:	f000 fca8 	bl	8002204 <HAL_DMA_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80018ba:	f7ff feff 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a77      	ldr	r2, [pc, #476]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 80018c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80018c4:	4a76      	ldr	r2, [pc, #472]	; (8001aa0 <HAL_UART_MspInit+0x2e8>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018cc:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_UART_MspInit+0x2f4>)
 80018ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018d0:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018d2:	222a      	movs	r2, #42	; 0x2a
 80018d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018dc:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018e2:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018f6:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001902:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001908:	4867      	ldr	r0, [pc, #412]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 800190a:	f000 fc7b 	bl	8002204 <HAL_DMA_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001914:	f7ff fed2 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 800191c:	679a      	str	r2, [r3, #120]	; 0x78
 800191e:	4a62      	ldr	r2, [pc, #392]	; (8001aa8 <HAL_UART_MspInit+0x2f0>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2025      	movs	r0, #37	; 0x25
 800192a:	f000 fc36 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192e:	2025      	movs	r0, #37	; 0x25
 8001930:	f000 fc4d 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001934:	e0aa      	b.n	8001a8c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5d      	ldr	r2, [pc, #372]	; (8001ab0 <HAL_UART_MspInit+0x2f8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	f040 80a5 	bne.w	8001a8c <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4618      	mov	r0, r3
 8001952:	f003 ffcb 	bl	80058ec <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800195c:	f7ff feae 	bl	80016bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001960:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001966:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001984:	4a44      	ldr	r2, [pc, #272]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198e:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <HAL_UART_MspInit+0x2e0>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800199c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b6:	2307      	movs	r3, #7
 80019b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c0:	4619      	mov	r1, r3
 80019c2:	4836      	ldr	r0, [pc, #216]	; (8001a9c <HAL_UART_MspInit+0x2e4>)
 80019c4:	f002 fe42 	bl	800464c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019ca:	4a3b      	ldr	r2, [pc, #236]	; (8001ab8 <HAL_UART_MspInit+0x300>)
 80019cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019d0:	222d      	movs	r2, #45	; 0x2d
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a06:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 8001a08:	f000 fbfc 	bl	8002204 <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8001a12:	f7ff fe53 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 8001a1a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_UART_MspInit+0x2fc>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_UART_MspInit+0x308>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a2a:	222e      	movs	r2, #46	; 0x2e
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a60:	4816      	ldr	r0, [pc, #88]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a62:	f000 fbcf 	bl	8002204 <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8001a6c:	f7ff fe26 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a74:	679a      	str	r2, [r3, #120]	; 0x78
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_UART_MspInit+0x304>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2027      	movs	r0, #39	; 0x27
 8001a82:	f000 fb8a 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a86:	2027      	movs	r0, #39	; 0x27
 8001a88:	f000 fba1 	bl	80021ce <HAL_NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	37e0      	adds	r7, #224	; 0xe0
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40011000 	.word	0x40011000
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020400 	.word	0x58020400
 8001aa0:	24000370 	.word	0x24000370
 8001aa4:	40020010 	.word	0x40020010
 8001aa8:	240003e8 	.word	0x240003e8
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40004800 	.word	0x40004800
 8001ab4:	24000460 	.word	0x24000460
 8001ab8:	40020040 	.word	0x40020040
 8001abc:	240004d8 	.word	0x240004d8
 8001ac0:	40020058 	.word	0x40020058

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 fa24 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA1_Stream0_IRQHandler+0x10>)
 8001b1e:	f001 fc2f 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	24000370 	.word	0x24000370

08001b2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <DMA1_Stream1_IRQHandler+0x10>)
 8001b32:	f001 fc25 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240003e8 	.word	0x240003e8

08001b40 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Stream2_IRQHandler+0x10>)
 8001b46:	f001 fc1b 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	24000460 	.word	0x24000460

08001b54 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA1_Stream3_IRQHandler+0x10>)
 8001b5a:	f001 fc11 	bl	8003380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	240004d8 	.word	0x240004d8

08001b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART1_IRQHandler+0x10>)
 8001b6e:	f006 f9e5 	bl	8007f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	24000250 	.word	0x24000250

08001b7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <USART3_IRQHandler+0x10>)
 8001b82:	f006 f9db 	bl	8007f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	240002e0 	.word	0x240002e0

08001b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b98:	f002 ff19 	bl	80049ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba0:	f002 ff15 	bl	80049ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bc2:	f008 fcf3 	bl	800a5ac <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
	return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
	}

return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
	}
	return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f008 fc58 	bl	800a5ac <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	24050000 	.word	0x24050000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	24000558 	.word	0x24000558
 8001d30:	24000570 	.word	0x24000570

08001d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <SystemInit+0xd0>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <SystemInit+0xd0>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <SystemInit+0xd4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d807      	bhi.n	8001d64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <SystemInit+0xd4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 030f 	bic.w	r3, r3, #15
 8001d5c:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <SystemInit+0xd4>)
 8001d5e:	f043 0307 	orr.w	r3, r3, #7
 8001d62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <SystemInit+0xd8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <SystemInit+0xd8>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <SystemInit+0xd8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <SystemInit+0xd8>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4924      	ldr	r1, [pc, #144]	; (8001e0c <SystemInit+0xd8>)
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <SystemInit+0xdc>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <SystemInit+0xd4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <SystemInit+0xd4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 030f 	bic.w	r3, r3, #15
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <SystemInit+0xd4>)
 8001d98:	f043 0307 	orr.w	r3, r3, #7
 8001d9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <SystemInit+0xd8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <SystemInit+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <SystemInit+0xd8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <SystemInit+0xd8>)
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <SystemInit+0xe0>)
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <SystemInit+0xd8>)
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <SystemInit+0xe4>)
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <SystemInit+0xd8>)
 8001dbe:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <SystemInit+0xe8>)
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <SystemInit+0xd8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <SystemInit+0xd8>)
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <SystemInit+0xe8>)
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <SystemInit+0xd8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <SystemInit+0xd8>)
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <SystemInit+0xe8>)
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <SystemInit+0xd8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <SystemInit+0xd8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <SystemInit+0xd8>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <SystemInit+0xd8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <SystemInit+0xec>)
 8001df4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001df8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	52002000 	.word	0x52002000
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e14:	02020200 	.word	0x02020200
 8001e18:	01ff0000 	.word	0x01ff0000
 8001e1c:	01010280 	.word	0x01010280
 8001e20:	52004000 	.word	0x52004000

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e28:	f7ff ff84 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f008 fbb1 	bl	800a5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7fe fea7 	bl	8000ba8 <main>
  bx  lr
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e5c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001e60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e64:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001e68:	0800d8dc 	.word	0x0800d8dc
  ldr r2, =_sbss
 8001e6c:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001e70:	24000570 	.word	0x24000570

08001e74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC3_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f000 f980 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e84:	f003 fb5c 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_Init+0x68>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	4913      	ldr	r1, [pc, #76]	; (8001ee4 <HAL_Init+0x6c>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_Init+0x68>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_Init+0x6c>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_Init+0x70>)
 8001eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <HAL_Init+0x74>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f000 f814 	bl	8001ef0 <HAL_InitTick>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e002      	b.n	8001ed8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed2:	f7ff fbf9 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	0800d460 	.word	0x0800d460
 8001ee8:	24000008 	.word	0x24000008
 8001eec:	24000004 	.word	0x24000004

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_InitTick+0x60>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e021      	b.n	8001f48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_InitTick+0x64>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_InitTick+0x60>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f965 	bl	80021ea <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f92f 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x68>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	24000010 	.word	0x24000010
 8001f54:	24000004 	.word	0x24000004
 8001f58:	2400000c 	.word	0x2400000c

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	24000010 	.word	0x24000010
 8001f80:	2400055c 	.word	0x2400055c

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2400055c 	.word	0x2400055c

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff ffee 	bl	8001f84 <HAL_GetTick>
 8001fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc2:	bf00      	nop
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	24000010 	.word	0x24000010

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	05fa0000 	.word	0x05fa0000

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff40 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff90 	bl	80020d8 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5f 	bl	8002084 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa4 	bl	8002140 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff feba 	bl	8001f84 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e314      	b.n	8002846 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a66      	ldr	r2, [pc, #408]	; (80023bc <HAL_DMA_Init+0x1b8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d04a      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_DMA_Init+0x1bc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d045      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a63      	ldr	r2, [pc, #396]	; (80023c4 <HAL_DMA_Init+0x1c0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d040      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a62      	ldr	r2, [pc, #392]	; (80023c8 <HAL_DMA_Init+0x1c4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d03b      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a60      	ldr	r2, [pc, #384]	; (80023cc <HAL_DMA_Init+0x1c8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d036      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5f      	ldr	r2, [pc, #380]	; (80023d0 <HAL_DMA_Init+0x1cc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d031      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a5d      	ldr	r2, [pc, #372]	; (80023d4 <HAL_DMA_Init+0x1d0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02c      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_DMA_Init+0x1d4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d027      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5a      	ldr	r2, [pc, #360]	; (80023dc <HAL_DMA_Init+0x1d8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d022      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a59      	ldr	r2, [pc, #356]	; (80023e0 <HAL_DMA_Init+0x1dc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01d      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <HAL_DMA_Init+0x1e0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d018      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a56      	ldr	r2, [pc, #344]	; (80023e8 <HAL_DMA_Init+0x1e4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a54      	ldr	r2, [pc, #336]	; (80023ec <HAL_DMA_Init+0x1e8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00e      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <HAL_DMA_Init+0x1ec>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a51      	ldr	r2, [pc, #324]	; (80023f4 <HAL_DMA_Init+0x1f0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Init+0xb8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_DMA_Init+0x1f4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_DMA_Init+0xbc>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_DMA_Init+0xbe>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 813c 	beq.w	8002540 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a37      	ldr	r2, [pc, #220]	; (80023bc <HAL_DMA_Init+0x1b8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_Init+0x174>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a36      	ldr	r2, [pc, #216]	; (80023c0 <HAL_DMA_Init+0x1bc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d045      	beq.n	8002378 <HAL_DMA_Init+0x174>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_DMA_Init+0x1c0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d040      	beq.n	8002378 <HAL_DMA_Init+0x174>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_DMA_Init+0x1c4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03b      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a31      	ldr	r2, [pc, #196]	; (80023cc <HAL_DMA_Init+0x1c8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Init+0x174>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_DMA_Init+0x1cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d031      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_DMA_Init+0x1d0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02c      	beq.n	8002378 <HAL_DMA_Init+0x174>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_DMA_Init+0x1d4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d027      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <HAL_DMA_Init+0x1d8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_DMA_Init+0x1dc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d01d      	beq.n	8002378 <HAL_DMA_Init+0x174>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_DMA_Init+0x1e0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_DMA_Init+0x1e4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_DMA_Init+0x1e8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Init+0x174>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_DMA_Init+0x1ec>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_DMA_Init+0x174>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMA_Init+0x1f0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_DMA_Init+0x174>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_DMA_Init+0x1f4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d108      	bne.n	800238a <HAL_DMA_Init+0x186>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e007      	b.n	800239a <HAL_DMA_Init+0x196>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800239a:	e02f      	b.n	80023fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239c:	f7ff fdf2 	bl	8001f84 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d928      	bls.n	80023fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2203      	movs	r2, #3
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e244      	b.n	8002846 <HAL_DMA_Init+0x642>
 80023bc:	40020010 	.word	0x40020010
 80023c0:	40020028 	.word	0x40020028
 80023c4:	40020040 	.word	0x40020040
 80023c8:	40020058 	.word	0x40020058
 80023cc:	40020070 	.word	0x40020070
 80023d0:	40020088 	.word	0x40020088
 80023d4:	400200a0 	.word	0x400200a0
 80023d8:	400200b8 	.word	0x400200b8
 80023dc:	40020410 	.word	0x40020410
 80023e0:	40020428 	.word	0x40020428
 80023e4:	40020440 	.word	0x40020440
 80023e8:	40020458 	.word	0x40020458
 80023ec:	40020470 	.word	0x40020470
 80023f0:	40020488 	.word	0x40020488
 80023f4:	400204a0 	.word	0x400204a0
 80023f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1c8      	bne.n	800239c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4b84      	ldr	r3, [pc, #528]	; (8002628 <HAL_DMA_Init+0x424>)
 8002416:	4013      	ands	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002422:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	2b04      	cmp	r3, #4
 800244e:	d107      	bne.n	8002460 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4313      	orrs	r3, r2
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b28      	cmp	r3, #40	; 0x28
 8002466:	d903      	bls.n	8002470 <HAL_DMA_Init+0x26c>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b2e      	cmp	r3, #46	; 0x2e
 800246e:	d91f      	bls.n	80024b0 <HAL_DMA_Init+0x2ac>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b3e      	cmp	r3, #62	; 0x3e
 8002476:	d903      	bls.n	8002480 <HAL_DMA_Init+0x27c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b42      	cmp	r3, #66	; 0x42
 800247e:	d917      	bls.n	80024b0 <HAL_DMA_Init+0x2ac>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b46      	cmp	r3, #70	; 0x46
 8002486:	d903      	bls.n	8002490 <HAL_DMA_Init+0x28c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b48      	cmp	r3, #72	; 0x48
 800248e:	d90f      	bls.n	80024b0 <HAL_DMA_Init+0x2ac>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b4e      	cmp	r3, #78	; 0x4e
 8002496:	d903      	bls.n	80024a0 <HAL_DMA_Init+0x29c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b52      	cmp	r3, #82	; 0x52
 800249e:	d907      	bls.n	80024b0 <HAL_DMA_Init+0x2ac>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b73      	cmp	r3, #115	; 0x73
 80024a6:	d905      	bls.n	80024b4 <HAL_DMA_Init+0x2b0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b77      	cmp	r3, #119	; 0x77
 80024ae:	d801      	bhi.n	80024b4 <HAL_DMA_Init+0x2b0>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_Init+0x2b2>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f023 0307 	bic.w	r3, r3, #7
 80024d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d117      	bne.n	800251c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f001 ff1a 	bl	8004338 <DMA_CheckFifoParam>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e194      	b.n	8002846 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f001 fe55 	bl	80041d4 <DMA_CalcBaseAndBitshift>
 800252a:	4603      	mov	r3, r0
 800252c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	223f      	movs	r2, #63	; 0x3f
 8002538:	409a      	lsls	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	e0ca      	b.n	80026d6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a39      	ldr	r2, [pc, #228]	; (800262c <HAL_DMA_Init+0x428>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d022      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a38      	ldr	r2, [pc, #224]	; (8002630 <HAL_DMA_Init+0x42c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d01d      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_DMA_Init+0x430>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d018      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a35      	ldr	r2, [pc, #212]	; (8002638 <HAL_DMA_Init+0x434>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a33      	ldr	r2, [pc, #204]	; (800263c <HAL_DMA_Init+0x438>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00e      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a32      	ldr	r2, [pc, #200]	; (8002640 <HAL_DMA_Init+0x43c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d009      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_DMA_Init+0x440>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_DMA_Init+0x38c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <HAL_DMA_Init+0x444>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Init+0x390>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_DMA_Init+0x392>
 8002594:	2300      	movs	r3, #0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8094 	beq.w	80026c4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_DMA_Init+0x428>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d021      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_DMA_Init+0x42c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d01c      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_DMA_Init+0x430>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d017      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_DMA_Init+0x434>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d012      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_DMA_Init+0x438>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_DMA_Init+0x43c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_DMA_Init+0x440>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_Init+0x3e6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_DMA_Init+0x444>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_DMA_Init+0x448>)
 8002608:	4013      	ands	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d01d      	beq.n	8002650 <HAL_DMA_Init+0x44c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d102      	bne.n	8002622 <HAL_DMA_Init+0x41e>
 800261c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002620:	e017      	b.n	8002652 <HAL_DMA_Init+0x44e>
 8002622:	2300      	movs	r3, #0
 8002624:	e015      	b.n	8002652 <HAL_DMA_Init+0x44e>
 8002626:	bf00      	nop
 8002628:	fe10803f 	.word	0xfe10803f
 800262c:	58025408 	.word	0x58025408
 8002630:	5802541c 	.word	0x5802541c
 8002634:	58025430 	.word	0x58025430
 8002638:	58025444 	.word	0x58025444
 800263c:	58025458 	.word	0x58025458
 8002640:	5802546c 	.word	0x5802546c
 8002644:	58025480 	.word	0x58025480
 8002648:	58025494 	.word	0x58025494
 800264c:	fffe000f 	.word	0xfffe000f
 8002650:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002680:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <HAL_DMA_Init+0x64c>)
 8002698:	4413      	add	r3, r2
 800269a:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <HAL_DMA_Init+0x650>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f001 fd93 	bl	80041d4 <DMA_CalcBaseAndBitshift>
 80026ae:	4603      	mov	r3, r0
 80026b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2201      	movs	r2, #1
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e008      	b.n	80026d6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0b7      	b.n	8002846 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <HAL_DMA_Init+0x654>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d072      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_DMA_Init+0x658>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d06d      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_DMA_Init+0x65c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d068      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_DMA_Init+0x660>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d063      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_DMA_Init+0x664>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d05e      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_DMA_Init+0x668>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d059      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_DMA_Init+0x66c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d054      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_DMA_Init+0x670>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04f      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_DMA_Init+0x674>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04a      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_DMA_Init+0x678>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d045      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_DMA_Init+0x67c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d040      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_DMA_Init+0x680>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d03b      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_DMA_Init+0x684>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d036      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_DMA_Init+0x688>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <HAL_DMA_Init+0x68c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d02c      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a48      	ldr	r2, [pc, #288]	; (8002894 <HAL_DMA_Init+0x690>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a47      	ldr	r2, [pc, #284]	; (8002898 <HAL_DMA_Init+0x694>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a45      	ldr	r2, [pc, #276]	; (800289c <HAL_DMA_Init+0x698>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a44      	ldr	r2, [pc, #272]	; (80028a0 <HAL_DMA_Init+0x69c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a42      	ldr	r2, [pc, #264]	; (80028a4 <HAL_DMA_Init+0x6a0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <HAL_DMA_Init+0x6a4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a3f      	ldr	r2, [pc, #252]	; (80028ac <HAL_DMA_Init+0x6a8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a3e      	ldr	r2, [pc, #248]	; (80028b0 <HAL_DMA_Init+0x6ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Init+0x5c2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3c      	ldr	r2, [pc, #240]	; (80028b4 <HAL_DMA_Init+0x6b0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Init+0x5c6>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_DMA_Init+0x5c8>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d032      	beq.n	8002836 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f001 fe2d 	bl	8004430 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d102      	bne.n	80027e4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <HAL_DMA_Init+0x620>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d80c      	bhi.n	8002824 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f001 feaa 	bl	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	e008      	b.n	8002836 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	a7fdabf8 	.word	0xa7fdabf8
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	40020010 	.word	0x40020010
 800285c:	40020028 	.word	0x40020028
 8002860:	40020040 	.word	0x40020040
 8002864:	40020058 	.word	0x40020058
 8002868:	40020070 	.word	0x40020070
 800286c:	40020088 	.word	0x40020088
 8002870:	400200a0 	.word	0x400200a0
 8002874:	400200b8 	.word	0x400200b8
 8002878:	40020410 	.word	0x40020410
 800287c:	40020428 	.word	0x40020428
 8002880:	40020440 	.word	0x40020440
 8002884:	40020458 	.word	0x40020458
 8002888:	40020470 	.word	0x40020470
 800288c:	40020488 	.word	0x40020488
 8002890:	400204a0 	.word	0x400204a0
 8002894:	400204b8 	.word	0x400204b8
 8002898:	58025408 	.word	0x58025408
 800289c:	5802541c 	.word	0x5802541c
 80028a0:	58025430 	.word	0x58025430
 80028a4:	58025444 	.word	0x58025444
 80028a8:	58025458 	.word	0x58025458
 80028ac:	5802546c 	.word	0x5802546c
 80028b0:	58025480 	.word	0x58025480
 80028b4:	58025494 	.word	0x58025494

080028b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff fb60 	bl	8001f84 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e2dc      	b.n	8002e8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e2cd      	b.n	8002e8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a76      	ldr	r2, [pc, #472]	; (8002acc <HAL_DMA_Abort+0x214>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04a      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a74      	ldr	r2, [pc, #464]	; (8002ad0 <HAL_DMA_Abort+0x218>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d045      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a73      	ldr	r2, [pc, #460]	; (8002ad4 <HAL_DMA_Abort+0x21c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d040      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a71      	ldr	r2, [pc, #452]	; (8002ad8 <HAL_DMA_Abort+0x220>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d03b      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a70      	ldr	r2, [pc, #448]	; (8002adc <HAL_DMA_Abort+0x224>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d036      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6e      	ldr	r2, [pc, #440]	; (8002ae0 <HAL_DMA_Abort+0x228>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6d      	ldr	r2, [pc, #436]	; (8002ae4 <HAL_DMA_Abort+0x22c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d02c      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6b      	ldr	r2, [pc, #428]	; (8002ae8 <HAL_DMA_Abort+0x230>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d027      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6a      	ldr	r2, [pc, #424]	; (8002aec <HAL_DMA_Abort+0x234>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a68      	ldr	r2, [pc, #416]	; (8002af0 <HAL_DMA_Abort+0x238>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01d      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <HAL_DMA_Abort+0x23c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_DMA_Abort+0x240>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a64      	ldr	r2, [pc, #400]	; (8002afc <HAL_DMA_Abort+0x244>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a62      	ldr	r2, [pc, #392]	; (8002b00 <HAL_DMA_Abort+0x248>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a61      	ldr	r2, [pc, #388]	; (8002b04 <HAL_DMA_Abort+0x24c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_DMA_Abort+0xd6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5f      	ldr	r2, [pc, #380]	; (8002b08 <HAL_DMA_Abort+0x250>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Abort+0xda>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_DMA_Abort+0xdc>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 021e 	bic.w	r2, r2, #30
 80029a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	e00a      	b.n	80029d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 020e 	bic.w	r2, r2, #14
 80029ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3c      	ldr	r2, [pc, #240]	; (8002acc <HAL_DMA_Abort+0x214>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d072      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <HAL_DMA_Abort+0x218>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d06d      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a39      	ldr	r2, [pc, #228]	; (8002ad4 <HAL_DMA_Abort+0x21c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d068      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_DMA_Abort+0x220>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d063      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a36      	ldr	r2, [pc, #216]	; (8002adc <HAL_DMA_Abort+0x224>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05e      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <HAL_DMA_Abort+0x228>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d059      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a33      	ldr	r2, [pc, #204]	; (8002ae4 <HAL_DMA_Abort+0x22c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d054      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a31      	ldr	r2, [pc, #196]	; (8002ae8 <HAL_DMA_Abort+0x230>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04f      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a30      	ldr	r2, [pc, #192]	; (8002aec <HAL_DMA_Abort+0x234>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2e      	ldr	r2, [pc, #184]	; (8002af0 <HAL_DMA_Abort+0x238>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <HAL_DMA_Abort+0x23c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2b      	ldr	r2, [pc, #172]	; (8002af8 <HAL_DMA_Abort+0x240>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <HAL_DMA_Abort+0x244>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <HAL_DMA_Abort+0x248>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <HAL_DMA_Abort+0x24c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <HAL_DMA_Abort+0x250>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <HAL_DMA_Abort+0x254>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_DMA_Abort+0x258>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <HAL_DMA_Abort+0x25c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_DMA_Abort+0x260>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_DMA_Abort+0x264>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <HAL_DMA_Abort+0x268>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_DMA_Abort+0x26c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort+0x20e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_DMA_Abort+0x270>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d132      	bne.n	8002b2c <HAL_DMA_Abort+0x274>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e031      	b.n	8002b2e <HAL_DMA_Abort+0x276>
 8002aca:	bf00      	nop
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
 8002b0c:	58025408 	.word	0x58025408
 8002b10:	5802541c 	.word	0x5802541c
 8002b14:	58025430 	.word	0x58025430
 8002b18:	58025444 	.word	0x58025444
 8002b1c:	58025458 	.word	0x58025458
 8002b20:	5802546c 	.word	0x5802546c
 8002b24:	58025480 	.word	0x58025480
 8002b28:	58025494 	.word	0x58025494
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6d      	ldr	r2, [pc, #436]	; (8002cfc <HAL_DMA_Abort+0x444>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04a      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a6b      	ldr	r2, [pc, #428]	; (8002d00 <HAL_DMA_Abort+0x448>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d045      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6a      	ldr	r2, [pc, #424]	; (8002d04 <HAL_DMA_Abort+0x44c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d040      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_DMA_Abort+0x450>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03b      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <HAL_DMA_Abort+0x454>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d036      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_DMA_Abort+0x458>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d031      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a64      	ldr	r2, [pc, #400]	; (8002d14 <HAL_DMA_Abort+0x45c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d02c      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a62      	ldr	r2, [pc, #392]	; (8002d18 <HAL_DMA_Abort+0x460>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d027      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a61      	ldr	r2, [pc, #388]	; (8002d1c <HAL_DMA_Abort+0x464>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5f      	ldr	r2, [pc, #380]	; (8002d20 <HAL_DMA_Abort+0x468>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01d      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5e      	ldr	r2, [pc, #376]	; (8002d24 <HAL_DMA_Abort+0x46c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_DMA_Abort+0x470>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	; (8002d2c <HAL_DMA_Abort+0x474>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <HAL_DMA_Abort+0x478>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_DMA_Abort+0x47c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_DMA_Abort+0x32a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_DMA_Abort+0x480>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d108      	bne.n	8002bf4 <HAL_DMA_Abort+0x33c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e007      	b.n	8002c04 <HAL_DMA_Abort+0x34c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c04:	e013      	b.n	8002c2e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c06:	f7ff f9bd 	bl	8001f84 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d90c      	bls.n	8002c2e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e12d      	b.n	8002e8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e5      	bne.n	8002c06 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_DMA_Abort+0x444>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d04a      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_Abort+0x448>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d045      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_DMA_Abort+0x44c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d040      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_Abort+0x450>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d03b      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <HAL_DMA_Abort+0x454>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d036      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_DMA_Abort+0x458>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d031      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <HAL_DMA_Abort+0x45c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d02c      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_DMA_Abort+0x460>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d027      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <HAL_DMA_Abort+0x464>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d022      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_DMA_Abort+0x468>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <HAL_DMA_Abort+0x46c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <HAL_DMA_Abort+0x470>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_DMA_Abort+0x474>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_DMA_Abort+0x478>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_DMA_Abort+0x47c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_Abort+0x422>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_DMA_Abort+0x480>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Abort+0x426>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_DMA_Abort+0x428>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d02b      	beq.n	8002d3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	223f      	movs	r2, #63	; 0x3f
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	e02a      	b.n	8002d52 <HAL_DMA_Abort+0x49a>
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_DMA_Abort+0x5dc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d072      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_DMA_Abort+0x5e0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d06d      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a4c      	ldr	r2, [pc, #304]	; (8002e9c <HAL_DMA_Abort+0x5e4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d068      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <HAL_DMA_Abort+0x5e8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d063      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a49      	ldr	r2, [pc, #292]	; (8002ea4 <HAL_DMA_Abort+0x5ec>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d05e      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_DMA_Abort+0x5f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d059      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a46      	ldr	r2, [pc, #280]	; (8002eac <HAL_DMA_Abort+0x5f4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d054      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a44      	ldr	r2, [pc, #272]	; (8002eb0 <HAL_DMA_Abort+0x5f8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04f      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_DMA_Abort+0x5fc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04a      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <HAL_DMA_Abort+0x600>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d045      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a40      	ldr	r2, [pc, #256]	; (8002ebc <HAL_DMA_Abort+0x604>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d040      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a3e      	ldr	r2, [pc, #248]	; (8002ec0 <HAL_DMA_Abort+0x608>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03b      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <HAL_DMA_Abort+0x60c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a3b      	ldr	r2, [pc, #236]	; (8002ec8 <HAL_DMA_Abort+0x610>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <HAL_DMA_Abort+0x614>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d02c      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a38      	ldr	r2, [pc, #224]	; (8002ed0 <HAL_DMA_Abort+0x618>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a37      	ldr	r2, [pc, #220]	; (8002ed4 <HAL_DMA_Abort+0x61c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <HAL_DMA_Abort+0x620>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a34      	ldr	r2, [pc, #208]	; (8002edc <HAL_DMA_Abort+0x624>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a32      	ldr	r2, [pc, #200]	; (8002ee0 <HAL_DMA_Abort+0x628>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a31      	ldr	r2, [pc, #196]	; (8002ee4 <HAL_DMA_Abort+0x62c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_DMA_Abort+0x630>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <HAL_DMA_Abort+0x634>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_Abort+0x58a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <HAL_DMA_Abort+0x638>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Abort+0x58e>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_DMA_Abort+0x590>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d015      	beq.n	8002e78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40020010 	.word	0x40020010
 8002e98:	40020028 	.word	0x40020028
 8002e9c:	40020040 	.word	0x40020040
 8002ea0:	40020058 	.word	0x40020058
 8002ea4:	40020070 	.word	0x40020070
 8002ea8:	40020088 	.word	0x40020088
 8002eac:	400200a0 	.word	0x400200a0
 8002eb0:	400200b8 	.word	0x400200b8
 8002eb4:	40020410 	.word	0x40020410
 8002eb8:	40020428 	.word	0x40020428
 8002ebc:	40020440 	.word	0x40020440
 8002ec0:	40020458 	.word	0x40020458
 8002ec4:	40020470 	.word	0x40020470
 8002ec8:	40020488 	.word	0x40020488
 8002ecc:	400204a0 	.word	0x400204a0
 8002ed0:	400204b8 	.word	0x400204b8
 8002ed4:	58025408 	.word	0x58025408
 8002ed8:	5802541c 	.word	0x5802541c
 8002edc:	58025430 	.word	0x58025430
 8002ee0:	58025444 	.word	0x58025444
 8002ee4:	58025458 	.word	0x58025458
 8002ee8:	5802546c 	.word	0x5802546c
 8002eec:	58025480 	.word	0x58025480
 8002ef0:	58025494 	.word	0x58025494

08002ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e237      	b.n	8003376 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d004      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e22c      	b.n	8003376 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5c      	ldr	r2, [pc, #368]	; (8003094 <HAL_DMA_Abort_IT+0x1a0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d04a      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a5b      	ldr	r2, [pc, #364]	; (8003098 <HAL_DMA_Abort_IT+0x1a4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d045      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a59      	ldr	r2, [pc, #356]	; (800309c <HAL_DMA_Abort_IT+0x1a8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d040      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <HAL_DMA_Abort_IT+0x1ac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d03b      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_DMA_Abort_IT+0x1b0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d036      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_DMA_Abort_IT+0x1b4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d031      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a53      	ldr	r2, [pc, #332]	; (80030ac <HAL_DMA_Abort_IT+0x1b8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d02c      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_DMA_Abort_IT+0x1bc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d027      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a50      	ldr	r2, [pc, #320]	; (80030b4 <HAL_DMA_Abort_IT+0x1c0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d022      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a4f      	ldr	r2, [pc, #316]	; (80030b8 <HAL_DMA_Abort_IT+0x1c4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d01d      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_DMA_Abort_IT+0x1c8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_DMA_Abort_IT+0x1cc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_DMA_Abort_IT+0x1d0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a49      	ldr	r2, [pc, #292]	; (80030c8 <HAL_DMA_Abort_IT+0x1d4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a47      	ldr	r2, [pc, #284]	; (80030cc <HAL_DMA_Abort_IT+0x1d8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xc8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a46      	ldr	r2, [pc, #280]	; (80030d0 <HAL_DMA_Abort_IT+0x1dc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_DMA_Abort_IT+0xcc>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_DMA_Abort_IT+0xce>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8086 	beq.w	80030d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <HAL_DMA_Abort_IT+0x1a0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04a      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2e      	ldr	r2, [pc, #184]	; (8003098 <HAL_DMA_Abort_IT+0x1a4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d045      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2c      	ldr	r2, [pc, #176]	; (800309c <HAL_DMA_Abort_IT+0x1a8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d040      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <HAL_DMA_Abort_IT+0x1ac>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d03b      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <HAL_DMA_Abort_IT+0x1b0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d036      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <HAL_DMA_Abort_IT+0x1b4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d031      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_DMA_Abort_IT+0x1b8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02c      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_DMA_Abort_IT+0x1bc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d027      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_DMA_Abort_IT+0x1c0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_DMA_Abort_IT+0x1c4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01d      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a20      	ldr	r2, [pc, #128]	; (80030bc <HAL_DMA_Abort_IT+0x1c8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_DMA_Abort_IT+0x1cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_DMA_Abort_IT+0x1d0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_DMA_Abort_IT+0x1d4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_DMA_Abort_IT+0x1d8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_Abort_IT+0x17c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_DMA_Abort_IT+0x1dc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <HAL_DMA_Abort_IT+0x18e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e178      	b.n	8003374 <HAL_DMA_Abort_IT+0x480>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e16f      	b.n	8003374 <HAL_DMA_Abort_IT+0x480>
 8003094:	40020010 	.word	0x40020010
 8003098:	40020028 	.word	0x40020028
 800309c:	40020040 	.word	0x40020040
 80030a0:	40020058 	.word	0x40020058
 80030a4:	40020070 	.word	0x40020070
 80030a8:	40020088 	.word	0x40020088
 80030ac:	400200a0 	.word	0x400200a0
 80030b0:	400200b8 	.word	0x400200b8
 80030b4:	40020410 	.word	0x40020410
 80030b8:	40020428 	.word	0x40020428
 80030bc:	40020440 	.word	0x40020440
 80030c0:	40020458 	.word	0x40020458
 80030c4:	40020470 	.word	0x40020470
 80030c8:	40020488 	.word	0x40020488
 80030cc:	400204a0 	.word	0x400204a0
 80030d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 020e 	bic.w	r2, r2, #14
 80030e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6c      	ldr	r2, [pc, #432]	; (800329c <HAL_DMA_Abort_IT+0x3a8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04a      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6b      	ldr	r2, [pc, #428]	; (80032a0 <HAL_DMA_Abort_IT+0x3ac>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d045      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_DMA_Abort_IT+0x3b0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d040      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a68      	ldr	r2, [pc, #416]	; (80032a8 <HAL_DMA_Abort_IT+0x3b4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d03b      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a66      	ldr	r2, [pc, #408]	; (80032ac <HAL_DMA_Abort_IT+0x3b8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d036      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a65      	ldr	r2, [pc, #404]	; (80032b0 <HAL_DMA_Abort_IT+0x3bc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d031      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_DMA_Abort_IT+0x3c0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02c      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a62      	ldr	r2, [pc, #392]	; (80032b8 <HAL_DMA_Abort_IT+0x3c4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d027      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a60      	ldr	r2, [pc, #384]	; (80032bc <HAL_DMA_Abort_IT+0x3c8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5f      	ldr	r2, [pc, #380]	; (80032c0 <HAL_DMA_Abort_IT+0x3cc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d01d      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_DMA_Abort_IT+0x3d0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5c      	ldr	r2, [pc, #368]	; (80032c8 <HAL_DMA_Abort_IT+0x3d4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_DMA_Abort_IT+0x3d8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a59      	ldr	r2, [pc, #356]	; (80032d0 <HAL_DMA_Abort_IT+0x3dc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_DMA_Abort_IT+0x3e0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Abort_IT+0x290>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a56      	ldr	r2, [pc, #344]	; (80032d8 <HAL_DMA_Abort_IT+0x3e4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <HAL_DMA_Abort_IT+0x2a2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e007      	b.n	80031a6 <HAL_DMA_Abort_IT+0x2b2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3c      	ldr	r2, [pc, #240]	; (800329c <HAL_DMA_Abort_IT+0x3a8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d072      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3a      	ldr	r2, [pc, #232]	; (80032a0 <HAL_DMA_Abort_IT+0x3ac>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d06d      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a39      	ldr	r2, [pc, #228]	; (80032a4 <HAL_DMA_Abort_IT+0x3b0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d068      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a37      	ldr	r2, [pc, #220]	; (80032a8 <HAL_DMA_Abort_IT+0x3b4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d063      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <HAL_DMA_Abort_IT+0x3b8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d05e      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <HAL_DMA_Abort_IT+0x3bc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d059      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a33      	ldr	r2, [pc, #204]	; (80032b4 <HAL_DMA_Abort_IT+0x3c0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d054      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a31      	ldr	r2, [pc, #196]	; (80032b8 <HAL_DMA_Abort_IT+0x3c4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d04f      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_DMA_Abort_IT+0x3c8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d04a      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2e      	ldr	r2, [pc, #184]	; (80032c0 <HAL_DMA_Abort_IT+0x3cc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d045      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <HAL_DMA_Abort_IT+0x3d0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d040      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <HAL_DMA_Abort_IT+0x3d4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d03b      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <HAL_DMA_Abort_IT+0x3d8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d036      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_DMA_Abort_IT+0x3dc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a27      	ldr	r2, [pc, #156]	; (80032d4 <HAL_DMA_Abort_IT+0x3e0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d02c      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <HAL_DMA_Abort_IT+0x3e4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d027      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_DMA_Abort_IT+0x3e8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_DMA_Abort_IT+0x3ec>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HAL_DMA_Abort_IT+0x3f0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_DMA_Abort_IT+0x3f4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <HAL_DMA_Abort_IT+0x3f8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_DMA_Abort_IT+0x3fc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_DMA_Abort_IT+0x400>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_Abort_IT+0x3a2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_DMA_Abort_IT+0x404>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d132      	bne.n	80032fc <HAL_DMA_Abort_IT+0x408>
 8003296:	2301      	movs	r3, #1
 8003298:	e031      	b.n	80032fe <HAL_DMA_Abort_IT+0x40a>
 800329a:	bf00      	nop
 800329c:	40020010 	.word	0x40020010
 80032a0:	40020028 	.word	0x40020028
 80032a4:	40020040 	.word	0x40020040
 80032a8:	40020058 	.word	0x40020058
 80032ac:	40020070 	.word	0x40020070
 80032b0:	40020088 	.word	0x40020088
 80032b4:	400200a0 	.word	0x400200a0
 80032b8:	400200b8 	.word	0x400200b8
 80032bc:	40020410 	.word	0x40020410
 80032c0:	40020428 	.word	0x40020428
 80032c4:	40020440 	.word	0x40020440
 80032c8:	40020458 	.word	0x40020458
 80032cc:	40020470 	.word	0x40020470
 80032d0:	40020488 	.word	0x40020488
 80032d4:	400204a0 	.word	0x400204a0
 80032d8:	400204b8 	.word	0x400204b8
 80032dc:	58025408 	.word	0x58025408
 80032e0:	5802541c 	.word	0x5802541c
 80032e4:	58025430 	.word	0x58025430
 80032e8:	58025444 	.word	0x58025444
 80032ec:	58025458 	.word	0x58025458
 80032f0:	5802546c 	.word	0x5802546c
 80032f4:	58025480 	.word	0x58025480
 80032f8:	58025494 	.word	0x58025494
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003330:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003348:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003352:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop

08003380 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800338c:	4b67      	ldr	r3, [pc, #412]	; (800352c <HAL_DMA_IRQHandler+0x1ac>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a67      	ldr	r2, [pc, #412]	; (8003530 <HAL_DMA_IRQHandler+0x1b0>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a9b      	lsrs	r3, r3, #10
 8003398:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5f      	ldr	r2, [pc, #380]	; (8003534 <HAL_DMA_IRQHandler+0x1b4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_DMA_IRQHandler+0x1b8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5c      	ldr	r2, [pc, #368]	; (800353c <HAL_DMA_IRQHandler+0x1bc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <HAL_DMA_IRQHandler+0x1c0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a59      	ldr	r2, [pc, #356]	; (8003544 <HAL_DMA_IRQHandler+0x1c4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_DMA_IRQHandler+0x1c8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_DMA_IRQHandler+0x1cc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <HAL_DMA_IRQHandler+0x1d0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a53      	ldr	r2, [pc, #332]	; (8003554 <HAL_DMA_IRQHandler+0x1d4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a51      	ldr	r2, [pc, #324]	; (8003558 <HAL_DMA_IRQHandler+0x1d8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_DMA_IRQHandler+0x1dc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_DMA_IRQHandler+0x1e0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_DMA_IRQHandler+0x1e4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4b      	ldr	r2, [pc, #300]	; (8003568 <HAL_DMA_IRQHandler+0x1e8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a4a      	ldr	r2, [pc, #296]	; (800356c <HAL_DMA_IRQHandler+0x1ec>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_IRQHandler+0xd2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a48      	ldr	r2, [pc, #288]	; (8003570 <HAL_DMA_IRQHandler+0x1f0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_DMA_IRQHandler+0xd6>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_DMA_IRQHandler+0xd8>
 8003456:	2300      	movs	r3, #0
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 842b 	beq.w	8003cb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2208      	movs	r2, #8
 8003468:	409a      	lsls	r2, r3
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a2 	beq.w	80035b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <HAL_DMA_IRQHandler+0x1b4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d04a      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <HAL_DMA_IRQHandler+0x1b8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d045      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_DMA_IRQHandler+0x1bc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d040      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <HAL_DMA_IRQHandler+0x1c0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d03b      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_DMA_IRQHandler+0x1c4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d036      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a27      	ldr	r2, [pc, #156]	; (8003548 <HAL_DMA_IRQHandler+0x1c8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d031      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <HAL_DMA_IRQHandler+0x1cc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d02c      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a24      	ldr	r2, [pc, #144]	; (8003550 <HAL_DMA_IRQHandler+0x1d0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d027      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a22      	ldr	r2, [pc, #136]	; (8003554 <HAL_DMA_IRQHandler+0x1d4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_DMA_IRQHandler+0x1d8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d01d      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_DMA_IRQHandler+0x1dc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_DMA_IRQHandler+0x1e0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_DMA_IRQHandler+0x1e4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_DMA_IRQHandler+0x1e8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_DMA_IRQHandler+0x1ec>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_DMA_IRQHandler+0x194>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_DMA_IRQHandler+0x1f0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d12f      	bne.n	8003574 <HAL_DMA_IRQHandler+0x1f4>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e02e      	b.n	8003588 <HAL_DMA_IRQHandler+0x208>
 800352a:	bf00      	nop
 800352c:	24000004 	.word	0x24000004
 8003530:	1b4e81b5 	.word	0x1b4e81b5
 8003534:	40020010 	.word	0x40020010
 8003538:	40020028 	.word	0x40020028
 800353c:	40020040 	.word	0x40020040
 8003540:	40020058 	.word	0x40020058
 8003544:	40020070 	.word	0x40020070
 8003548:	40020088 	.word	0x40020088
 800354c:	400200a0 	.word	0x400200a0
 8003550:	400200b8 	.word	0x400200b8
 8003554:	40020410 	.word	0x40020410
 8003558:	40020428 	.word	0x40020428
 800355c:	40020440 	.word	0x40020440
 8003560:	40020458 	.word	0x40020458
 8003564:	40020470 	.word	0x40020470
 8003568:	40020488 	.word	0x40020488
 800356c:	400204a0 	.word	0x400204a0
 8003570:	400204b8 	.word	0x400204b8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2208      	movs	r2, #8
 80035a6:	409a      	lsls	r2, r3
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06e      	beq.n	80036ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a69      	ldr	r2, [pc, #420]	; (8003778 <HAL_DMA_IRQHandler+0x3f8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d04a      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a67      	ldr	r2, [pc, #412]	; (800377c <HAL_DMA_IRQHandler+0x3fc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d045      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a66      	ldr	r2, [pc, #408]	; (8003780 <HAL_DMA_IRQHandler+0x400>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d040      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a64      	ldr	r2, [pc, #400]	; (8003784 <HAL_DMA_IRQHandler+0x404>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d03b      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a63      	ldr	r2, [pc, #396]	; (8003788 <HAL_DMA_IRQHandler+0x408>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d036      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a61      	ldr	r2, [pc, #388]	; (800378c <HAL_DMA_IRQHandler+0x40c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d031      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a60      	ldr	r2, [pc, #384]	; (8003790 <HAL_DMA_IRQHandler+0x410>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d02c      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_DMA_IRQHandler+0x414>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d027      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_DMA_IRQHandler+0x418>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5b      	ldr	r2, [pc, #364]	; (800379c <HAL_DMA_IRQHandler+0x41c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01d      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_DMA_IRQHandler+0x420>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_DMA_IRQHandler+0x424>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_DMA_IRQHandler+0x428>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a55      	ldr	r2, [pc, #340]	; (80037ac <HAL_DMA_IRQHandler+0x42c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <HAL_DMA_IRQHandler+0x430>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_DMA_IRQHandler+0x2ee>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a52      	ldr	r2, [pc, #328]	; (80037b4 <HAL_DMA_IRQHandler+0x434>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10a      	bne.n	8003684 <HAL_DMA_IRQHandler+0x304>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e003      	b.n	800368c <HAL_DMA_IRQHandler+0x30c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0202 	orr.w	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2204      	movs	r2, #4
 80036b6:	409a      	lsls	r2, r3
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 808f 	beq.w	80037e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <HAL_DMA_IRQHandler+0x3f8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d04a      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2a      	ldr	r2, [pc, #168]	; (800377c <HAL_DMA_IRQHandler+0x3fc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d045      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_DMA_IRQHandler+0x400>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d040      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a27      	ldr	r2, [pc, #156]	; (8003784 <HAL_DMA_IRQHandler+0x404>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d03b      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a26      	ldr	r2, [pc, #152]	; (8003788 <HAL_DMA_IRQHandler+0x408>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d036      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <HAL_DMA_IRQHandler+0x40c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d031      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_DMA_IRQHandler+0x410>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d02c      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a21      	ldr	r2, [pc, #132]	; (8003794 <HAL_DMA_IRQHandler+0x414>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d027      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a20      	ldr	r2, [pc, #128]	; (8003798 <HAL_DMA_IRQHandler+0x418>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_DMA_IRQHandler+0x41c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01d      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_DMA_IRQHandler+0x420>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_DMA_IRQHandler+0x424>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <HAL_DMA_IRQHandler+0x428>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_DMA_IRQHandler+0x42c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_DMA_IRQHandler+0x430>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_DMA_IRQHandler+0x3e2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <HAL_DMA_IRQHandler+0x434>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d12a      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x438>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e023      	b.n	80037c0 <HAL_DMA_IRQHandler+0x440>
 8003778:	40020010 	.word	0x40020010
 800377c:	40020028 	.word	0x40020028
 8003780:	40020040 	.word	0x40020040
 8003784:	40020058 	.word	0x40020058
 8003788:	40020070 	.word	0x40020070
 800378c:	40020088 	.word	0x40020088
 8003790:	400200a0 	.word	0x400200a0
 8003794:	400200b8 	.word	0x400200b8
 8003798:	40020410 	.word	0x40020410
 800379c:	40020428 	.word	0x40020428
 80037a0:	40020440 	.word	0x40020440
 80037a4:	40020458 	.word	0x40020458
 80037a8:	40020470 	.word	0x40020470
 80037ac:	40020488 	.word	0x40020488
 80037b0:	400204a0 	.word	0x400204a0
 80037b4:	400204b8 	.word	0x400204b8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2204      	movs	r2, #4
 80037ce:	409a      	lsls	r2, r3
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2210      	movs	r2, #16
 80037ea:	409a      	lsls	r2, r3
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80a6 	beq.w	8003942 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a85      	ldr	r2, [pc, #532]	; (8003a10 <HAL_DMA_IRQHandler+0x690>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a83      	ldr	r2, [pc, #524]	; (8003a14 <HAL_DMA_IRQHandler+0x694>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a82      	ldr	r2, [pc, #520]	; (8003a18 <HAL_DMA_IRQHandler+0x698>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a80      	ldr	r2, [pc, #512]	; (8003a1c <HAL_DMA_IRQHandler+0x69c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7f      	ldr	r2, [pc, #508]	; (8003a20 <HAL_DMA_IRQHandler+0x6a0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <HAL_DMA_IRQHandler+0x6a4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <HAL_DMA_IRQHandler+0x6a8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a7a      	ldr	r2, [pc, #488]	; (8003a2c <HAL_DMA_IRQHandler+0x6ac>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a79      	ldr	r2, [pc, #484]	; (8003a30 <HAL_DMA_IRQHandler+0x6b0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a77      	ldr	r2, [pc, #476]	; (8003a34 <HAL_DMA_IRQHandler+0x6b4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a76      	ldr	r2, [pc, #472]	; (8003a38 <HAL_DMA_IRQHandler+0x6b8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a74      	ldr	r2, [pc, #464]	; (8003a3c <HAL_DMA_IRQHandler+0x6bc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a73      	ldr	r2, [pc, #460]	; (8003a40 <HAL_DMA_IRQHandler+0x6c0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a71      	ldr	r2, [pc, #452]	; (8003a44 <HAL_DMA_IRQHandler+0x6c4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a70      	ldr	r2, [pc, #448]	; (8003a48 <HAL_DMA_IRQHandler+0x6c8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_DMA_IRQHandler+0x516>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_DMA_IRQHandler+0x6cc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10a      	bne.n	80038ac <HAL_DMA_IRQHandler+0x52c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e009      	b.n	80038c0 <HAL_DMA_IRQHandler+0x540>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03e      	beq.n	8003942 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2210      	movs	r2, #16
 80038ce:	409a      	lsls	r2, r3
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d024      	beq.n	8003942 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
 8003900:	e01f      	b.n	8003942 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01b      	beq.n	8003942 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
 8003912:	e016      	b.n	8003942 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0208 	bic.w	r2, r2, #8
 8003930:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2220      	movs	r2, #32
 800394c:	409a      	lsls	r2, r3
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8110 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <HAL_DMA_IRQHandler+0x690>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04a      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_DMA_IRQHandler+0x694>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d045      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <HAL_DMA_IRQHandler+0x698>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <HAL_DMA_IRQHandler+0x69c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d03b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <HAL_DMA_IRQHandler+0x6a0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <HAL_DMA_IRQHandler+0x6a4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d031      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <HAL_DMA_IRQHandler+0x6a8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02c      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_DMA_IRQHandler+0x6ac>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d027      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <HAL_DMA_IRQHandler+0x6b0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_DMA_IRQHandler+0x6b4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01d      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_DMA_IRQHandler+0x6b8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d018      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <HAL_DMA_IRQHandler+0x6bc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <HAL_DMA_IRQHandler+0x6c0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_DMA_IRQHandler+0x6c4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <HAL_DMA_IRQHandler+0x6c8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x678>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_DMA_IRQHandler+0x6cc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d12b      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x6d0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	e02a      	b.n	8003a64 <HAL_DMA_IRQHandler+0x6e4>
 8003a0e:	bf00      	nop
 8003a10:	40020010 	.word	0x40020010
 8003a14:	40020028 	.word	0x40020028
 8003a18:	40020040 	.word	0x40020040
 8003a1c:	40020058 	.word	0x40020058
 8003a20:	40020070 	.word	0x40020070
 8003a24:	40020088 	.word	0x40020088
 8003a28:	400200a0 	.word	0x400200a0
 8003a2c:	400200b8 	.word	0x400200b8
 8003a30:	40020410 	.word	0x40020410
 8003a34:	40020428 	.word	0x40020428
 8003a38:	40020440 	.word	0x40020440
 8003a3c:	40020458 	.word	0x40020458
 8003a40:	40020470 	.word	0x40020470
 8003a44:	40020488 	.word	0x40020488
 8003a48:	400204a0 	.word	0x400204a0
 8003a4c:	400204b8 	.word	0x400204b8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8087 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2220      	movs	r2, #32
 8003a74:	409a      	lsls	r2, r3
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d139      	bne.n	8003afa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0216 	bic.w	r2, r2, #22
 8003a94:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_DMA_IRQHandler+0x736>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0208 	bic.w	r2, r2, #8
 8003ac4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	223f      	movs	r2, #63	; 0x3f
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 834a 	beq.w	8004184 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
          }
          return;
 8003af8:	e344      	b.n	8004184 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d018      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
 8003b26:	e027      	b.n	8003b78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e01e      	b.n	8003b78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0210 	bic.w	r2, r2, #16
 8003b56:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8306 	beq.w	800418e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8088 	beq.w	8003ca0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7a      	ldr	r2, [pc, #488]	; (8003d88 <HAL_DMA_IRQHandler+0xa08>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d04a      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a79      	ldr	r2, [pc, #484]	; (8003d8c <HAL_DMA_IRQHandler+0xa0c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d045      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a77      	ldr	r2, [pc, #476]	; (8003d90 <HAL_DMA_IRQHandler+0xa10>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d040      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a76      	ldr	r2, [pc, #472]	; (8003d94 <HAL_DMA_IRQHandler+0xa14>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d03b      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a74      	ldr	r2, [pc, #464]	; (8003d98 <HAL_DMA_IRQHandler+0xa18>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d036      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a73      	ldr	r2, [pc, #460]	; (8003d9c <HAL_DMA_IRQHandler+0xa1c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d031      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a71      	ldr	r2, [pc, #452]	; (8003da0 <HAL_DMA_IRQHandler+0xa20>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a70      	ldr	r2, [pc, #448]	; (8003da4 <HAL_DMA_IRQHandler+0xa24>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d027      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6e      	ldr	r2, [pc, #440]	; (8003da8 <HAL_DMA_IRQHandler+0xa28>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d022      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6d      	ldr	r2, [pc, #436]	; (8003dac <HAL_DMA_IRQHandler+0xa2c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d01d      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6b      	ldr	r2, [pc, #428]	; (8003db0 <HAL_DMA_IRQHandler+0xa30>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d018      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6a      	ldr	r2, [pc, #424]	; (8003db4 <HAL_DMA_IRQHandler+0xa34>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a68      	ldr	r2, [pc, #416]	; (8003db8 <HAL_DMA_IRQHandler+0xa38>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a67      	ldr	r2, [pc, #412]	; (8003dbc <HAL_DMA_IRQHandler+0xa3c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a65      	ldr	r2, [pc, #404]	; (8003dc0 <HAL_DMA_IRQHandler+0xa40>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x8b8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a64      	ldr	r2, [pc, #400]	; (8003dc4 <HAL_DMA_IRQHandler+0xa44>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <HAL_DMA_IRQHandler+0x8ca>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e007      	b.n	8003c5a <HAL_DMA_IRQHandler+0x8da>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d307      	bcc.n	8003c76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f2      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x8da>
 8003c74:	e000      	b.n	8003c78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c76:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c8e:	e003      	b.n	8003c98 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8272 	beq.w	800418e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e26c      	b.n	800418e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a43      	ldr	r2, [pc, #268]	; (8003dc8 <HAL_DMA_IRQHandler+0xa48>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a42      	ldr	r2, [pc, #264]	; (8003dcc <HAL_DMA_IRQHandler+0xa4c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01d      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a40      	ldr	r2, [pc, #256]	; (8003dd0 <HAL_DMA_IRQHandler+0xa50>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <HAL_DMA_IRQHandler+0xa54>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3d      	ldr	r2, [pc, #244]	; (8003dd8 <HAL_DMA_IRQHandler+0xa58>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <HAL_DMA_IRQHandler+0xa5c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a3a      	ldr	r2, [pc, #232]	; (8003de0 <HAL_DMA_IRQHandler+0xa60>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x984>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a39      	ldr	r2, [pc, #228]	; (8003de4 <HAL_DMA_IRQHandler+0xa64>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x988>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_DMA_IRQHandler+0x98a>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 823f 	beq.w	800418e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	2204      	movs	r2, #4
 8003d22:	409a      	lsls	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80cd 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xb48>
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80c7 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2204      	movs	r2, #4
 8003d44:	409a      	lsls	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d049      	beq.n	8003de8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8210 	beq.w	8004188 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d70:	e20a      	b.n	8004188 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8206 	beq.w	8004188 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d84:	e200      	b.n	8004188 <HAL_DMA_IRQHandler+0xe08>
 8003d86:	bf00      	nop
 8003d88:	40020010 	.word	0x40020010
 8003d8c:	40020028 	.word	0x40020028
 8003d90:	40020040 	.word	0x40020040
 8003d94:	40020058 	.word	0x40020058
 8003d98:	40020070 	.word	0x40020070
 8003d9c:	40020088 	.word	0x40020088
 8003da0:	400200a0 	.word	0x400200a0
 8003da4:	400200b8 	.word	0x400200b8
 8003da8:	40020410 	.word	0x40020410
 8003dac:	40020428 	.word	0x40020428
 8003db0:	40020440 	.word	0x40020440
 8003db4:	40020458 	.word	0x40020458
 8003db8:	40020470 	.word	0x40020470
 8003dbc:	40020488 	.word	0x40020488
 8003dc0:	400204a0 	.word	0x400204a0
 8003dc4:	400204b8 	.word	0x400204b8
 8003dc8:	58025408 	.word	0x58025408
 8003dcc:	5802541c 	.word	0x5802541c
 8003dd0:	58025430 	.word	0x58025430
 8003dd4:	58025444 	.word	0x58025444
 8003dd8:	58025458 	.word	0x58025458
 8003ddc:	5802546c 	.word	0x5802546c
 8003de0:	58025480 	.word	0x58025480
 8003de4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d160      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a7f      	ldr	r2, [pc, #508]	; (8003ff4 <HAL_DMA_IRQHandler+0xc74>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d04a      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7d      	ldr	r2, [pc, #500]	; (8003ff8 <HAL_DMA_IRQHandler+0xc78>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d045      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7c      	ldr	r2, [pc, #496]	; (8003ffc <HAL_DMA_IRQHandler+0xc7c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d040      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a7a      	ldr	r2, [pc, #488]	; (8004000 <HAL_DMA_IRQHandler+0xc80>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d03b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a79      	ldr	r2, [pc, #484]	; (8004004 <HAL_DMA_IRQHandler+0xc84>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d036      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a77      	ldr	r2, [pc, #476]	; (8004008 <HAL_DMA_IRQHandler+0xc88>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a76      	ldr	r2, [pc, #472]	; (800400c <HAL_DMA_IRQHandler+0xc8c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d02c      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a74      	ldr	r2, [pc, #464]	; (8004010 <HAL_DMA_IRQHandler+0xc90>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d027      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a73      	ldr	r2, [pc, #460]	; (8004014 <HAL_DMA_IRQHandler+0xc94>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a71      	ldr	r2, [pc, #452]	; (8004018 <HAL_DMA_IRQHandler+0xc98>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a70      	ldr	r2, [pc, #448]	; (800401c <HAL_DMA_IRQHandler+0xc9c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a6e      	ldr	r2, [pc, #440]	; (8004020 <HAL_DMA_IRQHandler+0xca0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6d      	ldr	r2, [pc, #436]	; (8004024 <HAL_DMA_IRQHandler+0xca4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6b      	ldr	r2, [pc, #428]	; (8004028 <HAL_DMA_IRQHandler+0xca8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_DMA_IRQHandler+0xcac>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xb12>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a68      	ldr	r2, [pc, #416]	; (8004030 <HAL_DMA_IRQHandler+0xcb0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0xb24>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0208 	bic.w	r2, r2, #8
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e007      	b.n	8003eb4 <HAL_DMA_IRQHandler+0xb34>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8165 	beq.w	8004188 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec6:	e15f      	b.n	8004188 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80c5 	beq.w	8004068 <HAL_DMA_IRQHandler+0xce8>
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80bf 	beq.w	8004068 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 813a 	beq.w	800418c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f20:	e134      	b.n	800418c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8130 	beq.w	800418c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f34:	e12a      	b.n	800418c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 8089 	bne.w	8004054 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2b      	ldr	r2, [pc, #172]	; (8003ff4 <HAL_DMA_IRQHandler+0xc74>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <HAL_DMA_IRQHandler+0xc78>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <HAL_DMA_IRQHandler+0xc7c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <HAL_DMA_IRQHandler+0xc80>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a25      	ldr	r2, [pc, #148]	; (8004004 <HAL_DMA_IRQHandler+0xc84>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a23      	ldr	r2, [pc, #140]	; (8004008 <HAL_DMA_IRQHandler+0xc88>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a22      	ldr	r2, [pc, #136]	; (800400c <HAL_DMA_IRQHandler+0xc8c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a20      	ldr	r2, [pc, #128]	; (8004010 <HAL_DMA_IRQHandler+0xc90>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <HAL_DMA_IRQHandler+0xc94>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_DMA_IRQHandler+0xc98>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1c      	ldr	r2, [pc, #112]	; (800401c <HAL_DMA_IRQHandler+0xc9c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <HAL_DMA_IRQHandler+0xca0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_DMA_IRQHandler+0xca4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <HAL_DMA_IRQHandler+0xca8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_DMA_IRQHandler+0xcac>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xc62>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a14      	ldr	r2, [pc, #80]	; (8004030 <HAL_DMA_IRQHandler+0xcb0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d128      	bne.n	8004034 <HAL_DMA_IRQHandler+0xcb4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0214 	bic.w	r2, r2, #20
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e027      	b.n	8004044 <HAL_DMA_IRQHandler+0xcc4>
 8003ff4:	40020010 	.word	0x40020010
 8003ff8:	40020028 	.word	0x40020028
 8003ffc:	40020040 	.word	0x40020040
 8004000:	40020058 	.word	0x40020058
 8004004:	40020070 	.word	0x40020070
 8004008:	40020088 	.word	0x40020088
 800400c:	400200a0 	.word	0x400200a0
 8004010:	400200b8 	.word	0x400200b8
 8004014:	40020410 	.word	0x40020410
 8004018:	40020428 	.word	0x40020428
 800401c:	40020440 	.word	0x40020440
 8004020:	40020458 	.word	0x40020458
 8004024:	40020470 	.word	0x40020470
 8004028:	40020488 	.word	0x40020488
 800402c:	400204a0 	.word	0x400204a0
 8004030:	400204b8 	.word	0x400204b8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 020a 	bic.w	r2, r2, #10
 8004042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8097 	beq.w	800418c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004066:	e091      	b.n	800418c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2208      	movs	r2, #8
 8004072:	409a      	lsls	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8088 	beq.w	800418e <HAL_DMA_IRQHandler+0xe0e>
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8082 	beq.w	800418e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a41      	ldr	r2, [pc, #260]	; (8004194 <HAL_DMA_IRQHandler+0xe14>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d04a      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a3f      	ldr	r2, [pc, #252]	; (8004198 <HAL_DMA_IRQHandler+0xe18>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d045      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3e      	ldr	r2, [pc, #248]	; (800419c <HAL_DMA_IRQHandler+0xe1c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d040      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3c      	ldr	r2, [pc, #240]	; (80041a0 <HAL_DMA_IRQHandler+0xe20>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03b      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a3b      	ldr	r2, [pc, #236]	; (80041a4 <HAL_DMA_IRQHandler+0xe24>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d036      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a39      	ldr	r2, [pc, #228]	; (80041a8 <HAL_DMA_IRQHandler+0xe28>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <HAL_DMA_IRQHandler+0xe2c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d02c      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a36      	ldr	r2, [pc, #216]	; (80041b0 <HAL_DMA_IRQHandler+0xe30>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d027      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a35      	ldr	r2, [pc, #212]	; (80041b4 <HAL_DMA_IRQHandler+0xe34>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a33      	ldr	r2, [pc, #204]	; (80041b8 <HAL_DMA_IRQHandler+0xe38>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a32      	ldr	r2, [pc, #200]	; (80041bc <HAL_DMA_IRQHandler+0xe3c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <HAL_DMA_IRQHandler+0xe40>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2f      	ldr	r2, [pc, #188]	; (80041c4 <HAL_DMA_IRQHandler+0xe44>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2d      	ldr	r2, [pc, #180]	; (80041c8 <HAL_DMA_IRQHandler+0xe48>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <HAL_DMA_IRQHandler+0xe4c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_DMA_IRQHandler+0xdaa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2a      	ldr	r2, [pc, #168]	; (80041d0 <HAL_DMA_IRQHandler+0xe50>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <HAL_DMA_IRQHandler+0xdbc>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 021c 	bic.w	r2, r2, #28
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e007      	b.n	800414c <HAL_DMA_IRQHandler+0xdcc>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 020e 	bic.w	r2, r2, #14
 800414a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2201      	movs	r2, #1
 8004156:	409a      	lsls	r2, r3
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
 8004182:	e004      	b.n	800418e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800418c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8

080041d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a42      	ldr	r2, [pc, #264]	; (80042ec <DMA_CalcBaseAndBitshift+0x118>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04a      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a41      	ldr	r2, [pc, #260]	; (80042f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d045      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <DMA_CalcBaseAndBitshift+0x120>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d040      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3e      	ldr	r2, [pc, #248]	; (80042f8 <DMA_CalcBaseAndBitshift+0x124>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d03b      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3c      	ldr	r2, [pc, #240]	; (80042fc <DMA_CalcBaseAndBitshift+0x128>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d036      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <DMA_CalcBaseAndBitshift+0x12c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d031      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a39      	ldr	r2, [pc, #228]	; (8004304 <DMA_CalcBaseAndBitshift+0x130>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02c      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a38      	ldr	r2, [pc, #224]	; (8004308 <DMA_CalcBaseAndBitshift+0x134>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d027      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a36      	ldr	r2, [pc, #216]	; (800430c <DMA_CalcBaseAndBitshift+0x138>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a35      	ldr	r2, [pc, #212]	; (8004310 <DMA_CalcBaseAndBitshift+0x13c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01d      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a33      	ldr	r2, [pc, #204]	; (8004314 <DMA_CalcBaseAndBitshift+0x140>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a32      	ldr	r2, [pc, #200]	; (8004318 <DMA_CalcBaseAndBitshift+0x144>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a30      	ldr	r2, [pc, #192]	; (800431c <DMA_CalcBaseAndBitshift+0x148>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a2f      	ldr	r2, [pc, #188]	; (8004320 <DMA_CalcBaseAndBitshift+0x14c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <DMA_CalcBaseAndBitshift+0x150>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <DMA_CalcBaseAndBitshift+0xa8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <DMA_CalcBaseAndBitshift+0x154>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <DMA_CalcBaseAndBitshift+0xac>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <DMA_CalcBaseAndBitshift+0xae>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d024      	beq.n	80042d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	3b10      	subs	r3, #16
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <DMA_CalcBaseAndBitshift+0x158>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	4a24      	ldr	r2, [pc, #144]	; (8004330 <DMA_CalcBaseAndBitshift+0x15c>)
 80042a0:	5cd3      	ldrb	r3, [r2, r3]
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d908      	bls.n	80042c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <DMA_CalcBaseAndBitshift+0x160>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	1d1a      	adds	r2, r3, #4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	659a      	str	r2, [r3, #88]	; 0x58
 80042be:	e00d      	b.n	80042dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <DMA_CalcBaseAndBitshift+0x160>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6593      	str	r3, [r2, #88]	; 0x58
 80042ce:	e005      	b.n	80042dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020058 	.word	0x40020058
 80042fc:	40020070 	.word	0x40020070
 8004300:	40020088 	.word	0x40020088
 8004304:	400200a0 	.word	0x400200a0
 8004308:	400200b8 	.word	0x400200b8
 800430c:	40020410 	.word	0x40020410
 8004310:	40020428 	.word	0x40020428
 8004314:	40020440 	.word	0x40020440
 8004318:	40020458 	.word	0x40020458
 800431c:	40020470 	.word	0x40020470
 8004320:	40020488 	.word	0x40020488
 8004324:	400204a0 	.word	0x400204a0
 8004328:	400204b8 	.word	0x400204b8
 800432c:	aaaaaaab 	.word	0xaaaaaaab
 8004330:	0800d470 	.word	0x0800d470
 8004334:	fffffc00 	.word	0xfffffc00

08004338 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d120      	bne.n	800438e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	2b03      	cmp	r3, #3
 8004352:	d858      	bhi.n	8004406 <DMA_CheckFifoParam+0xce>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <DMA_CheckFifoParam+0x24>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800436d 	.word	0x0800436d
 8004360:	0800437f 	.word	0x0800437f
 8004364:	0800436d 	.word	0x0800436d
 8004368:	08004407 	.word	0x08004407
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d048      	beq.n	800440a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800437c:	e045      	b.n	800440a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004386:	d142      	bne.n	800440e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800438c:	e03f      	b.n	800440e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	d123      	bne.n	80043e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	2b03      	cmp	r3, #3
 800439e:	d838      	bhi.n	8004412 <DMA_CheckFifoParam+0xda>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <DMA_CheckFifoParam+0x70>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043bf 	.word	0x080043bf
 80043b0:	080043b9 	.word	0x080043b9
 80043b4:	080043d1 	.word	0x080043d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
        break;
 80043bc:	e030      	b.n	8004420 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d025      	beq.n	8004416 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043ce:	e022      	b.n	8004416 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043d8:	d11f      	bne.n	800441a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043de:	e01c      	b.n	800441a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d902      	bls.n	80043ee <DMA_CheckFifoParam+0xb6>
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d003      	beq.n	80043f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043ec:	e018      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        break;
 80043f2:	e015      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
    break;
 8004404:	e00b      	b.n	800441e <DMA_CheckFifoParam+0xe6>
        break;
 8004406:	bf00      	nop
 8004408:	e00a      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        break;
 800440a:	bf00      	nop
 800440c:	e008      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        break;
 800440e:	bf00      	nop
 8004410:	e006      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        break;
 8004412:	bf00      	nop
 8004414:	e004      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        break;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
        break;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <DMA_CheckFifoParam+0xe8>
    break;
 800441e:	bf00      	nop
    }
  }

  return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop

08004430 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a38      	ldr	r2, [pc, #224]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a36      	ldr	r2, [pc, #216]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a35      	ldr	r2, [pc, #212]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a33      	ldr	r2, [pc, #204]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a32      	ldr	r2, [pc, #200]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a30      	ldr	r2, [pc, #192]	; (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2f      	ldr	r2, [pc, #188]	; (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01a      	beq.n	80044ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3b08      	subs	r3, #8
 80044a0:	4a28      	ldr	r2, [pc, #160]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	461a      	mov	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a24      	ldr	r2, [pc, #144]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2201      	movs	r2, #1
 80044c6:	409a      	lsls	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044cc:	e024      	b.n	8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3b10      	subs	r3, #16
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d806      	bhi.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d902      	bls.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3308      	adds	r3, #8
 80044f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a16      	ldr	r2, [pc, #88]	; (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004508:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	58025408 	.word	0x58025408
 8004528:	5802541c 	.word	0x5802541c
 800452c:	58025430 	.word	0x58025430
 8004530:	58025444 	.word	0x58025444
 8004534:	58025458 	.word	0x58025458
 8004538:	5802546c 	.word	0x5802546c
 800453c:	58025480 	.word	0x58025480
 8004540:	58025494 	.word	0x58025494
 8004544:	cccccccd 	.word	0xcccccccd
 8004548:	16009600 	.word	0x16009600
 800454c:	58025880 	.word	0x58025880
 8004550:	aaaaaaab 	.word	0xaaaaaaab
 8004554:	400204b8 	.word	0x400204b8
 8004558:	4002040f 	.word	0x4002040f
 800455c:	10008200 	.word	0x10008200
 8004560:	40020880 	.word	0x40020880

08004564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d04a      	beq.n	8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d847      	bhi.n	8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a25      	ldr	r2, [pc, #148]	; (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d022      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a24      	ldr	r2, [pc, #144]	; (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d01d      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1e      	ldr	r2, [pc, #120]	; (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	461a      	mov	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045ec:	671a      	str	r2, [r3, #112]	; 0x70
 80045ee:	e009      	b.n	8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004602:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3b01      	subs	r3, #1
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	58025408 	.word	0x58025408
 8004620:	5802541c 	.word	0x5802541c
 8004624:	58025430 	.word	0x58025430
 8004628:	58025444 	.word	0x58025444
 800462c:	58025458 	.word	0x58025458
 8004630:	5802546c 	.word	0x5802546c
 8004634:	58025480 	.word	0x58025480
 8004638:	58025494 	.word	0x58025494
 800463c:	1600963f 	.word	0x1600963f
 8004640:	58025940 	.word	0x58025940
 8004644:	1000823f 	.word	0x1000823f
 8004648:	40020940 	.word	0x40020940

0800464c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800465a:	4b86      	ldr	r3, [pc, #536]	; (8004874 <HAL_GPIO_Init+0x228>)
 800465c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800465e:	e18c      	b.n	800497a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2101      	movs	r1, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 817e 	beq.w	8004974 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d005      	beq.n	8004690 <HAL_GPIO_Init+0x44>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d130      	bne.n	80046f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046c6:	2201      	movs	r2, #1
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 0201 	and.w	r2, r3, #1
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d017      	beq.n	800472e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d123      	bne.n	8004782 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	08da      	lsrs	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3208      	adds	r2, #8
 8004742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	220f      	movs	r2, #15
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3208      	adds	r2, #8
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0203 	and.w	r2, r3, #3
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80d8 	beq.w	8004974 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c4:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_GPIO_Init+0x22c>)
 80047c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ca:	4a2b      	ldr	r2, [pc, #172]	; (8004878 <HAL_GPIO_Init+0x22c>)
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047d4:	4b28      	ldr	r3, [pc, #160]	; (8004878 <HAL_GPIO_Init+0x22c>)
 80047d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e2:	4a26      	ldr	r2, [pc, #152]	; (800487c <HAL_GPIO_Init+0x230>)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <HAL_GPIO_Init+0x234>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d04a      	beq.n	80048a4 <HAL_GPIO_Init+0x258>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_GPIO_Init+0x238>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <HAL_GPIO_Init+0x222>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_GPIO_Init+0x23c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d025      	beq.n	800486a <HAL_GPIO_Init+0x21e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_GPIO_Init+0x240>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <HAL_GPIO_Init+0x21a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_GPIO_Init+0x244>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d019      	beq.n	8004862 <HAL_GPIO_Init+0x216>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_GPIO_Init+0x248>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_GPIO_Init+0x212>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a17      	ldr	r2, [pc, #92]	; (8004898 <HAL_GPIO_Init+0x24c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00d      	beq.n	800485a <HAL_GPIO_Init+0x20e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_GPIO_Init+0x250>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_GPIO_Init+0x20a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <HAL_GPIO_Init+0x254>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_GPIO_Init+0x206>
 800484e:	2309      	movs	r3, #9
 8004850:	e029      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 8004852:	230a      	movs	r3, #10
 8004854:	e027      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 8004856:	2307      	movs	r3, #7
 8004858:	e025      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 800485a:	2306      	movs	r3, #6
 800485c:	e023      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 800485e:	2305      	movs	r3, #5
 8004860:	e021      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 8004862:	2304      	movs	r3, #4
 8004864:	e01f      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 8004866:	2303      	movs	r3, #3
 8004868:	e01d      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 800486a:	2302      	movs	r3, #2
 800486c:	e01b      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 800486e:	2301      	movs	r3, #1
 8004870:	e019      	b.n	80048a6 <HAL_GPIO_Init+0x25a>
 8004872:	bf00      	nop
 8004874:	58000080 	.word	0x58000080
 8004878:	58024400 	.word	0x58024400
 800487c:	58000400 	.word	0x58000400
 8004880:	58020000 	.word	0x58020000
 8004884:	58020400 	.word	0x58020400
 8004888:	58020800 	.word	0x58020800
 800488c:	58020c00 	.word	0x58020c00
 8004890:	58021000 	.word	0x58021000
 8004894:	58021400 	.word	0x58021400
 8004898:	58021800 	.word	0x58021800
 800489c:	58021c00 	.word	0x58021c00
 80048a0:	58022400 	.word	0x58022400
 80048a4:	2300      	movs	r3, #0
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	f002 0203 	and.w	r2, r2, #3
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	4093      	lsls	r3, r2
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b6:	4938      	ldr	r1, [pc, #224]	; (8004998 <HAL_GPIO_Init+0x34c>)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f47f ae6b 	bne.w	8004660 <HAL_GPIO_Init+0x14>
  }
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	3724      	adds	r7, #36	; 0x24
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	58000400 	.word	0x58000400

0800499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049ac:	787b      	ldrb	r3, [r7, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049b8:	e003      	b.n	80049c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	4603      	mov	r3, r0
 80049d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fc f8b9 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a0c:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_PWREx_ConfigSupply+0x70>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d00a      	beq.n	8004a2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a18:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_PWREx_ConfigSupply+0x70>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e01f      	b.n	8004a6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e01d      	b.n	8004a6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_PWREx_ConfigSupply+0x70>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	490f      	ldr	r1, [pc, #60]	; (8004a74 <HAL_PWREx_ConfigSupply+0x70>)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a3e:	f7fd faa1 	bl	8001f84 <HAL_GetTick>
 8004a42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a44:	e009      	b.n	8004a5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a46:	f7fd fa9d 	bl	8001f84 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a54:	d901      	bls.n	8004a5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e007      	b.n	8004a6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_PWREx_ConfigSupply+0x70>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	d1ee      	bne.n	8004a46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	58024800 	.word	0x58024800

08004a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	; 0x30
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e39d      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8087 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aa2:	4b86      	ldr	r3, [pc, #536]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	d007      	beq.n	8004abe <HAL_RCC_OscConfig+0x46>
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	2b18      	cmp	r3, #24
 8004ab2:	d110      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x5e>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d10b      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abe:	4b7f      	ldr	r3, [pc, #508]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d06c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x12c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d168      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e377      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ade:	d106      	bne.n	8004aee <HAL_RCC_OscConfig+0x76>
 8004ae0:	4b76      	ldr	r3, [pc, #472]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a75      	ldr	r2, [pc, #468]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	e02e      	b.n	8004b4c <HAL_RCC_OscConfig+0xd4>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x98>
 8004af6:	4b71      	ldr	r3, [pc, #452]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a70      	ldr	r2, [pc, #448]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b6e      	ldr	r3, [pc, #440]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6d      	ldr	r2, [pc, #436]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xd4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0xbc>
 8004b1a:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a67      	ldr	r2, [pc, #412]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a64      	ldr	r2, [pc, #400]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xd4>
 8004b34:	4b61      	ldr	r3, [pc, #388]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a60      	ldr	r2, [pc, #384]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b5e      	ldr	r3, [pc, #376]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fa16 	bl	8001f84 <HAL_GetTick>
 8004b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fa12 	bl	8001f84 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e32b      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b6e:	4b53      	ldr	r3, [pc, #332]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xe4>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fa02 	bl	8001f84 <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd f9fe 	bl	8001f84 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e317      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b96:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x10c>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 808c 	beq.w	8004ccc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb4:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <HAL_RCC_OscConfig+0x162>
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	2b18      	cmp	r3, #24
 8004bce:	d137      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1c8>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d132      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bda:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x17a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e2e9      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bf2:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 0219 	bic.w	r2, r3, #25
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	492f      	ldr	r1, [pc, #188]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c04:	f7fd f9be 	bl	8001f84 <HAL_GetTick>
 8004c08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0c:	f7fd f9ba 	bl	8001f84 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e2d3      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4920      	ldr	r1, [pc, #128]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3e:	e045      	b.n	8004ccc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d026      	beq.n	8004c96 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c48:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 0219 	bic.w	r2, r3, #25
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4919      	ldr	r1, [pc, #100]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd f993 	bl	8001f84 <HAL_GetTick>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c62:	f7fd f98f 	bl	8001f84 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e2a8      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	490b      	ldr	r1, [pc, #44]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
 8004c94:	e01a      	b.n	8004ccc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fd f96f 	bl	8001f84 <HAL_GetTick>
 8004ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fd f96b 	bl	8001f84 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d903      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e284      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
 8004cbc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cc0:	4b96      	ldr	r3, [pc, #600]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ee      	bne.n	8004caa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d06a      	beq.n	8004dae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd8:	4b90      	ldr	r3, [pc, #576]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ce2:	4b8e      	ldr	r3, [pc, #568]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d007      	beq.n	8004cfe <HAL_RCC_OscConfig+0x286>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b18      	cmp	r3, #24
 8004cf2:	d11b      	bne.n	8004d2c <HAL_RCC_OscConfig+0x2b4>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d116      	bne.n	8004d2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cfe:	4b87      	ldr	r3, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x29e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e257      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d16:	4b81      	ldr	r3, [pc, #516]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	497d      	ldr	r1, [pc, #500]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d2a:	e040      	b.n	8004dae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d023      	beq.n	8004d7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d34:	4b79      	ldr	r3, [pc, #484]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a78      	ldr	r2, [pc, #480]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd f920 	bl	8001f84 <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d48:	f7fd f91c 	bl	8001f84 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e235      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d5a:	4b70      	ldr	r3, [pc, #448]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d66:	4b6d      	ldr	r3, [pc, #436]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	4969      	ldr	r1, [pc, #420]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60cb      	str	r3, [r1, #12]
 8004d7a:	e018      	b.n	8004dae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d7c:	4b67      	ldr	r3, [pc, #412]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a66      	ldr	r2, [pc, #408]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fd f8fc 	bl	8001f84 <HAL_GetTick>
 8004d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d90:	f7fd f8f8 	bl	8001f84 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e211      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004da2:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d036      	beq.n	8004e28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d019      	beq.n	8004df6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dc2:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc6:	4a55      	ldr	r2, [pc, #340]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7fd f8d9 	bl	8001f84 <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd6:	f7fd f8d5 	bl	8001f84 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e1ee      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004de8:	4b4c      	ldr	r3, [pc, #304]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x35e>
 8004df4:	e018      	b.n	8004e28 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df6:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfa:	4a48      	ldr	r2, [pc, #288]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fd f8bf 	bl	8001f84 <HAL_GetTick>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fd f8bb 	bl	8001f84 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1d4      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d036      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d019      	beq.n	8004e70 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a36      	ldr	r2, [pc, #216]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e48:	f7fd f89c 	bl	8001f84 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e50:	f7fd f898 	bl	8001f84 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1b1      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x3d8>
 8004e6e:	e018      	b.n	8004ea2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e70:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e7c:	f7fd f882 	bl	8001f84 <HAL_GetTick>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e84:	f7fd f87e 	bl	8001f84 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e197      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e96:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8086 	beq.w	8004fbc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x4a8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_RCC_OscConfig+0x4a8>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ebc:	f7fd f862 	bl	8001f84 <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fd f85e 	bl	8001f84 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e177      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <HAL_RCC_OscConfig+0x4a8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x480>
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef6:	e032      	b.n	8004f5e <HAL_RCC_OscConfig+0x4e6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d111      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4ac>
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	4a05      	ldr	r2, [pc, #20]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	4a02      	ldr	r2, [pc, #8]	; (8004f1c <HAL_RCC_OscConfig+0x4a4>)
 8004f12:	f023 0304 	bic.w	r3, r3, #4
 8004f16:	6713      	str	r3, [r2, #112]	; 0x70
 8004f18:	e021      	b.n	8004f5e <HAL_RCC_OscConfig+0x4e6>
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	58024800 	.word	0x58024800
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b05      	cmp	r3, #5
 8004f2a:	d10c      	bne.n	8004f46 <HAL_RCC_OscConfig+0x4ce>
 8004f2c:	4b83      	ldr	r3, [pc, #524]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a82      	ldr	r2, [pc, #520]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f32:	f043 0304 	orr.w	r3, r3, #4
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	4b80      	ldr	r3, [pc, #512]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a7f      	ldr	r2, [pc, #508]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e00b      	b.n	8004f5e <HAL_RCC_OscConfig+0x4e6>
 8004f46:	4b7d      	ldr	r3, [pc, #500]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	4a7c      	ldr	r2, [pc, #496]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	6713      	str	r3, [r2, #112]	; 0x70
 8004f52:	4b7a      	ldr	r3, [pc, #488]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a79      	ldr	r2, [pc, #484]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d015      	beq.n	8004f92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fd f80d 	bl	8001f84 <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f6c:	e00a      	b.n	8004f84 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fd f809 	bl	8001f84 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e120      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f84:	4b6d      	ldr	r3, [pc, #436]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0ee      	beq.n	8004f6e <HAL_RCC_OscConfig+0x4f6>
 8004f90:	e014      	b.n	8004fbc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fc fff7 	bl	8001f84 <HAL_GetTick>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f9a:	f7fc fff3 	bl	8001f84 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e10a      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fb0:	4b62      	ldr	r3, [pc, #392]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ee      	bne.n	8004f9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80ff 	beq.w	80051c4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fc6:	4b5d      	ldr	r3, [pc, #372]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fce:	2b18      	cmp	r3, #24
 8004fd0:	f000 80ba 	beq.w	8005148 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	f040 8095 	bne.w	8005108 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b57      	ldr	r3, [pc, #348]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a56      	ldr	r2, [pc, #344]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8004fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fc ffcb 	bl	8001f84 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fc ffc7 	bl	8001f84 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0e0      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005004:	4b4d      	ldr	r3, [pc, #308]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005010:	4b4a      	ldr	r3, [pc, #296]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005014:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <HAL_RCC_OscConfig+0x6c8>)
 8005016:	4013      	ands	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	430a      	orrs	r2, r1
 8005024:	4945      	ldr	r1, [pc, #276]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005026:	4313      	orrs	r3, r2
 8005028:	628b      	str	r3, [r1, #40]	; 0x28
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	3b01      	subs	r3, #1
 8005030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	3b01      	subs	r3, #1
 800503a:	025b      	lsls	r3, r3, #9
 800503c:	b29b      	uxth	r3, r3
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	3b01      	subs	r3, #1
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	3b01      	subs	r3, #1
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800505a:	4938      	ldr	r1, [pc, #224]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	4a35      	ldr	r2, [pc, #212]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800506c:	4b33      	ldr	r3, [pc, #204]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 800506e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005070:	4b34      	ldr	r3, [pc, #208]	; (8005144 <HAL_RCC_OscConfig+0x6cc>)
 8005072:	4013      	ands	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005078:	00d2      	lsls	r2, r2, #3
 800507a:	4930      	ldr	r1, [pc, #192]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 800507c:	4313      	orrs	r3, r2
 800507e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005080:	4b2e      	ldr	r3, [pc, #184]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	f023 020c 	bic.w	r2, r3, #12
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	492b      	ldr	r1, [pc, #172]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005092:	4b2a      	ldr	r3, [pc, #168]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	f023 0202 	bic.w	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	4927      	ldr	r1, [pc, #156]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050a4:	4b25      	ldr	r3, [pc, #148]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a24      	ldr	r2, [pc, #144]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4b22      	ldr	r3, [pc, #136]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a21      	ldr	r2, [pc, #132]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050bc:	4b1f      	ldr	r3, [pc, #124]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80050c8:	4b1c      	ldr	r3, [pc, #112]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fc ff50 	bl	8001f84 <HAL_GetTick>
 80050e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fc ff4c 	bl	8001f84 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e065      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x670>
 8005106:	e05d      	b.n	80051c4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0b      	ldr	r2, [pc, #44]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 800510e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fc ff36 	bl	8001f84 <HAL_GetTick>
 8005118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511c:	f7fc ff32 	bl	8001f84 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e04b      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512e:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_OscConfig+0x6c4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x6a4>
 800513a:	e043      	b.n	80051c4 <HAL_RCC_OscConfig+0x74c>
 800513c:	58024400 	.word	0x58024400
 8005140:	fffffc0c 	.word	0xfffffc0c
 8005144:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005148:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <HAL_RCC_OscConfig+0x758>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800514e:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCC_OscConfig+0x758>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b01      	cmp	r3, #1
 800515a:	d031      	beq.n	80051c0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d12a      	bne.n	80051c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d122      	bne.n	80051c0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d11a      	bne.n	80051c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	0a5b      	lsrs	r3, r3, #9
 800518e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d111      	bne.n	80051c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d108      	bne.n	80051c0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0e1b      	lsrs	r3, r3, #24
 80051b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3730      	adds	r7, #48	; 0x30
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400

080051d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e19c      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e8:	4b8a      	ldr	r3, [pc, #552]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d910      	bls.n	8005218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b87      	ldr	r3, [pc, #540]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 020f 	bic.w	r2, r3, #15
 80051fe:	4985      	ldr	r1, [pc, #532]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b83      	ldr	r3, [pc, #524]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e184      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d010      	beq.n	8005246 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	4b7b      	ldr	r3, [pc, #492]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005230:	429a      	cmp	r2, r3
 8005232:	d908      	bls.n	8005246 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005234:	4b78      	ldr	r3, [pc, #480]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	4975      	ldr	r1, [pc, #468]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005242:	4313      	orrs	r3, r2
 8005244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d010      	beq.n	8005274 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	4b70      	ldr	r3, [pc, #448]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800525e:	429a      	cmp	r2, r3
 8005260:	d908      	bls.n	8005274 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005262:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	496a      	ldr	r1, [pc, #424]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005270:	4313      	orrs	r3, r2
 8005272:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	d010      	beq.n	80052a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699a      	ldr	r2, [r3, #24]
 8005284:	4b64      	ldr	r3, [pc, #400]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800528c:	429a      	cmp	r2, r3
 800528e:	d908      	bls.n	80052a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005290:	4b61      	ldr	r3, [pc, #388]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	495e      	ldr	r1, [pc, #376]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d010      	beq.n	80052d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d908      	bls.n	80052d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052be:	4b56      	ldr	r3, [pc, #344]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4953      	ldr	r1, [pc, #332]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d010      	beq.n	80052fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	4b4d      	ldr	r3, [pc, #308]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d908      	bls.n	80052fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ec:	4b4a      	ldr	r3, [pc, #296]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f023 020f 	bic.w	r2, r3, #15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4947      	ldr	r1, [pc, #284]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d055      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800530a:	4b43      	ldr	r3, [pc, #268]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4940      	ldr	r1, [pc, #256]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005318:	4313      	orrs	r3, r2
 800531a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d107      	bne.n	8005334 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005324:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d121      	bne.n	8005374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0f6      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b03      	cmp	r3, #3
 800533a:	d107      	bne.n	800534c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800533c:	4b36      	ldr	r3, [pc, #216]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0ea      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005354:	4b30      	ldr	r3, [pc, #192]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0de      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005364:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0d6      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005374:	4b28      	ldr	r3, [pc, #160]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f023 0207 	bic.w	r2, r3, #7
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4925      	ldr	r1, [pc, #148]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005386:	f7fc fdfd 	bl	8001f84 <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538c:	e00a      	b.n	80053a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538e:	f7fc fdf9 	bl	8001f84 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f241 3288 	movw	r2, #5000	; 0x1388
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e0be      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d1eb      	bne.n	800538e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d010      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d208      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f023 020f 	bic.w	r2, r3, #15
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	490e      	ldr	r1, [pc, #56]	; (8005418 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d214      	bcs.n	800541c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 020f 	bic.w	r2, r3, #15
 80053fa:	4906      	ldr	r1, [pc, #24]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b04      	ldr	r3, [pc, #16]	; (8005414 <HAL_RCC_ClockConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d005      	beq.n	800541c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e086      	b.n	8005522 <HAL_RCC_ClockConfig+0x34e>
 8005414:	52002000 	.word	0x52002000
 8005418:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	4b3f      	ldr	r3, [pc, #252]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005434:	429a      	cmp	r2, r3
 8005436:	d208      	bcs.n	800544a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005438:	4b3c      	ldr	r3, [pc, #240]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	4939      	ldr	r1, [pc, #228]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 8005446:	4313      	orrs	r3, r2
 8005448:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	4b34      	ldr	r3, [pc, #208]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005462:	429a      	cmp	r2, r3
 8005464:	d208      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005466:	4b31      	ldr	r3, [pc, #196]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	492e      	ldr	r1, [pc, #184]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 8005474:	4313      	orrs	r3, r2
 8005476:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	4b28      	ldr	r3, [pc, #160]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005490:	429a      	cmp	r2, r3
 8005492:	d208      	bcs.n	80054a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	4922      	ldr	r1, [pc, #136]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d010      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054be:	429a      	cmp	r2, r3
 80054c0:	d208      	bcs.n	80054d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	4917      	ldr	r1, [pc, #92]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054d4:	f000 f834 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	4912      	ldr	r1, [pc, #72]	; (8005530 <HAL_RCC_ClockConfig+0x35c>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054f2:	4b0e      	ldr	r3, [pc, #56]	; (800552c <HAL_RCC_ClockConfig+0x358>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <HAL_RCC_ClockConfig+0x35c>)
 80054fc:	5cd3      	ldrb	r3, [r2, r3]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <HAL_RCC_ClockConfig+0x360>)
 800550a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800550c:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <HAL_RCC_ClockConfig+0x364>)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_RCC_ClockConfig+0x368>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7fc fcea 	bl	8001ef0 <HAL_InitTick>
 800551c:	4603      	mov	r3, r0
 800551e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	0800d460 	.word	0x0800d460
 8005534:	24000008 	.word	0x24000008
 8005538:	24000004 	.word	0x24000004
 800553c:	2400000c 	.word	0x2400000c

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005546:	4bb3      	ldr	r3, [pc, #716]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554e:	2b18      	cmp	r3, #24
 8005550:	f200 8155 	bhi.w	80057fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	080055c1 	.word	0x080055c1
 8005560:	080057ff 	.word	0x080057ff
 8005564:	080057ff 	.word	0x080057ff
 8005568:	080057ff 	.word	0x080057ff
 800556c:	080057ff 	.word	0x080057ff
 8005570:	080057ff 	.word	0x080057ff
 8005574:	080057ff 	.word	0x080057ff
 8005578:	080057ff 	.word	0x080057ff
 800557c:	080055e7 	.word	0x080055e7
 8005580:	080057ff 	.word	0x080057ff
 8005584:	080057ff 	.word	0x080057ff
 8005588:	080057ff 	.word	0x080057ff
 800558c:	080057ff 	.word	0x080057ff
 8005590:	080057ff 	.word	0x080057ff
 8005594:	080057ff 	.word	0x080057ff
 8005598:	080057ff 	.word	0x080057ff
 800559c:	080055ed 	.word	0x080055ed
 80055a0:	080057ff 	.word	0x080057ff
 80055a4:	080057ff 	.word	0x080057ff
 80055a8:	080057ff 	.word	0x080057ff
 80055ac:	080057ff 	.word	0x080057ff
 80055b0:	080057ff 	.word	0x080057ff
 80055b4:	080057ff 	.word	0x080057ff
 80055b8:	080057ff 	.word	0x080057ff
 80055bc:	080055f3 	.word	0x080055f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c0:	4b94      	ldr	r3, [pc, #592]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055cc:	4b91      	ldr	r3, [pc, #580]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	4a90      	ldr	r2, [pc, #576]	; (8005818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80055de:	e111      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055e0:	4b8d      	ldr	r3, [pc, #564]	; (8005818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055e2:	61bb      	str	r3, [r7, #24]
    break;
 80055e4:	e10e      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80055e6:	4b8d      	ldr	r3, [pc, #564]	; (800581c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055e8:	61bb      	str	r3, [r7, #24]
    break;
 80055ea:	e10b      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80055ec:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80055ee:	61bb      	str	r3, [r7, #24]
    break;
 80055f0:	e108      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055f2:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80055fc:	4b85      	ldr	r3, [pc, #532]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005606:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005608:	4b82      	ldr	r3, [pc, #520]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005612:	4b80      	ldr	r3, [pc, #512]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	08db      	lsrs	r3, r3, #3
 8005618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80e1 	beq.w	80057f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b02      	cmp	r3, #2
 800563a:	f000 8083 	beq.w	8005744 <HAL_RCC_GetSysClockFreq+0x204>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b02      	cmp	r3, #2
 8005642:	f200 80a1 	bhi.w	8005788 <HAL_RCC_GetSysClockFreq+0x248>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x114>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d056      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005652:	e099      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005654:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02d      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005660:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	08db      	lsrs	r3, r3, #3
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	4a6b      	ldr	r2, [pc, #428]	; (8005818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568a:	4b62      	ldr	r3, [pc, #392]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569a:	ed97 6a02 	vldr	s12, [r7, #8]
 800569e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80056ba:	e087      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005828 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ce:	4b51      	ldr	r3, [pc, #324]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056de:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056fe:	e065      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800582c <HAL_RCC_GetSysClockFreq+0x2ec>
 800570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005712:	4b40      	ldr	r3, [pc, #256]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005722:	ed97 6a02 	vldr	s12, [r7, #8]
 8005726:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005824 <HAL_RCC_GetSysClockFreq+0x2e4>
 800572a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005742:	e043      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005830 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005766:	ed97 6a02 	vldr	s12, [r7, #8]
 800576a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005824 <HAL_RCC_GetSysClockFreq+0x2e4>
 800576e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005786:	e021      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	eddf 6a26 	vldr	s13, [pc, #152]	; 800582c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579a:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005824 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80057cc:	4b11      	ldr	r3, [pc, #68]	; (8005814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	0a5b      	lsrs	r3, r3, #9
 80057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d6:	3301      	adds	r3, #1
 80057d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	ee07 3a90 	vmov	s15, r3
 80057e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f0:	ee17 3a90 	vmov	r3, s15
 80057f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80057f6:	e005      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
    break;
 80057fc:	e002      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80057fe:	4b07      	ldr	r3, [pc, #28]	; (800581c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005800:	61bb      	str	r3, [r7, #24]
    break;
 8005802:	bf00      	nop
  }

  return sysclockfreq;
 8005804:	69bb      	ldr	r3, [r7, #24]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3724      	adds	r7, #36	; 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
 8005818:	03d09000 	.word	0x03d09000
 800581c:	003d0900 	.word	0x003d0900
 8005820:	017d7840 	.word	0x017d7840
 8005824:	46000000 	.word	0x46000000
 8005828:	4c742400 	.word	0x4c742400
 800582c:	4a742400 	.word	0x4a742400
 8005830:	4bbebc20 	.word	0x4bbebc20

08005834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800583a:	f7ff fe81 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 800583e:	4602      	mov	r2, r0
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_RCC_GetHCLKFreq+0x50>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	490f      	ldr	r1, [pc, #60]	; (8005888 <HAL_RCC_GetHCLKFreq+0x54>)
 800584c:	5ccb      	ldrb	r3, [r1, r3]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <HAL_RCC_GetHCLKFreq+0x50>)
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	4a09      	ldr	r2, [pc, #36]	; (8005888 <HAL_RCC_GetHCLKFreq+0x54>)
 8005862:	5cd3      	ldrb	r3, [r2, r3]
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	fa22 f303 	lsr.w	r3, r2, r3
 800586e:	4a07      	ldr	r2, [pc, #28]	; (800588c <HAL_RCC_GetHCLKFreq+0x58>)
 8005870:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005872:	4a07      	ldr	r2, [pc, #28]	; (8005890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <HAL_RCC_GetHCLKFreq+0x58>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	58024400 	.word	0x58024400
 8005888:	0800d460 	.word	0x0800d460
 800588c:	24000008 	.word	0x24000008
 8005890:	24000004 	.word	0x24000004

08005894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005898:	f7ff ffcc 	bl	8005834 <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4904      	ldr	r1, [pc, #16]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	58024400 	.word	0x58024400
 80058bc:	0800d460 	.word	0x0800d460

080058c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058c4:	f7ff ffb6 	bl	8005834 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4904      	ldr	r1, [pc, #16]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	58024400 	.word	0x58024400
 80058e8:	0800d460 	.word	0x0800d460

080058ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058f4:	2300      	movs	r3, #0
 80058f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f8:	2300      	movs	r3, #0
 80058fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d03f      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005910:	d02a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005916:	d824      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591c:	d018      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800591e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005922:	d81e      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592c:	d007      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800592e:	e018      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4ba4      	ldr	r3, [pc, #656]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4aa3      	ldr	r2, [pc, #652]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800593c:	e015      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	2102      	movs	r1, #2
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f989 	bl	8006c5c <RCCEx_PLL2_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800594e:	e00c      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fa32 	bl	8006dc0 <RCCEx_PLL3_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005960:	e003      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
      break;
 8005966:	e000      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005970:	4b94      	ldr	r3, [pc, #592]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597c:	4991      	ldr	r1, [pc, #580]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800597e:	4313      	orrs	r3, r2
 8005980:	650b      	str	r3, [r1, #80]	; 0x50
 8005982:	e001      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d03d      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	2b04      	cmp	r3, #4
 800599a:	d826      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059b9 	.word	0x080059b9
 80059a8:	080059c7 	.word	0x080059c7
 80059ac:	080059d9 	.word	0x080059d9
 80059b0:	080059f1 	.word	0x080059f1
 80059b4:	080059f1 	.word	0x080059f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b8:	4b82      	ldr	r3, [pc, #520]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a81      	ldr	r2, [pc, #516]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059c4:	e015      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f945 	bl	8006c5c <RCCEx_PLL2_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059d6:	e00c      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 f9ee 	bl	8006dc0 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059e8:	e003      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
      break;
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80059f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059f8:	4b72      	ldr	r3, [pc, #456]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	f023 0207 	bic.w	r2, r3, #7
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	496f      	ldr	r1, [pc, #444]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	650b      	str	r3, [r1, #80]	; 0x50
 8005a0a:	e001      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d051      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a22:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a26:	d036      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a28:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a2c:	d830      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a32:	d032      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a38:	d82a      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a3e:	d02e      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005a40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a44:	d824      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a4a:	d018      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a50:	d81e      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a5a:	d007      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005a5c:	e018      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a6a:	e019      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 f8f2 	bl	8006c5c <RCCEx_PLL2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a7c:	e010      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3324      	adds	r3, #36	; 0x24
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f99b 	bl	8006dc0 <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a8e:	e007      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	e004      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005a96:	bf00      	nop
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ab4:	4943      	ldr	r1, [pc, #268]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8005aba:	e001      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d051      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ad2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ad6:	d036      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005ad8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005adc:	d830      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae2:	d032      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae8:	d82a      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005aea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aee:	d02e      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005af0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005af4:	d824      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005afa:	d018      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b00:	d81e      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b0a:	d007      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b0c:	e018      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0e:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b1a:	e019      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f89a 	bl	8006c5c <RCCEx_PLL2_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b2c:	e010      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3324      	adds	r3, #36	; 0x24
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f943 	bl	8006dc0 <RCCEx_PLL3_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b3e:	e007      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]
      break;
 8005b44:	e004      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b64:	4917      	ldr	r1, [pc, #92]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	658b      	str	r3, [r1, #88]	; 0x58
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d035      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b80:	2b30      	cmp	r3, #48	; 0x30
 8005b82:	d01c      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b84:	2b30      	cmp	r3, #48	; 0x30
 8005b86:	d817      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d813      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d019      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d10f      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005ba4:	e011      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2102      	movs	r1, #2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f855 	bl	8006c5c <RCCEx_PLL2_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005bb6:	e008      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
      break;
 8005bbc:	e005      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e003      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005bc2:	bf00      	nop
 8005bc4:	58024400 	.word	0x58024400
      break;
 8005bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bd0:	4ba3      	ldr	r3, [pc, #652]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bdc:	49a0      	ldr	r1, [pc, #640]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005be2:	e001      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d047      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfc:	d030      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c02:	d82a      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c08:	d02c      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005c0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c0e:	d824      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c14:	d018      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1a:	d81e      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c24:	d007      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c26:	e018      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c28:	4b8d      	ldr	r3, [pc, #564]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4a8c      	ldr	r2, [pc, #560]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c34:	e017      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 f80d 	bl	8006c5c <RCCEx_PLL2_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c46:	e00e      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3324      	adds	r3, #36	; 0x24
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f8b6 	bl	8006dc0 <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c58:	e005      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5e:	e002      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c6c:	4b7c      	ldr	r3, [pc, #496]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	4979      	ldr	r1, [pc, #484]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c7e:	e001      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d049      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c98:	d02e      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c9e:	d828      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ca4:	d02a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005caa:	d822      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cb0:	d026      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cb6:	d81c      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cbc:	d010      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc2:	d816      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01d      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ccc:	d111      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 ffc1 	bl	8006c5c <RCCEx_PLL2_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cde:	e012      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3324      	adds	r3, #36	; 0x24
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f86a 	bl	8006dc0 <RCCEx_PLL3_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cf0:	e009      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf6:	e006      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005cf8:	bf00      	nop
 8005cfa:	e004      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005cfc:	bf00      	nop
 8005cfe:	e002      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d00:	bf00      	nop
 8005d02:	e000      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d0c:	4b54      	ldr	r3, [pc, #336]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	4951      	ldr	r1, [pc, #324]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8005d1e:	e001      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d04b      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d3a:	d02e      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d40:	d828      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d46:	d02a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4c:	d822      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d52:	d026      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005d54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d58:	d81c      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5e:	d010      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d64:	d816      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01d      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d6e:	d111      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	2101      	movs	r1, #1
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 ff70 	bl	8006c5c <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d80:	e012      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3324      	adds	r3, #36	; 0x24
 8005d86:	2101      	movs	r1, #1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f819 	bl	8006dc0 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d92:	e009      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]
      break;
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e004      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e002      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dae:	4b2c      	ldr	r3, [pc, #176]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dbc:	4928      	ldr	r1, [pc, #160]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	658b      	str	r3, [r1, #88]	; 0x58
 8005dc2:	e001      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d02f      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ddc:	d00e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de2:	d814      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dec:	d10f      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dee:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	4a1b      	ldr	r2, [pc, #108]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005dfa:	e00c      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 ff2a 	bl	8006c5c <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d109      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e28:	490d      	ldr	r1, [pc, #52]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e2e:	e001      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d034      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d81d      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e8b 	.word	0x08005e8b
 8005e54:	08005e65 	.word	0x08005e65
 8005e58:	08005e73 	.word	0x08005e73
 8005e5c:	08005e8b 	.word	0x08005e8b
 8005e60:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4bb1      	ldr	r3, [pc, #708]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4ab0      	ldr	r2, [pc, #704]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e70:	e00c      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	2102      	movs	r1, #2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 feef 	bl	8006c5c <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e82:	e003      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	75fb      	strb	r3, [r7, #23]
      break;
 8005e88:	e000      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e92:	4ba6      	ldr	r3, [pc, #664]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	49a3      	ldr	r1, [pc, #652]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ea4:	e001      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8086 	beq.w	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb8:	4b9d      	ldr	r3, [pc, #628]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a9c      	ldr	r2, [pc, #624]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec4:	f7fc f85e 	bl	8001f84 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eca:	e009      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ecc:	f7fc f85a 	bl	8001f84 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d902      	bls.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	75fb      	strb	r3, [r7, #23]
        break;
 8005ede:	e005      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee0:	4b93      	ldr	r3, [pc, #588]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ef      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d166      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ef2:	4b8e      	ldr	r3, [pc, #568]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005efc:	4053      	eors	r3, r2
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f06:	4b89      	ldr	r3, [pc, #548]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f10:	4b86      	ldr	r3, [pc, #536]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	4a85      	ldr	r2, [pc, #532]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f1c:	4b83      	ldr	r3, [pc, #524]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a82      	ldr	r2, [pc, #520]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f28:	4a80      	ldr	r2, [pc, #512]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f38:	d115      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fc f823 	bl	8001f84 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f40:	e00b      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f42:	f7fc f81f 	bl	8001f84 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d902      	bls.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	75fb      	strb	r3, [r7, #23]
            break;
 8005f58:	e005      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f5a:	4b74      	ldr	r3, [pc, #464]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ed      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d126      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f7a:	d10d      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005f7c:	4b6b      	ldr	r3, [pc, #428]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f8a:	0919      	lsrs	r1, r3, #4
 8005f8c:	4b69      	ldr	r3, [pc, #420]	; (8006134 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f8e:	400b      	ands	r3, r1
 8005f90:	4966      	ldr	r1, [pc, #408]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	610b      	str	r3, [r1, #16]
 8005f96:	e005      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005f98:	4b64      	ldr	r3, [pc, #400]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4a63      	ldr	r2, [pc, #396]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fa2:	6113      	str	r3, [r2, #16]
 8005fa4:	4b61      	ldr	r3, [pc, #388]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb2:	495e      	ldr	r1, [pc, #376]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	670b      	str	r3, [r1, #112]	; 0x70
 8005fb8:	e004      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	75bb      	strb	r3, [r7, #22]
 8005fbe:	e001      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d07e      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd4:	2b28      	cmp	r3, #40	; 0x28
 8005fd6:	d867      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005fd8:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	080060af 	.word	0x080060af
 8005fe4:	080060a9 	.word	0x080060a9
 8005fe8:	080060a9 	.word	0x080060a9
 8005fec:	080060a9 	.word	0x080060a9
 8005ff0:	080060a9 	.word	0x080060a9
 8005ff4:	080060a9 	.word	0x080060a9
 8005ff8:	080060a9 	.word	0x080060a9
 8005ffc:	080060a9 	.word	0x080060a9
 8006000:	08006085 	.word	0x08006085
 8006004:	080060a9 	.word	0x080060a9
 8006008:	080060a9 	.word	0x080060a9
 800600c:	080060a9 	.word	0x080060a9
 8006010:	080060a9 	.word	0x080060a9
 8006014:	080060a9 	.word	0x080060a9
 8006018:	080060a9 	.word	0x080060a9
 800601c:	080060a9 	.word	0x080060a9
 8006020:	08006097 	.word	0x08006097
 8006024:	080060a9 	.word	0x080060a9
 8006028:	080060a9 	.word	0x080060a9
 800602c:	080060a9 	.word	0x080060a9
 8006030:	080060a9 	.word	0x080060a9
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060a9 	.word	0x080060a9
 800603c:	080060a9 	.word	0x080060a9
 8006040:	080060af 	.word	0x080060af
 8006044:	080060a9 	.word	0x080060a9
 8006048:	080060a9 	.word	0x080060a9
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060a9 	.word	0x080060a9
 8006054:	080060a9 	.word	0x080060a9
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060af 	.word	0x080060af
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060a9 	.word	0x080060a9
 8006080:	080060af 	.word	0x080060af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	2101      	movs	r1, #1
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fde6 	bl	8006c5c <RCCEx_PLL2_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006094:	e00c      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3324      	adds	r3, #36	; 0x24
 800609a:	2101      	movs	r1, #1
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fe8f 	bl	8006dc0 <RCCEx_PLL3_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060a6:	e003      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
      break;
 80060ac:	e000      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80060ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c2:	491a      	ldr	r1, [pc, #104]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	654b      	str	r3, [r1, #84]	; 0x54
 80060c8:	e001      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03e      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	2b05      	cmp	r3, #5
 80060e0:	d820      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006139 	.word	0x08006139
 80060ec:	08006101 	.word	0x08006101
 80060f0:	08006113 	.word	0x08006113
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006139 	.word	0x08006139
 80060fc:	08006139 	.word	0x08006139
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	2101      	movs	r1, #1
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fda8 	bl	8006c5c <RCCEx_PLL2_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006110:	e013      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3324      	adds	r3, #36	; 0x24
 8006116:	2101      	movs	r1, #1
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fe51 	bl	8006dc0 <RCCEx_PLL3_Config>
 800611e:	4603      	mov	r3, r0
 8006120:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006122:	e00a      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	75fb      	strb	r3, [r7, #23]
      break;
 8006128:	e007      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800612a:	bf00      	nop
 800612c:	58024400 	.word	0x58024400
 8006130:	58024800 	.word	0x58024800
 8006134:	00ffffcf 	.word	0x00ffffcf
      break;
 8006138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006140:	4b9f      	ldr	r3, [pc, #636]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	f023 0207 	bic.w	r2, r3, #7
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614c:	499c      	ldr	r1, [pc, #624]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	654b      	str	r3, [r1, #84]	; 0x54
 8006152:	e001      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d039      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616a:	2b05      	cmp	r3, #5
 800616c:	d820      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	080061b7 	.word	0x080061b7
 8006178:	0800618d 	.word	0x0800618d
 800617c:	0800619f 	.word	0x0800619f
 8006180:	080061b7 	.word	0x080061b7
 8006184:	080061b7 	.word	0x080061b7
 8006188:	080061b7 	.word	0x080061b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fd62 	bl	8006c5c <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800619c:	e00c      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fe0b 	bl	8006dc0 <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
      break;
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80061b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061be:	4b80      	ldr	r3, [pc, #512]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	f023 0207 	bic.w	r2, r3, #7
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061cc:	497c      	ldr	r1, [pc, #496]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	658b      	str	r3, [r1, #88]	; 0x58
 80061d2:	e001      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d04b      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061ee:	d02e      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80061f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061f4:	d828      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d02a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006200:	d822      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006206:	d026      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800620c:	d81c      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800620e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006212:	d010      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006218:	d816      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01d      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800621e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006222:	d111      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd16 	bl	8006c5c <RCCEx_PLL2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006234:	e012      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3324      	adds	r3, #36	; 0x24
 800623a:	2102      	movs	r1, #2
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fdbf 	bl	8006dc0 <RCCEx_PLL3_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006246:	e009      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	75fb      	strb	r3, [r7, #23]
      break;
 800624c:	e006      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800624e:	bf00      	nop
 8006250:	e004      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800625a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006262:	4b57      	ldr	r3, [pc, #348]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006266:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006270:	4953      	ldr	r1, [pc, #332]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006272:	4313      	orrs	r3, r2
 8006274:	654b      	str	r3, [r1, #84]	; 0x54
 8006276:	e001      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d04b      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800628e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006292:	d02e      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006294:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006298:	d828      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629e:	d02a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a4:	d822      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062aa:	d026      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80062ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b0:	d81c      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b6:	d010      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80062b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062bc:	d816      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01d      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c6:	d111      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fcc4 	bl	8006c5c <RCCEx_PLL2_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062d8:	e012      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fd6d 	bl	8006dc0 <RCCEx_PLL3_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062ea:	e009      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
      break;
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062f2:	bf00      	nop
 80062f4:	e004      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80062fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006306:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006314:	492a      	ldr	r1, [pc, #168]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006316:	4313      	orrs	r3, r2
 8006318:	658b      	str	r3, [r1, #88]	; 0x58
 800631a:	e001      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b00      	cmp	r3, #0
 800632a:	d04d      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006332:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006336:	d02e      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006338:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800633c:	d828      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006342:	d02a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	d822      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800634a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800634e:	d026      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006350:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006354:	d81c      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800635a:	d010      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800635c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006360:	d816      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01d      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636a:	d111      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fc72 	bl	8006c5c <RCCEx_PLL2_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800637c:	e012      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fd1b 	bl	8006dc0 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800638e:	e009      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
      break;
 8006394:	e006      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80063a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063b8:	4901      	ldr	r1, [pc, #4]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	658b      	str	r3, [r1, #88]	; 0x58
 80063be:	e003      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80063c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d018      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063dc:	d10a      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	2102      	movs	r1, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fceb 	bl	8006dc0 <RCCEx_PLL3_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80063f4:	4b8a      	ldr	r3, [pc, #552]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006400:	4987      	ldr	r1, [pc, #540]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006402:	4313      	orrs	r3, r2
 8006404:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641c:	d10a      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fccb 	bl	8006dc0 <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006434:	4b7a      	ldr	r3, [pc, #488]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	4977      	ldr	r1, [pc, #476]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006444:	4313      	orrs	r3, r2
 8006446:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d034      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800645a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800645e:	d01d      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006464:	d817      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800646a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006470:	e011      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3304      	adds	r3, #4
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fbef 	bl	8006c5c <RCCEx_PLL2_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006482:	e00c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3324      	adds	r3, #36	; 0x24
 8006488:	2102      	movs	r1, #2
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fc98 	bl	8006dc0 <RCCEx_PLL3_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
      break;
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800649c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064a4:	4b5e      	ldr	r3, [pc, #376]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064b2:	495b      	ldr	r1, [pc, #364]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	658b      	str	r3, [r1, #88]	; 0x58
 80064b8:	e001      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d033      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064d4:	d01c      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80064d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064da:	d816      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80064dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e0:	d003      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80064e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064e6:	d007      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80064e8:	e00f      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ea:	4b4d      	ldr	r3, [pc, #308]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	4a4c      	ldr	r2, [pc, #304]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80064f6:	e00c      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3324      	adds	r3, #36	; 0x24
 80064fc:	2101      	movs	r1, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fc5e 	bl	8006dc0 <RCCEx_PLL3_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
      break;
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006518:	4b41      	ldr	r3, [pc, #260]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006526:	493e      	ldr	r1, [pc, #248]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006528:	4313      	orrs	r3, r2
 800652a:	654b      	str	r3, [r1, #84]	; 0x54
 800652c:	e001      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d029      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654a:	d007      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800654c:	e00f      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654e:	4b34      	ldr	r3, [pc, #208]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	4a33      	ldr	r2, [pc, #204]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800655a:	e00b      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	2102      	movs	r1, #2
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fb7a 	bl	8006c5c <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
      break;
 8006572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800657a:	4b29      	ldr	r3, [pc, #164]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	4926      	ldr	r1, [pc, #152]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006588:	4313      	orrs	r3, r2
 800658a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800658c:	e001      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3324      	adds	r3, #36	; 0x24
 80065a2:	2102      	movs	r1, #2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fc0b 	bl	8006dc0 <RCCEx_PLL3_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d033      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065c8:	d017      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80065ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ce:	d811      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d4:	d013      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80065d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065da:	d80b      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d010      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e4:	d106      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e6:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80065f2:	e007      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
      break;
 80065f8:	e004      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10c      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006616:	4902      	ldr	r1, [pc, #8]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006618:	4313      	orrs	r3, r2
 800661a:	654b      	str	r3, [r1, #84]	; 0x54
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006634:	4b29      	ldr	r3, [pc, #164]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006640:	4926      	ldr	r1, [pc, #152]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006642:	4313      	orrs	r3, r2
 8006644:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006652:	4b22      	ldr	r3, [pc, #136]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006656:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665e:	491f      	ldr	r1, [pc, #124]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006660:	4313      	orrs	r3, r2
 8006662:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006670:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006676:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800667a:	6113      	str	r3, [r2, #16]
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006686:	4915      	ldr	r1, [pc, #84]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006688:	4313      	orrs	r3, r2
 800668a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	da08      	bge.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006698:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	490e      	ldr	r1, [pc, #56]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c0:	4906      	ldr	r1, [pc, #24]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80066c6:	7dbb      	ldrb	r3, [r7, #22]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	58024400 	.word	0x58024400

080066e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066e4:	f7ff f8a6 	bl	8005834 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4904      	ldr	r1, [pc, #16]	; (8006708 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58024400 	.word	0x58024400
 8006708:	0800d460 	.word	0x0800d460

0800670c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006714:	4ba1      	ldr	r3, [pc, #644]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800671e:	4b9f      	ldr	r3, [pc, #636]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	0b1b      	lsrs	r3, r3, #12
 8006724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006728:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800672a:	4b9c      	ldr	r3, [pc, #624]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006736:	4b99      	ldr	r3, [pc, #612]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	08db      	lsrs	r3, r3, #3
 800673c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8111 	beq.w	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b02      	cmp	r3, #2
 800675e:	f000 8083 	beq.w	8006868 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b02      	cmp	r3, #2
 8006766:	f200 80a1 	bhi.w	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d056      	beq.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006776:	e099      	b.n	80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006778:	4b88      	ldr	r3, [pc, #544]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02d      	beq.n	80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006784:	4b85      	ldr	r3, [pc, #532]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	4a84      	ldr	r2, [pc, #528]	; (80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	ee07 3a90 	vmov	s15, r3
 800679c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ae:	4b7b      	ldr	r3, [pc, #492]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067de:	e087      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b6a      	ldr	r3, [pc, #424]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a03 	vldr	s12, [r7, #12]
 8006806:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006822:	e065      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006846:	ed97 6a03 	vldr	s12, [r7, #12]
 800684a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006866:	e043      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687a:	4b48      	ldr	r3, [pc, #288]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688a:	ed97 6a03 	vldr	s12, [r7, #12]
 800688e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068aa:	e021      	b.n	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068be:	4b37      	ldr	r3, [pc, #220]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80068f0:	4b2a      	ldr	r3, [pc, #168]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	0a5b      	lsrs	r3, r3, #9
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690a:	edd7 6a07 	vldr	s13, [r7, #28]
 800690e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006916:	ee17 2a90 	vmov	r2, s15
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800691e:	4b1f      	ldr	r3, [pc, #124]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	0c1b      	lsrs	r3, r3, #16
 8006924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006938:	edd7 6a07 	vldr	s13, [r7, #28]
 800693c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006944:	ee17 2a90 	vmov	r2, s15
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	0e1b      	lsrs	r3, r3, #24
 8006952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006966:	edd7 6a07 	vldr	s13, [r7, #28]
 800696a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006972:	ee17 2a90 	vmov	r2, s15
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800697a:	e008      	b.n	800698e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
}
 800698e:	bf00      	nop
 8006990:	3724      	adds	r7, #36	; 0x24
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
 80069a0:	03d09000 	.word	0x03d09000
 80069a4:	46000000 	.word	0x46000000
 80069a8:	4c742400 	.word	0x4c742400
 80069ac:	4a742400 	.word	0x4a742400
 80069b0:	4bbebc20 	.word	0x4bbebc20

080069b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069bc:	4ba1      	ldr	r3, [pc, #644]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80069c6:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	0d1b      	lsrs	r3, r3, #20
 80069cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069d2:	4b9c      	ldr	r3, [pc, #624]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80069de:	4b99      	ldr	r3, [pc, #612]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8111 	beq.w	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	f000 8083 	beq.w	8006b10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	f200 80a1 	bhi.w	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d056      	beq.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a1e:	e099      	b.n	8006b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a20:	4b88      	ldr	r3, [pc, #544]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02d      	beq.n	8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a2c:	4b85      	ldr	r3, [pc, #532]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a84      	ldr	r2, [pc, #528]	; (8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b7b      	ldr	r3, [pc, #492]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a86:	e087      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aca:	e065      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b59      	ldr	r3, [pc, #356]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b0e:	e043      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b48      	ldr	r3, [pc, #288]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b52:	e021      	b.n	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	0a5b      	lsrs	r3, r3, #9
 8006b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bbe:	ee17 2a90 	vmov	r2, s15
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bec:	ee17 2a90 	vmov	r2, s15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	0e1b      	lsrs	r3, r3, #24
 8006bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1a:	ee17 2a90 	vmov	r2, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c22:	e008      	b.n	8006c36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
}
 8006c36:	bf00      	nop
 8006c38:	3724      	adds	r7, #36	; 0x24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	58024400 	.word	0x58024400
 8006c48:	03d09000 	.word	0x03d09000
 8006c4c:	46000000 	.word	0x46000000
 8006c50:	4c742400 	.word	0x4c742400
 8006c54:	4a742400 	.word	0x4a742400
 8006c58:	4bbebc20 	.word	0x4bbebc20

08006c5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c6a:	4b53      	ldr	r3, [pc, #332]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d101      	bne.n	8006c7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e099      	b.n	8006dae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c7a:	4b4f      	ldr	r3, [pc, #316]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a4e      	ldr	r2, [pc, #312]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c86:	f7fb f97d 	bl	8001f84 <HAL_GetTick>
 8006c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c8c:	e008      	b.n	8006ca0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c8e:	f7fb f979 	bl	8001f84 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e086      	b.n	8006dae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ca0:	4b45      	ldr	r3, [pc, #276]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cac:	4b42      	ldr	r3, [pc, #264]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	493f      	ldr	r1, [pc, #252]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	628b      	str	r3, [r1, #40]	; 0x28
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	025b      	lsls	r3, r3, #9
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	041b      	lsls	r3, r3, #16
 8006cde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	061b      	lsls	r3, r3, #24
 8006cec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006cf0:	4931      	ldr	r1, [pc, #196]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cf6:	4b30      	ldr	r3, [pc, #192]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	492d      	ldr	r1, [pc, #180]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d08:	4b2b      	ldr	r3, [pc, #172]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f023 0220 	bic.w	r2, r3, #32
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	4928      	ldr	r1, [pc, #160]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d1a:	4b27      	ldr	r3, [pc, #156]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	4a26      	ldr	r2, [pc, #152]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d20:	f023 0310 	bic.w	r3, r3, #16
 8006d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d26:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <RCCEx_PLL2_Config+0x160>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	69d2      	ldr	r2, [r2, #28]
 8006d32:	00d2      	lsls	r2, r2, #3
 8006d34:	4920      	ldr	r1, [pc, #128]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d3a:	4b1f      	ldr	r3, [pc, #124]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d40:	f043 0310 	orr.w	r3, r3, #16
 8006d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d58:	e00f      	b.n	8006d7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d106      	bne.n	8006d6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d60:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d6c:	e005      	b.n	8006d7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d6e:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	4a11      	ldr	r2, [pc, #68]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d7a:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a0e      	ldr	r2, [pc, #56]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d86:	f7fb f8fd 	bl	8001f84 <HAL_GetTick>
 8006d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d8c:	e008      	b.n	8006da0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d8e:	f7fb f8f9 	bl	8001f84 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d901      	bls.n	8006da0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e006      	b.n	8006dae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006da0:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	58024400 	.word	0x58024400
 8006dbc:	ffff0007 	.word	0xffff0007

08006dc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dce:	4b53      	ldr	r3, [pc, #332]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d101      	bne.n	8006dde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e099      	b.n	8006f12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006dde:	4b4f      	ldr	r3, [pc, #316]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a4e      	ldr	r2, [pc, #312]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dea:	f7fb f8cb 	bl	8001f84 <HAL_GetTick>
 8006dee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006df2:	f7fb f8c7 	bl	8001f84 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e086      	b.n	8006f12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e04:	4b45      	ldr	r3, [pc, #276]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f0      	bne.n	8006df2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e10:	4b42      	ldr	r3, [pc, #264]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	051b      	lsls	r3, r3, #20
 8006e1e:	493f      	ldr	r1, [pc, #252]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	628b      	str	r3, [r1, #40]	; 0x28
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	025b      	lsls	r3, r3, #9
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	061b      	lsls	r3, r3, #24
 8006e50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e54:	4931      	ldr	r1, [pc, #196]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e5a:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	492d      	ldr	r1, [pc, #180]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e6c:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	4928      	ldr	r1, [pc, #160]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e7e:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e8a:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8e:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <RCCEx_PLL3_Config+0x160>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	69d2      	ldr	r2, [r2, #28]
 8006e96:	00d2      	lsls	r2, r2, #3
 8006e98:	4920      	ldr	r1, [pc, #128]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e9e:	4b1f      	ldr	r3, [pc, #124]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d106      	bne.n	8006ebe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006eb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ebc:	e00f      	b.n	8006ede <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d106      	bne.n	8006ed2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ec4:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4a14      	ldr	r2, [pc, #80]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006eca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ed0:	e005      	b.n	8006ede <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006edc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a0e      	ldr	r2, [pc, #56]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eea:	f7fb f84b 	bl	8001f84 <HAL_GetTick>
 8006eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ef2:	f7fb f847 	bl	8001f84 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e006      	b.n	8006f12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <RCCEx_PLL3_Config+0x15c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	58024400 	.word	0x58024400
 8006f20:	ffff0007 	.word	0xffff0007

08006f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e049      	b.n	8006fca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fa fbd6 	bl	80016fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4610      	mov	r0, r2
 8006f64:	f000 fa66 	bl	8007434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <HAL_TIM_PWM_Start+0x24>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	bf14      	ite	ne
 8006ff0:	2301      	movne	r3, #1
 8006ff2:	2300      	moveq	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e03c      	b.n	8007072 <HAL_TIM_PWM_Start+0x9e>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d109      	bne.n	8007012 <HAL_TIM_PWM_Start+0x3e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	e02f      	b.n	8007072 <HAL_TIM_PWM_Start+0x9e>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d109      	bne.n	800702c <HAL_TIM_PWM_Start+0x58>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e022      	b.n	8007072 <HAL_TIM_PWM_Start+0x9e>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b0c      	cmp	r3, #12
 8007030:	d109      	bne.n	8007046 <HAL_TIM_PWM_Start+0x72>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b01      	cmp	r3, #1
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	e015      	b.n	8007072 <HAL_TIM_PWM_Start+0x9e>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b10      	cmp	r3, #16
 800704a:	d109      	bne.n	8007060 <HAL_TIM_PWM_Start+0x8c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	bf14      	ite	ne
 8007058:	2301      	movne	r3, #1
 800705a:	2300      	moveq	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	e008      	b.n	8007072 <HAL_TIM_PWM_Start+0x9e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	bf14      	ite	ne
 800706c:	2301      	movne	r3, #1
 800706e:	2300      	moveq	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e0ab      	b.n	80071d2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <HAL_TIM_PWM_Start+0xb6>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007088:	e023      	b.n	80070d2 <HAL_TIM_PWM_Start+0xfe>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b04      	cmp	r3, #4
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Start+0xc6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007098:	e01b      	b.n	80070d2 <HAL_TIM_PWM_Start+0xfe>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Start+0xd6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a8:	e013      	b.n	80070d2 <HAL_TIM_PWM_Start+0xfe>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b0c      	cmp	r3, #12
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_PWM_Start+0xe6>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b8:	e00b      	b.n	80070d2 <HAL_TIM_PWM_Start+0xfe>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d104      	bne.n	80070ca <HAL_TIM_PWM_Start+0xf6>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c8:	e003      	b.n	80070d2 <HAL_TIM_PWM_Start+0xfe>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2201      	movs	r2, #1
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fd26 	bl	8007b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a3d      	ldr	r2, [pc, #244]	; (80071dc <HAL_TIM_PWM_Start+0x208>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <HAL_TIM_PWM_Start+0x13e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <HAL_TIM_PWM_Start+0x20c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIM_PWM_Start+0x13e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3a      	ldr	r2, [pc, #232]	; (80071e4 <HAL_TIM_PWM_Start+0x210>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_TIM_PWM_Start+0x13e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a39      	ldr	r2, [pc, #228]	; (80071e8 <HAL_TIM_PWM_Start+0x214>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIM_PWM_Start+0x13e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a37      	ldr	r2, [pc, #220]	; (80071ec <HAL_TIM_PWM_Start+0x218>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d101      	bne.n	8007116 <HAL_TIM_PWM_Start+0x142>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <HAL_TIM_PWM_Start+0x144>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800712a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <HAL_TIM_PWM_Start+0x208>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d02c      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713e:	d027      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2a      	ldr	r2, [pc, #168]	; (80071f0 <HAL_TIM_PWM_Start+0x21c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d022      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <HAL_TIM_PWM_Start+0x220>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d01d      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <HAL_TIM_PWM_Start+0x224>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d018      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1f      	ldr	r2, [pc, #124]	; (80071e0 <HAL_TIM_PWM_Start+0x20c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d013      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a23      	ldr	r2, [pc, #140]	; (80071fc <HAL_TIM_PWM_Start+0x228>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00e      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a1b      	ldr	r2, [pc, #108]	; (80071e4 <HAL_TIM_PWM_Start+0x210>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d009      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <HAL_TIM_PWM_Start+0x22c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d004      	beq.n	8007190 <HAL_TIM_PWM_Start+0x1bc>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <HAL_TIM_PWM_Start+0x230>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d115      	bne.n	80071bc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <HAL_TIM_PWM_Start+0x234>)
 8007198:	4013      	ands	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b06      	cmp	r3, #6
 80071a0:	d015      	beq.n	80071ce <HAL_TIM_PWM_Start+0x1fa>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a8:	d011      	beq.n	80071ce <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ba:	e008      	b.n	80071ce <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e000      	b.n	80071d0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40001800 	.word	0x40001800
 8007200:	4000e000 	.word	0x4000e000
 8007204:	4000e400 	.word	0x4000e400
 8007208:	00010007 	.word	0x00010007

0800720c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007226:	2302      	movs	r3, #2
 8007228:	e0ff      	b.n	800742a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b14      	cmp	r3, #20
 8007236:	f200 80f0 	bhi.w	800741a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007295 	.word	0x08007295
 8007244:	0800741b 	.word	0x0800741b
 8007248:	0800741b 	.word	0x0800741b
 800724c:	0800741b 	.word	0x0800741b
 8007250:	080072d5 	.word	0x080072d5
 8007254:	0800741b 	.word	0x0800741b
 8007258:	0800741b 	.word	0x0800741b
 800725c:	0800741b 	.word	0x0800741b
 8007260:	08007317 	.word	0x08007317
 8007264:	0800741b 	.word	0x0800741b
 8007268:	0800741b 	.word	0x0800741b
 800726c:	0800741b 	.word	0x0800741b
 8007270:	08007357 	.word	0x08007357
 8007274:	0800741b 	.word	0x0800741b
 8007278:	0800741b 	.word	0x0800741b
 800727c:	0800741b 	.word	0x0800741b
 8007280:	08007399 	.word	0x08007399
 8007284:	0800741b 	.word	0x0800741b
 8007288:	0800741b 	.word	0x0800741b
 800728c:	0800741b 	.word	0x0800741b
 8007290:	080073d9 	.word	0x080073d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f970 	bl	8007580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0208 	orr.w	r2, r2, #8
 80072ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0204 	bic.w	r2, r2, #4
 80072be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6999      	ldr	r1, [r3, #24]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	619a      	str	r2, [r3, #24]
      break;
 80072d2:	e0a5      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f9e0 	bl	80076a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6999      	ldr	r1, [r3, #24]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	021a      	lsls	r2, r3, #8
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	619a      	str	r2, [r3, #24]
      break;
 8007314:	e084      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fa49 	bl	80077b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0208 	orr.w	r2, r2, #8
 8007330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0204 	bic.w	r2, r2, #4
 8007340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69d9      	ldr	r1, [r3, #28]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	61da      	str	r2, [r3, #28]
      break;
 8007354:	e064      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fab1 	bl	80078c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69d9      	ldr	r1, [r3, #28]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	021a      	lsls	r2, r3, #8
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	61da      	str	r2, [r3, #28]
      break;
 8007396:	e043      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fafa 	bl	8007998 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0208 	orr.w	r2, r2, #8
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0204 	bic.w	r2, r2, #4
 80073c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073d6:	e023      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fb3e 	bl	8007a60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	021a      	lsls	r2, r3, #8
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007418:	e002      	b.n	8007420 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop

08007434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a44      	ldr	r2, [pc, #272]	; (8007558 <TIM_Base_SetConfig+0x124>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007452:	d00f      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a41      	ldr	r2, [pc, #260]	; (800755c <TIM_Base_SetConfig+0x128>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00b      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a40      	ldr	r2, [pc, #256]	; (8007560 <TIM_Base_SetConfig+0x12c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d007      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a3f      	ldr	r2, [pc, #252]	; (8007564 <TIM_Base_SetConfig+0x130>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_Base_SetConfig+0x40>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a3e      	ldr	r2, [pc, #248]	; (8007568 <TIM_Base_SetConfig+0x134>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a33      	ldr	r2, [pc, #204]	; (8007558 <TIM_Base_SetConfig+0x124>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d027      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007494:	d023      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a30      	ldr	r2, [pc, #192]	; (800755c <TIM_Base_SetConfig+0x128>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01f      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2f      	ldr	r2, [pc, #188]	; (8007560 <TIM_Base_SetConfig+0x12c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01b      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2e      	ldr	r2, [pc, #184]	; (8007564 <TIM_Base_SetConfig+0x130>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d017      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2d      	ldr	r2, [pc, #180]	; (8007568 <TIM_Base_SetConfig+0x134>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2c      	ldr	r2, [pc, #176]	; (800756c <TIM_Base_SetConfig+0x138>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00f      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2b      	ldr	r2, [pc, #172]	; (8007570 <TIM_Base_SetConfig+0x13c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2a      	ldr	r2, [pc, #168]	; (8007574 <TIM_Base_SetConfig+0x140>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a29      	ldr	r2, [pc, #164]	; (8007578 <TIM_Base_SetConfig+0x144>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_Base_SetConfig+0xaa>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a28      	ldr	r2, [pc, #160]	; (800757c <TIM_Base_SetConfig+0x148>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d108      	bne.n	80074f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a10      	ldr	r2, [pc, #64]	; (8007558 <TIM_Base_SetConfig+0x124>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00f      	beq.n	800753c <TIM_Base_SetConfig+0x108>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a12      	ldr	r2, [pc, #72]	; (8007568 <TIM_Base_SetConfig+0x134>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00b      	beq.n	800753c <TIM_Base_SetConfig+0x108>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a11      	ldr	r2, [pc, #68]	; (800756c <TIM_Base_SetConfig+0x138>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_Base_SetConfig+0x108>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a10      	ldr	r2, [pc, #64]	; (8007570 <TIM_Base_SetConfig+0x13c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_Base_SetConfig+0x108>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a0f      	ldr	r2, [pc, #60]	; (8007574 <TIM_Base_SetConfig+0x140>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d103      	bne.n	8007544 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	691a      	ldr	r2, [r3, #16]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	615a      	str	r2, [r3, #20]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40010000 	.word	0x40010000
 800755c:	40000400 	.word	0x40000400
 8007560:	40000800 	.word	0x40000800
 8007564:	40000c00 	.word	0x40000c00
 8007568:	40010400 	.word	0x40010400
 800756c:	40014000 	.word	0x40014000
 8007570:	40014400 	.word	0x40014400
 8007574:	40014800 	.word	0x40014800
 8007578:	4000e000 	.word	0x4000e000
 800757c:	4000e400 	.word	0x4000e400

08007580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0201 	bic.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4b37      	ldr	r3, [pc, #220]	; (8007688 <TIM_OC1_SetConfig+0x108>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f023 0302 	bic.w	r3, r3, #2
 80075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a2d      	ldr	r2, [pc, #180]	; (800768c <TIM_OC1_SetConfig+0x10c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00f      	beq.n	80075fc <TIM_OC1_SetConfig+0x7c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <TIM_OC1_SetConfig+0x110>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00b      	beq.n	80075fc <TIM_OC1_SetConfig+0x7c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a2b      	ldr	r2, [pc, #172]	; (8007694 <TIM_OC1_SetConfig+0x114>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d007      	beq.n	80075fc <TIM_OC1_SetConfig+0x7c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <TIM_OC1_SetConfig+0x118>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC1_SetConfig+0x7c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a29      	ldr	r2, [pc, #164]	; (800769c <TIM_OC1_SetConfig+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d10c      	bne.n	8007616 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f023 0308 	bic.w	r3, r3, #8
 8007602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f023 0304 	bic.w	r3, r3, #4
 8007614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a1c      	ldr	r2, [pc, #112]	; (800768c <TIM_OC1_SetConfig+0x10c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00f      	beq.n	800763e <TIM_OC1_SetConfig+0xbe>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <TIM_OC1_SetConfig+0x110>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00b      	beq.n	800763e <TIM_OC1_SetConfig+0xbe>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <TIM_OC1_SetConfig+0x114>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d007      	beq.n	800763e <TIM_OC1_SetConfig+0xbe>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <TIM_OC1_SetConfig+0x118>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d003      	beq.n	800763e <TIM_OC1_SetConfig+0xbe>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a18      	ldr	r2, [pc, #96]	; (800769c <TIM_OC1_SetConfig+0x11c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d111      	bne.n	8007662 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800764c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	621a      	str	r2, [r3, #32]
}
 800767c:	bf00      	nop
 800767e:	371c      	adds	r7, #28
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	fffeff8f 	.word	0xfffeff8f
 800768c:	40010000 	.word	0x40010000
 8007690:	40010400 	.word	0x40010400
 8007694:	40014000 	.word	0x40014000
 8007698:	40014400 	.word	0x40014400
 800769c:	40014800 	.word	0x40014800

080076a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f023 0210 	bic.w	r2, r3, #16
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4b34      	ldr	r3, [pc, #208]	; (800779c <TIM_OC2_SetConfig+0xfc>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f023 0320 	bic.w	r3, r3, #32
 80076ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a29      	ldr	r2, [pc, #164]	; (80077a0 <TIM_OC2_SetConfig+0x100>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_OC2_SetConfig+0x68>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a28      	ldr	r2, [pc, #160]	; (80077a4 <TIM_OC2_SetConfig+0x104>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d10d      	bne.n	8007724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800770e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <TIM_OC2_SetConfig+0x100>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00f      	beq.n	800774c <TIM_OC2_SetConfig+0xac>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <TIM_OC2_SetConfig+0x104>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <TIM_OC2_SetConfig+0xac>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <TIM_OC2_SetConfig+0x108>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_OC2_SetConfig+0xac>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <TIM_OC2_SetConfig+0x10c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_OC2_SetConfig+0xac>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a1a      	ldr	r2, [pc, #104]	; (80077b0 <TIM_OC2_SetConfig+0x110>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d113      	bne.n	8007774 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	621a      	str	r2, [r3, #32]
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	feff8fff 	.word	0xfeff8fff
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40010400 	.word	0x40010400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800

080077b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4b33      	ldr	r3, [pc, #204]	; (80078ac <TIM_OC3_SetConfig+0xf8>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0303 	bic.w	r3, r3, #3
 80077ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a28      	ldr	r2, [pc, #160]	; (80078b0 <TIM_OC3_SetConfig+0xfc>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC3_SetConfig+0x66>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a27      	ldr	r2, [pc, #156]	; (80078b4 <TIM_OC3_SetConfig+0x100>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d10d      	bne.n	8007836 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1d      	ldr	r2, [pc, #116]	; (80078b0 <TIM_OC3_SetConfig+0xfc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00f      	beq.n	800785e <TIM_OC3_SetConfig+0xaa>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <TIM_OC3_SetConfig+0x100>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00b      	beq.n	800785e <TIM_OC3_SetConfig+0xaa>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <TIM_OC3_SetConfig+0x104>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d007      	beq.n	800785e <TIM_OC3_SetConfig+0xaa>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <TIM_OC3_SetConfig+0x108>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_OC3_SetConfig+0xaa>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a19      	ldr	r2, [pc, #100]	; (80078c0 <TIM_OC3_SetConfig+0x10c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d113      	bne.n	8007886 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800786c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	621a      	str	r2, [r3, #32]
}
 80078a0:	bf00      	nop
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	fffeff8f 	.word	0xfffeff8f
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40014400 	.word	0x40014400
 80078c0:	40014800 	.word	0x40014800

080078c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4b24      	ldr	r3, [pc, #144]	; (8007980 <TIM_OC4_SetConfig+0xbc>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800790e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a19      	ldr	r2, [pc, #100]	; (8007984 <TIM_OC4_SetConfig+0xc0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00f      	beq.n	8007944 <TIM_OC4_SetConfig+0x80>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <TIM_OC4_SetConfig+0xc4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00b      	beq.n	8007944 <TIM_OC4_SetConfig+0x80>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a17      	ldr	r2, [pc, #92]	; (800798c <TIM_OC4_SetConfig+0xc8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d007      	beq.n	8007944 <TIM_OC4_SetConfig+0x80>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a16      	ldr	r2, [pc, #88]	; (8007990 <TIM_OC4_SetConfig+0xcc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_OC4_SetConfig+0x80>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a15      	ldr	r2, [pc, #84]	; (8007994 <TIM_OC4_SetConfig+0xd0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d109      	bne.n	8007958 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800794a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	019b      	lsls	r3, r3, #6
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	feff8fff 	.word	0xfeff8fff
 8007984:	40010000 	.word	0x40010000
 8007988:	40010400 	.word	0x40010400
 800798c:	40014000 	.word	0x40014000
 8007990:	40014400 	.word	0x40014400
 8007994:	40014800 	.word	0x40014800

08007998 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <TIM_OC5_SetConfig+0xb0>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a18      	ldr	r2, [pc, #96]	; (8007a4c <TIM_OC5_SetConfig+0xb4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00f      	beq.n	8007a0e <TIM_OC5_SetConfig+0x76>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <TIM_OC5_SetConfig+0xb8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00b      	beq.n	8007a0e <TIM_OC5_SetConfig+0x76>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <TIM_OC5_SetConfig+0xbc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <TIM_OC5_SetConfig+0x76>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <TIM_OC5_SetConfig+0xc0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d003      	beq.n	8007a0e <TIM_OC5_SetConfig+0x76>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a14      	ldr	r2, [pc, #80]	; (8007a5c <TIM_OC5_SetConfig+0xc4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d109      	bne.n	8007a22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	621a      	str	r2, [r3, #32]
}
 8007a3c:	bf00      	nop
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	fffeff8f 	.word	0xfffeff8f
 8007a4c:	40010000 	.word	0x40010000
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40014400 	.word	0x40014400
 8007a5c:	40014800 	.word	0x40014800

08007a60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <TIM_OC6_SetConfig+0xb4>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	051b      	lsls	r3, r3, #20
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <TIM_OC6_SetConfig+0xb8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00f      	beq.n	8007ad8 <TIM_OC6_SetConfig+0x78>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <TIM_OC6_SetConfig+0xbc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_OC6_SetConfig+0x78>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a17      	ldr	r2, [pc, #92]	; (8007b20 <TIM_OC6_SetConfig+0xc0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <TIM_OC6_SetConfig+0x78>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a16      	ldr	r2, [pc, #88]	; (8007b24 <TIM_OC6_SetConfig+0xc4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_OC6_SetConfig+0x78>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a15      	ldr	r2, [pc, #84]	; (8007b28 <TIM_OC6_SetConfig+0xc8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d109      	bne.n	8007aec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ade:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	029b      	lsls	r3, r3, #10
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	feff8fff 	.word	0xfeff8fff
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40010400 	.word	0x40010400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40014400 	.word	0x40014400
 8007b28:	40014800 	.word	0x40014800

08007b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 031f 	and.w	r3, r3, #31
 8007b3e:	2201      	movs	r2, #1
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1a      	ldr	r2, [r3, #32]
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	401a      	ands	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a1a      	ldr	r2, [r3, #32]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	fa01 f303 	lsl.w	r3, r1, r3
 8007b64:	431a      	orrs	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
	...

08007b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e077      	b.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a35      	ldr	r2, [pc, #212]	; (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a34      	ldr	r2, [pc, #208]	; (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d108      	bne.n	8007bd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c02:	d027      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1a      	ldr	r2, [pc, #104]	; (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a17      	ldr	r2, [pc, #92]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d10c      	bne.n	8007c6e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40010400 	.word	0x40010400
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800
 8007c9c:	40000c00 	.word	0x40000c00
 8007ca0:	40001800 	.word	0x40001800
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	4000e000 	.word	0x4000e000
 8007cac:	4000e400 	.word	0x4000e400

08007cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e087      	b.n	8007ddc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	041b      	lsls	r3, r3, #16
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a25      	ldr	r2, [pc, #148]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d106      	bne.n	8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1e      	ldr	r2, [pc, #120]	; (8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d126      	bne.n	8007dca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	051b      	lsls	r3, r3, #20
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0e      	ldr	r2, [pc, #56]	; (8007de8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d106      	bne.n	8007dca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40010400 	.word	0x40010400

08007df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e042      	b.n	8007e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d106      	bne.n	8007e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7f9 fccf 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2224      	movs	r2, #36	; 0x24
 8007e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc40 	bl	80086b8 <UART_SetConfig>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e022      	b.n	8007e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 faa0 	bl	8009390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fb27 	bl	80094d4 <UART_CheckIdleState>
 8007e86:	4603      	mov	r3, r0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d142      	bne.n	8007f2e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_UART_Receive_IT+0x24>
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e03b      	b.n	8007f30 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UART_Receive_IT+0x36>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e034      	b.n	8007f30 <HAL_UART_Receive_IT+0xa0>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <HAL_UART_Receive_IT+0xa8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01f      	beq.n	8007f1e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d018      	beq.n	8007f1e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	623b      	str	r3, [r7, #32]
 8007f0c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	69f9      	ldr	r1, [r7, #28]
 8007f10:	6a3a      	ldr	r2, [r7, #32]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e6      	bne.n	8007eec <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f001 fbe9 	bl	80096fc <UART_Start_Receive_IT>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	e000      	b.n	8007f30 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f2e:	2302      	movs	r3, #2
  }
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3728      	adds	r7, #40	; 0x28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	58000c00 	.word	0x58000c00

08007f3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b0ba      	sub	sp, #232	; 0xe8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f66:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11b      	bne.n	8007fb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d015      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d105      	bne.n	8007f9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 835a 	beq.w	800865a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
      }
      return;
 8007fae:	e354      	b.n	800865a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 811f 	beq.w	80081f8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007fba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fbe:	4b8b      	ldr	r3, [pc, #556]	; (80081ec <HAL_UART_IRQHandler+0x2b0>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007fca:	4b89      	ldr	r3, [pc, #548]	; (80081f0 <HAL_UART_IRQHandler+0x2b4>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8112 	beq.w	80081f8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d011      	beq.n	8008004 <HAL_UART_IRQHandler+0xc8>
 8007fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffa:	f043 0201 	orr.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d011      	beq.n	8008034 <HAL_UART_IRQHandler+0xf8>
 8008010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2202      	movs	r2, #2
 8008022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800802a:	f043 0204 	orr.w	r2, r3, #4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d011      	beq.n	8008064 <HAL_UART_IRQHandler+0x128>
 8008040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2204      	movs	r2, #4
 8008052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805a:	f043 0202 	orr.w	r2, r3, #2
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d017      	beq.n	80080a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d105      	bne.n	8008088 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800807c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008080:	4b5a      	ldr	r3, [pc, #360]	; (80081ec <HAL_UART_IRQHandler+0x2b0>)
 8008082:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2208      	movs	r2, #8
 800808e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008096:	f043 0208 	orr.w	r2, r3, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <HAL_UART_IRQHandler+0x196>
 80080ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 82c0 	beq.w	800865e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d013      	beq.n	8008112 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d005      	beq.n	8008136 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800812a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800812e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008132:	2b00      	cmp	r3, #0
 8008134:	d04f      	beq.n	80081d6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 fc0a 	bl	8009950 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	d141      	bne.n	80081ce <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3308      	adds	r3, #8
 8008150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3308      	adds	r3, #8
 8008172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008176:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800817a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800818e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1d9      	bne.n	800814a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d013      	beq.n	80081c6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a2:	4a14      	ldr	r2, [pc, #80]	; (80081f4 <HAL_UART_IRQHandler+0x2b8>)
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fa fea2 	bl	8002ef4 <HAL_DMA_Abort_IT>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d017      	beq.n	80081e6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	e00f      	b.n	80081e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa60 	bl	800868c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	e00b      	b.n	80081e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa5c 	bl	800868c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d4:	e007      	b.n	80081e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa58 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80081e4:	e23b      	b.n	800865e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e6:	bf00      	nop
    return;
 80081e8:	e239      	b.n	800865e <HAL_UART_IRQHandler+0x722>
 80081ea:	bf00      	nop
 80081ec:	10000001 	.word	0x10000001
 80081f0:	04000120 	.word	0x04000120
 80081f4:	08009a1d 	.word	0x08009a1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	f040 81ce 	bne.w	800859e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 0310 	and.w	r3, r3, #16
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 81c7 	beq.w	800859e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 81c0 	beq.w	800859e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2210      	movs	r2, #16
 8008224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	f040 813b 	bne.w	80084ac <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a8b      	ldr	r2, [pc, #556]	; (800846c <HAL_UART_IRQHandler+0x530>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d059      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a89      	ldr	r2, [pc, #548]	; (8008470 <HAL_UART_IRQHandler+0x534>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d053      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a87      	ldr	r2, [pc, #540]	; (8008474 <HAL_UART_IRQHandler+0x538>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d04d      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a85      	ldr	r2, [pc, #532]	; (8008478 <HAL_UART_IRQHandler+0x53c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d047      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a83      	ldr	r2, [pc, #524]	; (800847c <HAL_UART_IRQHandler+0x540>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d041      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a81      	ldr	r2, [pc, #516]	; (8008480 <HAL_UART_IRQHandler+0x544>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d03b      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a7f      	ldr	r2, [pc, #508]	; (8008484 <HAL_UART_IRQHandler+0x548>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d035      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a7d      	ldr	r2, [pc, #500]	; (8008488 <HAL_UART_IRQHandler+0x54c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d02f      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a7b      	ldr	r2, [pc, #492]	; (800848c <HAL_UART_IRQHandler+0x550>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d029      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a79      	ldr	r2, [pc, #484]	; (8008490 <HAL_UART_IRQHandler+0x554>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d023      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a77      	ldr	r2, [pc, #476]	; (8008494 <HAL_UART_IRQHandler+0x558>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d01d      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a75      	ldr	r2, [pc, #468]	; (8008498 <HAL_UART_IRQHandler+0x55c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d017      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a73      	ldr	r2, [pc, #460]	; (800849c <HAL_UART_IRQHandler+0x560>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d011      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a71      	ldr	r2, [pc, #452]	; (80084a0 <HAL_UART_IRQHandler+0x564>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a6f      	ldr	r2, [pc, #444]	; (80084a4 <HAL_UART_IRQHandler+0x568>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d005      	beq.n	80082f6 <HAL_UART_IRQHandler+0x3ba>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a6d      	ldr	r2, [pc, #436]	; (80084a8 <HAL_UART_IRQHandler+0x56c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d105      	bne.n	8008302 <HAL_UART_IRQHandler+0x3c6>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	e004      	b.n	800830c <HAL_UART_IRQHandler+0x3d0>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 81a4 	beq.w	8008662 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008320:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008324:	429a      	cmp	r2, r3
 8008326:	f080 819c 	bcs.w	8008662 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833e:	f000 8086 	beq.w	800844e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800835a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800835e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800836c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008370:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008378:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1da      	bne.n	8008342 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3308      	adds	r3, #8
 8008392:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800839c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800839e:	f023 0301 	bic.w	r3, r3, #1
 80083a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e1      	bne.n	800838c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e3      	bne.n	80083c8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800841c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800841e:	f023 0310 	bic.w	r3, r3, #16
 8008422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008430:	65bb      	str	r3, [r7, #88]	; 0x58
 8008432:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800843e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e4      	bne.n	800840e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008448:	4618      	mov	r0, r3
 800844a:	f7fa fa35 	bl	80028b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800845a:	b29b      	uxth	r3, r3
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	b29b      	uxth	r3, r3
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f91c 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008468:	e0fb      	b.n	8008662 <HAL_UART_IRQHandler+0x726>
 800846a:	bf00      	nop
 800846c:	40020010 	.word	0x40020010
 8008470:	40020028 	.word	0x40020028
 8008474:	40020040 	.word	0x40020040
 8008478:	40020058 	.word	0x40020058
 800847c:	40020070 	.word	0x40020070
 8008480:	40020088 	.word	0x40020088
 8008484:	400200a0 	.word	0x400200a0
 8008488:	400200b8 	.word	0x400200b8
 800848c:	40020410 	.word	0x40020410
 8008490:	40020428 	.word	0x40020428
 8008494:	40020440 	.word	0x40020440
 8008498:	40020458 	.word	0x40020458
 800849c:	40020470 	.word	0x40020470
 80084a0:	40020488 	.word	0x40020488
 80084a4:	400204a0 	.word	0x400204a0
 80084a8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80cc 	beq.w	8008666 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80084ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80c7 	beq.w	8008666 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084fa:	647b      	str	r3, [r7, #68]	; 0x44
 80084fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e4      	bne.n	80084d8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	623b      	str	r3, [r7, #32]
   return(result);
 800851e:	6a3a      	ldr	r2, [r7, #32]
 8008520:	4b54      	ldr	r3, [pc, #336]	; (8008674 <HAL_UART_IRQHandler+0x738>)
 8008522:	4013      	ands	r3, r2
 8008524:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3308      	adds	r3, #8
 800852e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008532:	633a      	str	r2, [r7, #48]	; 0x30
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e3      	bne.n	800850e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	60fb      	str	r3, [r7, #12]
   return(result);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0310 	bic.w	r3, r3, #16
 800856e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800857c:	61fb      	str	r3, [r7, #28]
 800857e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	69b9      	ldr	r1, [r7, #24]
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	617b      	str	r3, [r7, #20]
   return(result);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e4      	bne.n	800855a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f882 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800859c:	e063      	b.n	8008666 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00e      	beq.n	80085c8 <HAL_UART_IRQHandler+0x68c>
 80085aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d008      	beq.n	80085c8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fec9 	bl	800a358 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085c6:	e051      	b.n	800866c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d014      	beq.n	80085fe <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d03a      	beq.n	800866a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
    }
    return;
 80085fc:	e035      	b.n	800866a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d009      	beq.n	800861e <HAL_UART_IRQHandler+0x6e2>
 800860a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fa16 	bl	8009a48 <UART_EndTransmit_IT>
    return;
 800861c:	e026      	b.n	800866c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_UART_IRQHandler+0x702>
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fea2 	bl	800a380 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800863c:	e016      	b.n	800866c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d010      	beq.n	800866c <HAL_UART_IRQHandler+0x730>
 800864a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800864e:	2b00      	cmp	r3, #0
 8008650:	da0c      	bge.n	800866c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 fe8a 	bl	800a36c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008658:	e008      	b.n	800866c <HAL_UART_IRQHandler+0x730>
      return;
 800865a:	bf00      	nop
 800865c:	e006      	b.n	800866c <HAL_UART_IRQHandler+0x730>
    return;
 800865e:	bf00      	nop
 8008660:	e004      	b.n	800866c <HAL_UART_IRQHandler+0x730>
      return;
 8008662:	bf00      	nop
 8008664:	e002      	b.n	800866c <HAL_UART_IRQHandler+0x730>
      return;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <HAL_UART_IRQHandler+0x730>
    return;
 800866a:	bf00      	nop
  }
}
 800866c:	37e8      	adds	r7, #232	; 0xe8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	effffffe 	.word	0xeffffffe

08008678 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086bc:	b092      	sub	sp, #72	; 0x48
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	4313      	orrs	r3, r2
 80086de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4bbe      	ldr	r3, [pc, #760]	; (80089e0 <UART_SetConfig+0x328>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f0:	430b      	orrs	r3, r1
 80086f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4ab3      	ldr	r2, [pc, #716]	; (80089e4 <UART_SetConfig+0x32c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008720:	4313      	orrs	r3, r2
 8008722:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	4baf      	ldr	r3, [pc, #700]	; (80089e8 <UART_SetConfig+0x330>)
 800872c:	4013      	ands	r3, r2
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008734:	430b      	orrs	r3, r1
 8008736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	f023 010f 	bic.w	r1, r3, #15
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4aa6      	ldr	r2, [pc, #664]	; (80089ec <UART_SetConfig+0x334>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d177      	bne.n	8008848 <UART_SetConfig+0x190>
 8008758:	4ba5      	ldr	r3, [pc, #660]	; (80089f0 <UART_SetConfig+0x338>)
 800875a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008760:	2b28      	cmp	r3, #40	; 0x28
 8008762:	d86d      	bhi.n	8008840 <UART_SetConfig+0x188>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0xb4>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008811 	.word	0x08008811
 8008770:	08008841 	.word	0x08008841
 8008774:	08008841 	.word	0x08008841
 8008778:	08008841 	.word	0x08008841
 800877c:	08008841 	.word	0x08008841
 8008780:	08008841 	.word	0x08008841
 8008784:	08008841 	.word	0x08008841
 8008788:	08008841 	.word	0x08008841
 800878c:	08008819 	.word	0x08008819
 8008790:	08008841 	.word	0x08008841
 8008794:	08008841 	.word	0x08008841
 8008798:	08008841 	.word	0x08008841
 800879c:	08008841 	.word	0x08008841
 80087a0:	08008841 	.word	0x08008841
 80087a4:	08008841 	.word	0x08008841
 80087a8:	08008841 	.word	0x08008841
 80087ac:	08008821 	.word	0x08008821
 80087b0:	08008841 	.word	0x08008841
 80087b4:	08008841 	.word	0x08008841
 80087b8:	08008841 	.word	0x08008841
 80087bc:	08008841 	.word	0x08008841
 80087c0:	08008841 	.word	0x08008841
 80087c4:	08008841 	.word	0x08008841
 80087c8:	08008841 	.word	0x08008841
 80087cc:	08008829 	.word	0x08008829
 80087d0:	08008841 	.word	0x08008841
 80087d4:	08008841 	.word	0x08008841
 80087d8:	08008841 	.word	0x08008841
 80087dc:	08008841 	.word	0x08008841
 80087e0:	08008841 	.word	0x08008841
 80087e4:	08008841 	.word	0x08008841
 80087e8:	08008841 	.word	0x08008841
 80087ec:	08008831 	.word	0x08008831
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008841 	.word	0x08008841
 80087f8:	08008841 	.word	0x08008841
 80087fc:	08008841 	.word	0x08008841
 8008800:	08008841 	.word	0x08008841
 8008804:	08008841 	.word	0x08008841
 8008808:	08008841 	.word	0x08008841
 800880c:	08008839 	.word	0x08008839
 8008810:	2301      	movs	r3, #1
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e326      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008818:	2304      	movs	r3, #4
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e322      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008820:	2308      	movs	r3, #8
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e31e      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008828:	2310      	movs	r3, #16
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882e:	e31a      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008830:	2320      	movs	r3, #32
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e316      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e312      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008840:	2380      	movs	r3, #128	; 0x80
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e30e      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a69      	ldr	r2, [pc, #420]	; (80089f4 <UART_SetConfig+0x33c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d130      	bne.n	80088b4 <UART_SetConfig+0x1fc>
 8008852:	4b67      	ldr	r3, [pc, #412]	; (80089f0 <UART_SetConfig+0x338>)
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b05      	cmp	r3, #5
 800885c:	d826      	bhi.n	80088ac <UART_SetConfig+0x1f4>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <UART_SetConfig+0x1ac>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	0800887d 	.word	0x0800887d
 8008868:	08008885 	.word	0x08008885
 800886c:	0800888d 	.word	0x0800888d
 8008870:	08008895 	.word	0x08008895
 8008874:	0800889d 	.word	0x0800889d
 8008878:	080088a5 	.word	0x080088a5
 800887c:	2300      	movs	r3, #0
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e2f0      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008884:	2304      	movs	r3, #4
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e2ec      	b.n	8008e66 <UART_SetConfig+0x7ae>
 800888c:	2308      	movs	r3, #8
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e2e8      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008894:	2310      	movs	r3, #16
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e2e4      	b.n	8008e66 <UART_SetConfig+0x7ae>
 800889c:	2320      	movs	r3, #32
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e2e0      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80088a4:	2340      	movs	r3, #64	; 0x40
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e2dc      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b2:	e2d8      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a4f      	ldr	r2, [pc, #316]	; (80089f8 <UART_SetConfig+0x340>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d130      	bne.n	8008920 <UART_SetConfig+0x268>
 80088be:	4b4c      	ldr	r3, [pc, #304]	; (80089f0 <UART_SetConfig+0x338>)
 80088c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d826      	bhi.n	8008918 <UART_SetConfig+0x260>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <UART_SetConfig+0x218>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	080088e9 	.word	0x080088e9
 80088d4:	080088f1 	.word	0x080088f1
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	08008901 	.word	0x08008901
 80088e0:	08008909 	.word	0x08008909
 80088e4:	08008911 	.word	0x08008911
 80088e8:	2300      	movs	r3, #0
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ee:	e2ba      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e2b6      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e2b2      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e2ae      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008908:	2320      	movs	r3, #32
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e2aa      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008910:	2340      	movs	r3, #64	; 0x40
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e2a6      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e2a2      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a35      	ldr	r2, [pc, #212]	; (80089fc <UART_SetConfig+0x344>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d130      	bne.n	800898c <UART_SetConfig+0x2d4>
 800892a:	4b31      	ldr	r3, [pc, #196]	; (80089f0 <UART_SetConfig+0x338>)
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b05      	cmp	r3, #5
 8008934:	d826      	bhi.n	8008984 <UART_SetConfig+0x2cc>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <UART_SetConfig+0x284>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008955 	.word	0x08008955
 8008940:	0800895d 	.word	0x0800895d
 8008944:	08008965 	.word	0x08008965
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e284      	b.n	8008e66 <UART_SetConfig+0x7ae>
 800895c:	2304      	movs	r3, #4
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e280      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008964:	2308      	movs	r3, #8
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e27c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 800896c:	2310      	movs	r3, #16
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e278      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008974:	2320      	movs	r3, #32
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e274      	b.n	8008e66 <UART_SetConfig+0x7ae>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e270      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898a:	e26c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a1b      	ldr	r2, [pc, #108]	; (8008a00 <UART_SetConfig+0x348>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d142      	bne.n	8008a1c <UART_SetConfig+0x364>
 8008996:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <UART_SetConfig+0x338>)
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d838      	bhi.n	8008a14 <UART_SetConfig+0x35c>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0x2f0>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089d9 	.word	0x080089d9
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e24e      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e24a      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e246      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e242      	b.n	8008e66 <UART_SetConfig+0x7ae>
 80089e0:	cfff69f3 	.word	0xcfff69f3
 80089e4:	58000c00 	.word	0x58000c00
 80089e8:	11fff4ff 	.word	0x11fff4ff
 80089ec:	40011000 	.word	0x40011000
 80089f0:	58024400 	.word	0x58024400
 80089f4:	40004400 	.word	0x40004400
 80089f8:	40004800 	.word	0x40004800
 80089fc:	40004c00 	.word	0x40004c00
 8008a00:	40005000 	.word	0x40005000
 8008a04:	2320      	movs	r3, #32
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e22c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008a0c:	2340      	movs	r3, #64	; 0x40
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e228      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008a14:	2380      	movs	r3, #128	; 0x80
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e224      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4ab1      	ldr	r2, [pc, #708]	; (8008ce8 <UART_SetConfig+0x630>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d176      	bne.n	8008b14 <UART_SetConfig+0x45c>
 8008a26:	4bb1      	ldr	r3, [pc, #708]	; (8008cec <UART_SetConfig+0x634>)
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a2e:	2b28      	cmp	r3, #40	; 0x28
 8008a30:	d86c      	bhi.n	8008b0c <UART_SetConfig+0x454>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0x380>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008add 	.word	0x08008add
 8008a3c:	08008b0d 	.word	0x08008b0d
 8008a40:	08008b0d 	.word	0x08008b0d
 8008a44:	08008b0d 	.word	0x08008b0d
 8008a48:	08008b0d 	.word	0x08008b0d
 8008a4c:	08008b0d 	.word	0x08008b0d
 8008a50:	08008b0d 	.word	0x08008b0d
 8008a54:	08008b0d 	.word	0x08008b0d
 8008a58:	08008ae5 	.word	0x08008ae5
 8008a5c:	08008b0d 	.word	0x08008b0d
 8008a60:	08008b0d 	.word	0x08008b0d
 8008a64:	08008b0d 	.word	0x08008b0d
 8008a68:	08008b0d 	.word	0x08008b0d
 8008a6c:	08008b0d 	.word	0x08008b0d
 8008a70:	08008b0d 	.word	0x08008b0d
 8008a74:	08008b0d 	.word	0x08008b0d
 8008a78:	08008aed 	.word	0x08008aed
 8008a7c:	08008b0d 	.word	0x08008b0d
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b0d 	.word	0x08008b0d
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008b0d 	.word	0x08008b0d
 8008a90:	08008b0d 	.word	0x08008b0d
 8008a94:	08008b0d 	.word	0x08008b0d
 8008a98:	08008af5 	.word	0x08008af5
 8008a9c:	08008b0d 	.word	0x08008b0d
 8008aa0:	08008b0d 	.word	0x08008b0d
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008b0d 	.word	0x08008b0d
 8008aac:	08008b0d 	.word	0x08008b0d
 8008ab0:	08008b0d 	.word	0x08008b0d
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008afd 	.word	0x08008afd
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008b0d 	.word	0x08008b0d
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b0d 	.word	0x08008b0d
 8008acc:	08008b0d 	.word	0x08008b0d
 8008ad0:	08008b0d 	.word	0x08008b0d
 8008ad4:	08008b0d 	.word	0x08008b0d
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e1c0      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e1bc      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008aec:	2308      	movs	r3, #8
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e1b8      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008af4:	2310      	movs	r3, #16
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e1b4      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008afc:	2320      	movs	r3, #32
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e1b0      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e1ac      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e1a8      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a75      	ldr	r2, [pc, #468]	; (8008cf0 <UART_SetConfig+0x638>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d130      	bne.n	8008b80 <UART_SetConfig+0x4c8>
 8008b1e:	4b73      	ldr	r3, [pc, #460]	; (8008cec <UART_SetConfig+0x634>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d826      	bhi.n	8008b78 <UART_SetConfig+0x4c0>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <UART_SetConfig+0x478>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b49 	.word	0x08008b49
 8008b34:	08008b51 	.word	0x08008b51
 8008b38:	08008b59 	.word	0x08008b59
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b69 	.word	0x08008b69
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e18a      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e186      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e182      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e17e      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e17a      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e176      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b78:	2380      	movs	r3, #128	; 0x80
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e172      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a5b      	ldr	r2, [pc, #364]	; (8008cf4 <UART_SetConfig+0x63c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d130      	bne.n	8008bec <UART_SetConfig+0x534>
 8008b8a:	4b58      	ldr	r3, [pc, #352]	; (8008cec <UART_SetConfig+0x634>)
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d826      	bhi.n	8008be4 <UART_SetConfig+0x52c>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <UART_SetConfig+0x4e4>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bbd 	.word	0x08008bbd
 8008ba4:	08008bc5 	.word	0x08008bc5
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e154      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e150      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e14c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e148      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e144      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e140      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e13c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a41      	ldr	r2, [pc, #260]	; (8008cf8 <UART_SetConfig+0x640>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f040 8082 	bne.w	8008cfc <UART_SetConfig+0x644>
 8008bf8:	4b3c      	ldr	r3, [pc, #240]	; (8008cec <UART_SetConfig+0x634>)
 8008bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c00:	2b28      	cmp	r3, #40	; 0x28
 8008c02:	d86d      	bhi.n	8008ce0 <UART_SetConfig+0x628>
 8008c04:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <UART_SetConfig+0x554>)
 8008c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0a:	bf00      	nop
 8008c0c:	08008cb1 	.word	0x08008cb1
 8008c10:	08008ce1 	.word	0x08008ce1
 8008c14:	08008ce1 	.word	0x08008ce1
 8008c18:	08008ce1 	.word	0x08008ce1
 8008c1c:	08008ce1 	.word	0x08008ce1
 8008c20:	08008ce1 	.word	0x08008ce1
 8008c24:	08008ce1 	.word	0x08008ce1
 8008c28:	08008ce1 	.word	0x08008ce1
 8008c2c:	08008cb9 	.word	0x08008cb9
 8008c30:	08008ce1 	.word	0x08008ce1
 8008c34:	08008ce1 	.word	0x08008ce1
 8008c38:	08008ce1 	.word	0x08008ce1
 8008c3c:	08008ce1 	.word	0x08008ce1
 8008c40:	08008ce1 	.word	0x08008ce1
 8008c44:	08008ce1 	.word	0x08008ce1
 8008c48:	08008ce1 	.word	0x08008ce1
 8008c4c:	08008cc1 	.word	0x08008cc1
 8008c50:	08008ce1 	.word	0x08008ce1
 8008c54:	08008ce1 	.word	0x08008ce1
 8008c58:	08008ce1 	.word	0x08008ce1
 8008c5c:	08008ce1 	.word	0x08008ce1
 8008c60:	08008ce1 	.word	0x08008ce1
 8008c64:	08008ce1 	.word	0x08008ce1
 8008c68:	08008ce1 	.word	0x08008ce1
 8008c6c:	08008cc9 	.word	0x08008cc9
 8008c70:	08008ce1 	.word	0x08008ce1
 8008c74:	08008ce1 	.word	0x08008ce1
 8008c78:	08008ce1 	.word	0x08008ce1
 8008c7c:	08008ce1 	.word	0x08008ce1
 8008c80:	08008ce1 	.word	0x08008ce1
 8008c84:	08008ce1 	.word	0x08008ce1
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008cd1 	.word	0x08008cd1
 8008c90:	08008ce1 	.word	0x08008ce1
 8008c94:	08008ce1 	.word	0x08008ce1
 8008c98:	08008ce1 	.word	0x08008ce1
 8008c9c:	08008ce1 	.word	0x08008ce1
 8008ca0:	08008ce1 	.word	0x08008ce1
 8008ca4:	08008ce1 	.word	0x08008ce1
 8008ca8:	08008ce1 	.word	0x08008ce1
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e0d6      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e0d2      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e0ce      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e0ca      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e0c6      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e0c2      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e0be      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008ce8:	40011400 	.word	0x40011400
 8008cec:	58024400 	.word	0x58024400
 8008cf0:	40007800 	.word	0x40007800
 8008cf4:	40007c00 	.word	0x40007c00
 8008cf8:	40011800 	.word	0x40011800
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4aad      	ldr	r2, [pc, #692]	; (8008fb8 <UART_SetConfig+0x900>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d176      	bne.n	8008df4 <UART_SetConfig+0x73c>
 8008d06:	4bad      	ldr	r3, [pc, #692]	; (8008fbc <UART_SetConfig+0x904>)
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d0e:	2b28      	cmp	r3, #40	; 0x28
 8008d10:	d86c      	bhi.n	8008dec <UART_SetConfig+0x734>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <UART_SetConfig+0x660>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008dbd 	.word	0x08008dbd
 8008d1c:	08008ded 	.word	0x08008ded
 8008d20:	08008ded 	.word	0x08008ded
 8008d24:	08008ded 	.word	0x08008ded
 8008d28:	08008ded 	.word	0x08008ded
 8008d2c:	08008ded 	.word	0x08008ded
 8008d30:	08008ded 	.word	0x08008ded
 8008d34:	08008ded 	.word	0x08008ded
 8008d38:	08008dc5 	.word	0x08008dc5
 8008d3c:	08008ded 	.word	0x08008ded
 8008d40:	08008ded 	.word	0x08008ded
 8008d44:	08008ded 	.word	0x08008ded
 8008d48:	08008ded 	.word	0x08008ded
 8008d4c:	08008ded 	.word	0x08008ded
 8008d50:	08008ded 	.word	0x08008ded
 8008d54:	08008ded 	.word	0x08008ded
 8008d58:	08008dcd 	.word	0x08008dcd
 8008d5c:	08008ded 	.word	0x08008ded
 8008d60:	08008ded 	.word	0x08008ded
 8008d64:	08008ded 	.word	0x08008ded
 8008d68:	08008ded 	.word	0x08008ded
 8008d6c:	08008ded 	.word	0x08008ded
 8008d70:	08008ded 	.word	0x08008ded
 8008d74:	08008ded 	.word	0x08008ded
 8008d78:	08008dd5 	.word	0x08008dd5
 8008d7c:	08008ded 	.word	0x08008ded
 8008d80:	08008ded 	.word	0x08008ded
 8008d84:	08008ded 	.word	0x08008ded
 8008d88:	08008ded 	.word	0x08008ded
 8008d8c:	08008ded 	.word	0x08008ded
 8008d90:	08008ded 	.word	0x08008ded
 8008d94:	08008ded 	.word	0x08008ded
 8008d98:	08008ddd 	.word	0x08008ddd
 8008d9c:	08008ded 	.word	0x08008ded
 8008da0:	08008ded 	.word	0x08008ded
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008ded 	.word	0x08008ded
 8008dac:	08008ded 	.word	0x08008ded
 8008db0:	08008ded 	.word	0x08008ded
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008de5 	.word	0x08008de5
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e050      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008dc4:	2304      	movs	r3, #4
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dca:	e04c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008dcc:	2308      	movs	r3, #8
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd2:	e048      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008dd4:	2310      	movs	r3, #16
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dda:	e044      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008ddc:	2320      	movs	r3, #32
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de2:	e040      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008de4:	2340      	movs	r3, #64	; 0x40
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dea:	e03c      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df2:	e038      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a71      	ldr	r2, [pc, #452]	; (8008fc0 <UART_SetConfig+0x908>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d130      	bne.n	8008e60 <UART_SetConfig+0x7a8>
 8008dfe:	4b6f      	ldr	r3, [pc, #444]	; (8008fbc <UART_SetConfig+0x904>)
 8008e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	d826      	bhi.n	8008e58 <UART_SetConfig+0x7a0>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <UART_SetConfig+0x758>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008e29 	.word	0x08008e29
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e39 	.word	0x08008e39
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e49 	.word	0x08008e49
 8008e24:	08008e51 	.word	0x08008e51
 8008e28:	2302      	movs	r3, #2
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2e:	e01a      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e30:	2304      	movs	r3, #4
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e36:	e016      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e38:	2308      	movs	r3, #8
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3e:	e012      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e40:	2310      	movs	r3, #16
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e46:	e00e      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e48:	2320      	movs	r3, #32
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4e:	e00a      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e50:	2340      	movs	r3, #64	; 0x40
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e56:	e006      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e58:	2380      	movs	r3, #128	; 0x80
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5e:	e002      	b.n	8008e66 <UART_SetConfig+0x7ae>
 8008e60:	2380      	movs	r3, #128	; 0x80
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a55      	ldr	r2, [pc, #340]	; (8008fc0 <UART_SetConfig+0x908>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	f040 80f8 	bne.w	8009062 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	dc46      	bgt.n	8008f08 <UART_SetConfig+0x850>
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	db75      	blt.n	8008f6a <UART_SetConfig+0x8b2>
 8008e7e:	3b02      	subs	r3, #2
 8008e80:	2b1e      	cmp	r3, #30
 8008e82:	d872      	bhi.n	8008f6a <UART_SetConfig+0x8b2>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <UART_SetConfig+0x7d4>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008f0f 	.word	0x08008f0f
 8008e90:	08008f6b 	.word	0x08008f6b
 8008e94:	08008f17 	.word	0x08008f17
 8008e98:	08008f6b 	.word	0x08008f6b
 8008e9c:	08008f6b 	.word	0x08008f6b
 8008ea0:	08008f6b 	.word	0x08008f6b
 8008ea4:	08008f27 	.word	0x08008f27
 8008ea8:	08008f6b 	.word	0x08008f6b
 8008eac:	08008f6b 	.word	0x08008f6b
 8008eb0:	08008f6b 	.word	0x08008f6b
 8008eb4:	08008f6b 	.word	0x08008f6b
 8008eb8:	08008f6b 	.word	0x08008f6b
 8008ebc:	08008f6b 	.word	0x08008f6b
 8008ec0:	08008f6b 	.word	0x08008f6b
 8008ec4:	08008f37 	.word	0x08008f37
 8008ec8:	08008f6b 	.word	0x08008f6b
 8008ecc:	08008f6b 	.word	0x08008f6b
 8008ed0:	08008f6b 	.word	0x08008f6b
 8008ed4:	08008f6b 	.word	0x08008f6b
 8008ed8:	08008f6b 	.word	0x08008f6b
 8008edc:	08008f6b 	.word	0x08008f6b
 8008ee0:	08008f6b 	.word	0x08008f6b
 8008ee4:	08008f6b 	.word	0x08008f6b
 8008ee8:	08008f6b 	.word	0x08008f6b
 8008eec:	08008f6b 	.word	0x08008f6b
 8008ef0:	08008f6b 	.word	0x08008f6b
 8008ef4:	08008f6b 	.word	0x08008f6b
 8008ef8:	08008f6b 	.word	0x08008f6b
 8008efc:	08008f6b 	.word	0x08008f6b
 8008f00:	08008f6b 	.word	0x08008f6b
 8008f04:	08008f5d 	.word	0x08008f5d
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d02a      	beq.n	8008f62 <UART_SetConfig+0x8aa>
 8008f0c:	e02d      	b.n	8008f6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f0e:	f7fd fbe7 	bl	80066e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f14:	e02f      	b.n	8008f76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fd fbf6 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f24:	e027      	b.n	8008f76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f26:	f107 0318 	add.w	r3, r7, #24
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd fd42 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f34:	e01f      	b.n	8008f76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f36:	4b21      	ldr	r3, [pc, #132]	; (8008fbc <UART_SetConfig+0x904>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f42:	4b1e      	ldr	r3, [pc, #120]	; (8008fbc <UART_SetConfig+0x904>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	08db      	lsrs	r3, r3, #3
 8008f48:	f003 0303 	and.w	r3, r3, #3
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	; (8008fc4 <UART_SetConfig+0x90c>)
 8008f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f54:	e00f      	b.n	8008f76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f56:	4b1b      	ldr	r3, [pc, #108]	; (8008fc4 <UART_SetConfig+0x90c>)
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5a:	e00c      	b.n	8008f76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f5c:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <UART_SetConfig+0x910>)
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f60:	e009      	b.n	8008f76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f68:	e005      	b.n	8008f76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 81ee 	beq.w	800935a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	4a12      	ldr	r2, [pc, #72]	; (8008fcc <UART_SetConfig+0x914>)
 8008f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f90:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	4413      	add	r3, r2
 8008f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d305      	bcc.n	8008fae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d910      	bls.n	8008fd0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fb4:	e1d1      	b.n	800935a <UART_SetConfig+0xca2>
 8008fb6:	bf00      	nop
 8008fb8:	40011c00 	.word	0x40011c00
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	58000c00 	.word	0x58000c00
 8008fc4:	03d09000 	.word	0x03d09000
 8008fc8:	003d0900 	.word	0x003d0900
 8008fcc:	0800d478 	.word	0x0800d478
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	60fa      	str	r2, [r7, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	4ac0      	ldr	r2, [pc, #768]	; (80092e0 <UART_SetConfig+0xc28>)
 8008fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ff2:	f7f7 fba1 	bl	8000738 <__aeabi_uldivmod>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	f04f 0300 	mov.w	r3, #0
 8009006:	020b      	lsls	r3, r1, #8
 8009008:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800900c:	0202      	lsls	r2, r0, #8
 800900e:	6979      	ldr	r1, [r7, #20]
 8009010:	6849      	ldr	r1, [r1, #4]
 8009012:	0849      	lsrs	r1, r1, #1
 8009014:	2000      	movs	r0, #0
 8009016:	460c      	mov	r4, r1
 8009018:	4605      	mov	r5, r0
 800901a:	eb12 0804 	adds.w	r8, r2, r4
 800901e:	eb43 0905 	adc.w	r9, r3, r5
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	469a      	mov	sl, r3
 800902a:	4693      	mov	fp, r2
 800902c:	4652      	mov	r2, sl
 800902e:	465b      	mov	r3, fp
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 fb80 	bl	8000738 <__aeabi_uldivmod>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4613      	mov	r3, r2
 800903e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009046:	d308      	bcc.n	800905a <UART_SetConfig+0x9a2>
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800904e:	d204      	bcs.n	800905a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009056:	60da      	str	r2, [r3, #12]
 8009058:	e17f      	b.n	800935a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009060:	e17b      	b.n	800935a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800906a:	f040 80bd 	bne.w	80091e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800906e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009072:	2b20      	cmp	r3, #32
 8009074:	dc48      	bgt.n	8009108 <UART_SetConfig+0xa50>
 8009076:	2b00      	cmp	r3, #0
 8009078:	db7b      	blt.n	8009172 <UART_SetConfig+0xaba>
 800907a:	2b20      	cmp	r3, #32
 800907c:	d879      	bhi.n	8009172 <UART_SetConfig+0xaba>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0x9cc>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	0800910f 	.word	0x0800910f
 8009088:	08009117 	.word	0x08009117
 800908c:	08009173 	.word	0x08009173
 8009090:	08009173 	.word	0x08009173
 8009094:	0800911f 	.word	0x0800911f
 8009098:	08009173 	.word	0x08009173
 800909c:	08009173 	.word	0x08009173
 80090a0:	08009173 	.word	0x08009173
 80090a4:	0800912f 	.word	0x0800912f
 80090a8:	08009173 	.word	0x08009173
 80090ac:	08009173 	.word	0x08009173
 80090b0:	08009173 	.word	0x08009173
 80090b4:	08009173 	.word	0x08009173
 80090b8:	08009173 	.word	0x08009173
 80090bc:	08009173 	.word	0x08009173
 80090c0:	08009173 	.word	0x08009173
 80090c4:	0800913f 	.word	0x0800913f
 80090c8:	08009173 	.word	0x08009173
 80090cc:	08009173 	.word	0x08009173
 80090d0:	08009173 	.word	0x08009173
 80090d4:	08009173 	.word	0x08009173
 80090d8:	08009173 	.word	0x08009173
 80090dc:	08009173 	.word	0x08009173
 80090e0:	08009173 	.word	0x08009173
 80090e4:	08009173 	.word	0x08009173
 80090e8:	08009173 	.word	0x08009173
 80090ec:	08009173 	.word	0x08009173
 80090f0:	08009173 	.word	0x08009173
 80090f4:	08009173 	.word	0x08009173
 80090f8:	08009173 	.word	0x08009173
 80090fc:	08009173 	.word	0x08009173
 8009100:	08009173 	.word	0x08009173
 8009104:	08009165 	.word	0x08009165
 8009108:	2b40      	cmp	r3, #64	; 0x40
 800910a:	d02e      	beq.n	800916a <UART_SetConfig+0xab2>
 800910c:	e031      	b.n	8009172 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800910e:	f7fc fbc1 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8009112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009114:	e033      	b.n	800917e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009116:	f7fc fbd3 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 800911a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800911c:	e02f      	b.n	800917e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009122:	4618      	mov	r0, r3
 8009124:	f7fd faf2 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800912c:	e027      	b.n	800917e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800912e:	f107 0318 	add.w	r3, r7, #24
 8009132:	4618      	mov	r0, r3
 8009134:	f7fd fc3e 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800913c:	e01f      	b.n	800917e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800913e:	4b69      	ldr	r3, [pc, #420]	; (80092e4 <UART_SetConfig+0xc2c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b00      	cmp	r3, #0
 8009148:	d009      	beq.n	800915e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800914a:	4b66      	ldr	r3, [pc, #408]	; (80092e4 <UART_SetConfig+0xc2c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	08db      	lsrs	r3, r3, #3
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	4a64      	ldr	r2, [pc, #400]	; (80092e8 <UART_SetConfig+0xc30>)
 8009156:	fa22 f303 	lsr.w	r3, r2, r3
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800915c:	e00f      	b.n	800917e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800915e:	4b62      	ldr	r3, [pc, #392]	; (80092e8 <UART_SetConfig+0xc30>)
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009162:	e00c      	b.n	800917e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009164:	4b61      	ldr	r3, [pc, #388]	; (80092ec <UART_SetConfig+0xc34>)
 8009166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009168:	e009      	b.n	800917e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800916a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009170:	e005      	b.n	800917e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800917c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80ea 	beq.w	800935a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	4a55      	ldr	r2, [pc, #340]	; (80092e0 <UART_SetConfig+0xc28>)
 800918c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009190:	461a      	mov	r2, r3
 8009192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009194:	fbb3 f3f2 	udiv	r3, r3, r2
 8009198:	005a      	lsls	r2, r3, #1
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	441a      	add	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	2b0f      	cmp	r3, #15
 80091b0:	d916      	bls.n	80091e0 <UART_SetConfig+0xb28>
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b8:	d212      	bcs.n	80091e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f023 030f 	bic.w	r3, r3, #15
 80091c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091d2:	4313      	orrs	r3, r2
 80091d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	e0bc      	b.n	800935a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80091e6:	e0b8      	b.n	800935a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	dc4b      	bgt.n	8009288 <UART_SetConfig+0xbd0>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f2c0 8087 	blt.w	8009304 <UART_SetConfig+0xc4c>
 80091f6:	2b20      	cmp	r3, #32
 80091f8:	f200 8084 	bhi.w	8009304 <UART_SetConfig+0xc4c>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <UART_SetConfig+0xb4c>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	0800928f 	.word	0x0800928f
 8009208:	08009297 	.word	0x08009297
 800920c:	08009305 	.word	0x08009305
 8009210:	08009305 	.word	0x08009305
 8009214:	0800929f 	.word	0x0800929f
 8009218:	08009305 	.word	0x08009305
 800921c:	08009305 	.word	0x08009305
 8009220:	08009305 	.word	0x08009305
 8009224:	080092af 	.word	0x080092af
 8009228:	08009305 	.word	0x08009305
 800922c:	08009305 	.word	0x08009305
 8009230:	08009305 	.word	0x08009305
 8009234:	08009305 	.word	0x08009305
 8009238:	08009305 	.word	0x08009305
 800923c:	08009305 	.word	0x08009305
 8009240:	08009305 	.word	0x08009305
 8009244:	080092bf 	.word	0x080092bf
 8009248:	08009305 	.word	0x08009305
 800924c:	08009305 	.word	0x08009305
 8009250:	08009305 	.word	0x08009305
 8009254:	08009305 	.word	0x08009305
 8009258:	08009305 	.word	0x08009305
 800925c:	08009305 	.word	0x08009305
 8009260:	08009305 	.word	0x08009305
 8009264:	08009305 	.word	0x08009305
 8009268:	08009305 	.word	0x08009305
 800926c:	08009305 	.word	0x08009305
 8009270:	08009305 	.word	0x08009305
 8009274:	08009305 	.word	0x08009305
 8009278:	08009305 	.word	0x08009305
 800927c:	08009305 	.word	0x08009305
 8009280:	08009305 	.word	0x08009305
 8009284:	080092f7 	.word	0x080092f7
 8009288:	2b40      	cmp	r3, #64	; 0x40
 800928a:	d037      	beq.n	80092fc <UART_SetConfig+0xc44>
 800928c:	e03a      	b.n	8009304 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800928e:	f7fc fb01 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8009292:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009294:	e03c      	b.n	8009310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009296:	f7fc fb13 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 800929a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800929c:	e038      	b.n	8009310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800929e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fd fa32 	bl	800670c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ac:	e030      	b.n	8009310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ae:	f107 0318 	add.w	r3, r7, #24
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd fb7e 	bl	80069b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092bc:	e028      	b.n	8009310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092be:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <UART_SetConfig+0xc2c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d012      	beq.n	80092f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <UART_SetConfig+0xc2c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	08db      	lsrs	r3, r3, #3
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	4a04      	ldr	r2, [pc, #16]	; (80092e8 <UART_SetConfig+0xc30>)
 80092d6:	fa22 f303 	lsr.w	r3, r2, r3
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092dc:	e018      	b.n	8009310 <UART_SetConfig+0xc58>
 80092de:	bf00      	nop
 80092e0:	0800d478 	.word	0x0800d478
 80092e4:	58024400 	.word	0x58024400
 80092e8:	03d09000 	.word	0x03d09000
 80092ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80092f0:	4b24      	ldr	r3, [pc, #144]	; (8009384 <UART_SetConfig+0xccc>)
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f4:	e00c      	b.n	8009310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <UART_SetConfig+0xcd0>)
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fa:	e009      	b.n	8009310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009302:	e005      	b.n	8009310 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800930e:	bf00      	nop
    }

    if (pclk != 0U)
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d021      	beq.n	800935a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <UART_SetConfig+0xcd4>)
 800931c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009320:	461a      	mov	r2, r3
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	fbb3 f2f2 	udiv	r2, r3, r2
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	085b      	lsrs	r3, r3, #1
 800932e:	441a      	add	r2, r3
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	2b0f      	cmp	r3, #15
 800933e:	d909      	bls.n	8009354 <UART_SetConfig+0xc9c>
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009346:	d205      	bcs.n	8009354 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	b29a      	uxth	r2, r3
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	60da      	str	r2, [r3, #12]
 8009352:	e002      	b.n	800935a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2201      	movs	r2, #1
 800935e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2201      	movs	r2, #1
 8009366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2200      	movs	r2, #0
 800936e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2200      	movs	r2, #0
 8009374:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009376:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800937a:	4618      	mov	r0, r3
 800937c:	3748      	adds	r7, #72	; 0x48
 800937e:	46bd      	mov	sp, r7
 8009380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009384:	03d09000 	.word	0x03d09000
 8009388:	003d0900 	.word	0x003d0900
 800938c:	0800d478 	.word	0x0800d478

08009390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01a      	beq.n	80094a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800948e:	d10a      	bne.n	80094a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	605a      	str	r2, [r3, #4]
  }
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af02      	add	r7, sp, #8
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094e4:	f7f8 fd4e 	bl	8001f84 <HAL_GetTick>
 80094e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	d10e      	bne.n	8009516 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f82f 	bl	800956a <UART_WaitOnFlagUntilTimeout>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e025      	b.n	8009562 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b04      	cmp	r3, #4
 8009522:	d10e      	bne.n	8009542 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f819 	bl	800956a <UART_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e00f      	b.n	8009562 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b09c      	sub	sp, #112	; 0x70
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	603b      	str	r3, [r7, #0]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800957a:	e0a9      	b.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800957c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800957e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009582:	f000 80a5 	beq.w	80096d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009586:	f7f8 fcfd 	bl	8001f84 <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009592:	429a      	cmp	r2, r3
 8009594:	d302      	bcc.n	800959c <UART_WaitOnFlagUntilTimeout+0x32>
 8009596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009598:	2b00      	cmp	r3, #0
 800959a:	d140      	bne.n	800961e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095b0:	667b      	str	r3, [r7, #100]	; 0x64
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e6      	bne.n	800959c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	663b      	str	r3, [r7, #96]	; 0x60
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80095f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80095fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e069      	b.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d051      	beq.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800963a:	d149      	bne.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009644:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800965a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009664:	637b      	str	r3, [r7, #52]	; 0x34
 8009666:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800966a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e6      	bne.n	8009646 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3308      	adds	r3, #8
 800967e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	613b      	str	r3, [r7, #16]
   return(result);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009698:	623a      	str	r2, [r7, #32]
 800969a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	69f9      	ldr	r1, [r7, #28]
 800969e:	6a3a      	ldr	r2, [r7, #32]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e5      	bne.n	8009678 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e010      	b.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69da      	ldr	r2, [r3, #28]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4013      	ands	r3, r2
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	429a      	cmp	r2, r3
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	f43f af46 	beq.w	800957c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3770      	adds	r7, #112	; 0x70
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b0a3      	sub	sp, #140	; 0x8c
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	88fa      	ldrh	r2, [r7, #6]
 8009714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	88fa      	ldrh	r2, [r7, #6]
 800971c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972e:	d10e      	bne.n	800974e <UART_Start_Receive_IT+0x52>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d105      	bne.n	8009744 <UART_Start_Receive_IT+0x48>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800973e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009742:	e02d      	b.n	80097a0 <UART_Start_Receive_IT+0xa4>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	22ff      	movs	r2, #255	; 0xff
 8009748:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800974c:	e028      	b.n	80097a0 <UART_Start_Receive_IT+0xa4>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <UART_Start_Receive_IT+0x76>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d104      	bne.n	8009768 <UART_Start_Receive_IT+0x6c>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	22ff      	movs	r2, #255	; 0xff
 8009762:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009766:	e01b      	b.n	80097a0 <UART_Start_Receive_IT+0xa4>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	227f      	movs	r2, #127	; 0x7f
 800976c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009770:	e016      	b.n	80097a0 <UART_Start_Receive_IT+0xa4>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800977a:	d10d      	bne.n	8009798 <UART_Start_Receive_IT+0x9c>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d104      	bne.n	800978e <UART_Start_Receive_IT+0x92>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	227f      	movs	r2, #127	; 0x7f
 8009788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800978c:	e008      	b.n	80097a0 <UART_Start_Receive_IT+0xa4>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	223f      	movs	r2, #63	; 0x3f
 8009792:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009796:	e003      	b.n	80097a0 <UART_Start_Receive_IT+0xa4>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2222      	movs	r2, #34	; 0x22
 80097ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80097c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3308      	adds	r3, #8
 80097d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80097d4:	673a      	str	r2, [r7, #112]	; 0x70
 80097d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80097da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80097e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e3      	bne.n	80097b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097f0:	d153      	bne.n	800989a <UART_Start_Receive_IT+0x19e>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097f8:	88fa      	ldrh	r2, [r7, #6]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d34d      	bcc.n	800989a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009806:	d107      	bne.n	8009818 <UART_Start_Receive_IT+0x11c>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a4b      	ldr	r2, [pc, #300]	; (8009940 <UART_Start_Receive_IT+0x244>)
 8009814:	671a      	str	r2, [r3, #112]	; 0x70
 8009816:	e002      	b.n	800981e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4a4a      	ldr	r2, [pc, #296]	; (8009944 <UART_Start_Receive_IT+0x248>)
 800981c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d01a      	beq.n	8009864 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009852:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009856:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800985e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e4      	bne.n	800982e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800987a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3308      	adds	r3, #8
 8009882:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009884:	64ba      	str	r2, [r7, #72]	; 0x48
 8009886:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800988a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e5      	bne.n	8009864 <UART_Start_Receive_IT+0x168>
 8009898:	e04a      	b.n	8009930 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a2:	d107      	bne.n	80098b4 <UART_Start_Receive_IT+0x1b8>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4a26      	ldr	r2, [pc, #152]	; (8009948 <UART_Start_Receive_IT+0x24c>)
 80098b0:	671a      	str	r2, [r3, #112]	; 0x70
 80098b2:	e002      	b.n	80098ba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4a25      	ldr	r2, [pc, #148]	; (800994c <UART_Start_Receive_IT+0x250>)
 80098b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d019      	beq.n	80098fe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80098de:	677b      	str	r3, [r7, #116]	; 0x74
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098e8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e6      	bne.n	80098ca <UART_Start_Receive_IT+0x1ce>
 80098fc:	e018      	b.n	8009930 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	613b      	str	r3, [r7, #16]
   return(result);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	f043 0320 	orr.w	r3, r3, #32
 8009912:	67bb      	str	r3, [r7, #120]	; 0x78
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800991c:	623b      	str	r3, [r7, #32]
 800991e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	69f9      	ldr	r1, [r7, #28]
 8009922:	6a3a      	ldr	r2, [r7, #32]
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	61bb      	str	r3, [r7, #24]
   return(result);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e6      	bne.n	80098fe <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	378c      	adds	r7, #140	; 0x8c
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	0800a059 	.word	0x0800a059
 8009944:	08009d61 	.word	0x08009d61
 8009948:	08009bff 	.word	0x08009bff
 800994c:	08009a9f 	.word	0x08009a9f

08009950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b095      	sub	sp, #84	; 0x54
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800996c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
 8009978:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800997c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e6      	bne.n	8009958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3308      	adds	r3, #8
 8009990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	61fb      	str	r3, [r7, #28]
   return(result);
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	4b1e      	ldr	r3, [pc, #120]	; (8009a18 <UART_EndRxTransfer+0xc8>)
 800999e:	4013      	ands	r3, r2
 80099a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3308      	adds	r3, #8
 80099a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e5      	bne.n	800998a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d118      	bne.n	80099f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f023 0310 	bic.w	r3, r3, #16
 80099da:	647b      	str	r3, [r7, #68]	; 0x44
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6979      	ldr	r1, [r7, #20]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	613b      	str	r3, [r7, #16]
   return(result);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e6      	bne.n	80099c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009a0c:	bf00      	nop
 8009a0e:	3754      	adds	r7, #84	; 0x54
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	effffffe 	.word	0xeffffffe

08009a1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7fe fe26 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a40:	bf00      	nop
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	61bb      	str	r3, [r7, #24]
 8009a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	6979      	ldr	r1, [r7, #20]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e6      	bne.n	8009a50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7fe fdf1 	bl	8008678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a96:	bf00      	nop
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b096      	sub	sp, #88	; 0x58
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009aac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab6:	2b22      	cmp	r3, #34	; 0x22
 8009ab8:	f040 8095 	bne.w	8009be6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ac6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009aca:	b2d9      	uxtb	r1, r3
 8009acc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad6:	400a      	ands	r2, r1
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d178      	bne.n	8009bf6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b18:	653b      	str	r3, [r7, #80]	; 0x50
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b22:	647b      	str	r3, [r7, #68]	; 0x44
 8009b24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e6      	bne.n	8009b04 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	623b      	str	r3, [r7, #32]
   return(result);
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	f023 0301 	bic.w	r3, r3, #1
 8009b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3308      	adds	r3, #8
 8009b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b56:	633a      	str	r2, [r7, #48]	; 0x30
 8009b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e5      	bne.n	8009b36 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d12e      	bne.n	8009bde <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba4:	61fb      	str	r3, [r7, #28]
 8009ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e6      	bne.n	8009b86 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	2b10      	cmp	r3, #16
 8009bc4:	d103      	bne.n	8009bce <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2210      	movs	r2, #16
 8009bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7fe fd62 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bdc:	e00b      	b.n	8009bf6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7f7 fb4a 	bl	8001278 <HAL_UART_RxCpltCallback>
}
 8009be4:	e007      	b.n	8009bf6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699a      	ldr	r2, [r3, #24]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0208 	orr.w	r2, r2, #8
 8009bf4:	619a      	str	r2, [r3, #24]
}
 8009bf6:	bf00      	nop
 8009bf8:	3758      	adds	r7, #88	; 0x58
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b096      	sub	sp, #88	; 0x58
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c16:	2b22      	cmp	r3, #34	; 0x22
 8009c18:	f040 8095 	bne.w	8009d46 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c2c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009c30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c34:	4013      	ands	r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c40:	1c9a      	adds	r2, r3, #2
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d178      	bne.n	8009d56 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c82:	643b      	str	r3, [r7, #64]	; 0x40
 8009c84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e6      	bne.n	8009c64 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3308      	adds	r3, #8
 8009c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	f023 0301 	bic.w	r3, r3, #1
 8009cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e5      	bne.n	8009c96 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d12e      	bne.n	8009d3e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f023 0310 	bic.w	r3, r3, #16
 8009cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6979      	ldr	r1, [r7, #20]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	613b      	str	r3, [r7, #16]
   return(result);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69db      	ldr	r3, [r3, #28]
 8009d1e:	f003 0310 	and.w	r3, r3, #16
 8009d22:	2b10      	cmp	r3, #16
 8009d24:	d103      	bne.n	8009d2e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7fe fcb2 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d3c:	e00b      	b.n	8009d56 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7f7 fa9a 	bl	8001278 <HAL_UART_RxCpltCallback>
}
 8009d44:	e007      	b.n	8009d56 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0208 	orr.w	r2, r2, #8
 8009d54:	619a      	str	r2, [r3, #24]
}
 8009d56:	bf00      	nop
 8009d58:	3758      	adds	r7, #88	; 0x58
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b0a6      	sub	sp, #152	; 0x98
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d6e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d96:	2b22      	cmp	r3, #34	; 0x22
 8009d98:	f040 814d 	bne.w	800a036 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009da2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009da6:	e0f4      	b.n	8009f92 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009db2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009db6:	b2d9      	uxtb	r1, r3
 8009db8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc2:	400a      	ands	r2, r1
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d053      	beq.n	8009ea2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d011      	beq.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00b      	beq.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2201      	movs	r2, #1
 8009e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e20:	f043 0201 	orr.w	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d011      	beq.n	8009e5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2202      	movs	r2, #2
 8009e48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e50:	f043 0204 	orr.w	r2, r3, #4
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d011      	beq.n	8009e8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00b      	beq.n	8009e8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2204      	movs	r2, #4
 8009e78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e80:	f043 0202 	orr.w	r2, r3, #2
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fe fbf9 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d171      	bne.n	8009f92 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ed0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ed2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009ed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e4      	bne.n	8009eae <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eee:	e853 3f00 	ldrex	r3, [r3]
 8009ef2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ef6:	4b56      	ldr	r3, [pc, #344]	; (800a050 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f04:	657a      	str	r2, [r7, #84]	; 0x54
 8009f06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f0c:	e841 2300 	strex	r3, r2, [r1]
 8009f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1e5      	bne.n	8009ee4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d12e      	bne.n	8009f8c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	f023 0310 	bic.w	r3, r3, #16
 8009f48:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f52:	643b      	str	r3, [r7, #64]	; 0x40
 8009f54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e6      	bne.n	8009f34 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	f003 0310 	and.w	r3, r3, #16
 8009f70:	2b10      	cmp	r3, #16
 8009f72:	d103      	bne.n	8009f7c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2210      	movs	r2, #16
 8009f7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7fe fb8b 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
 8009f8a:	e002      	b.n	8009f92 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7f7 f973 	bl	8001278 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d006      	beq.n	8009fa8 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f47f af00 	bne.w	8009da8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fb2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d045      	beq.n	800a046 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d23e      	bcs.n	800a046 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3308      	adds	r3, #8
 8009fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fde:	673b      	str	r3, [r7, #112]	; 0x70
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e5      	bne.n	8009fc8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a15      	ldr	r2, [pc, #84]	; (800a054 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a000:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	e853 3f00 	ldrex	r3, [r3]
 800a00e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f043 0320 	orr.w	r3, r3, #32
 800a016:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	461a      	mov	r2, r3
 800a01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6979      	ldr	r1, [r7, #20]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	613b      	str	r3, [r7, #16]
   return(result);
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e6      	bne.n	800a002 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a034:	e007      	b.n	800a046 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	699a      	ldr	r2, [r3, #24]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f042 0208 	orr.w	r2, r2, #8
 800a044:	619a      	str	r2, [r3, #24]
}
 800a046:	bf00      	nop
 800a048:	3798      	adds	r7, #152	; 0x98
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	effffffe 	.word	0xeffffffe
 800a054:	08009a9f 	.word	0x08009a9f

0800a058 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b0a8      	sub	sp, #160	; 0xa0
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a066:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08e:	2b22      	cmp	r3, #34	; 0x22
 800a090:	f040 8151 	bne.w	800a336 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a09a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a09e:	e0f8      	b.n	800a292 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0b2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a0b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c8:	1c9a      	adds	r2, r3, #2
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d053      	beq.n	800a19e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d011      	beq.n	800a126 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00b      	beq.n	800a126 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2201      	movs	r2, #1
 800a114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a11c:	f043 0201 	orr.w	r2, r3, #1
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d011      	beq.n	800a156 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2202      	movs	r2, #2
 800a144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a14c:	f043 0204 	orr.w	r2, r3, #4
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d011      	beq.n	800a186 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a162:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2204      	movs	r2, #4
 800a174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a17c:	f043 0202 	orr.w	r2, r3, #2
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fe fa7b 	bl	800868c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d173      	bne.n	800a292 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1ce:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e4      	bne.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1f2:	4b57      	ldr	r3, [pc, #348]	; (800a350 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a204:	65ba      	str	r2, [r7, #88]	; 0x58
 800a206:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a20a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e3      	bne.n	800a1e0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2220      	movs	r2, #32
 800a21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d12e      	bne.n	800a28c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a244:	f023 0310 	bic.w	r3, r3, #16
 800a248:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a252:	647b      	str	r3, [r7, #68]	; 0x44
 800a254:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e6      	bne.n	800a234 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	2b10      	cmp	r3, #16
 800a272:	d103      	bne.n	800a27c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2210      	movs	r2, #16
 800a27a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7fe fa0b 	bl	80086a0 <HAL_UARTEx_RxEventCallback>
 800a28a:	e002      	b.n	800a292 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7f6 fff3 	bl	8001278 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a292:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a296:	2b00      	cmp	r3, #0
 800a298:	d006      	beq.n	800a2a8 <UART_RxISR_16BIT_FIFOEN+0x250>
 800a29a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f47f aefc 	bne.w	800a0a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2ae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2b2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d045      	beq.n	800a346 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a2c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d23e      	bcs.n	800a346 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2de:	677b      	str	r3, [r7, #116]	; 0x74
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2e8:	633a      	str	r2, [r7, #48]	; 0x30
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e5      	bne.n	800a2c8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a15      	ldr	r2, [pc, #84]	; (800a354 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a300:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f043 0320 	orr.w	r3, r3, #32
 800a316:	673b      	str	r3, [r7, #112]	; 0x70
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	461a      	mov	r2, r3
 800a31e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a324:	69b9      	ldr	r1, [r7, #24]
 800a326:	69fa      	ldr	r2, [r7, #28]
 800a328:	e841 2300 	strex	r3, r2, [r1]
 800a32c:	617b      	str	r3, [r7, #20]
   return(result);
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e6      	bne.n	800a302 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a334:	e007      	b.n	800a346 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	699a      	ldr	r2, [r3, #24]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0208 	orr.w	r2, r2, #8
 800a344:	619a      	str	r2, [r3, #24]
}
 800a346:	bf00      	nop
 800a348:	37a0      	adds	r7, #160	; 0xa0
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	effffffe 	.word	0xeffffffe
 800a354:	08009bff 	.word	0x08009bff

0800a358 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e027      	b.n	800a3fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2224      	movs	r2, #36	; 0x24
 800a3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e02d      	b.n	800a47a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2224      	movs	r2, #36	; 0x24
 800a42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0201 	bic.w	r2, r2, #1
 800a444:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f850 	bl	800a500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a496:	2302      	movs	r3, #2
 800a498:	e02d      	b.n	800a4f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2224      	movs	r2, #36	; 0x24
 800a4a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 0201 	bic.w	r2, r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f812 	bl	800a500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d108      	bne.n	800a522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a520:	e031      	b.n	800a586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a522:	2310      	movs	r3, #16
 800a524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a526:	2310      	movs	r3, #16
 800a528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	0e5b      	lsrs	r3, r3, #25
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0307 	and.w	r3, r3, #7
 800a538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	0f5b      	lsrs	r3, r3, #29
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0307 	and.w	r3, r3, #7
 800a548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	7b3a      	ldrb	r2, [r7, #12]
 800a54e:	4911      	ldr	r1, [pc, #68]	; (800a594 <UARTEx_SetNbDataToProcess+0x94>)
 800a550:	5c8a      	ldrb	r2, [r1, r2]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a556:	7b3a      	ldrb	r2, [r7, #12]
 800a558:	490f      	ldr	r1, [pc, #60]	; (800a598 <UARTEx_SetNbDataToProcess+0x98>)
 800a55a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a55c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a560:	b29a      	uxth	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	7b7a      	ldrb	r2, [r7, #13]
 800a56c:	4909      	ldr	r1, [pc, #36]	; (800a594 <UARTEx_SetNbDataToProcess+0x94>)
 800a56e:	5c8a      	ldrb	r2, [r1, r2]
 800a570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a574:	7b7a      	ldrb	r2, [r7, #13]
 800a576:	4908      	ldr	r1, [pc, #32]	; (800a598 <UARTEx_SetNbDataToProcess+0x98>)
 800a578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a57a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a586:	bf00      	nop
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	0800d490 	.word	0x0800d490
 800a598:	0800d498 	.word	0x0800d498

0800a59c <atof>:
 800a59c:	2100      	movs	r1, #0
 800a59e:	f000 be1d 	b.w	800b1dc <strtod>

0800a5a2 <atoi>:
 800a5a2:	220a      	movs	r2, #10
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	f000 bea7 	b.w	800b2f8 <strtol>
	...

0800a5ac <__errno>:
 800a5ac:	4b01      	ldr	r3, [pc, #4]	; (800a5b4 <__errno+0x8>)
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	24000014 	.word	0x24000014

0800a5b8 <__libc_init_array>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4d0d      	ldr	r5, [pc, #52]	; (800a5f0 <__libc_init_array+0x38>)
 800a5bc:	4c0d      	ldr	r4, [pc, #52]	; (800a5f4 <__libc_init_array+0x3c>)
 800a5be:	1b64      	subs	r4, r4, r5
 800a5c0:	10a4      	asrs	r4, r4, #2
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d109      	bne.n	800a5dc <__libc_init_array+0x24>
 800a5c8:	4d0b      	ldr	r5, [pc, #44]	; (800a5f8 <__libc_init_array+0x40>)
 800a5ca:	4c0c      	ldr	r4, [pc, #48]	; (800a5fc <__libc_init_array+0x44>)
 800a5cc:	f002 ff28 	bl	800d420 <_init>
 800a5d0:	1b64      	subs	r4, r4, r5
 800a5d2:	10a4      	asrs	r4, r4, #2
 800a5d4:	2600      	movs	r6, #0
 800a5d6:	42a6      	cmp	r6, r4
 800a5d8:	d105      	bne.n	800a5e6 <__libc_init_array+0x2e>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e0:	4798      	blx	r3
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__libc_init_array+0xc>
 800a5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ea:	4798      	blx	r3
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	e7f2      	b.n	800a5d6 <__libc_init_array+0x1e>
 800a5f0:	0800d8d4 	.word	0x0800d8d4
 800a5f4:	0800d8d4 	.word	0x0800d8d4
 800a5f8:	0800d8d4 	.word	0x0800d8d4
 800a5fc:	0800d8d8 	.word	0x0800d8d8

0800a600 <memset>:
 800a600:	4402      	add	r2, r0
 800a602:	4603      	mov	r3, r0
 800a604:	4293      	cmp	r3, r2
 800a606:	d100      	bne.n	800a60a <memset+0xa>
 800a608:	4770      	bx	lr
 800a60a:	f803 1b01 	strb.w	r1, [r3], #1
 800a60e:	e7f9      	b.n	800a604 <memset+0x4>

0800a610 <strncpy>:
 800a610:	b510      	push	{r4, lr}
 800a612:	3901      	subs	r1, #1
 800a614:	4603      	mov	r3, r0
 800a616:	b132      	cbz	r2, 800a626 <strncpy+0x16>
 800a618:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a61c:	f803 4b01 	strb.w	r4, [r3], #1
 800a620:	3a01      	subs	r2, #1
 800a622:	2c00      	cmp	r4, #0
 800a624:	d1f7      	bne.n	800a616 <strncpy+0x6>
 800a626:	441a      	add	r2, r3
 800a628:	2100      	movs	r1, #0
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d100      	bne.n	800a630 <strncpy+0x20>
 800a62e:	bd10      	pop	{r4, pc}
 800a630:	f803 1b01 	strb.w	r1, [r3], #1
 800a634:	e7f9      	b.n	800a62a <strncpy+0x1a>

0800a636 <sulp>:
 800a636:	b570      	push	{r4, r5, r6, lr}
 800a638:	4604      	mov	r4, r0
 800a63a:	460d      	mov	r5, r1
 800a63c:	4616      	mov	r6, r2
 800a63e:	ec45 4b10 	vmov	d0, r4, r5
 800a642:	f001 fd65 	bl	800c110 <__ulp>
 800a646:	b17e      	cbz	r6, 800a668 <sulp+0x32>
 800a648:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a64c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a650:	2b00      	cmp	r3, #0
 800a652:	dd09      	ble.n	800a668 <sulp+0x32>
 800a654:	051b      	lsls	r3, r3, #20
 800a656:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a65a:	2000      	movs	r0, #0
 800a65c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a660:	ec41 0b17 	vmov	d7, r0, r1
 800a664:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	0000      	movs	r0, r0
 800a66c:	0000      	movs	r0, r0
	...

0800a670 <_strtod_l>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	ed2d 8b0e 	vpush	{d8-d14}
 800a678:	b097      	sub	sp, #92	; 0x5c
 800a67a:	461f      	mov	r7, r3
 800a67c:	2300      	movs	r3, #0
 800a67e:	9312      	str	r3, [sp, #72]	; 0x48
 800a680:	4ba1      	ldr	r3, [pc, #644]	; (800a908 <_strtod_l+0x298>)
 800a682:	920d      	str	r2, [sp, #52]	; 0x34
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	9307      	str	r3, [sp, #28]
 800a688:	4604      	mov	r4, r0
 800a68a:	4618      	mov	r0, r3
 800a68c:	468b      	mov	fp, r1
 800a68e:	f7f5 fe3f 	bl	8000310 <strlen>
 800a692:	f04f 0800 	mov.w	r8, #0
 800a696:	4605      	mov	r5, r0
 800a698:	f04f 0900 	mov.w	r9, #0
 800a69c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a6a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6a2:	7813      	ldrb	r3, [r2, #0]
 800a6a4:	2b2b      	cmp	r3, #43	; 0x2b
 800a6a6:	d04d      	beq.n	800a744 <_strtod_l+0xd4>
 800a6a8:	d83a      	bhi.n	800a720 <_strtod_l+0xb0>
 800a6aa:	2b0d      	cmp	r3, #13
 800a6ac:	d833      	bhi.n	800a716 <_strtod_l+0xa6>
 800a6ae:	2b08      	cmp	r3, #8
 800a6b0:	d833      	bhi.n	800a71a <_strtod_l+0xaa>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d03d      	beq.n	800a732 <_strtod_l+0xc2>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	9308      	str	r3, [sp, #32]
 800a6ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a6bc:	7833      	ldrb	r3, [r6, #0]
 800a6be:	2b30      	cmp	r3, #48	; 0x30
 800a6c0:	f040 80b0 	bne.w	800a824 <_strtod_l+0x1b4>
 800a6c4:	7873      	ldrb	r3, [r6, #1]
 800a6c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6ca:	2b58      	cmp	r3, #88	; 0x58
 800a6cc:	d167      	bne.n	800a79e <_strtod_l+0x12e>
 800a6ce:	9b08      	ldr	r3, [sp, #32]
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	ab12      	add	r3, sp, #72	; 0x48
 800a6d4:	9702      	str	r7, [sp, #8]
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	4a8c      	ldr	r2, [pc, #560]	; (800a90c <_strtod_l+0x29c>)
 800a6da:	ab13      	add	r3, sp, #76	; 0x4c
 800a6dc:	a911      	add	r1, sp, #68	; 0x44
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 fe7c 	bl	800b3dc <__gethex>
 800a6e4:	f010 0507 	ands.w	r5, r0, #7
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	d005      	beq.n	800a6f8 <_strtod_l+0x88>
 800a6ec:	2d06      	cmp	r5, #6
 800a6ee:	d12b      	bne.n	800a748 <_strtod_l+0xd8>
 800a6f0:	3601      	adds	r6, #1
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9611      	str	r6, [sp, #68]	; 0x44
 800a6f6:	9308      	str	r3, [sp, #32]
 800a6f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f040 854e 	bne.w	800b19c <_strtod_l+0xb2c>
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	b1e3      	cbz	r3, 800a73e <_strtod_l+0xce>
 800a704:	ec49 8b17 	vmov	d7, r8, r9
 800a708:	eeb1 0b47 	vneg.f64	d0, d7
 800a70c:	b017      	add	sp, #92	; 0x5c
 800a70e:	ecbd 8b0e 	vpop	{d8-d14}
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	2b20      	cmp	r3, #32
 800a718:	d1cd      	bne.n	800a6b6 <_strtod_l+0x46>
 800a71a:	3201      	adds	r2, #1
 800a71c:	9211      	str	r2, [sp, #68]	; 0x44
 800a71e:	e7bf      	b.n	800a6a0 <_strtod_l+0x30>
 800a720:	2b2d      	cmp	r3, #45	; 0x2d
 800a722:	d1c8      	bne.n	800a6b6 <_strtod_l+0x46>
 800a724:	2301      	movs	r3, #1
 800a726:	9308      	str	r3, [sp, #32]
 800a728:	1c53      	adds	r3, r2, #1
 800a72a:	9311      	str	r3, [sp, #68]	; 0x44
 800a72c:	7853      	ldrb	r3, [r2, #1]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1c3      	bne.n	800a6ba <_strtod_l+0x4a>
 800a732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a734:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f040 852d 	bne.w	800b198 <_strtod_l+0xb28>
 800a73e:	ec49 8b10 	vmov	d0, r8, r9
 800a742:	e7e3      	b.n	800a70c <_strtod_l+0x9c>
 800a744:	2300      	movs	r3, #0
 800a746:	e7ee      	b.n	800a726 <_strtod_l+0xb6>
 800a748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a74a:	b13a      	cbz	r2, 800a75c <_strtod_l+0xec>
 800a74c:	2135      	movs	r1, #53	; 0x35
 800a74e:	a814      	add	r0, sp, #80	; 0x50
 800a750:	f001 fde6 	bl	800c320 <__copybits>
 800a754:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a756:	4620      	mov	r0, r4
 800a758:	f001 f9a8 	bl	800baac <_Bfree>
 800a75c:	3d01      	subs	r5, #1
 800a75e:	2d04      	cmp	r5, #4
 800a760:	d806      	bhi.n	800a770 <_strtod_l+0x100>
 800a762:	e8df f005 	tbb	[pc, r5]
 800a766:	030a      	.short	0x030a
 800a768:	1714      	.short	0x1714
 800a76a:	0a          	.byte	0x0a
 800a76b:	00          	.byte	0x00
 800a76c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a770:	073f      	lsls	r7, r7, #28
 800a772:	d5c1      	bpl.n	800a6f8 <_strtod_l+0x88>
 800a774:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a778:	e7be      	b.n	800a6f8 <_strtod_l+0x88>
 800a77a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a77e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a780:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a784:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a788:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a78c:	e7f0      	b.n	800a770 <_strtod_l+0x100>
 800a78e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800a910 <_strtod_l+0x2a0>
 800a792:	e7ed      	b.n	800a770 <_strtod_l+0x100>
 800a794:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a798:	f04f 38ff 	mov.w	r8, #4294967295
 800a79c:	e7e8      	b.n	800a770 <_strtod_l+0x100>
 800a79e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	9211      	str	r2, [sp, #68]	; 0x44
 800a7a4:	785b      	ldrb	r3, [r3, #1]
 800a7a6:	2b30      	cmp	r3, #48	; 0x30
 800a7a8:	d0f9      	beq.n	800a79e <_strtod_l+0x12e>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0a4      	beq.n	800a6f8 <_strtod_l+0x88>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f04f 0a00 	mov.w	sl, #0
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a7be:	f8cd a018 	str.w	sl, [sp, #24]
 800a7c2:	220a      	movs	r2, #10
 800a7c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a7c6:	7807      	ldrb	r7, [r0, #0]
 800a7c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a7cc:	b2d9      	uxtb	r1, r3
 800a7ce:	2909      	cmp	r1, #9
 800a7d0:	d92a      	bls.n	800a828 <_strtod_l+0x1b8>
 800a7d2:	9907      	ldr	r1, [sp, #28]
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	f001 feab 	bl	800c530 <strncmp>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d033      	beq.n	800a846 <_strtod_l+0x1d6>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	9b06      	ldr	r3, [sp, #24]
 800a7e2:	463a      	mov	r2, r7
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	2a65      	cmp	r2, #101	; 0x65
 800a7ea:	d001      	beq.n	800a7f0 <_strtod_l+0x180>
 800a7ec:	2a45      	cmp	r2, #69	; 0x45
 800a7ee:	d117      	bne.n	800a820 <_strtod_l+0x1b0>
 800a7f0:	b91b      	cbnz	r3, 800a7fa <_strtod_l+0x18a>
 800a7f2:	9b04      	ldr	r3, [sp, #16]
 800a7f4:	4303      	orrs	r3, r0
 800a7f6:	d09c      	beq.n	800a732 <_strtod_l+0xc2>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a7fe:	f10b 0201 	add.w	r2, fp, #1
 800a802:	9211      	str	r2, [sp, #68]	; 0x44
 800a804:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a808:	2a2b      	cmp	r2, #43	; 0x2b
 800a80a:	d071      	beq.n	800a8f0 <_strtod_l+0x280>
 800a80c:	2a2d      	cmp	r2, #45	; 0x2d
 800a80e:	d077      	beq.n	800a900 <_strtod_l+0x290>
 800a810:	f04f 0e00 	mov.w	lr, #0
 800a814:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a818:	2d09      	cmp	r5, #9
 800a81a:	d97f      	bls.n	800a91c <_strtod_l+0x2ac>
 800a81c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a820:	2500      	movs	r5, #0
 800a822:	e09b      	b.n	800a95c <_strtod_l+0x2ec>
 800a824:	2300      	movs	r3, #0
 800a826:	e7c3      	b.n	800a7b0 <_strtod_l+0x140>
 800a828:	9906      	ldr	r1, [sp, #24]
 800a82a:	2908      	cmp	r1, #8
 800a82c:	bfdd      	ittte	le
 800a82e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a830:	fb02 3301 	mlale	r3, r2, r1, r3
 800a834:	9309      	strle	r3, [sp, #36]	; 0x24
 800a836:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a83a:	9b06      	ldr	r3, [sp, #24]
 800a83c:	3001      	adds	r0, #1
 800a83e:	3301      	adds	r3, #1
 800a840:	9306      	str	r3, [sp, #24]
 800a842:	9011      	str	r0, [sp, #68]	; 0x44
 800a844:	e7be      	b.n	800a7c4 <_strtod_l+0x154>
 800a846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a848:	195a      	adds	r2, r3, r5
 800a84a:	9211      	str	r2, [sp, #68]	; 0x44
 800a84c:	5d5a      	ldrb	r2, [r3, r5]
 800a84e:	9b06      	ldr	r3, [sp, #24]
 800a850:	b3a3      	cbz	r3, 800a8bc <_strtod_l+0x24c>
 800a852:	4607      	mov	r7, r0
 800a854:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a858:	2909      	cmp	r1, #9
 800a85a:	d912      	bls.n	800a882 <_strtod_l+0x212>
 800a85c:	2101      	movs	r1, #1
 800a85e:	e7c3      	b.n	800a7e8 <_strtod_l+0x178>
 800a860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	9211      	str	r2, [sp, #68]	; 0x44
 800a866:	785a      	ldrb	r2, [r3, #1]
 800a868:	3001      	adds	r0, #1
 800a86a:	2a30      	cmp	r2, #48	; 0x30
 800a86c:	d0f8      	beq.n	800a860 <_strtod_l+0x1f0>
 800a86e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a872:	2b08      	cmp	r3, #8
 800a874:	f200 8497 	bhi.w	800b1a6 <_strtod_l+0xb36>
 800a878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a87a:	930a      	str	r3, [sp, #40]	; 0x28
 800a87c:	4607      	mov	r7, r0
 800a87e:	2000      	movs	r0, #0
 800a880:	4603      	mov	r3, r0
 800a882:	3a30      	subs	r2, #48	; 0x30
 800a884:	f100 0101 	add.w	r1, r0, #1
 800a888:	d012      	beq.n	800a8b0 <_strtod_l+0x240>
 800a88a:	440f      	add	r7, r1
 800a88c:	eb00 0c03 	add.w	ip, r0, r3
 800a890:	4619      	mov	r1, r3
 800a892:	250a      	movs	r5, #10
 800a894:	4561      	cmp	r1, ip
 800a896:	d113      	bne.n	800a8c0 <_strtod_l+0x250>
 800a898:	1819      	adds	r1, r3, r0
 800a89a:	2908      	cmp	r1, #8
 800a89c:	f103 0301 	add.w	r3, r3, #1
 800a8a0:	4403      	add	r3, r0
 800a8a2:	dc1c      	bgt.n	800a8de <_strtod_l+0x26e>
 800a8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a6:	210a      	movs	r1, #10
 800a8a8:	fb01 2200 	mla	r2, r1, r0, r2
 800a8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8b2:	1c50      	adds	r0, r2, #1
 800a8b4:	9011      	str	r0, [sp, #68]	; 0x44
 800a8b6:	7852      	ldrb	r2, [r2, #1]
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	e7cb      	b.n	800a854 <_strtod_l+0x1e4>
 800a8bc:	9806      	ldr	r0, [sp, #24]
 800a8be:	e7d4      	b.n	800a86a <_strtod_l+0x1fa>
 800a8c0:	2908      	cmp	r1, #8
 800a8c2:	dc04      	bgt.n	800a8ce <_strtod_l+0x25e>
 800a8c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8c6:	436e      	muls	r6, r5
 800a8c8:	9609      	str	r6, [sp, #36]	; 0x24
 800a8ca:	3101      	adds	r1, #1
 800a8cc:	e7e2      	b.n	800a894 <_strtod_l+0x224>
 800a8ce:	f101 0e01 	add.w	lr, r1, #1
 800a8d2:	f1be 0f10 	cmp.w	lr, #16
 800a8d6:	bfd8      	it	le
 800a8d8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800a8dc:	e7f5      	b.n	800a8ca <_strtod_l+0x25a>
 800a8de:	2b10      	cmp	r3, #16
 800a8e0:	bfdc      	itt	le
 800a8e2:	210a      	movle	r1, #10
 800a8e4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800a8e8:	e7e1      	b.n	800a8ae <_strtod_l+0x23e>
 800a8ea:	2700      	movs	r7, #0
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	e780      	b.n	800a7f2 <_strtod_l+0x182>
 800a8f0:	f04f 0e00 	mov.w	lr, #0
 800a8f4:	f10b 0202 	add.w	r2, fp, #2
 800a8f8:	9211      	str	r2, [sp, #68]	; 0x44
 800a8fa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a8fe:	e789      	b.n	800a814 <_strtod_l+0x1a4>
 800a900:	f04f 0e01 	mov.w	lr, #1
 800a904:	e7f6      	b.n	800a8f4 <_strtod_l+0x284>
 800a906:	bf00      	nop
 800a908:	0800d678 	.word	0x0800d678
 800a90c:	0800d4b0 	.word	0x0800d4b0
 800a910:	7ff00000 	.word	0x7ff00000
 800a914:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a916:	1c55      	adds	r5, r2, #1
 800a918:	9511      	str	r5, [sp, #68]	; 0x44
 800a91a:	7852      	ldrb	r2, [r2, #1]
 800a91c:	2a30      	cmp	r2, #48	; 0x30
 800a91e:	d0f9      	beq.n	800a914 <_strtod_l+0x2a4>
 800a920:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a924:	2d08      	cmp	r5, #8
 800a926:	f63f af7b 	bhi.w	800a820 <_strtod_l+0x1b0>
 800a92a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a92e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a930:	9207      	str	r2, [sp, #28]
 800a932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a934:	1c55      	adds	r5, r2, #1
 800a936:	9511      	str	r5, [sp, #68]	; 0x44
 800a938:	7852      	ldrb	r2, [r2, #1]
 800a93a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a93e:	2e09      	cmp	r6, #9
 800a940:	d937      	bls.n	800a9b2 <_strtod_l+0x342>
 800a942:	9e07      	ldr	r6, [sp, #28]
 800a944:	1bad      	subs	r5, r5, r6
 800a946:	2d08      	cmp	r5, #8
 800a948:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a94c:	dc02      	bgt.n	800a954 <_strtod_l+0x2e4>
 800a94e:	4565      	cmp	r5, ip
 800a950:	bfa8      	it	ge
 800a952:	4665      	movge	r5, ip
 800a954:	f1be 0f00 	cmp.w	lr, #0
 800a958:	d000      	beq.n	800a95c <_strtod_l+0x2ec>
 800a95a:	426d      	negs	r5, r5
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d14d      	bne.n	800a9fc <_strtod_l+0x38c>
 800a960:	9b04      	ldr	r3, [sp, #16]
 800a962:	4303      	orrs	r3, r0
 800a964:	f47f aec8 	bne.w	800a6f8 <_strtod_l+0x88>
 800a968:	2900      	cmp	r1, #0
 800a96a:	f47f aee2 	bne.w	800a732 <_strtod_l+0xc2>
 800a96e:	2a69      	cmp	r2, #105	; 0x69
 800a970:	d027      	beq.n	800a9c2 <_strtod_l+0x352>
 800a972:	dc24      	bgt.n	800a9be <_strtod_l+0x34e>
 800a974:	2a49      	cmp	r2, #73	; 0x49
 800a976:	d024      	beq.n	800a9c2 <_strtod_l+0x352>
 800a978:	2a4e      	cmp	r2, #78	; 0x4e
 800a97a:	f47f aeda 	bne.w	800a732 <_strtod_l+0xc2>
 800a97e:	4996      	ldr	r1, [pc, #600]	; (800abd8 <_strtod_l+0x568>)
 800a980:	a811      	add	r0, sp, #68	; 0x44
 800a982:	f000 ff83 	bl	800b88c <__match>
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f aed3 	beq.w	800a732 <_strtod_l+0xc2>
 800a98c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b28      	cmp	r3, #40	; 0x28
 800a992:	d12d      	bne.n	800a9f0 <_strtod_l+0x380>
 800a994:	4991      	ldr	r1, [pc, #580]	; (800abdc <_strtod_l+0x56c>)
 800a996:	aa14      	add	r2, sp, #80	; 0x50
 800a998:	a811      	add	r0, sp, #68	; 0x44
 800a99a:	f000 ff8b 	bl	800b8b4 <__hexnan>
 800a99e:	2805      	cmp	r0, #5
 800a9a0:	d126      	bne.n	800a9f0 <_strtod_l+0x380>
 800a9a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9a4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a9a8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a9ac:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a9b0:	e6a2      	b.n	800a6f8 <_strtod_l+0x88>
 800a9b2:	250a      	movs	r5, #10
 800a9b4:	fb05 250c 	mla	r5, r5, ip, r2
 800a9b8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800a9bc:	e7b9      	b.n	800a932 <_strtod_l+0x2c2>
 800a9be:	2a6e      	cmp	r2, #110	; 0x6e
 800a9c0:	e7db      	b.n	800a97a <_strtod_l+0x30a>
 800a9c2:	4987      	ldr	r1, [pc, #540]	; (800abe0 <_strtod_l+0x570>)
 800a9c4:	a811      	add	r0, sp, #68	; 0x44
 800a9c6:	f000 ff61 	bl	800b88c <__match>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	f43f aeb1 	beq.w	800a732 <_strtod_l+0xc2>
 800a9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9d2:	4984      	ldr	r1, [pc, #528]	; (800abe4 <_strtod_l+0x574>)
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	a811      	add	r0, sp, #68	; 0x44
 800a9d8:	9311      	str	r3, [sp, #68]	; 0x44
 800a9da:	f000 ff57 	bl	800b88c <__match>
 800a9de:	b910      	cbnz	r0, 800a9e6 <_strtod_l+0x376>
 800a9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	9311      	str	r3, [sp, #68]	; 0x44
 800a9e6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800abf8 <_strtod_l+0x588>
 800a9ea:	f04f 0800 	mov.w	r8, #0
 800a9ee:	e683      	b.n	800a6f8 <_strtod_l+0x88>
 800a9f0:	487d      	ldr	r0, [pc, #500]	; (800abe8 <_strtod_l+0x578>)
 800a9f2:	f001 fd85 	bl	800c500 <nan>
 800a9f6:	ec59 8b10 	vmov	r8, r9, d0
 800a9fa:	e67d      	b.n	800a6f8 <_strtod_l+0x88>
 800a9fc:	1bea      	subs	r2, r5, r7
 800a9fe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800aa02:	9207      	str	r2, [sp, #28]
 800aa04:	9a06      	ldr	r2, [sp, #24]
 800aa06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	bf08      	it	eq
 800aa0e:	461a      	moveq	r2, r3
 800aa10:	2b10      	cmp	r3, #16
 800aa12:	9206      	str	r2, [sp, #24]
 800aa14:	461a      	mov	r2, r3
 800aa16:	bfa8      	it	ge
 800aa18:	2210      	movge	r2, #16
 800aa1a:	2b09      	cmp	r3, #9
 800aa1c:	ec59 8b17 	vmov	r8, r9, d7
 800aa20:	dd0c      	ble.n	800aa3c <_strtod_l+0x3cc>
 800aa22:	4972      	ldr	r1, [pc, #456]	; (800abec <_strtod_l+0x57c>)
 800aa24:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aa28:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800aa2c:	ee06 aa90 	vmov	s13, sl
 800aa30:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800aa34:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa38:	ec59 8b16 	vmov	r8, r9, d6
 800aa3c:	2b0f      	cmp	r3, #15
 800aa3e:	dc36      	bgt.n	800aaae <_strtod_l+0x43e>
 800aa40:	9907      	ldr	r1, [sp, #28]
 800aa42:	2900      	cmp	r1, #0
 800aa44:	f43f ae58 	beq.w	800a6f8 <_strtod_l+0x88>
 800aa48:	dd23      	ble.n	800aa92 <_strtod_l+0x422>
 800aa4a:	2916      	cmp	r1, #22
 800aa4c:	dc0b      	bgt.n	800aa66 <_strtod_l+0x3f6>
 800aa4e:	4b67      	ldr	r3, [pc, #412]	; (800abec <_strtod_l+0x57c>)
 800aa50:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800aa54:	ed93 7b00 	vldr	d7, [r3]
 800aa58:	ec49 8b16 	vmov	d6, r8, r9
 800aa5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa60:	ec59 8b17 	vmov	r8, r9, d7
 800aa64:	e648      	b.n	800a6f8 <_strtod_l+0x88>
 800aa66:	9807      	ldr	r0, [sp, #28]
 800aa68:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800aa6c:	4281      	cmp	r1, r0
 800aa6e:	db1e      	blt.n	800aaae <_strtod_l+0x43e>
 800aa70:	4a5e      	ldr	r2, [pc, #376]	; (800abec <_strtod_l+0x57c>)
 800aa72:	f1c3 030f 	rsb	r3, r3, #15
 800aa76:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800aa7a:	ed91 7b00 	vldr	d7, [r1]
 800aa7e:	ec49 8b16 	vmov	d6, r8, r9
 800aa82:	1ac3      	subs	r3, r0, r3
 800aa84:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800aa88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa8c:	ed92 6b00 	vldr	d6, [r2]
 800aa90:	e7e4      	b.n	800aa5c <_strtod_l+0x3ec>
 800aa92:	9907      	ldr	r1, [sp, #28]
 800aa94:	3116      	adds	r1, #22
 800aa96:	db0a      	blt.n	800aaae <_strtod_l+0x43e>
 800aa98:	4b54      	ldr	r3, [pc, #336]	; (800abec <_strtod_l+0x57c>)
 800aa9a:	1b7d      	subs	r5, r7, r5
 800aa9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aaa0:	ed95 7b00 	vldr	d7, [r5]
 800aaa4:	ec49 8b16 	vmov	d6, r8, r9
 800aaa8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aaac:	e7d8      	b.n	800aa60 <_strtod_l+0x3f0>
 800aaae:	9907      	ldr	r1, [sp, #28]
 800aab0:	1a9a      	subs	r2, r3, r2
 800aab2:	440a      	add	r2, r1
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	dd6f      	ble.n	800ab98 <_strtod_l+0x528>
 800aab8:	f012 000f 	ands.w	r0, r2, #15
 800aabc:	d00a      	beq.n	800aad4 <_strtod_l+0x464>
 800aabe:	494b      	ldr	r1, [pc, #300]	; (800abec <_strtod_l+0x57c>)
 800aac0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aac4:	ed91 7b00 	vldr	d7, [r1]
 800aac8:	ec49 8b16 	vmov	d6, r8, r9
 800aacc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aad0:	ec59 8b17 	vmov	r8, r9, d7
 800aad4:	f032 020f 	bics.w	r2, r2, #15
 800aad8:	d04f      	beq.n	800ab7a <_strtod_l+0x50a>
 800aada:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800aade:	dd22      	ble.n	800ab26 <_strtod_l+0x4b6>
 800aae0:	2500      	movs	r5, #0
 800aae2:	462e      	mov	r6, r5
 800aae4:	9506      	str	r5, [sp, #24]
 800aae6:	462f      	mov	r7, r5
 800aae8:	2322      	movs	r3, #34	; 0x22
 800aaea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800abf8 <_strtod_l+0x588>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	f04f 0800 	mov.w	r8, #0
 800aaf4:	9b06      	ldr	r3, [sp, #24]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f43f adfe 	beq.w	800a6f8 <_strtod_l+0x88>
 800aafc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 ffd4 	bl	800baac <_Bfree>
 800ab04:	4639      	mov	r1, r7
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 ffd0 	bl	800baac <_Bfree>
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 ffcc 	bl	800baac <_Bfree>
 800ab14:	9906      	ldr	r1, [sp, #24]
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 ffc8 	bl	800baac <_Bfree>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f000 ffc4 	bl	800baac <_Bfree>
 800ab24:	e5e8      	b.n	800a6f8 <_strtod_l+0x88>
 800ab26:	2000      	movs	r0, #0
 800ab28:	ec49 8b17 	vmov	d7, r8, r9
 800ab2c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800abf0 <_strtod_l+0x580>
 800ab30:	1112      	asrs	r2, r2, #4
 800ab32:	4601      	mov	r1, r0
 800ab34:	2a01      	cmp	r2, #1
 800ab36:	dc23      	bgt.n	800ab80 <_strtod_l+0x510>
 800ab38:	b108      	cbz	r0, 800ab3e <_strtod_l+0x4ce>
 800ab3a:	ec59 8b17 	vmov	r8, r9, d7
 800ab3e:	4a2c      	ldr	r2, [pc, #176]	; (800abf0 <_strtod_l+0x580>)
 800ab40:	482c      	ldr	r0, [pc, #176]	; (800abf4 <_strtod_l+0x584>)
 800ab42:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab46:	ed92 7b00 	vldr	d7, [r2]
 800ab4a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ab4e:	ec49 8b16 	vmov	d6, r8, r9
 800ab52:	4a29      	ldr	r2, [pc, #164]	; (800abf8 <_strtod_l+0x588>)
 800ab54:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab58:	ee17 1a90 	vmov	r1, s15
 800ab5c:	400a      	ands	r2, r1
 800ab5e:	4282      	cmp	r2, r0
 800ab60:	ec59 8b17 	vmov	r8, r9, d7
 800ab64:	d8bc      	bhi.n	800aae0 <_strtod_l+0x470>
 800ab66:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ab6a:	4282      	cmp	r2, r0
 800ab6c:	bf86      	itte	hi
 800ab6e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800abfc <_strtod_l+0x58c>
 800ab72:	f04f 38ff 	movhi.w	r8, #4294967295
 800ab76:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	9204      	str	r2, [sp, #16]
 800ab7e:	e078      	b.n	800ac72 <_strtod_l+0x602>
 800ab80:	07d6      	lsls	r6, r2, #31
 800ab82:	d504      	bpl.n	800ab8e <_strtod_l+0x51e>
 800ab84:	ed9c 6b00 	vldr	d6, [ip]
 800ab88:	2001      	movs	r0, #1
 800ab8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab8e:	3101      	adds	r1, #1
 800ab90:	1052      	asrs	r2, r2, #1
 800ab92:	f10c 0c08 	add.w	ip, ip, #8
 800ab96:	e7cd      	b.n	800ab34 <_strtod_l+0x4c4>
 800ab98:	d0ef      	beq.n	800ab7a <_strtod_l+0x50a>
 800ab9a:	4252      	negs	r2, r2
 800ab9c:	f012 000f 	ands.w	r0, r2, #15
 800aba0:	d00a      	beq.n	800abb8 <_strtod_l+0x548>
 800aba2:	4912      	ldr	r1, [pc, #72]	; (800abec <_strtod_l+0x57c>)
 800aba4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aba8:	ed91 7b00 	vldr	d7, [r1]
 800abac:	ec49 8b16 	vmov	d6, r8, r9
 800abb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abb4:	ec59 8b17 	vmov	r8, r9, d7
 800abb8:	1112      	asrs	r2, r2, #4
 800abba:	d0de      	beq.n	800ab7a <_strtod_l+0x50a>
 800abbc:	2a1f      	cmp	r2, #31
 800abbe:	dd1f      	ble.n	800ac00 <_strtod_l+0x590>
 800abc0:	2500      	movs	r5, #0
 800abc2:	462e      	mov	r6, r5
 800abc4:	9506      	str	r5, [sp, #24]
 800abc6:	462f      	mov	r7, r5
 800abc8:	2322      	movs	r3, #34	; 0x22
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	f04f 0900 	mov.w	r9, #0
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	e78e      	b.n	800aaf4 <_strtod_l+0x484>
 800abd6:	bf00      	nop
 800abd8:	0800d4ad 	.word	0x0800d4ad
 800abdc:	0800d4c4 	.word	0x0800d4c4
 800abe0:	0800d4a4 	.word	0x0800d4a4
 800abe4:	0800d4a7 	.word	0x0800d4a7
 800abe8:	0800d837 	.word	0x0800d837
 800abec:	0800d728 	.word	0x0800d728
 800abf0:	0800d700 	.word	0x0800d700
 800abf4:	7ca00000 	.word	0x7ca00000
 800abf8:	7ff00000 	.word	0x7ff00000
 800abfc:	7fefffff 	.word	0x7fefffff
 800ac00:	f012 0110 	ands.w	r1, r2, #16
 800ac04:	bf18      	it	ne
 800ac06:	216a      	movne	r1, #106	; 0x6a
 800ac08:	9104      	str	r1, [sp, #16]
 800ac0a:	ec49 8b17 	vmov	d7, r8, r9
 800ac0e:	49be      	ldr	r1, [pc, #760]	; (800af08 <_strtod_l+0x898>)
 800ac10:	2000      	movs	r0, #0
 800ac12:	07d6      	lsls	r6, r2, #31
 800ac14:	d504      	bpl.n	800ac20 <_strtod_l+0x5b0>
 800ac16:	ed91 6b00 	vldr	d6, [r1]
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac20:	1052      	asrs	r2, r2, #1
 800ac22:	f101 0108 	add.w	r1, r1, #8
 800ac26:	d1f4      	bne.n	800ac12 <_strtod_l+0x5a2>
 800ac28:	b108      	cbz	r0, 800ac2e <_strtod_l+0x5be>
 800ac2a:	ec59 8b17 	vmov	r8, r9, d7
 800ac2e:	9a04      	ldr	r2, [sp, #16]
 800ac30:	b1c2      	cbz	r2, 800ac64 <_strtod_l+0x5f4>
 800ac32:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ac36:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	dd11      	ble.n	800ac64 <_strtod_l+0x5f4>
 800ac40:	2a1f      	cmp	r2, #31
 800ac42:	f340 812e 	ble.w	800aea2 <_strtod_l+0x832>
 800ac46:	2a34      	cmp	r2, #52	; 0x34
 800ac48:	bfde      	ittt	le
 800ac4a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ac4e:	f04f 32ff 	movle.w	r2, #4294967295
 800ac52:	fa02 f101 	lslle.w	r1, r2, r1
 800ac56:	f04f 0800 	mov.w	r8, #0
 800ac5a:	bfcc      	ite	gt
 800ac5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ac60:	ea01 0900 	andle.w	r9, r1, r0
 800ac64:	ec49 8b17 	vmov	d7, r8, r9
 800ac68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac70:	d0a6      	beq.n	800abc0 <_strtod_l+0x550>
 800ac72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac74:	9200      	str	r2, [sp, #0]
 800ac76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac78:	9a06      	ldr	r2, [sp, #24]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 ff7e 	bl	800bb7c <__s2b>
 800ac80:	9006      	str	r0, [sp, #24]
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f43f af2c 	beq.w	800aae0 <_strtod_l+0x470>
 800ac88:	9b07      	ldr	r3, [sp, #28]
 800ac8a:	1b7d      	subs	r5, r7, r5
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bfb4      	ite	lt
 800ac90:	462b      	movlt	r3, r5
 800ac92:	2300      	movge	r3, #0
 800ac94:	9309      	str	r3, [sp, #36]	; 0x24
 800ac96:	9b07      	ldr	r3, [sp, #28]
 800ac98:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800aee8 <_strtod_l+0x878>
 800ac9c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800aef0 <_strtod_l+0x880>
 800aca0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800aef8 <_strtod_l+0x888>
 800aca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aca8:	2500      	movs	r5, #0
 800acaa:	930c      	str	r3, [sp, #48]	; 0x30
 800acac:	462e      	mov	r6, r5
 800acae:	9b06      	ldr	r3, [sp, #24]
 800acb0:	4620      	mov	r0, r4
 800acb2:	6859      	ldr	r1, [r3, #4]
 800acb4:	f000 feba 	bl	800ba2c <_Balloc>
 800acb8:	4607      	mov	r7, r0
 800acba:	2800      	cmp	r0, #0
 800acbc:	f43f af14 	beq.w	800aae8 <_strtod_l+0x478>
 800acc0:	9b06      	ldr	r3, [sp, #24]
 800acc2:	691a      	ldr	r2, [r3, #16]
 800acc4:	3202      	adds	r2, #2
 800acc6:	f103 010c 	add.w	r1, r3, #12
 800acca:	0092      	lsls	r2, r2, #2
 800accc:	300c      	adds	r0, #12
 800acce:	f000 fe9f 	bl	800ba10 <memcpy>
 800acd2:	ec49 8b10 	vmov	d0, r8, r9
 800acd6:	aa14      	add	r2, sp, #80	; 0x50
 800acd8:	a913      	add	r1, sp, #76	; 0x4c
 800acda:	4620      	mov	r0, r4
 800acdc:	f001 fa94 	bl	800c208 <__d2b>
 800ace0:	ec49 8b18 	vmov	d8, r8, r9
 800ace4:	9012      	str	r0, [sp, #72]	; 0x48
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f aefe 	beq.w	800aae8 <_strtod_l+0x478>
 800acec:	2101      	movs	r1, #1
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 ffde 	bl	800bcb0 <__i2b>
 800acf4:	4606      	mov	r6, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f43f aef6 	beq.w	800aae8 <_strtod_l+0x478>
 800acfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acfe:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfab      	itete	ge
 800ad04:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ad06:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ad08:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ad0c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ad10:	bfac      	ite	ge
 800ad12:	eb03 0b02 	addge.w	fp, r3, r2
 800ad16:	eba2 0a03 	sublt.w	sl, r2, r3
 800ad1a:	9a04      	ldr	r2, [sp, #16]
 800ad1c:	1a9b      	subs	r3, r3, r2
 800ad1e:	440b      	add	r3, r1
 800ad20:	4a7a      	ldr	r2, [pc, #488]	; (800af0c <_strtod_l+0x89c>)
 800ad22:	3b01      	subs	r3, #1
 800ad24:	4293      	cmp	r3, r2
 800ad26:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ad2a:	f280 80cd 	bge.w	800aec8 <_strtod_l+0x858>
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	2a1f      	cmp	r2, #31
 800ad32:	eba1 0102 	sub.w	r1, r1, r2
 800ad36:	f04f 0001 	mov.w	r0, #1
 800ad3a:	f300 80b9 	bgt.w	800aeb0 <_strtod_l+0x840>
 800ad3e:	fa00 f302 	lsl.w	r3, r0, r2
 800ad42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad44:	2300      	movs	r3, #0
 800ad46:	930a      	str	r3, [sp, #40]	; 0x28
 800ad48:	eb0b 0301 	add.w	r3, fp, r1
 800ad4c:	9a04      	ldr	r2, [sp, #16]
 800ad4e:	459b      	cmp	fp, r3
 800ad50:	448a      	add	sl, r1
 800ad52:	4492      	add	sl, r2
 800ad54:	465a      	mov	r2, fp
 800ad56:	bfa8      	it	ge
 800ad58:	461a      	movge	r2, r3
 800ad5a:	4552      	cmp	r2, sl
 800ad5c:	bfa8      	it	ge
 800ad5e:	4652      	movge	r2, sl
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	bfc2      	ittt	gt
 800ad64:	1a9b      	subgt	r3, r3, r2
 800ad66:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ad6a:	ebab 0b02 	subgt.w	fp, fp, r2
 800ad6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	dd18      	ble.n	800ada6 <_strtod_l+0x736>
 800ad74:	4631      	mov	r1, r6
 800ad76:	4620      	mov	r0, r4
 800ad78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad7a:	f001 f859 	bl	800be30 <__pow5mult>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f43f aeb1 	beq.w	800aae8 <_strtod_l+0x478>
 800ad86:	4601      	mov	r1, r0
 800ad88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 ffa6 	bl	800bcdc <__multiply>
 800ad90:	900e      	str	r0, [sp, #56]	; 0x38
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f43f aea8 	beq.w	800aae8 <_strtod_l+0x478>
 800ad98:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fe86 	bl	800baac <_Bfree>
 800ada0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ada4:	9212      	str	r2, [sp, #72]	; 0x48
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f300 8093 	bgt.w	800aed2 <_strtod_l+0x862>
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dd08      	ble.n	800adc4 <_strtod_l+0x754>
 800adb2:	4639      	mov	r1, r7
 800adb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adb6:	4620      	mov	r0, r4
 800adb8:	f001 f83a 	bl	800be30 <__pow5mult>
 800adbc:	4607      	mov	r7, r0
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f43f ae92 	beq.w	800aae8 <_strtod_l+0x478>
 800adc4:	f1ba 0f00 	cmp.w	sl, #0
 800adc8:	dd08      	ble.n	800addc <_strtod_l+0x76c>
 800adca:	4639      	mov	r1, r7
 800adcc:	4652      	mov	r2, sl
 800adce:	4620      	mov	r0, r4
 800add0:	f001 f888 	bl	800bee4 <__lshift>
 800add4:	4607      	mov	r7, r0
 800add6:	2800      	cmp	r0, #0
 800add8:	f43f ae86 	beq.w	800aae8 <_strtod_l+0x478>
 800addc:	f1bb 0f00 	cmp.w	fp, #0
 800ade0:	dd08      	ble.n	800adf4 <_strtod_l+0x784>
 800ade2:	4631      	mov	r1, r6
 800ade4:	465a      	mov	r2, fp
 800ade6:	4620      	mov	r0, r4
 800ade8:	f001 f87c 	bl	800bee4 <__lshift>
 800adec:	4606      	mov	r6, r0
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f ae7a 	beq.w	800aae8 <_strtod_l+0x478>
 800adf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800adf6:	463a      	mov	r2, r7
 800adf8:	4620      	mov	r0, r4
 800adfa:	f001 f8ff 	bl	800bffc <__mdiff>
 800adfe:	4605      	mov	r5, r0
 800ae00:	2800      	cmp	r0, #0
 800ae02:	f43f ae71 	beq.w	800aae8 <_strtod_l+0x478>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ae0c:	60c3      	str	r3, [r0, #12]
 800ae0e:	4631      	mov	r1, r6
 800ae10:	f001 f8d8 	bl	800bfc4 <__mcmp>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	da7d      	bge.n	800af14 <_strtod_l+0x8a4>
 800ae18:	ea5a 0308 	orrs.w	r3, sl, r8
 800ae1c:	f040 80a3 	bne.w	800af66 <_strtod_l+0x8f6>
 800ae20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f040 809e 	bne.w	800af66 <_strtod_l+0x8f6>
 800ae2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae2e:	0d1b      	lsrs	r3, r3, #20
 800ae30:	051b      	lsls	r3, r3, #20
 800ae32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae36:	f240 8096 	bls.w	800af66 <_strtod_l+0x8f6>
 800ae3a:	696b      	ldr	r3, [r5, #20]
 800ae3c:	b91b      	cbnz	r3, 800ae46 <_strtod_l+0x7d6>
 800ae3e:	692b      	ldr	r3, [r5, #16]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	f340 8090 	ble.w	800af66 <_strtod_l+0x8f6>
 800ae46:	4629      	mov	r1, r5
 800ae48:	2201      	movs	r2, #1
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f001 f84a 	bl	800bee4 <__lshift>
 800ae50:	4631      	mov	r1, r6
 800ae52:	4605      	mov	r5, r0
 800ae54:	f001 f8b6 	bl	800bfc4 <__mcmp>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	f340 8084 	ble.w	800af66 <_strtod_l+0x8f6>
 800ae5e:	9904      	ldr	r1, [sp, #16]
 800ae60:	4a2b      	ldr	r2, [pc, #172]	; (800af10 <_strtod_l+0x8a0>)
 800ae62:	464b      	mov	r3, r9
 800ae64:	2900      	cmp	r1, #0
 800ae66:	f000 809d 	beq.w	800afa4 <_strtod_l+0x934>
 800ae6a:	ea02 0109 	and.w	r1, r2, r9
 800ae6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae72:	f300 8097 	bgt.w	800afa4 <_strtod_l+0x934>
 800ae76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae7a:	f77f aea5 	ble.w	800abc8 <_strtod_l+0x558>
 800ae7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800af00 <_strtod_l+0x890>
 800ae82:	ec49 8b16 	vmov	d6, r8, r9
 800ae86:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ae8a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae8e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	bf08      	it	eq
 800ae96:	2322      	moveq	r3, #34	; 0x22
 800ae98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ae9c:	bf08      	it	eq
 800ae9e:	6023      	streq	r3, [r4, #0]
 800aea0:	e62c      	b.n	800aafc <_strtod_l+0x48c>
 800aea2:	f04f 31ff 	mov.w	r1, #4294967295
 800aea6:	fa01 f202 	lsl.w	r2, r1, r2
 800aeaa:	ea02 0808 	and.w	r8, r2, r8
 800aeae:	e6d9      	b.n	800ac64 <_strtod_l+0x5f4>
 800aeb0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800aeb4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800aeb8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800aebc:	33e2      	adds	r3, #226	; 0xe2
 800aebe:	fa00 f303 	lsl.w	r3, r0, r3
 800aec2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800aec6:	e73f      	b.n	800ad48 <_strtod_l+0x6d8>
 800aec8:	2200      	movs	r2, #0
 800aeca:	2301      	movs	r3, #1
 800aecc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aed0:	e73a      	b.n	800ad48 <_strtod_l+0x6d8>
 800aed2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aed4:	461a      	mov	r2, r3
 800aed6:	4620      	mov	r0, r4
 800aed8:	f001 f804 	bl	800bee4 <__lshift>
 800aedc:	9012      	str	r0, [sp, #72]	; 0x48
 800aede:	2800      	cmp	r0, #0
 800aee0:	f47f af64 	bne.w	800adac <_strtod_l+0x73c>
 800aee4:	e600      	b.n	800aae8 <_strtod_l+0x478>
 800aee6:	bf00      	nop
 800aee8:	94a03595 	.word	0x94a03595
 800aeec:	3fcfffff 	.word	0x3fcfffff
 800aef0:	94a03595 	.word	0x94a03595
 800aef4:	3fdfffff 	.word	0x3fdfffff
 800aef8:	35afe535 	.word	0x35afe535
 800aefc:	3fe00000 	.word	0x3fe00000
 800af00:	00000000 	.word	0x00000000
 800af04:	39500000 	.word	0x39500000
 800af08:	0800d4d8 	.word	0x0800d4d8
 800af0c:	fffffc02 	.word	0xfffffc02
 800af10:	7ff00000 	.word	0x7ff00000
 800af14:	46cb      	mov	fp, r9
 800af16:	d15f      	bne.n	800afd8 <_strtod_l+0x968>
 800af18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af1c:	f1ba 0f00 	cmp.w	sl, #0
 800af20:	d02a      	beq.n	800af78 <_strtod_l+0x908>
 800af22:	4aa7      	ldr	r2, [pc, #668]	; (800b1c0 <_strtod_l+0xb50>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d12b      	bne.n	800af80 <_strtod_l+0x910>
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	4642      	mov	r2, r8
 800af2c:	b1fb      	cbz	r3, 800af6e <_strtod_l+0x8fe>
 800af2e:	4ba5      	ldr	r3, [pc, #660]	; (800b1c4 <_strtod_l+0xb54>)
 800af30:	ea09 0303 	and.w	r3, r9, r3
 800af34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af38:	f04f 31ff 	mov.w	r1, #4294967295
 800af3c:	d81a      	bhi.n	800af74 <_strtod_l+0x904>
 800af3e:	0d1b      	lsrs	r3, r3, #20
 800af40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af44:	fa01 f303 	lsl.w	r3, r1, r3
 800af48:	429a      	cmp	r2, r3
 800af4a:	d119      	bne.n	800af80 <_strtod_l+0x910>
 800af4c:	4b9e      	ldr	r3, [pc, #632]	; (800b1c8 <_strtod_l+0xb58>)
 800af4e:	459b      	cmp	fp, r3
 800af50:	d102      	bne.n	800af58 <_strtod_l+0x8e8>
 800af52:	3201      	adds	r2, #1
 800af54:	f43f adc8 	beq.w	800aae8 <_strtod_l+0x478>
 800af58:	4b9a      	ldr	r3, [pc, #616]	; (800b1c4 <_strtod_l+0xb54>)
 800af5a:	ea0b 0303 	and.w	r3, fp, r3
 800af5e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af62:	f04f 0800 	mov.w	r8, #0
 800af66:	9b04      	ldr	r3, [sp, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d188      	bne.n	800ae7e <_strtod_l+0x80e>
 800af6c:	e5c6      	b.n	800aafc <_strtod_l+0x48c>
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295
 800af72:	e7e9      	b.n	800af48 <_strtod_l+0x8d8>
 800af74:	460b      	mov	r3, r1
 800af76:	e7e7      	b.n	800af48 <_strtod_l+0x8d8>
 800af78:	ea53 0308 	orrs.w	r3, r3, r8
 800af7c:	f43f af6f 	beq.w	800ae5e <_strtod_l+0x7ee>
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	b1cb      	cbz	r3, 800afb8 <_strtod_l+0x948>
 800af84:	ea13 0f0b 	tst.w	r3, fp
 800af88:	d0ed      	beq.n	800af66 <_strtod_l+0x8f6>
 800af8a:	9a04      	ldr	r2, [sp, #16]
 800af8c:	4640      	mov	r0, r8
 800af8e:	4649      	mov	r1, r9
 800af90:	f1ba 0f00 	cmp.w	sl, #0
 800af94:	d014      	beq.n	800afc0 <_strtod_l+0x950>
 800af96:	f7ff fb4e 	bl	800a636 <sulp>
 800af9a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800af9e:	ec59 8b17 	vmov	r8, r9, d7
 800afa2:	e7e0      	b.n	800af66 <_strtod_l+0x8f6>
 800afa4:	4013      	ands	r3, r2
 800afa6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800afaa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800afae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800afb2:	f04f 38ff 	mov.w	r8, #4294967295
 800afb6:	e7d6      	b.n	800af66 <_strtod_l+0x8f6>
 800afb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afba:	ea13 0f08 	tst.w	r3, r8
 800afbe:	e7e3      	b.n	800af88 <_strtod_l+0x918>
 800afc0:	f7ff fb39 	bl	800a636 <sulp>
 800afc4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800afc8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800afcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd0:	ec59 8b10 	vmov	r8, r9, d0
 800afd4:	d1c7      	bne.n	800af66 <_strtod_l+0x8f6>
 800afd6:	e5f7      	b.n	800abc8 <_strtod_l+0x558>
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	f001 f970 	bl	800c2c0 <__ratio>
 800afe0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800afe4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800afe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afec:	d865      	bhi.n	800b0ba <_strtod_l+0xa4a>
 800afee:	f1ba 0f00 	cmp.w	sl, #0
 800aff2:	d042      	beq.n	800b07a <_strtod_l+0xa0a>
 800aff4:	4b75      	ldr	r3, [pc, #468]	; (800b1cc <_strtod_l+0xb5c>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800affc:	4871      	ldr	r0, [pc, #452]	; (800b1c4 <_strtod_l+0xb54>)
 800affe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b1d8 <_strtod_l+0xb68>
 800b002:	ea0b 0100 	and.w	r1, fp, r0
 800b006:	4561      	cmp	r1, ip
 800b008:	f040 808e 	bne.w	800b128 <_strtod_l+0xab8>
 800b00c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b010:	ec49 8b10 	vmov	d0, r8, r9
 800b014:	ec43 2b1c 	vmov	d12, r2, r3
 800b018:	910a      	str	r1, [sp, #40]	; 0x28
 800b01a:	f001 f879 	bl	800c110 <__ulp>
 800b01e:	ec49 8b1e 	vmov	d14, r8, r9
 800b022:	4868      	ldr	r0, [pc, #416]	; (800b1c4 <_strtod_l+0xb54>)
 800b024:	eeac eb00 	vfma.f64	d14, d12, d0
 800b028:	ee1e 3a90 	vmov	r3, s29
 800b02c:	4a68      	ldr	r2, [pc, #416]	; (800b1d0 <_strtod_l+0xb60>)
 800b02e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b030:	4018      	ands	r0, r3
 800b032:	4290      	cmp	r0, r2
 800b034:	ec59 8b1e 	vmov	r8, r9, d14
 800b038:	d94e      	bls.n	800b0d8 <_strtod_l+0xa68>
 800b03a:	ee18 3a90 	vmov	r3, s17
 800b03e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b042:	4293      	cmp	r3, r2
 800b044:	d104      	bne.n	800b050 <_strtod_l+0x9e0>
 800b046:	ee18 3a10 	vmov	r3, s16
 800b04a:	3301      	adds	r3, #1
 800b04c:	f43f ad4c 	beq.w	800aae8 <_strtod_l+0x478>
 800b050:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b1c8 <_strtod_l+0xb58>
 800b054:	f04f 38ff 	mov.w	r8, #4294967295
 800b058:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fd26 	bl	800baac <_Bfree>
 800b060:	4639      	mov	r1, r7
 800b062:	4620      	mov	r0, r4
 800b064:	f000 fd22 	bl	800baac <_Bfree>
 800b068:	4631      	mov	r1, r6
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fd1e 	bl	800baac <_Bfree>
 800b070:	4629      	mov	r1, r5
 800b072:	4620      	mov	r0, r4
 800b074:	f000 fd1a 	bl	800baac <_Bfree>
 800b078:	e619      	b.n	800acae <_strtod_l+0x63e>
 800b07a:	f1b8 0f00 	cmp.w	r8, #0
 800b07e:	d112      	bne.n	800b0a6 <_strtod_l+0xa36>
 800b080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b084:	b9b3      	cbnz	r3, 800b0b4 <_strtod_l+0xa44>
 800b086:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b08a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b092:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b096:	bf58      	it	pl
 800b098:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b09c:	eeb1 7b4d 	vneg.f64	d7, d13
 800b0a0:	ec53 2b17 	vmov	r2, r3, d7
 800b0a4:	e7aa      	b.n	800affc <_strtod_l+0x98c>
 800b0a6:	f1b8 0f01 	cmp.w	r8, #1
 800b0aa:	d103      	bne.n	800b0b4 <_strtod_l+0xa44>
 800b0ac:	f1b9 0f00 	cmp.w	r9, #0
 800b0b0:	f43f ad8a 	beq.w	800abc8 <_strtod_l+0x558>
 800b0b4:	4b47      	ldr	r3, [pc, #284]	; (800b1d4 <_strtod_l+0xb64>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	e79e      	b.n	800aff8 <_strtod_l+0x988>
 800b0ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b0be:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	d104      	bne.n	800b0d2 <_strtod_l+0xa62>
 800b0c8:	eeb1 7b4d 	vneg.f64	d7, d13
 800b0cc:	ec53 2b17 	vmov	r2, r3, d7
 800b0d0:	e794      	b.n	800affc <_strtod_l+0x98c>
 800b0d2:	eeb0 7b4d 	vmov.f64	d7, d13
 800b0d6:	e7f9      	b.n	800b0cc <_strtod_l+0xa5c>
 800b0d8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b0dc:	9b04      	ldr	r3, [sp, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1ba      	bne.n	800b058 <_strtod_l+0x9e8>
 800b0e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0e6:	0d1b      	lsrs	r3, r3, #20
 800b0e8:	051b      	lsls	r3, r3, #20
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	d1b4      	bne.n	800b058 <_strtod_l+0x9e8>
 800b0ee:	ec51 0b1d 	vmov	r0, r1, d13
 800b0f2:	f7f5 fb39 	bl	8000768 <__aeabi_d2lz>
 800b0f6:	f7f5 faf1 	bl	80006dc <__aeabi_l2d>
 800b0fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0fe:	ec41 0b17 	vmov	d7, r0, r1
 800b102:	ea43 0308 	orr.w	r3, r3, r8
 800b106:	ea53 030a 	orrs.w	r3, r3, sl
 800b10a:	ee3d db47 	vsub.f64	d13, d13, d7
 800b10e:	d03c      	beq.n	800b18a <_strtod_l+0xb1a>
 800b110:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b118:	f53f acf0 	bmi.w	800aafc <_strtod_l+0x48c>
 800b11c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b124:	dd98      	ble.n	800b058 <_strtod_l+0x9e8>
 800b126:	e4e9      	b.n	800aafc <_strtod_l+0x48c>
 800b128:	9804      	ldr	r0, [sp, #16]
 800b12a:	b1f0      	cbz	r0, 800b16a <_strtod_l+0xafa>
 800b12c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b130:	d81b      	bhi.n	800b16a <_strtod_l+0xafa>
 800b132:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b1b8 <_strtod_l+0xb48>
 800b136:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13e:	d811      	bhi.n	800b164 <_strtod_l+0xaf4>
 800b140:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b144:	ee1d 3a10 	vmov	r3, s26
 800b148:	2b01      	cmp	r3, #1
 800b14a:	bf38      	it	cc
 800b14c:	2301      	movcc	r3, #1
 800b14e:	ee0d 3a10 	vmov	s26, r3
 800b152:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b156:	f1ba 0f00 	cmp.w	sl, #0
 800b15a:	d113      	bne.n	800b184 <_strtod_l+0xb14>
 800b15c:	eeb1 7b4d 	vneg.f64	d7, d13
 800b160:	ec53 2b17 	vmov	r2, r3, d7
 800b164:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b168:	1a43      	subs	r3, r0, r1
 800b16a:	eeb0 0b48 	vmov.f64	d0, d8
 800b16e:	ec43 2b1c 	vmov	d12, r2, r3
 800b172:	910a      	str	r1, [sp, #40]	; 0x28
 800b174:	f000 ffcc 	bl	800c110 <__ulp>
 800b178:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b17a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b17e:	ec59 8b18 	vmov	r8, r9, d8
 800b182:	e7ab      	b.n	800b0dc <_strtod_l+0xa6c>
 800b184:	eeb0 7b4d 	vmov.f64	d7, d13
 800b188:	e7ea      	b.n	800b160 <_strtod_l+0xaf0>
 800b18a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	f57f af61 	bpl.w	800b058 <_strtod_l+0x9e8>
 800b196:	e4b1      	b.n	800aafc <_strtod_l+0x48c>
 800b198:	2300      	movs	r3, #0
 800b19a:	9308      	str	r3, [sp, #32]
 800b19c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b19e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	f7ff baad 	b.w	800a700 <_strtod_l+0x90>
 800b1a6:	2a65      	cmp	r2, #101	; 0x65
 800b1a8:	f43f ab9f 	beq.w	800a8ea <_strtod_l+0x27a>
 800b1ac:	2a45      	cmp	r2, #69	; 0x45
 800b1ae:	f43f ab9c 	beq.w	800a8ea <_strtod_l+0x27a>
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	f7ff bbd4 	b.w	800a960 <_strtod_l+0x2f0>
 800b1b8:	ffc00000 	.word	0xffc00000
 800b1bc:	41dfffff 	.word	0x41dfffff
 800b1c0:	000fffff 	.word	0x000fffff
 800b1c4:	7ff00000 	.word	0x7ff00000
 800b1c8:	7fefffff 	.word	0x7fefffff
 800b1cc:	3ff00000 	.word	0x3ff00000
 800b1d0:	7c9fffff 	.word	0x7c9fffff
 800b1d4:	bff00000 	.word	0xbff00000
 800b1d8:	7fe00000 	.word	0x7fe00000

0800b1dc <strtod>:
 800b1dc:	460a      	mov	r2, r1
 800b1de:	4601      	mov	r1, r0
 800b1e0:	4802      	ldr	r0, [pc, #8]	; (800b1ec <strtod+0x10>)
 800b1e2:	4b03      	ldr	r3, [pc, #12]	; (800b1f0 <strtod+0x14>)
 800b1e4:	6800      	ldr	r0, [r0, #0]
 800b1e6:	f7ff ba43 	b.w	800a670 <_strtod_l>
 800b1ea:	bf00      	nop
 800b1ec:	24000014 	.word	0x24000014
 800b1f0:	2400007c 	.word	0x2400007c

0800b1f4 <_strtol_l.constprop.0>:
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fa:	d001      	beq.n	800b200 <_strtol_l.constprop.0+0xc>
 800b1fc:	2b24      	cmp	r3, #36	; 0x24
 800b1fe:	d906      	bls.n	800b20e <_strtol_l.constprop.0+0x1a>
 800b200:	f7ff f9d4 	bl	800a5ac <__errno>
 800b204:	2316      	movs	r3, #22
 800b206:	6003      	str	r3, [r0, #0]
 800b208:	2000      	movs	r0, #0
 800b20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b2f4 <_strtol_l.constprop.0+0x100>
 800b212:	460d      	mov	r5, r1
 800b214:	462e      	mov	r6, r5
 800b216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b21a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b21e:	f017 0708 	ands.w	r7, r7, #8
 800b222:	d1f7      	bne.n	800b214 <_strtol_l.constprop.0+0x20>
 800b224:	2c2d      	cmp	r4, #45	; 0x2d
 800b226:	d132      	bne.n	800b28e <_strtol_l.constprop.0+0x9a>
 800b228:	782c      	ldrb	r4, [r5, #0]
 800b22a:	2701      	movs	r7, #1
 800b22c:	1cb5      	adds	r5, r6, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d05b      	beq.n	800b2ea <_strtol_l.constprop.0+0xf6>
 800b232:	2b10      	cmp	r3, #16
 800b234:	d109      	bne.n	800b24a <_strtol_l.constprop.0+0x56>
 800b236:	2c30      	cmp	r4, #48	; 0x30
 800b238:	d107      	bne.n	800b24a <_strtol_l.constprop.0+0x56>
 800b23a:	782c      	ldrb	r4, [r5, #0]
 800b23c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b240:	2c58      	cmp	r4, #88	; 0x58
 800b242:	d14d      	bne.n	800b2e0 <_strtol_l.constprop.0+0xec>
 800b244:	786c      	ldrb	r4, [r5, #1]
 800b246:	2310      	movs	r3, #16
 800b248:	3502      	adds	r5, #2
 800b24a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b24e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b252:	f04f 0c00 	mov.w	ip, #0
 800b256:	fbb8 f9f3 	udiv	r9, r8, r3
 800b25a:	4666      	mov	r6, ip
 800b25c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b260:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b264:	f1be 0f09 	cmp.w	lr, #9
 800b268:	d816      	bhi.n	800b298 <_strtol_l.constprop.0+0xa4>
 800b26a:	4674      	mov	r4, lr
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	dd24      	ble.n	800b2ba <_strtol_l.constprop.0+0xc6>
 800b270:	f1bc 0f00 	cmp.w	ip, #0
 800b274:	db1e      	blt.n	800b2b4 <_strtol_l.constprop.0+0xc0>
 800b276:	45b1      	cmp	r9, r6
 800b278:	d31c      	bcc.n	800b2b4 <_strtol_l.constprop.0+0xc0>
 800b27a:	d101      	bne.n	800b280 <_strtol_l.constprop.0+0x8c>
 800b27c:	45a2      	cmp	sl, r4
 800b27e:	db19      	blt.n	800b2b4 <_strtol_l.constprop.0+0xc0>
 800b280:	fb06 4603 	mla	r6, r6, r3, r4
 800b284:	f04f 0c01 	mov.w	ip, #1
 800b288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b28c:	e7e8      	b.n	800b260 <_strtol_l.constprop.0+0x6c>
 800b28e:	2c2b      	cmp	r4, #43	; 0x2b
 800b290:	bf04      	itt	eq
 800b292:	782c      	ldrbeq	r4, [r5, #0]
 800b294:	1cb5      	addeq	r5, r6, #2
 800b296:	e7ca      	b.n	800b22e <_strtol_l.constprop.0+0x3a>
 800b298:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b29c:	f1be 0f19 	cmp.w	lr, #25
 800b2a0:	d801      	bhi.n	800b2a6 <_strtol_l.constprop.0+0xb2>
 800b2a2:	3c37      	subs	r4, #55	; 0x37
 800b2a4:	e7e2      	b.n	800b26c <_strtol_l.constprop.0+0x78>
 800b2a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b2aa:	f1be 0f19 	cmp.w	lr, #25
 800b2ae:	d804      	bhi.n	800b2ba <_strtol_l.constprop.0+0xc6>
 800b2b0:	3c57      	subs	r4, #87	; 0x57
 800b2b2:	e7db      	b.n	800b26c <_strtol_l.constprop.0+0x78>
 800b2b4:	f04f 3cff 	mov.w	ip, #4294967295
 800b2b8:	e7e6      	b.n	800b288 <_strtol_l.constprop.0+0x94>
 800b2ba:	f1bc 0f00 	cmp.w	ip, #0
 800b2be:	da05      	bge.n	800b2cc <_strtol_l.constprop.0+0xd8>
 800b2c0:	2322      	movs	r3, #34	; 0x22
 800b2c2:	6003      	str	r3, [r0, #0]
 800b2c4:	4646      	mov	r6, r8
 800b2c6:	b942      	cbnz	r2, 800b2da <_strtol_l.constprop.0+0xe6>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	e79e      	b.n	800b20a <_strtol_l.constprop.0+0x16>
 800b2cc:	b107      	cbz	r7, 800b2d0 <_strtol_l.constprop.0+0xdc>
 800b2ce:	4276      	negs	r6, r6
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	d0f9      	beq.n	800b2c8 <_strtol_l.constprop.0+0xd4>
 800b2d4:	f1bc 0f00 	cmp.w	ip, #0
 800b2d8:	d000      	beq.n	800b2dc <_strtol_l.constprop.0+0xe8>
 800b2da:	1e69      	subs	r1, r5, #1
 800b2dc:	6011      	str	r1, [r2, #0]
 800b2de:	e7f3      	b.n	800b2c8 <_strtol_l.constprop.0+0xd4>
 800b2e0:	2430      	movs	r4, #48	; 0x30
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1b1      	bne.n	800b24a <_strtol_l.constprop.0+0x56>
 800b2e6:	2308      	movs	r3, #8
 800b2e8:	e7af      	b.n	800b24a <_strtol_l.constprop.0+0x56>
 800b2ea:	2c30      	cmp	r4, #48	; 0x30
 800b2ec:	d0a5      	beq.n	800b23a <_strtol_l.constprop.0+0x46>
 800b2ee:	230a      	movs	r3, #10
 800b2f0:	e7ab      	b.n	800b24a <_strtol_l.constprop.0+0x56>
 800b2f2:	bf00      	nop
 800b2f4:	0800d501 	.word	0x0800d501

0800b2f8 <strtol>:
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	460a      	mov	r2, r1
 800b2fc:	4601      	mov	r1, r0
 800b2fe:	4802      	ldr	r0, [pc, #8]	; (800b308 <strtol+0x10>)
 800b300:	6800      	ldr	r0, [r0, #0]
 800b302:	f7ff bf77 	b.w	800b1f4 <_strtol_l.constprop.0>
 800b306:	bf00      	nop
 800b308:	24000014 	.word	0x24000014

0800b30c <rshift>:
 800b30c:	6903      	ldr	r3, [r0, #16]
 800b30e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b316:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b31a:	f100 0414 	add.w	r4, r0, #20
 800b31e:	dd45      	ble.n	800b3ac <rshift+0xa0>
 800b320:	f011 011f 	ands.w	r1, r1, #31
 800b324:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b328:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b32c:	d10c      	bne.n	800b348 <rshift+0x3c>
 800b32e:	f100 0710 	add.w	r7, r0, #16
 800b332:	4629      	mov	r1, r5
 800b334:	42b1      	cmp	r1, r6
 800b336:	d334      	bcc.n	800b3a2 <rshift+0x96>
 800b338:	1a9b      	subs	r3, r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	1eea      	subs	r2, r5, #3
 800b33e:	4296      	cmp	r6, r2
 800b340:	bf38      	it	cc
 800b342:	2300      	movcc	r3, #0
 800b344:	4423      	add	r3, r4
 800b346:	e015      	b.n	800b374 <rshift+0x68>
 800b348:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b34c:	f1c1 0820 	rsb	r8, r1, #32
 800b350:	40cf      	lsrs	r7, r1
 800b352:	f105 0e04 	add.w	lr, r5, #4
 800b356:	46a1      	mov	r9, r4
 800b358:	4576      	cmp	r6, lr
 800b35a:	46f4      	mov	ip, lr
 800b35c:	d815      	bhi.n	800b38a <rshift+0x7e>
 800b35e:	1a9a      	subs	r2, r3, r2
 800b360:	0092      	lsls	r2, r2, #2
 800b362:	3a04      	subs	r2, #4
 800b364:	3501      	adds	r5, #1
 800b366:	42ae      	cmp	r6, r5
 800b368:	bf38      	it	cc
 800b36a:	2200      	movcc	r2, #0
 800b36c:	18a3      	adds	r3, r4, r2
 800b36e:	50a7      	str	r7, [r4, r2]
 800b370:	b107      	cbz	r7, 800b374 <rshift+0x68>
 800b372:	3304      	adds	r3, #4
 800b374:	1b1a      	subs	r2, r3, r4
 800b376:	42a3      	cmp	r3, r4
 800b378:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b37c:	bf08      	it	eq
 800b37e:	2300      	moveq	r3, #0
 800b380:	6102      	str	r2, [r0, #16]
 800b382:	bf08      	it	eq
 800b384:	6143      	streq	r3, [r0, #20]
 800b386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b38a:	f8dc c000 	ldr.w	ip, [ip]
 800b38e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b392:	ea4c 0707 	orr.w	r7, ip, r7
 800b396:	f849 7b04 	str.w	r7, [r9], #4
 800b39a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b39e:	40cf      	lsrs	r7, r1
 800b3a0:	e7da      	b.n	800b358 <rshift+0x4c>
 800b3a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3aa:	e7c3      	b.n	800b334 <rshift+0x28>
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	e7e1      	b.n	800b374 <rshift+0x68>

0800b3b0 <__hexdig_fun>:
 800b3b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b3b4:	2b09      	cmp	r3, #9
 800b3b6:	d802      	bhi.n	800b3be <__hexdig_fun+0xe>
 800b3b8:	3820      	subs	r0, #32
 800b3ba:	b2c0      	uxtb	r0, r0
 800b3bc:	4770      	bx	lr
 800b3be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d801      	bhi.n	800b3ca <__hexdig_fun+0x1a>
 800b3c6:	3847      	subs	r0, #71	; 0x47
 800b3c8:	e7f7      	b.n	800b3ba <__hexdig_fun+0xa>
 800b3ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3ce:	2b05      	cmp	r3, #5
 800b3d0:	d801      	bhi.n	800b3d6 <__hexdig_fun+0x26>
 800b3d2:	3827      	subs	r0, #39	; 0x27
 800b3d4:	e7f1      	b.n	800b3ba <__hexdig_fun+0xa>
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	4770      	bx	lr
	...

0800b3dc <__gethex>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	ed2d 8b02 	vpush	{d8}
 800b3e4:	b089      	sub	sp, #36	; 0x24
 800b3e6:	ee08 0a10 	vmov	s16, r0
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	4bb4      	ldr	r3, [pc, #720]	; (800b6c0 <__gethex+0x2e4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	468b      	mov	fp, r1
 800b3f6:	4690      	mov	r8, r2
 800b3f8:	f7f4 ff8a 	bl	8000310 <strlen>
 800b3fc:	9b01      	ldr	r3, [sp, #4]
 800b3fe:	f8db 2000 	ldr.w	r2, [fp]
 800b402:	4403      	add	r3, r0
 800b404:	4682      	mov	sl, r0
 800b406:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	1c93      	adds	r3, r2, #2
 800b40e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b412:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b416:	32fe      	adds	r2, #254	; 0xfe
 800b418:	18d1      	adds	r1, r2, r3
 800b41a:	461f      	mov	r7, r3
 800b41c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b420:	9100      	str	r1, [sp, #0]
 800b422:	2830      	cmp	r0, #48	; 0x30
 800b424:	d0f8      	beq.n	800b418 <__gethex+0x3c>
 800b426:	f7ff ffc3 	bl	800b3b0 <__hexdig_fun>
 800b42a:	4604      	mov	r4, r0
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d13a      	bne.n	800b4a6 <__gethex+0xca>
 800b430:	9901      	ldr	r1, [sp, #4]
 800b432:	4652      	mov	r2, sl
 800b434:	4638      	mov	r0, r7
 800b436:	f001 f87b 	bl	800c530 <strncmp>
 800b43a:	4605      	mov	r5, r0
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d168      	bne.n	800b512 <__gethex+0x136>
 800b440:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b444:	eb07 060a 	add.w	r6, r7, sl
 800b448:	f7ff ffb2 	bl	800b3b0 <__hexdig_fun>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d062      	beq.n	800b516 <__gethex+0x13a>
 800b450:	4633      	mov	r3, r6
 800b452:	7818      	ldrb	r0, [r3, #0]
 800b454:	2830      	cmp	r0, #48	; 0x30
 800b456:	461f      	mov	r7, r3
 800b458:	f103 0301 	add.w	r3, r3, #1
 800b45c:	d0f9      	beq.n	800b452 <__gethex+0x76>
 800b45e:	f7ff ffa7 	bl	800b3b0 <__hexdig_fun>
 800b462:	2301      	movs	r3, #1
 800b464:	fab0 f480 	clz	r4, r0
 800b468:	0964      	lsrs	r4, r4, #5
 800b46a:	4635      	mov	r5, r6
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	463a      	mov	r2, r7
 800b470:	4616      	mov	r6, r2
 800b472:	3201      	adds	r2, #1
 800b474:	7830      	ldrb	r0, [r6, #0]
 800b476:	f7ff ff9b 	bl	800b3b0 <__hexdig_fun>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d1f8      	bne.n	800b470 <__gethex+0x94>
 800b47e:	9901      	ldr	r1, [sp, #4]
 800b480:	4652      	mov	r2, sl
 800b482:	4630      	mov	r0, r6
 800b484:	f001 f854 	bl	800c530 <strncmp>
 800b488:	b980      	cbnz	r0, 800b4ac <__gethex+0xd0>
 800b48a:	b94d      	cbnz	r5, 800b4a0 <__gethex+0xc4>
 800b48c:	eb06 050a 	add.w	r5, r6, sl
 800b490:	462a      	mov	r2, r5
 800b492:	4616      	mov	r6, r2
 800b494:	3201      	adds	r2, #1
 800b496:	7830      	ldrb	r0, [r6, #0]
 800b498:	f7ff ff8a 	bl	800b3b0 <__hexdig_fun>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d1f8      	bne.n	800b492 <__gethex+0xb6>
 800b4a0:	1bad      	subs	r5, r5, r6
 800b4a2:	00ad      	lsls	r5, r5, #2
 800b4a4:	e004      	b.n	800b4b0 <__gethex+0xd4>
 800b4a6:	2400      	movs	r4, #0
 800b4a8:	4625      	mov	r5, r4
 800b4aa:	e7e0      	b.n	800b46e <__gethex+0x92>
 800b4ac:	2d00      	cmp	r5, #0
 800b4ae:	d1f7      	bne.n	800b4a0 <__gethex+0xc4>
 800b4b0:	7833      	ldrb	r3, [r6, #0]
 800b4b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4b6:	2b50      	cmp	r3, #80	; 0x50
 800b4b8:	d13b      	bne.n	800b532 <__gethex+0x156>
 800b4ba:	7873      	ldrb	r3, [r6, #1]
 800b4bc:	2b2b      	cmp	r3, #43	; 0x2b
 800b4be:	d02c      	beq.n	800b51a <__gethex+0x13e>
 800b4c0:	2b2d      	cmp	r3, #45	; 0x2d
 800b4c2:	d02e      	beq.n	800b522 <__gethex+0x146>
 800b4c4:	1c71      	adds	r1, r6, #1
 800b4c6:	f04f 0900 	mov.w	r9, #0
 800b4ca:	7808      	ldrb	r0, [r1, #0]
 800b4cc:	f7ff ff70 	bl	800b3b0 <__hexdig_fun>
 800b4d0:	1e43      	subs	r3, r0, #1
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b18      	cmp	r3, #24
 800b4d6:	d82c      	bhi.n	800b532 <__gethex+0x156>
 800b4d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b4dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4e0:	f7ff ff66 	bl	800b3b0 <__hexdig_fun>
 800b4e4:	1e43      	subs	r3, r0, #1
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b18      	cmp	r3, #24
 800b4ea:	d91d      	bls.n	800b528 <__gethex+0x14c>
 800b4ec:	f1b9 0f00 	cmp.w	r9, #0
 800b4f0:	d000      	beq.n	800b4f4 <__gethex+0x118>
 800b4f2:	4252      	negs	r2, r2
 800b4f4:	4415      	add	r5, r2
 800b4f6:	f8cb 1000 	str.w	r1, [fp]
 800b4fa:	b1e4      	cbz	r4, 800b536 <__gethex+0x15a>
 800b4fc:	9b00      	ldr	r3, [sp, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	bf14      	ite	ne
 800b502:	2700      	movne	r7, #0
 800b504:	2706      	moveq	r7, #6
 800b506:	4638      	mov	r0, r7
 800b508:	b009      	add	sp, #36	; 0x24
 800b50a:	ecbd 8b02 	vpop	{d8}
 800b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b512:	463e      	mov	r6, r7
 800b514:	4625      	mov	r5, r4
 800b516:	2401      	movs	r4, #1
 800b518:	e7ca      	b.n	800b4b0 <__gethex+0xd4>
 800b51a:	f04f 0900 	mov.w	r9, #0
 800b51e:	1cb1      	adds	r1, r6, #2
 800b520:	e7d3      	b.n	800b4ca <__gethex+0xee>
 800b522:	f04f 0901 	mov.w	r9, #1
 800b526:	e7fa      	b.n	800b51e <__gethex+0x142>
 800b528:	230a      	movs	r3, #10
 800b52a:	fb03 0202 	mla	r2, r3, r2, r0
 800b52e:	3a10      	subs	r2, #16
 800b530:	e7d4      	b.n	800b4dc <__gethex+0x100>
 800b532:	4631      	mov	r1, r6
 800b534:	e7df      	b.n	800b4f6 <__gethex+0x11a>
 800b536:	1bf3      	subs	r3, r6, r7
 800b538:	3b01      	subs	r3, #1
 800b53a:	4621      	mov	r1, r4
 800b53c:	2b07      	cmp	r3, #7
 800b53e:	dc0b      	bgt.n	800b558 <__gethex+0x17c>
 800b540:	ee18 0a10 	vmov	r0, s16
 800b544:	f000 fa72 	bl	800ba2c <_Balloc>
 800b548:	4604      	mov	r4, r0
 800b54a:	b940      	cbnz	r0, 800b55e <__gethex+0x182>
 800b54c:	4b5d      	ldr	r3, [pc, #372]	; (800b6c4 <__gethex+0x2e8>)
 800b54e:	4602      	mov	r2, r0
 800b550:	21de      	movs	r1, #222	; 0xde
 800b552:	485d      	ldr	r0, [pc, #372]	; (800b6c8 <__gethex+0x2ec>)
 800b554:	f001 f80e 	bl	800c574 <__assert_func>
 800b558:	3101      	adds	r1, #1
 800b55a:	105b      	asrs	r3, r3, #1
 800b55c:	e7ee      	b.n	800b53c <__gethex+0x160>
 800b55e:	f100 0914 	add.w	r9, r0, #20
 800b562:	f04f 0b00 	mov.w	fp, #0
 800b566:	f1ca 0301 	rsb	r3, sl, #1
 800b56a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b56e:	f8cd b000 	str.w	fp, [sp]
 800b572:	9306      	str	r3, [sp, #24]
 800b574:	42b7      	cmp	r7, r6
 800b576:	d340      	bcc.n	800b5fa <__gethex+0x21e>
 800b578:	9802      	ldr	r0, [sp, #8]
 800b57a:	9b00      	ldr	r3, [sp, #0]
 800b57c:	f840 3b04 	str.w	r3, [r0], #4
 800b580:	eba0 0009 	sub.w	r0, r0, r9
 800b584:	1080      	asrs	r0, r0, #2
 800b586:	0146      	lsls	r6, r0, #5
 800b588:	6120      	str	r0, [r4, #16]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 fb40 	bl	800bc10 <__hi0bits>
 800b590:	1a30      	subs	r0, r6, r0
 800b592:	f8d8 6000 	ldr.w	r6, [r8]
 800b596:	42b0      	cmp	r0, r6
 800b598:	dd63      	ble.n	800b662 <__gethex+0x286>
 800b59a:	1b87      	subs	r7, r0, r6
 800b59c:	4639      	mov	r1, r7
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fee1 	bl	800c366 <__any_on>
 800b5a4:	4682      	mov	sl, r0
 800b5a6:	b1a8      	cbz	r0, 800b5d4 <__gethex+0x1f8>
 800b5a8:	1e7b      	subs	r3, r7, #1
 800b5aa:	1159      	asrs	r1, r3, #5
 800b5ac:	f003 021f 	and.w	r2, r3, #31
 800b5b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b5b4:	f04f 0a01 	mov.w	sl, #1
 800b5b8:	fa0a f202 	lsl.w	r2, sl, r2
 800b5bc:	420a      	tst	r2, r1
 800b5be:	d009      	beq.n	800b5d4 <__gethex+0x1f8>
 800b5c0:	4553      	cmp	r3, sl
 800b5c2:	dd05      	ble.n	800b5d0 <__gethex+0x1f4>
 800b5c4:	1eb9      	subs	r1, r7, #2
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 fecd 	bl	800c366 <__any_on>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d145      	bne.n	800b65c <__gethex+0x280>
 800b5d0:	f04f 0a02 	mov.w	sl, #2
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f7ff fe98 	bl	800b30c <rshift>
 800b5dc:	443d      	add	r5, r7
 800b5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e2:	42ab      	cmp	r3, r5
 800b5e4:	da4c      	bge.n	800b680 <__gethex+0x2a4>
 800b5e6:	ee18 0a10 	vmov	r0, s16
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	f000 fa5e 	bl	800baac <_Bfree>
 800b5f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	6013      	str	r3, [r2, #0]
 800b5f6:	27a3      	movs	r7, #163	; 0xa3
 800b5f8:	e785      	b.n	800b506 <__gethex+0x12a>
 800b5fa:	1e73      	subs	r3, r6, #1
 800b5fc:	9a05      	ldr	r2, [sp, #20]
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b604:	4293      	cmp	r3, r2
 800b606:	d019      	beq.n	800b63c <__gethex+0x260>
 800b608:	f1bb 0f20 	cmp.w	fp, #32
 800b60c:	d107      	bne.n	800b61e <__gethex+0x242>
 800b60e:	9b02      	ldr	r3, [sp, #8]
 800b610:	9a00      	ldr	r2, [sp, #0]
 800b612:	f843 2b04 	str.w	r2, [r3], #4
 800b616:	9302      	str	r3, [sp, #8]
 800b618:	2300      	movs	r3, #0
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	469b      	mov	fp, r3
 800b61e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b622:	f7ff fec5 	bl	800b3b0 <__hexdig_fun>
 800b626:	9b00      	ldr	r3, [sp, #0]
 800b628:	f000 000f 	and.w	r0, r0, #15
 800b62c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b630:	4303      	orrs	r3, r0
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	f10b 0b04 	add.w	fp, fp, #4
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	e00d      	b.n	800b658 <__gethex+0x27c>
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	9a06      	ldr	r2, [sp, #24]
 800b640:	4413      	add	r3, r2
 800b642:	42bb      	cmp	r3, r7
 800b644:	d3e0      	bcc.n	800b608 <__gethex+0x22c>
 800b646:	4618      	mov	r0, r3
 800b648:	9901      	ldr	r1, [sp, #4]
 800b64a:	9307      	str	r3, [sp, #28]
 800b64c:	4652      	mov	r2, sl
 800b64e:	f000 ff6f 	bl	800c530 <strncmp>
 800b652:	9b07      	ldr	r3, [sp, #28]
 800b654:	2800      	cmp	r0, #0
 800b656:	d1d7      	bne.n	800b608 <__gethex+0x22c>
 800b658:	461e      	mov	r6, r3
 800b65a:	e78b      	b.n	800b574 <__gethex+0x198>
 800b65c:	f04f 0a03 	mov.w	sl, #3
 800b660:	e7b8      	b.n	800b5d4 <__gethex+0x1f8>
 800b662:	da0a      	bge.n	800b67a <__gethex+0x29e>
 800b664:	1a37      	subs	r7, r6, r0
 800b666:	4621      	mov	r1, r4
 800b668:	ee18 0a10 	vmov	r0, s16
 800b66c:	463a      	mov	r2, r7
 800b66e:	f000 fc39 	bl	800bee4 <__lshift>
 800b672:	1bed      	subs	r5, r5, r7
 800b674:	4604      	mov	r4, r0
 800b676:	f100 0914 	add.w	r9, r0, #20
 800b67a:	f04f 0a00 	mov.w	sl, #0
 800b67e:	e7ae      	b.n	800b5de <__gethex+0x202>
 800b680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b684:	42a8      	cmp	r0, r5
 800b686:	dd72      	ble.n	800b76e <__gethex+0x392>
 800b688:	1b45      	subs	r5, r0, r5
 800b68a:	42ae      	cmp	r6, r5
 800b68c:	dc36      	bgt.n	800b6fc <__gethex+0x320>
 800b68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b692:	2b02      	cmp	r3, #2
 800b694:	d02a      	beq.n	800b6ec <__gethex+0x310>
 800b696:	2b03      	cmp	r3, #3
 800b698:	d02c      	beq.n	800b6f4 <__gethex+0x318>
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d11c      	bne.n	800b6d8 <__gethex+0x2fc>
 800b69e:	42ae      	cmp	r6, r5
 800b6a0:	d11a      	bne.n	800b6d8 <__gethex+0x2fc>
 800b6a2:	2e01      	cmp	r6, #1
 800b6a4:	d112      	bne.n	800b6cc <__gethex+0x2f0>
 800b6a6:	9a04      	ldr	r2, [sp, #16]
 800b6a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	6123      	str	r3, [r4, #16]
 800b6b2:	f8c9 3000 	str.w	r3, [r9]
 800b6b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6b8:	2762      	movs	r7, #98	; 0x62
 800b6ba:	601c      	str	r4, [r3, #0]
 800b6bc:	e723      	b.n	800b506 <__gethex+0x12a>
 800b6be:	bf00      	nop
 800b6c0:	0800d678 	.word	0x0800d678
 800b6c4:	0800d601 	.word	0x0800d601
 800b6c8:	0800d612 	.word	0x0800d612
 800b6cc:	1e71      	subs	r1, r6, #1
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 fe49 	bl	800c366 <__any_on>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d1e6      	bne.n	800b6a6 <__gethex+0x2ca>
 800b6d8:	ee18 0a10 	vmov	r0, s16
 800b6dc:	4621      	mov	r1, r4
 800b6de:	f000 f9e5 	bl	800baac <_Bfree>
 800b6e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	2750      	movs	r7, #80	; 0x50
 800b6ea:	e70c      	b.n	800b506 <__gethex+0x12a>
 800b6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1f2      	bne.n	800b6d8 <__gethex+0x2fc>
 800b6f2:	e7d8      	b.n	800b6a6 <__gethex+0x2ca>
 800b6f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1d5      	bne.n	800b6a6 <__gethex+0x2ca>
 800b6fa:	e7ed      	b.n	800b6d8 <__gethex+0x2fc>
 800b6fc:	1e6f      	subs	r7, r5, #1
 800b6fe:	f1ba 0f00 	cmp.w	sl, #0
 800b702:	d131      	bne.n	800b768 <__gethex+0x38c>
 800b704:	b127      	cbz	r7, 800b710 <__gethex+0x334>
 800b706:	4639      	mov	r1, r7
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 fe2c 	bl	800c366 <__any_on>
 800b70e:	4682      	mov	sl, r0
 800b710:	117b      	asrs	r3, r7, #5
 800b712:	2101      	movs	r1, #1
 800b714:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b718:	f007 071f 	and.w	r7, r7, #31
 800b71c:	fa01 f707 	lsl.w	r7, r1, r7
 800b720:	421f      	tst	r7, r3
 800b722:	4629      	mov	r1, r5
 800b724:	4620      	mov	r0, r4
 800b726:	bf18      	it	ne
 800b728:	f04a 0a02 	orrne.w	sl, sl, #2
 800b72c:	1b76      	subs	r6, r6, r5
 800b72e:	f7ff fded 	bl	800b30c <rshift>
 800b732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b736:	2702      	movs	r7, #2
 800b738:	f1ba 0f00 	cmp.w	sl, #0
 800b73c:	d048      	beq.n	800b7d0 <__gethex+0x3f4>
 800b73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b742:	2b02      	cmp	r3, #2
 800b744:	d015      	beq.n	800b772 <__gethex+0x396>
 800b746:	2b03      	cmp	r3, #3
 800b748:	d017      	beq.n	800b77a <__gethex+0x39e>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d109      	bne.n	800b762 <__gethex+0x386>
 800b74e:	f01a 0f02 	tst.w	sl, #2
 800b752:	d006      	beq.n	800b762 <__gethex+0x386>
 800b754:	f8d9 0000 	ldr.w	r0, [r9]
 800b758:	ea4a 0a00 	orr.w	sl, sl, r0
 800b75c:	f01a 0f01 	tst.w	sl, #1
 800b760:	d10e      	bne.n	800b780 <__gethex+0x3a4>
 800b762:	f047 0710 	orr.w	r7, r7, #16
 800b766:	e033      	b.n	800b7d0 <__gethex+0x3f4>
 800b768:	f04f 0a01 	mov.w	sl, #1
 800b76c:	e7d0      	b.n	800b710 <__gethex+0x334>
 800b76e:	2701      	movs	r7, #1
 800b770:	e7e2      	b.n	800b738 <__gethex+0x35c>
 800b772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b774:	f1c3 0301 	rsb	r3, r3, #1
 800b778:	9315      	str	r3, [sp, #84]	; 0x54
 800b77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0f0      	beq.n	800b762 <__gethex+0x386>
 800b780:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b784:	f104 0314 	add.w	r3, r4, #20
 800b788:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b78c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b790:	f04f 0c00 	mov.w	ip, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b79e:	d01c      	beq.n	800b7da <__gethex+0x3fe>
 800b7a0:	3201      	adds	r2, #1
 800b7a2:	6002      	str	r2, [r0, #0]
 800b7a4:	2f02      	cmp	r7, #2
 800b7a6:	f104 0314 	add.w	r3, r4, #20
 800b7aa:	d13f      	bne.n	800b82c <__gethex+0x450>
 800b7ac:	f8d8 2000 	ldr.w	r2, [r8]
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	42b2      	cmp	r2, r6
 800b7b4:	d10a      	bne.n	800b7cc <__gethex+0x3f0>
 800b7b6:	1171      	asrs	r1, r6, #5
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7be:	f006 061f 	and.w	r6, r6, #31
 800b7c2:	fa02 f606 	lsl.w	r6, r2, r6
 800b7c6:	421e      	tst	r6, r3
 800b7c8:	bf18      	it	ne
 800b7ca:	4617      	movne	r7, r2
 800b7cc:	f047 0720 	orr.w	r7, r7, #32
 800b7d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7d2:	601c      	str	r4, [r3, #0]
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	601d      	str	r5, [r3, #0]
 800b7d8:	e695      	b.n	800b506 <__gethex+0x12a>
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7e0:	d8d8      	bhi.n	800b794 <__gethex+0x3b8>
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	459b      	cmp	fp, r3
 800b7e6:	db19      	blt.n	800b81c <__gethex+0x440>
 800b7e8:	6861      	ldr	r1, [r4, #4]
 800b7ea:	ee18 0a10 	vmov	r0, s16
 800b7ee:	3101      	adds	r1, #1
 800b7f0:	f000 f91c 	bl	800ba2c <_Balloc>
 800b7f4:	4681      	mov	r9, r0
 800b7f6:	b918      	cbnz	r0, 800b800 <__gethex+0x424>
 800b7f8:	4b1a      	ldr	r3, [pc, #104]	; (800b864 <__gethex+0x488>)
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	2184      	movs	r1, #132	; 0x84
 800b7fe:	e6a8      	b.n	800b552 <__gethex+0x176>
 800b800:	6922      	ldr	r2, [r4, #16]
 800b802:	3202      	adds	r2, #2
 800b804:	f104 010c 	add.w	r1, r4, #12
 800b808:	0092      	lsls	r2, r2, #2
 800b80a:	300c      	adds	r0, #12
 800b80c:	f000 f900 	bl	800ba10 <memcpy>
 800b810:	4621      	mov	r1, r4
 800b812:	ee18 0a10 	vmov	r0, s16
 800b816:	f000 f949 	bl	800baac <_Bfree>
 800b81a:	464c      	mov	r4, r9
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b824:	6122      	str	r2, [r4, #16]
 800b826:	2201      	movs	r2, #1
 800b828:	615a      	str	r2, [r3, #20]
 800b82a:	e7bb      	b.n	800b7a4 <__gethex+0x3c8>
 800b82c:	6922      	ldr	r2, [r4, #16]
 800b82e:	455a      	cmp	r2, fp
 800b830:	dd0b      	ble.n	800b84a <__gethex+0x46e>
 800b832:	2101      	movs	r1, #1
 800b834:	4620      	mov	r0, r4
 800b836:	f7ff fd69 	bl	800b30c <rshift>
 800b83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b83e:	3501      	adds	r5, #1
 800b840:	42ab      	cmp	r3, r5
 800b842:	f6ff aed0 	blt.w	800b5e6 <__gethex+0x20a>
 800b846:	2701      	movs	r7, #1
 800b848:	e7c0      	b.n	800b7cc <__gethex+0x3f0>
 800b84a:	f016 061f 	ands.w	r6, r6, #31
 800b84e:	d0fa      	beq.n	800b846 <__gethex+0x46a>
 800b850:	4453      	add	r3, sl
 800b852:	f1c6 0620 	rsb	r6, r6, #32
 800b856:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b85a:	f000 f9d9 	bl	800bc10 <__hi0bits>
 800b85e:	42b0      	cmp	r0, r6
 800b860:	dbe7      	blt.n	800b832 <__gethex+0x456>
 800b862:	e7f0      	b.n	800b846 <__gethex+0x46a>
 800b864:	0800d601 	.word	0x0800d601

0800b868 <L_shift>:
 800b868:	f1c2 0208 	rsb	r2, r2, #8
 800b86c:	0092      	lsls	r2, r2, #2
 800b86e:	b570      	push	{r4, r5, r6, lr}
 800b870:	f1c2 0620 	rsb	r6, r2, #32
 800b874:	6843      	ldr	r3, [r0, #4]
 800b876:	6804      	ldr	r4, [r0, #0]
 800b878:	fa03 f506 	lsl.w	r5, r3, r6
 800b87c:	432c      	orrs	r4, r5
 800b87e:	40d3      	lsrs	r3, r2
 800b880:	6004      	str	r4, [r0, #0]
 800b882:	f840 3f04 	str.w	r3, [r0, #4]!
 800b886:	4288      	cmp	r0, r1
 800b888:	d3f4      	bcc.n	800b874 <L_shift+0xc>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}

0800b88c <__match>:
 800b88c:	b530      	push	{r4, r5, lr}
 800b88e:	6803      	ldr	r3, [r0, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b896:	b914      	cbnz	r4, 800b89e <__match+0x12>
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	2001      	movs	r0, #1
 800b89c:	bd30      	pop	{r4, r5, pc}
 800b89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8a6:	2d19      	cmp	r5, #25
 800b8a8:	bf98      	it	ls
 800b8aa:	3220      	addls	r2, #32
 800b8ac:	42a2      	cmp	r2, r4
 800b8ae:	d0f0      	beq.n	800b892 <__match+0x6>
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	e7f3      	b.n	800b89c <__match+0x10>

0800b8b4 <__hexnan>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	680b      	ldr	r3, [r1, #0]
 800b8ba:	115e      	asrs	r6, r3, #5
 800b8bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8c0:	f013 031f 	ands.w	r3, r3, #31
 800b8c4:	b087      	sub	sp, #28
 800b8c6:	bf18      	it	ne
 800b8c8:	3604      	addne	r6, #4
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	1f37      	subs	r7, r6, #4
 800b8ce:	4690      	mov	r8, r2
 800b8d0:	6802      	ldr	r2, [r0, #0]
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	4682      	mov	sl, r0
 800b8d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8da:	46b9      	mov	r9, r7
 800b8dc:	463c      	mov	r4, r7
 800b8de:	9502      	str	r5, [sp, #8]
 800b8e0:	46ab      	mov	fp, r5
 800b8e2:	7851      	ldrb	r1, [r2, #1]
 800b8e4:	1c53      	adds	r3, r2, #1
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	b341      	cbz	r1, 800b93c <__hexnan+0x88>
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	9205      	str	r2, [sp, #20]
 800b8ee:	9104      	str	r1, [sp, #16]
 800b8f0:	f7ff fd5e 	bl	800b3b0 <__hexdig_fun>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d14f      	bne.n	800b998 <__hexnan+0xe4>
 800b8f8:	9904      	ldr	r1, [sp, #16]
 800b8fa:	9a05      	ldr	r2, [sp, #20]
 800b8fc:	2920      	cmp	r1, #32
 800b8fe:	d818      	bhi.n	800b932 <__hexnan+0x7e>
 800b900:	9b02      	ldr	r3, [sp, #8]
 800b902:	459b      	cmp	fp, r3
 800b904:	dd13      	ble.n	800b92e <__hexnan+0x7a>
 800b906:	454c      	cmp	r4, r9
 800b908:	d206      	bcs.n	800b918 <__hexnan+0x64>
 800b90a:	2d07      	cmp	r5, #7
 800b90c:	dc04      	bgt.n	800b918 <__hexnan+0x64>
 800b90e:	462a      	mov	r2, r5
 800b910:	4649      	mov	r1, r9
 800b912:	4620      	mov	r0, r4
 800b914:	f7ff ffa8 	bl	800b868 <L_shift>
 800b918:	4544      	cmp	r4, r8
 800b91a:	d950      	bls.n	800b9be <__hexnan+0x10a>
 800b91c:	2300      	movs	r3, #0
 800b91e:	f1a4 0904 	sub.w	r9, r4, #4
 800b922:	f844 3c04 	str.w	r3, [r4, #-4]
 800b926:	f8cd b008 	str.w	fp, [sp, #8]
 800b92a:	464c      	mov	r4, r9
 800b92c:	461d      	mov	r5, r3
 800b92e:	9a03      	ldr	r2, [sp, #12]
 800b930:	e7d7      	b.n	800b8e2 <__hexnan+0x2e>
 800b932:	2929      	cmp	r1, #41	; 0x29
 800b934:	d156      	bne.n	800b9e4 <__hexnan+0x130>
 800b936:	3202      	adds	r2, #2
 800b938:	f8ca 2000 	str.w	r2, [sl]
 800b93c:	f1bb 0f00 	cmp.w	fp, #0
 800b940:	d050      	beq.n	800b9e4 <__hexnan+0x130>
 800b942:	454c      	cmp	r4, r9
 800b944:	d206      	bcs.n	800b954 <__hexnan+0xa0>
 800b946:	2d07      	cmp	r5, #7
 800b948:	dc04      	bgt.n	800b954 <__hexnan+0xa0>
 800b94a:	462a      	mov	r2, r5
 800b94c:	4649      	mov	r1, r9
 800b94e:	4620      	mov	r0, r4
 800b950:	f7ff ff8a 	bl	800b868 <L_shift>
 800b954:	4544      	cmp	r4, r8
 800b956:	d934      	bls.n	800b9c2 <__hexnan+0x10e>
 800b958:	f1a8 0204 	sub.w	r2, r8, #4
 800b95c:	4623      	mov	r3, r4
 800b95e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b962:	f842 1f04 	str.w	r1, [r2, #4]!
 800b966:	429f      	cmp	r7, r3
 800b968:	d2f9      	bcs.n	800b95e <__hexnan+0xaa>
 800b96a:	1b3b      	subs	r3, r7, r4
 800b96c:	f023 0303 	bic.w	r3, r3, #3
 800b970:	3304      	adds	r3, #4
 800b972:	3401      	adds	r4, #1
 800b974:	3e03      	subs	r6, #3
 800b976:	42b4      	cmp	r4, r6
 800b978:	bf88      	it	hi
 800b97a:	2304      	movhi	r3, #4
 800b97c:	4443      	add	r3, r8
 800b97e:	2200      	movs	r2, #0
 800b980:	f843 2b04 	str.w	r2, [r3], #4
 800b984:	429f      	cmp	r7, r3
 800b986:	d2fb      	bcs.n	800b980 <__hexnan+0xcc>
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	b91b      	cbnz	r3, 800b994 <__hexnan+0xe0>
 800b98c:	4547      	cmp	r7, r8
 800b98e:	d127      	bne.n	800b9e0 <__hexnan+0x12c>
 800b990:	2301      	movs	r3, #1
 800b992:	603b      	str	r3, [r7, #0]
 800b994:	2005      	movs	r0, #5
 800b996:	e026      	b.n	800b9e6 <__hexnan+0x132>
 800b998:	3501      	adds	r5, #1
 800b99a:	2d08      	cmp	r5, #8
 800b99c:	f10b 0b01 	add.w	fp, fp, #1
 800b9a0:	dd06      	ble.n	800b9b0 <__hexnan+0xfc>
 800b9a2:	4544      	cmp	r4, r8
 800b9a4:	d9c3      	bls.n	800b92e <__hexnan+0x7a>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9ac:	2501      	movs	r5, #1
 800b9ae:	3c04      	subs	r4, #4
 800b9b0:	6822      	ldr	r2, [r4, #0]
 800b9b2:	f000 000f 	and.w	r0, r0, #15
 800b9b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b9ba:	6022      	str	r2, [r4, #0]
 800b9bc:	e7b7      	b.n	800b92e <__hexnan+0x7a>
 800b9be:	2508      	movs	r5, #8
 800b9c0:	e7b5      	b.n	800b92e <__hexnan+0x7a>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d0df      	beq.n	800b988 <__hexnan+0xd4>
 800b9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9cc:	f1c3 0320 	rsb	r3, r3, #32
 800b9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9d8:	401a      	ands	r2, r3
 800b9da:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9de:	e7d3      	b.n	800b988 <__hexnan+0xd4>
 800b9e0:	3f04      	subs	r7, #4
 800b9e2:	e7d1      	b.n	800b988 <__hexnan+0xd4>
 800b9e4:	2004      	movs	r0, #4
 800b9e6:	b007      	add	sp, #28
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9ec <__ascii_mbtowc>:
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	b901      	cbnz	r1, 800b9f2 <__ascii_mbtowc+0x6>
 800b9f0:	a901      	add	r1, sp, #4
 800b9f2:	b142      	cbz	r2, 800ba06 <__ascii_mbtowc+0x1a>
 800b9f4:	b14b      	cbz	r3, 800ba0a <__ascii_mbtowc+0x1e>
 800b9f6:	7813      	ldrb	r3, [r2, #0]
 800b9f8:	600b      	str	r3, [r1, #0]
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	1e10      	subs	r0, r2, #0
 800b9fe:	bf18      	it	ne
 800ba00:	2001      	movne	r0, #1
 800ba02:	b002      	add	sp, #8
 800ba04:	4770      	bx	lr
 800ba06:	4610      	mov	r0, r2
 800ba08:	e7fb      	b.n	800ba02 <__ascii_mbtowc+0x16>
 800ba0a:	f06f 0001 	mvn.w	r0, #1
 800ba0e:	e7f8      	b.n	800ba02 <__ascii_mbtowc+0x16>

0800ba10 <memcpy>:
 800ba10:	440a      	add	r2, r1
 800ba12:	4291      	cmp	r1, r2
 800ba14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba18:	d100      	bne.n	800ba1c <memcpy+0xc>
 800ba1a:	4770      	bx	lr
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba26:	4291      	cmp	r1, r2
 800ba28:	d1f9      	bne.n	800ba1e <memcpy+0xe>
 800ba2a:	bd10      	pop	{r4, pc}

0800ba2c <_Balloc>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba30:	4604      	mov	r4, r0
 800ba32:	460d      	mov	r5, r1
 800ba34:	b976      	cbnz	r6, 800ba54 <_Balloc+0x28>
 800ba36:	2010      	movs	r0, #16
 800ba38:	f000 fdcc 	bl	800c5d4 <malloc>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ba40:	b920      	cbnz	r0, 800ba4c <_Balloc+0x20>
 800ba42:	4b18      	ldr	r3, [pc, #96]	; (800baa4 <_Balloc+0x78>)
 800ba44:	4818      	ldr	r0, [pc, #96]	; (800baa8 <_Balloc+0x7c>)
 800ba46:	2166      	movs	r1, #102	; 0x66
 800ba48:	f000 fd94 	bl	800c574 <__assert_func>
 800ba4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba50:	6006      	str	r6, [r0, #0]
 800ba52:	60c6      	str	r6, [r0, #12]
 800ba54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba56:	68f3      	ldr	r3, [r6, #12]
 800ba58:	b183      	cbz	r3, 800ba7c <_Balloc+0x50>
 800ba5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba62:	b9b8      	cbnz	r0, 800ba94 <_Balloc+0x68>
 800ba64:	2101      	movs	r1, #1
 800ba66:	fa01 f605 	lsl.w	r6, r1, r5
 800ba6a:	1d72      	adds	r2, r6, #5
 800ba6c:	0092      	lsls	r2, r2, #2
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 fc9a 	bl	800c3a8 <_calloc_r>
 800ba74:	b160      	cbz	r0, 800ba90 <_Balloc+0x64>
 800ba76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba7a:	e00e      	b.n	800ba9a <_Balloc+0x6e>
 800ba7c:	2221      	movs	r2, #33	; 0x21
 800ba7e:	2104      	movs	r1, #4
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fc91 	bl	800c3a8 <_calloc_r>
 800ba86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba88:	60f0      	str	r0, [r6, #12]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e4      	bne.n	800ba5a <_Balloc+0x2e>
 800ba90:	2000      	movs	r0, #0
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	6802      	ldr	r2, [r0, #0]
 800ba96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baa0:	e7f7      	b.n	800ba92 <_Balloc+0x66>
 800baa2:	bf00      	nop
 800baa4:	0800d68c 	.word	0x0800d68c
 800baa8:	0800d6a3 	.word	0x0800d6a3

0800baac <_Bfree>:
 800baac:	b570      	push	{r4, r5, r6, lr}
 800baae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bab0:	4605      	mov	r5, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	b976      	cbnz	r6, 800bad4 <_Bfree+0x28>
 800bab6:	2010      	movs	r0, #16
 800bab8:	f000 fd8c 	bl	800c5d4 <malloc>
 800babc:	4602      	mov	r2, r0
 800babe:	6268      	str	r0, [r5, #36]	; 0x24
 800bac0:	b920      	cbnz	r0, 800bacc <_Bfree+0x20>
 800bac2:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <_Bfree+0x3c>)
 800bac4:	4809      	ldr	r0, [pc, #36]	; (800baec <_Bfree+0x40>)
 800bac6:	218a      	movs	r1, #138	; 0x8a
 800bac8:	f000 fd54 	bl	800c574 <__assert_func>
 800bacc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bad0:	6006      	str	r6, [r0, #0]
 800bad2:	60c6      	str	r6, [r0, #12]
 800bad4:	b13c      	cbz	r4, 800bae6 <_Bfree+0x3a>
 800bad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bad8:	6862      	ldr	r2, [r4, #4]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bae0:	6021      	str	r1, [r4, #0]
 800bae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bae6:	bd70      	pop	{r4, r5, r6, pc}
 800bae8:	0800d68c 	.word	0x0800d68c
 800baec:	0800d6a3 	.word	0x0800d6a3

0800baf0 <__multadd>:
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	690d      	ldr	r5, [r1, #16]
 800baf6:	4607      	mov	r7, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	461e      	mov	r6, r3
 800bafc:	f101 0c14 	add.w	ip, r1, #20
 800bb00:	2000      	movs	r0, #0
 800bb02:	f8dc 3000 	ldr.w	r3, [ip]
 800bb06:	b299      	uxth	r1, r3
 800bb08:	fb02 6101 	mla	r1, r2, r1, r6
 800bb0c:	0c1e      	lsrs	r6, r3, #16
 800bb0e:	0c0b      	lsrs	r3, r1, #16
 800bb10:	fb02 3306 	mla	r3, r2, r6, r3
 800bb14:	b289      	uxth	r1, r1
 800bb16:	3001      	adds	r0, #1
 800bb18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb1c:	4285      	cmp	r5, r0
 800bb1e:	f84c 1b04 	str.w	r1, [ip], #4
 800bb22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb26:	dcec      	bgt.n	800bb02 <__multadd+0x12>
 800bb28:	b30e      	cbz	r6, 800bb6e <__multadd+0x7e>
 800bb2a:	68a3      	ldr	r3, [r4, #8]
 800bb2c:	42ab      	cmp	r3, r5
 800bb2e:	dc19      	bgt.n	800bb64 <__multadd+0x74>
 800bb30:	6861      	ldr	r1, [r4, #4]
 800bb32:	4638      	mov	r0, r7
 800bb34:	3101      	adds	r1, #1
 800bb36:	f7ff ff79 	bl	800ba2c <_Balloc>
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	b928      	cbnz	r0, 800bb4a <__multadd+0x5a>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	4b0c      	ldr	r3, [pc, #48]	; (800bb74 <__multadd+0x84>)
 800bb42:	480d      	ldr	r0, [pc, #52]	; (800bb78 <__multadd+0x88>)
 800bb44:	21b5      	movs	r1, #181	; 0xb5
 800bb46:	f000 fd15 	bl	800c574 <__assert_func>
 800bb4a:	6922      	ldr	r2, [r4, #16]
 800bb4c:	3202      	adds	r2, #2
 800bb4e:	f104 010c 	add.w	r1, r4, #12
 800bb52:	0092      	lsls	r2, r2, #2
 800bb54:	300c      	adds	r0, #12
 800bb56:	f7ff ff5b 	bl	800ba10 <memcpy>
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	f7ff ffa5 	bl	800baac <_Bfree>
 800bb62:	4644      	mov	r4, r8
 800bb64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb68:	3501      	adds	r5, #1
 800bb6a:	615e      	str	r6, [r3, #20]
 800bb6c:	6125      	str	r5, [r4, #16]
 800bb6e:	4620      	mov	r0, r4
 800bb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb74:	0800d601 	.word	0x0800d601
 800bb78:	0800d6a3 	.word	0x0800d6a3

0800bb7c <__s2b>:
 800bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb80:	460c      	mov	r4, r1
 800bb82:	4615      	mov	r5, r2
 800bb84:	461f      	mov	r7, r3
 800bb86:	2209      	movs	r2, #9
 800bb88:	3308      	adds	r3, #8
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb90:	2100      	movs	r1, #0
 800bb92:	2201      	movs	r2, #1
 800bb94:	429a      	cmp	r2, r3
 800bb96:	db09      	blt.n	800bbac <__s2b+0x30>
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7ff ff47 	bl	800ba2c <_Balloc>
 800bb9e:	b940      	cbnz	r0, 800bbb2 <__s2b+0x36>
 800bba0:	4602      	mov	r2, r0
 800bba2:	4b19      	ldr	r3, [pc, #100]	; (800bc08 <__s2b+0x8c>)
 800bba4:	4819      	ldr	r0, [pc, #100]	; (800bc0c <__s2b+0x90>)
 800bba6:	21ce      	movs	r1, #206	; 0xce
 800bba8:	f000 fce4 	bl	800c574 <__assert_func>
 800bbac:	0052      	lsls	r2, r2, #1
 800bbae:	3101      	adds	r1, #1
 800bbb0:	e7f0      	b.n	800bb94 <__s2b+0x18>
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	6143      	str	r3, [r0, #20]
 800bbb6:	2d09      	cmp	r5, #9
 800bbb8:	f04f 0301 	mov.w	r3, #1
 800bbbc:	6103      	str	r3, [r0, #16]
 800bbbe:	dd16      	ble.n	800bbee <__s2b+0x72>
 800bbc0:	f104 0909 	add.w	r9, r4, #9
 800bbc4:	46c8      	mov	r8, r9
 800bbc6:	442c      	add	r4, r5
 800bbc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbcc:	4601      	mov	r1, r0
 800bbce:	3b30      	subs	r3, #48	; 0x30
 800bbd0:	220a      	movs	r2, #10
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7ff ff8c 	bl	800baf0 <__multadd>
 800bbd8:	45a0      	cmp	r8, r4
 800bbda:	d1f5      	bne.n	800bbc8 <__s2b+0x4c>
 800bbdc:	f1a5 0408 	sub.w	r4, r5, #8
 800bbe0:	444c      	add	r4, r9
 800bbe2:	1b2d      	subs	r5, r5, r4
 800bbe4:	1963      	adds	r3, r4, r5
 800bbe6:	42bb      	cmp	r3, r7
 800bbe8:	db04      	blt.n	800bbf4 <__s2b+0x78>
 800bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbee:	340a      	adds	r4, #10
 800bbf0:	2509      	movs	r5, #9
 800bbf2:	e7f6      	b.n	800bbe2 <__s2b+0x66>
 800bbf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	3b30      	subs	r3, #48	; 0x30
 800bbfc:	220a      	movs	r2, #10
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7ff ff76 	bl	800baf0 <__multadd>
 800bc04:	e7ee      	b.n	800bbe4 <__s2b+0x68>
 800bc06:	bf00      	nop
 800bc08:	0800d601 	.word	0x0800d601
 800bc0c:	0800d6a3 	.word	0x0800d6a3

0800bc10 <__hi0bits>:
 800bc10:	0c03      	lsrs	r3, r0, #16
 800bc12:	041b      	lsls	r3, r3, #16
 800bc14:	b9d3      	cbnz	r3, 800bc4c <__hi0bits+0x3c>
 800bc16:	0400      	lsls	r0, r0, #16
 800bc18:	2310      	movs	r3, #16
 800bc1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc1e:	bf04      	itt	eq
 800bc20:	0200      	lsleq	r0, r0, #8
 800bc22:	3308      	addeq	r3, #8
 800bc24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc28:	bf04      	itt	eq
 800bc2a:	0100      	lsleq	r0, r0, #4
 800bc2c:	3304      	addeq	r3, #4
 800bc2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc32:	bf04      	itt	eq
 800bc34:	0080      	lsleq	r0, r0, #2
 800bc36:	3302      	addeq	r3, #2
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	db05      	blt.n	800bc48 <__hi0bits+0x38>
 800bc3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc40:	f103 0301 	add.w	r3, r3, #1
 800bc44:	bf08      	it	eq
 800bc46:	2320      	moveq	r3, #32
 800bc48:	4618      	mov	r0, r3
 800bc4a:	4770      	bx	lr
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e7e4      	b.n	800bc1a <__hi0bits+0xa>

0800bc50 <__lo0bits>:
 800bc50:	6803      	ldr	r3, [r0, #0]
 800bc52:	f013 0207 	ands.w	r2, r3, #7
 800bc56:	4601      	mov	r1, r0
 800bc58:	d00b      	beq.n	800bc72 <__lo0bits+0x22>
 800bc5a:	07da      	lsls	r2, r3, #31
 800bc5c:	d423      	bmi.n	800bca6 <__lo0bits+0x56>
 800bc5e:	0798      	lsls	r0, r3, #30
 800bc60:	bf49      	itett	mi
 800bc62:	085b      	lsrmi	r3, r3, #1
 800bc64:	089b      	lsrpl	r3, r3, #2
 800bc66:	2001      	movmi	r0, #1
 800bc68:	600b      	strmi	r3, [r1, #0]
 800bc6a:	bf5c      	itt	pl
 800bc6c:	600b      	strpl	r3, [r1, #0]
 800bc6e:	2002      	movpl	r0, #2
 800bc70:	4770      	bx	lr
 800bc72:	b298      	uxth	r0, r3
 800bc74:	b9a8      	cbnz	r0, 800bca2 <__lo0bits+0x52>
 800bc76:	0c1b      	lsrs	r3, r3, #16
 800bc78:	2010      	movs	r0, #16
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	b90a      	cbnz	r2, 800bc82 <__lo0bits+0x32>
 800bc7e:	3008      	adds	r0, #8
 800bc80:	0a1b      	lsrs	r3, r3, #8
 800bc82:	071a      	lsls	r2, r3, #28
 800bc84:	bf04      	itt	eq
 800bc86:	091b      	lsreq	r3, r3, #4
 800bc88:	3004      	addeq	r0, #4
 800bc8a:	079a      	lsls	r2, r3, #30
 800bc8c:	bf04      	itt	eq
 800bc8e:	089b      	lsreq	r3, r3, #2
 800bc90:	3002      	addeq	r0, #2
 800bc92:	07da      	lsls	r2, r3, #31
 800bc94:	d403      	bmi.n	800bc9e <__lo0bits+0x4e>
 800bc96:	085b      	lsrs	r3, r3, #1
 800bc98:	f100 0001 	add.w	r0, r0, #1
 800bc9c:	d005      	beq.n	800bcaa <__lo0bits+0x5a>
 800bc9e:	600b      	str	r3, [r1, #0]
 800bca0:	4770      	bx	lr
 800bca2:	4610      	mov	r0, r2
 800bca4:	e7e9      	b.n	800bc7a <__lo0bits+0x2a>
 800bca6:	2000      	movs	r0, #0
 800bca8:	4770      	bx	lr
 800bcaa:	2020      	movs	r0, #32
 800bcac:	4770      	bx	lr
	...

0800bcb0 <__i2b>:
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	f7ff feb9 	bl	800ba2c <_Balloc>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	b928      	cbnz	r0, 800bcca <__i2b+0x1a>
 800bcbe:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <__i2b+0x24>)
 800bcc0:	4805      	ldr	r0, [pc, #20]	; (800bcd8 <__i2b+0x28>)
 800bcc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcc6:	f000 fc55 	bl	800c574 <__assert_func>
 800bcca:	2301      	movs	r3, #1
 800bccc:	6144      	str	r4, [r0, #20]
 800bcce:	6103      	str	r3, [r0, #16]
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	bf00      	nop
 800bcd4:	0800d601 	.word	0x0800d601
 800bcd8:	0800d6a3 	.word	0x0800d6a3

0800bcdc <__multiply>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	4691      	mov	r9, r2
 800bce2:	690a      	ldr	r2, [r1, #16]
 800bce4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	bfb8      	it	lt
 800bcec:	460b      	movlt	r3, r1
 800bcee:	460c      	mov	r4, r1
 800bcf0:	bfbc      	itt	lt
 800bcf2:	464c      	movlt	r4, r9
 800bcf4:	4699      	movlt	r9, r3
 800bcf6:	6927      	ldr	r7, [r4, #16]
 800bcf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcfc:	68a3      	ldr	r3, [r4, #8]
 800bcfe:	6861      	ldr	r1, [r4, #4]
 800bd00:	eb07 060a 	add.w	r6, r7, sl
 800bd04:	42b3      	cmp	r3, r6
 800bd06:	b085      	sub	sp, #20
 800bd08:	bfb8      	it	lt
 800bd0a:	3101      	addlt	r1, #1
 800bd0c:	f7ff fe8e 	bl	800ba2c <_Balloc>
 800bd10:	b930      	cbnz	r0, 800bd20 <__multiply+0x44>
 800bd12:	4602      	mov	r2, r0
 800bd14:	4b44      	ldr	r3, [pc, #272]	; (800be28 <__multiply+0x14c>)
 800bd16:	4845      	ldr	r0, [pc, #276]	; (800be2c <__multiply+0x150>)
 800bd18:	f240 115d 	movw	r1, #349	; 0x15d
 800bd1c:	f000 fc2a 	bl	800c574 <__assert_func>
 800bd20:	f100 0514 	add.w	r5, r0, #20
 800bd24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd28:	462b      	mov	r3, r5
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	4543      	cmp	r3, r8
 800bd2e:	d321      	bcc.n	800bd74 <__multiply+0x98>
 800bd30:	f104 0314 	add.w	r3, r4, #20
 800bd34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd38:	f109 0314 	add.w	r3, r9, #20
 800bd3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd40:	9202      	str	r2, [sp, #8]
 800bd42:	1b3a      	subs	r2, r7, r4
 800bd44:	3a15      	subs	r2, #21
 800bd46:	f022 0203 	bic.w	r2, r2, #3
 800bd4a:	3204      	adds	r2, #4
 800bd4c:	f104 0115 	add.w	r1, r4, #21
 800bd50:	428f      	cmp	r7, r1
 800bd52:	bf38      	it	cc
 800bd54:	2204      	movcc	r2, #4
 800bd56:	9201      	str	r2, [sp, #4]
 800bd58:	9a02      	ldr	r2, [sp, #8]
 800bd5a:	9303      	str	r3, [sp, #12]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d80c      	bhi.n	800bd7a <__multiply+0x9e>
 800bd60:	2e00      	cmp	r6, #0
 800bd62:	dd03      	ble.n	800bd6c <__multiply+0x90>
 800bd64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d05a      	beq.n	800be22 <__multiply+0x146>
 800bd6c:	6106      	str	r6, [r0, #16]
 800bd6e:	b005      	add	sp, #20
 800bd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd74:	f843 2b04 	str.w	r2, [r3], #4
 800bd78:	e7d8      	b.n	800bd2c <__multiply+0x50>
 800bd7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd7e:	f1ba 0f00 	cmp.w	sl, #0
 800bd82:	d024      	beq.n	800bdce <__multiply+0xf2>
 800bd84:	f104 0e14 	add.w	lr, r4, #20
 800bd88:	46a9      	mov	r9, r5
 800bd8a:	f04f 0c00 	mov.w	ip, #0
 800bd8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd92:	f8d9 1000 	ldr.w	r1, [r9]
 800bd96:	fa1f fb82 	uxth.w	fp, r2
 800bd9a:	b289      	uxth	r1, r1
 800bd9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bda0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bda4:	f8d9 2000 	ldr.w	r2, [r9]
 800bda8:	4461      	add	r1, ip
 800bdaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdae:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdb6:	b289      	uxth	r1, r1
 800bdb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdbc:	4577      	cmp	r7, lr
 800bdbe:	f849 1b04 	str.w	r1, [r9], #4
 800bdc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdc6:	d8e2      	bhi.n	800bd8e <__multiply+0xb2>
 800bdc8:	9a01      	ldr	r2, [sp, #4]
 800bdca:	f845 c002 	str.w	ip, [r5, r2]
 800bdce:	9a03      	ldr	r2, [sp, #12]
 800bdd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	f1b9 0f00 	cmp.w	r9, #0
 800bdda:	d020      	beq.n	800be1e <__multiply+0x142>
 800bddc:	6829      	ldr	r1, [r5, #0]
 800bdde:	f104 0c14 	add.w	ip, r4, #20
 800bde2:	46ae      	mov	lr, r5
 800bde4:	f04f 0a00 	mov.w	sl, #0
 800bde8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdf0:	fb09 220b 	mla	r2, r9, fp, r2
 800bdf4:	4492      	add	sl, r2
 800bdf6:	b289      	uxth	r1, r1
 800bdf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdfc:	f84e 1b04 	str.w	r1, [lr], #4
 800be00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be04:	f8be 1000 	ldrh.w	r1, [lr]
 800be08:	0c12      	lsrs	r2, r2, #16
 800be0a:	fb09 1102 	mla	r1, r9, r2, r1
 800be0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be12:	4567      	cmp	r7, ip
 800be14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be18:	d8e6      	bhi.n	800bde8 <__multiply+0x10c>
 800be1a:	9a01      	ldr	r2, [sp, #4]
 800be1c:	50a9      	str	r1, [r5, r2]
 800be1e:	3504      	adds	r5, #4
 800be20:	e79a      	b.n	800bd58 <__multiply+0x7c>
 800be22:	3e01      	subs	r6, #1
 800be24:	e79c      	b.n	800bd60 <__multiply+0x84>
 800be26:	bf00      	nop
 800be28:	0800d601 	.word	0x0800d601
 800be2c:	0800d6a3 	.word	0x0800d6a3

0800be30 <__pow5mult>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	4615      	mov	r5, r2
 800be36:	f012 0203 	ands.w	r2, r2, #3
 800be3a:	4606      	mov	r6, r0
 800be3c:	460f      	mov	r7, r1
 800be3e:	d007      	beq.n	800be50 <__pow5mult+0x20>
 800be40:	4c25      	ldr	r4, [pc, #148]	; (800bed8 <__pow5mult+0xa8>)
 800be42:	3a01      	subs	r2, #1
 800be44:	2300      	movs	r3, #0
 800be46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be4a:	f7ff fe51 	bl	800baf0 <__multadd>
 800be4e:	4607      	mov	r7, r0
 800be50:	10ad      	asrs	r5, r5, #2
 800be52:	d03d      	beq.n	800bed0 <__pow5mult+0xa0>
 800be54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be56:	b97c      	cbnz	r4, 800be78 <__pow5mult+0x48>
 800be58:	2010      	movs	r0, #16
 800be5a:	f000 fbbb 	bl	800c5d4 <malloc>
 800be5e:	4602      	mov	r2, r0
 800be60:	6270      	str	r0, [r6, #36]	; 0x24
 800be62:	b928      	cbnz	r0, 800be70 <__pow5mult+0x40>
 800be64:	4b1d      	ldr	r3, [pc, #116]	; (800bedc <__pow5mult+0xac>)
 800be66:	481e      	ldr	r0, [pc, #120]	; (800bee0 <__pow5mult+0xb0>)
 800be68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be6c:	f000 fb82 	bl	800c574 <__assert_func>
 800be70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be74:	6004      	str	r4, [r0, #0]
 800be76:	60c4      	str	r4, [r0, #12]
 800be78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be80:	b94c      	cbnz	r4, 800be96 <__pow5mult+0x66>
 800be82:	f240 2171 	movw	r1, #625	; 0x271
 800be86:	4630      	mov	r0, r6
 800be88:	f7ff ff12 	bl	800bcb0 <__i2b>
 800be8c:	2300      	movs	r3, #0
 800be8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be92:	4604      	mov	r4, r0
 800be94:	6003      	str	r3, [r0, #0]
 800be96:	f04f 0900 	mov.w	r9, #0
 800be9a:	07eb      	lsls	r3, r5, #31
 800be9c:	d50a      	bpl.n	800beb4 <__pow5mult+0x84>
 800be9e:	4639      	mov	r1, r7
 800bea0:	4622      	mov	r2, r4
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff ff1a 	bl	800bcdc <__multiply>
 800bea8:	4639      	mov	r1, r7
 800beaa:	4680      	mov	r8, r0
 800beac:	4630      	mov	r0, r6
 800beae:	f7ff fdfd 	bl	800baac <_Bfree>
 800beb2:	4647      	mov	r7, r8
 800beb4:	106d      	asrs	r5, r5, #1
 800beb6:	d00b      	beq.n	800bed0 <__pow5mult+0xa0>
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	b938      	cbnz	r0, 800becc <__pow5mult+0x9c>
 800bebc:	4622      	mov	r2, r4
 800bebe:	4621      	mov	r1, r4
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff ff0b 	bl	800bcdc <__multiply>
 800bec6:	6020      	str	r0, [r4, #0]
 800bec8:	f8c0 9000 	str.w	r9, [r0]
 800becc:	4604      	mov	r4, r0
 800bece:	e7e4      	b.n	800be9a <__pow5mult+0x6a>
 800bed0:	4638      	mov	r0, r7
 800bed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed6:	bf00      	nop
 800bed8:	0800d7f0 	.word	0x0800d7f0
 800bedc:	0800d68c 	.word	0x0800d68c
 800bee0:	0800d6a3 	.word	0x0800d6a3

0800bee4 <__lshift>:
 800bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee8:	460c      	mov	r4, r1
 800beea:	6849      	ldr	r1, [r1, #4]
 800beec:	6923      	ldr	r3, [r4, #16]
 800beee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	4607      	mov	r7, r0
 800bef6:	4691      	mov	r9, r2
 800bef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800befc:	f108 0601 	add.w	r6, r8, #1
 800bf00:	42b3      	cmp	r3, r6
 800bf02:	db0b      	blt.n	800bf1c <__lshift+0x38>
 800bf04:	4638      	mov	r0, r7
 800bf06:	f7ff fd91 	bl	800ba2c <_Balloc>
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b948      	cbnz	r0, 800bf22 <__lshift+0x3e>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	4b2a      	ldr	r3, [pc, #168]	; (800bfbc <__lshift+0xd8>)
 800bf12:	482b      	ldr	r0, [pc, #172]	; (800bfc0 <__lshift+0xdc>)
 800bf14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf18:	f000 fb2c 	bl	800c574 <__assert_func>
 800bf1c:	3101      	adds	r1, #1
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	e7ee      	b.n	800bf00 <__lshift+0x1c>
 800bf22:	2300      	movs	r3, #0
 800bf24:	f100 0114 	add.w	r1, r0, #20
 800bf28:	f100 0210 	add.w	r2, r0, #16
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	4553      	cmp	r3, sl
 800bf30:	db37      	blt.n	800bfa2 <__lshift+0xbe>
 800bf32:	6920      	ldr	r0, [r4, #16]
 800bf34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf38:	f104 0314 	add.w	r3, r4, #20
 800bf3c:	f019 091f 	ands.w	r9, r9, #31
 800bf40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf48:	d02f      	beq.n	800bfaa <__lshift+0xc6>
 800bf4a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf4e:	468a      	mov	sl, r1
 800bf50:	f04f 0c00 	mov.w	ip, #0
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	fa02 f209 	lsl.w	r2, r2, r9
 800bf5a:	ea42 020c 	orr.w	r2, r2, ip
 800bf5e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf66:	4298      	cmp	r0, r3
 800bf68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf6c:	d8f2      	bhi.n	800bf54 <__lshift+0x70>
 800bf6e:	1b03      	subs	r3, r0, r4
 800bf70:	3b15      	subs	r3, #21
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	3304      	adds	r3, #4
 800bf78:	f104 0215 	add.w	r2, r4, #21
 800bf7c:	4290      	cmp	r0, r2
 800bf7e:	bf38      	it	cc
 800bf80:	2304      	movcc	r3, #4
 800bf82:	f841 c003 	str.w	ip, [r1, r3]
 800bf86:	f1bc 0f00 	cmp.w	ip, #0
 800bf8a:	d001      	beq.n	800bf90 <__lshift+0xac>
 800bf8c:	f108 0602 	add.w	r6, r8, #2
 800bf90:	3e01      	subs	r6, #1
 800bf92:	4638      	mov	r0, r7
 800bf94:	612e      	str	r6, [r5, #16]
 800bf96:	4621      	mov	r1, r4
 800bf98:	f7ff fd88 	bl	800baac <_Bfree>
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	e7c1      	b.n	800bf2e <__lshift+0x4a>
 800bfaa:	3904      	subs	r1, #4
 800bfac:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfb4:	4298      	cmp	r0, r3
 800bfb6:	d8f9      	bhi.n	800bfac <__lshift+0xc8>
 800bfb8:	e7ea      	b.n	800bf90 <__lshift+0xac>
 800bfba:	bf00      	nop
 800bfbc:	0800d601 	.word	0x0800d601
 800bfc0:	0800d6a3 	.word	0x0800d6a3

0800bfc4 <__mcmp>:
 800bfc4:	b530      	push	{r4, r5, lr}
 800bfc6:	6902      	ldr	r2, [r0, #16]
 800bfc8:	690c      	ldr	r4, [r1, #16]
 800bfca:	1b12      	subs	r2, r2, r4
 800bfcc:	d10e      	bne.n	800bfec <__mcmp+0x28>
 800bfce:	f100 0314 	add.w	r3, r0, #20
 800bfd2:	3114      	adds	r1, #20
 800bfd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfe0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfe4:	42a5      	cmp	r5, r4
 800bfe6:	d003      	beq.n	800bff0 <__mcmp+0x2c>
 800bfe8:	d305      	bcc.n	800bff6 <__mcmp+0x32>
 800bfea:	2201      	movs	r2, #1
 800bfec:	4610      	mov	r0, r2
 800bfee:	bd30      	pop	{r4, r5, pc}
 800bff0:	4283      	cmp	r3, r0
 800bff2:	d3f3      	bcc.n	800bfdc <__mcmp+0x18>
 800bff4:	e7fa      	b.n	800bfec <__mcmp+0x28>
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295
 800bffa:	e7f7      	b.n	800bfec <__mcmp+0x28>

0800bffc <__mdiff>:
 800bffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	460c      	mov	r4, r1
 800c002:	4606      	mov	r6, r0
 800c004:	4611      	mov	r1, r2
 800c006:	4620      	mov	r0, r4
 800c008:	4690      	mov	r8, r2
 800c00a:	f7ff ffdb 	bl	800bfc4 <__mcmp>
 800c00e:	1e05      	subs	r5, r0, #0
 800c010:	d110      	bne.n	800c034 <__mdiff+0x38>
 800c012:	4629      	mov	r1, r5
 800c014:	4630      	mov	r0, r6
 800c016:	f7ff fd09 	bl	800ba2c <_Balloc>
 800c01a:	b930      	cbnz	r0, 800c02a <__mdiff+0x2e>
 800c01c:	4b3a      	ldr	r3, [pc, #232]	; (800c108 <__mdiff+0x10c>)
 800c01e:	4602      	mov	r2, r0
 800c020:	f240 2132 	movw	r1, #562	; 0x232
 800c024:	4839      	ldr	r0, [pc, #228]	; (800c10c <__mdiff+0x110>)
 800c026:	f000 faa5 	bl	800c574 <__assert_func>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c034:	bfa4      	itt	ge
 800c036:	4643      	movge	r3, r8
 800c038:	46a0      	movge	r8, r4
 800c03a:	4630      	mov	r0, r6
 800c03c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c040:	bfa6      	itte	ge
 800c042:	461c      	movge	r4, r3
 800c044:	2500      	movge	r5, #0
 800c046:	2501      	movlt	r5, #1
 800c048:	f7ff fcf0 	bl	800ba2c <_Balloc>
 800c04c:	b920      	cbnz	r0, 800c058 <__mdiff+0x5c>
 800c04e:	4b2e      	ldr	r3, [pc, #184]	; (800c108 <__mdiff+0x10c>)
 800c050:	4602      	mov	r2, r0
 800c052:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c056:	e7e5      	b.n	800c024 <__mdiff+0x28>
 800c058:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c05c:	6926      	ldr	r6, [r4, #16]
 800c05e:	60c5      	str	r5, [r0, #12]
 800c060:	f104 0914 	add.w	r9, r4, #20
 800c064:	f108 0514 	add.w	r5, r8, #20
 800c068:	f100 0e14 	add.w	lr, r0, #20
 800c06c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c070:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c074:	f108 0210 	add.w	r2, r8, #16
 800c078:	46f2      	mov	sl, lr
 800c07a:	2100      	movs	r1, #0
 800c07c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c080:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c084:	fa1f f883 	uxth.w	r8, r3
 800c088:	fa11 f18b 	uxtah	r1, r1, fp
 800c08c:	0c1b      	lsrs	r3, r3, #16
 800c08e:	eba1 0808 	sub.w	r8, r1, r8
 800c092:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c096:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c09a:	fa1f f888 	uxth.w	r8, r8
 800c09e:	1419      	asrs	r1, r3, #16
 800c0a0:	454e      	cmp	r6, r9
 800c0a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0a6:	f84a 3b04 	str.w	r3, [sl], #4
 800c0aa:	d8e7      	bhi.n	800c07c <__mdiff+0x80>
 800c0ac:	1b33      	subs	r3, r6, r4
 800c0ae:	3b15      	subs	r3, #21
 800c0b0:	f023 0303 	bic.w	r3, r3, #3
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	3415      	adds	r4, #21
 800c0b8:	42a6      	cmp	r6, r4
 800c0ba:	bf38      	it	cc
 800c0bc:	2304      	movcc	r3, #4
 800c0be:	441d      	add	r5, r3
 800c0c0:	4473      	add	r3, lr
 800c0c2:	469e      	mov	lr, r3
 800c0c4:	462e      	mov	r6, r5
 800c0c6:	4566      	cmp	r6, ip
 800c0c8:	d30e      	bcc.n	800c0e8 <__mdiff+0xec>
 800c0ca:	f10c 0203 	add.w	r2, ip, #3
 800c0ce:	1b52      	subs	r2, r2, r5
 800c0d0:	f022 0203 	bic.w	r2, r2, #3
 800c0d4:	3d03      	subs	r5, #3
 800c0d6:	45ac      	cmp	ip, r5
 800c0d8:	bf38      	it	cc
 800c0da:	2200      	movcc	r2, #0
 800c0dc:	441a      	add	r2, r3
 800c0de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0e2:	b17b      	cbz	r3, 800c104 <__mdiff+0x108>
 800c0e4:	6107      	str	r7, [r0, #16]
 800c0e6:	e7a3      	b.n	800c030 <__mdiff+0x34>
 800c0e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0ec:	fa11 f288 	uxtah	r2, r1, r8
 800c0f0:	1414      	asrs	r4, r2, #16
 800c0f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0f6:	b292      	uxth	r2, r2
 800c0f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0fc:	f84e 2b04 	str.w	r2, [lr], #4
 800c100:	1421      	asrs	r1, r4, #16
 800c102:	e7e0      	b.n	800c0c6 <__mdiff+0xca>
 800c104:	3f01      	subs	r7, #1
 800c106:	e7ea      	b.n	800c0de <__mdiff+0xe2>
 800c108:	0800d601 	.word	0x0800d601
 800c10c:	0800d6a3 	.word	0x0800d6a3

0800c110 <__ulp>:
 800c110:	b082      	sub	sp, #8
 800c112:	ed8d 0b00 	vstr	d0, [sp]
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	4912      	ldr	r1, [pc, #72]	; (800c164 <__ulp+0x54>)
 800c11a:	4019      	ands	r1, r3
 800c11c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c120:	2900      	cmp	r1, #0
 800c122:	dd05      	ble.n	800c130 <__ulp+0x20>
 800c124:	2200      	movs	r2, #0
 800c126:	460b      	mov	r3, r1
 800c128:	ec43 2b10 	vmov	d0, r2, r3
 800c12c:	b002      	add	sp, #8
 800c12e:	4770      	bx	lr
 800c130:	4249      	negs	r1, r1
 800c132:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c136:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c13a:	f04f 0200 	mov.w	r2, #0
 800c13e:	f04f 0300 	mov.w	r3, #0
 800c142:	da04      	bge.n	800c14e <__ulp+0x3e>
 800c144:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c148:	fa41 f300 	asr.w	r3, r1, r0
 800c14c:	e7ec      	b.n	800c128 <__ulp+0x18>
 800c14e:	f1a0 0114 	sub.w	r1, r0, #20
 800c152:	291e      	cmp	r1, #30
 800c154:	bfda      	itte	le
 800c156:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c15a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c15e:	2101      	movgt	r1, #1
 800c160:	460a      	mov	r2, r1
 800c162:	e7e1      	b.n	800c128 <__ulp+0x18>
 800c164:	7ff00000 	.word	0x7ff00000

0800c168 <__b2d>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	6905      	ldr	r5, [r0, #16]
 800c16c:	f100 0714 	add.w	r7, r0, #20
 800c170:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c174:	1f2e      	subs	r6, r5, #4
 800c176:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7ff fd48 	bl	800bc10 <__hi0bits>
 800c180:	f1c0 0320 	rsb	r3, r0, #32
 800c184:	280a      	cmp	r0, #10
 800c186:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c204 <__b2d+0x9c>
 800c18a:	600b      	str	r3, [r1, #0]
 800c18c:	dc14      	bgt.n	800c1b8 <__b2d+0x50>
 800c18e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c192:	fa24 f10e 	lsr.w	r1, r4, lr
 800c196:	42b7      	cmp	r7, r6
 800c198:	ea41 030c 	orr.w	r3, r1, ip
 800c19c:	bf34      	ite	cc
 800c19e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c1a2:	2100      	movcs	r1, #0
 800c1a4:	3015      	adds	r0, #21
 800c1a6:	fa04 f000 	lsl.w	r0, r4, r0
 800c1aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800c1ae:	ea40 0201 	orr.w	r2, r0, r1
 800c1b2:	ec43 2b10 	vmov	d0, r2, r3
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	42b7      	cmp	r7, r6
 800c1ba:	bf3a      	itte	cc
 800c1bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c1c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c1c4:	2100      	movcs	r1, #0
 800c1c6:	380b      	subs	r0, #11
 800c1c8:	d017      	beq.n	800c1fa <__b2d+0x92>
 800c1ca:	f1c0 0c20 	rsb	ip, r0, #32
 800c1ce:	fa04 f500 	lsl.w	r5, r4, r0
 800c1d2:	42be      	cmp	r6, r7
 800c1d4:	fa21 f40c 	lsr.w	r4, r1, ip
 800c1d8:	ea45 0504 	orr.w	r5, r5, r4
 800c1dc:	bf8c      	ite	hi
 800c1de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1e2:	2400      	movls	r4, #0
 800c1e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1e8:	fa01 f000 	lsl.w	r0, r1, r0
 800c1ec:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1f4:	ea40 0204 	orr.w	r2, r0, r4
 800c1f8:	e7db      	b.n	800c1b2 <__b2d+0x4a>
 800c1fa:	ea44 030c 	orr.w	r3, r4, ip
 800c1fe:	460a      	mov	r2, r1
 800c200:	e7d7      	b.n	800c1b2 <__b2d+0x4a>
 800c202:	bf00      	nop
 800c204:	3ff00000 	.word	0x3ff00000

0800c208 <__d2b>:
 800c208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c20c:	4689      	mov	r9, r1
 800c20e:	2101      	movs	r1, #1
 800c210:	ec57 6b10 	vmov	r6, r7, d0
 800c214:	4690      	mov	r8, r2
 800c216:	f7ff fc09 	bl	800ba2c <_Balloc>
 800c21a:	4604      	mov	r4, r0
 800c21c:	b930      	cbnz	r0, 800c22c <__d2b+0x24>
 800c21e:	4602      	mov	r2, r0
 800c220:	4b25      	ldr	r3, [pc, #148]	; (800c2b8 <__d2b+0xb0>)
 800c222:	4826      	ldr	r0, [pc, #152]	; (800c2bc <__d2b+0xb4>)
 800c224:	f240 310a 	movw	r1, #778	; 0x30a
 800c228:	f000 f9a4 	bl	800c574 <__assert_func>
 800c22c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c234:	bb35      	cbnz	r5, 800c284 <__d2b+0x7c>
 800c236:	2e00      	cmp	r6, #0
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	d028      	beq.n	800c28e <__d2b+0x86>
 800c23c:	4668      	mov	r0, sp
 800c23e:	9600      	str	r6, [sp, #0]
 800c240:	f7ff fd06 	bl	800bc50 <__lo0bits>
 800c244:	9900      	ldr	r1, [sp, #0]
 800c246:	b300      	cbz	r0, 800c28a <__d2b+0x82>
 800c248:	9a01      	ldr	r2, [sp, #4]
 800c24a:	f1c0 0320 	rsb	r3, r0, #32
 800c24e:	fa02 f303 	lsl.w	r3, r2, r3
 800c252:	430b      	orrs	r3, r1
 800c254:	40c2      	lsrs	r2, r0
 800c256:	6163      	str	r3, [r4, #20]
 800c258:	9201      	str	r2, [sp, #4]
 800c25a:	9b01      	ldr	r3, [sp, #4]
 800c25c:	61a3      	str	r3, [r4, #24]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bf14      	ite	ne
 800c262:	2202      	movne	r2, #2
 800c264:	2201      	moveq	r2, #1
 800c266:	6122      	str	r2, [r4, #16]
 800c268:	b1d5      	cbz	r5, 800c2a0 <__d2b+0x98>
 800c26a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c26e:	4405      	add	r5, r0
 800c270:	f8c9 5000 	str.w	r5, [r9]
 800c274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c278:	f8c8 0000 	str.w	r0, [r8]
 800c27c:	4620      	mov	r0, r4
 800c27e:	b003      	add	sp, #12
 800c280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c288:	e7d5      	b.n	800c236 <__d2b+0x2e>
 800c28a:	6161      	str	r1, [r4, #20]
 800c28c:	e7e5      	b.n	800c25a <__d2b+0x52>
 800c28e:	a801      	add	r0, sp, #4
 800c290:	f7ff fcde 	bl	800bc50 <__lo0bits>
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	6163      	str	r3, [r4, #20]
 800c298:	2201      	movs	r2, #1
 800c29a:	6122      	str	r2, [r4, #16]
 800c29c:	3020      	adds	r0, #32
 800c29e:	e7e3      	b.n	800c268 <__d2b+0x60>
 800c2a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2a8:	f8c9 0000 	str.w	r0, [r9]
 800c2ac:	6918      	ldr	r0, [r3, #16]
 800c2ae:	f7ff fcaf 	bl	800bc10 <__hi0bits>
 800c2b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2b6:	e7df      	b.n	800c278 <__d2b+0x70>
 800c2b8:	0800d601 	.word	0x0800d601
 800c2bc:	0800d6a3 	.word	0x0800d6a3

0800c2c0 <__ratio>:
 800c2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	4688      	mov	r8, r1
 800c2c6:	4669      	mov	r1, sp
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	f7ff ff4d 	bl	800c168 <__b2d>
 800c2ce:	a901      	add	r1, sp, #4
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	ec55 4b10 	vmov	r4, r5, d0
 800c2d6:	ee10 aa10 	vmov	sl, s0
 800c2da:	f7ff ff45 	bl	800c168 <__b2d>
 800c2de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c2e6:	1a59      	subs	r1, r3, r1
 800c2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c2f2:	ec57 6b10 	vmov	r6, r7, d0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bfd6      	itet	le
 800c2fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2fe:	462a      	movgt	r2, r5
 800c300:	463a      	movle	r2, r7
 800c302:	46ab      	mov	fp, r5
 800c304:	bfd6      	itet	le
 800c306:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c30a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c30e:	ee00 3a90 	vmovle	s1, r3
 800c312:	ec4b ab17 	vmov	d7, sl, fp
 800c316:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c31a:	b003      	add	sp, #12
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c320 <__copybits>:
 800c320:	3901      	subs	r1, #1
 800c322:	b570      	push	{r4, r5, r6, lr}
 800c324:	1149      	asrs	r1, r1, #5
 800c326:	6914      	ldr	r4, [r2, #16]
 800c328:	3101      	adds	r1, #1
 800c32a:	f102 0314 	add.w	r3, r2, #20
 800c32e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c332:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c336:	1f05      	subs	r5, r0, #4
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d30c      	bcc.n	800c356 <__copybits+0x36>
 800c33c:	1aa3      	subs	r3, r4, r2
 800c33e:	3b11      	subs	r3, #17
 800c340:	f023 0303 	bic.w	r3, r3, #3
 800c344:	3211      	adds	r2, #17
 800c346:	42a2      	cmp	r2, r4
 800c348:	bf88      	it	hi
 800c34a:	2300      	movhi	r3, #0
 800c34c:	4418      	add	r0, r3
 800c34e:	2300      	movs	r3, #0
 800c350:	4288      	cmp	r0, r1
 800c352:	d305      	bcc.n	800c360 <__copybits+0x40>
 800c354:	bd70      	pop	{r4, r5, r6, pc}
 800c356:	f853 6b04 	ldr.w	r6, [r3], #4
 800c35a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c35e:	e7eb      	b.n	800c338 <__copybits+0x18>
 800c360:	f840 3b04 	str.w	r3, [r0], #4
 800c364:	e7f4      	b.n	800c350 <__copybits+0x30>

0800c366 <__any_on>:
 800c366:	f100 0214 	add.w	r2, r0, #20
 800c36a:	6900      	ldr	r0, [r0, #16]
 800c36c:	114b      	asrs	r3, r1, #5
 800c36e:	4298      	cmp	r0, r3
 800c370:	b510      	push	{r4, lr}
 800c372:	db11      	blt.n	800c398 <__any_on+0x32>
 800c374:	dd0a      	ble.n	800c38c <__any_on+0x26>
 800c376:	f011 011f 	ands.w	r1, r1, #31
 800c37a:	d007      	beq.n	800c38c <__any_on+0x26>
 800c37c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c380:	fa24 f001 	lsr.w	r0, r4, r1
 800c384:	fa00 f101 	lsl.w	r1, r0, r1
 800c388:	428c      	cmp	r4, r1
 800c38a:	d10b      	bne.n	800c3a4 <__any_on+0x3e>
 800c38c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c390:	4293      	cmp	r3, r2
 800c392:	d803      	bhi.n	800c39c <__any_on+0x36>
 800c394:	2000      	movs	r0, #0
 800c396:	bd10      	pop	{r4, pc}
 800c398:	4603      	mov	r3, r0
 800c39a:	e7f7      	b.n	800c38c <__any_on+0x26>
 800c39c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3a0:	2900      	cmp	r1, #0
 800c3a2:	d0f5      	beq.n	800c390 <__any_on+0x2a>
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	e7f6      	b.n	800c396 <__any_on+0x30>

0800c3a8 <_calloc_r>:
 800c3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3aa:	fba1 2402 	umull	r2, r4, r1, r2
 800c3ae:	b94c      	cbnz	r4, 800c3c4 <_calloc_r+0x1c>
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	f000 f82e 	bl	800c414 <_malloc_r>
 800c3b8:	9a01      	ldr	r2, [sp, #4]
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	b930      	cbnz	r0, 800c3cc <_calloc_r+0x24>
 800c3be:	4628      	mov	r0, r5
 800c3c0:	b003      	add	sp, #12
 800c3c2:	bd30      	pop	{r4, r5, pc}
 800c3c4:	220c      	movs	r2, #12
 800c3c6:	6002      	str	r2, [r0, #0]
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	e7f8      	b.n	800c3be <_calloc_r+0x16>
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	f7fe f917 	bl	800a600 <memset>
 800c3d2:	e7f4      	b.n	800c3be <_calloc_r+0x16>

0800c3d4 <sbrk_aligned>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	4e0e      	ldr	r6, [pc, #56]	; (800c410 <sbrk_aligned+0x3c>)
 800c3d8:	460c      	mov	r4, r1
 800c3da:	6831      	ldr	r1, [r6, #0]
 800c3dc:	4605      	mov	r5, r0
 800c3de:	b911      	cbnz	r1, 800c3e6 <sbrk_aligned+0x12>
 800c3e0:	f000 f896 	bl	800c510 <_sbrk_r>
 800c3e4:	6030      	str	r0, [r6, #0]
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f000 f891 	bl	800c510 <_sbrk_r>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	d00a      	beq.n	800c408 <sbrk_aligned+0x34>
 800c3f2:	1cc4      	adds	r4, r0, #3
 800c3f4:	f024 0403 	bic.w	r4, r4, #3
 800c3f8:	42a0      	cmp	r0, r4
 800c3fa:	d007      	beq.n	800c40c <sbrk_aligned+0x38>
 800c3fc:	1a21      	subs	r1, r4, r0
 800c3fe:	4628      	mov	r0, r5
 800c400:	f000 f886 	bl	800c510 <_sbrk_r>
 800c404:	3001      	adds	r0, #1
 800c406:	d101      	bne.n	800c40c <sbrk_aligned+0x38>
 800c408:	f04f 34ff 	mov.w	r4, #4294967295
 800c40c:	4620      	mov	r0, r4
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	24000564 	.word	0x24000564

0800c414 <_malloc_r>:
 800c414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c418:	1ccd      	adds	r5, r1, #3
 800c41a:	f025 0503 	bic.w	r5, r5, #3
 800c41e:	3508      	adds	r5, #8
 800c420:	2d0c      	cmp	r5, #12
 800c422:	bf38      	it	cc
 800c424:	250c      	movcc	r5, #12
 800c426:	2d00      	cmp	r5, #0
 800c428:	4607      	mov	r7, r0
 800c42a:	db01      	blt.n	800c430 <_malloc_r+0x1c>
 800c42c:	42a9      	cmp	r1, r5
 800c42e:	d905      	bls.n	800c43c <_malloc_r+0x28>
 800c430:	230c      	movs	r3, #12
 800c432:	603b      	str	r3, [r7, #0]
 800c434:	2600      	movs	r6, #0
 800c436:	4630      	mov	r0, r6
 800c438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c43c:	4e2e      	ldr	r6, [pc, #184]	; (800c4f8 <_malloc_r+0xe4>)
 800c43e:	f000 f8d1 	bl	800c5e4 <__malloc_lock>
 800c442:	6833      	ldr	r3, [r6, #0]
 800c444:	461c      	mov	r4, r3
 800c446:	bb34      	cbnz	r4, 800c496 <_malloc_r+0x82>
 800c448:	4629      	mov	r1, r5
 800c44a:	4638      	mov	r0, r7
 800c44c:	f7ff ffc2 	bl	800c3d4 <sbrk_aligned>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	4604      	mov	r4, r0
 800c454:	d14d      	bne.n	800c4f2 <_malloc_r+0xde>
 800c456:	6834      	ldr	r4, [r6, #0]
 800c458:	4626      	mov	r6, r4
 800c45a:	2e00      	cmp	r6, #0
 800c45c:	d140      	bne.n	800c4e0 <_malloc_r+0xcc>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	4631      	mov	r1, r6
 800c462:	4638      	mov	r0, r7
 800c464:	eb04 0803 	add.w	r8, r4, r3
 800c468:	f000 f852 	bl	800c510 <_sbrk_r>
 800c46c:	4580      	cmp	r8, r0
 800c46e:	d13a      	bne.n	800c4e6 <_malloc_r+0xd2>
 800c470:	6821      	ldr	r1, [r4, #0]
 800c472:	3503      	adds	r5, #3
 800c474:	1a6d      	subs	r5, r5, r1
 800c476:	f025 0503 	bic.w	r5, r5, #3
 800c47a:	3508      	adds	r5, #8
 800c47c:	2d0c      	cmp	r5, #12
 800c47e:	bf38      	it	cc
 800c480:	250c      	movcc	r5, #12
 800c482:	4629      	mov	r1, r5
 800c484:	4638      	mov	r0, r7
 800c486:	f7ff ffa5 	bl	800c3d4 <sbrk_aligned>
 800c48a:	3001      	adds	r0, #1
 800c48c:	d02b      	beq.n	800c4e6 <_malloc_r+0xd2>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	442b      	add	r3, r5
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	e00e      	b.n	800c4b4 <_malloc_r+0xa0>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	1b52      	subs	r2, r2, r5
 800c49a:	d41e      	bmi.n	800c4da <_malloc_r+0xc6>
 800c49c:	2a0b      	cmp	r2, #11
 800c49e:	d916      	bls.n	800c4ce <_malloc_r+0xba>
 800c4a0:	1961      	adds	r1, r4, r5
 800c4a2:	42a3      	cmp	r3, r4
 800c4a4:	6025      	str	r5, [r4, #0]
 800c4a6:	bf18      	it	ne
 800c4a8:	6059      	strne	r1, [r3, #4]
 800c4aa:	6863      	ldr	r3, [r4, #4]
 800c4ac:	bf08      	it	eq
 800c4ae:	6031      	streq	r1, [r6, #0]
 800c4b0:	5162      	str	r2, [r4, r5]
 800c4b2:	604b      	str	r3, [r1, #4]
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f104 060b 	add.w	r6, r4, #11
 800c4ba:	f000 f899 	bl	800c5f0 <__malloc_unlock>
 800c4be:	f026 0607 	bic.w	r6, r6, #7
 800c4c2:	1d23      	adds	r3, r4, #4
 800c4c4:	1af2      	subs	r2, r6, r3
 800c4c6:	d0b6      	beq.n	800c436 <_malloc_r+0x22>
 800c4c8:	1b9b      	subs	r3, r3, r6
 800c4ca:	50a3      	str	r3, [r4, r2]
 800c4cc:	e7b3      	b.n	800c436 <_malloc_r+0x22>
 800c4ce:	6862      	ldr	r2, [r4, #4]
 800c4d0:	42a3      	cmp	r3, r4
 800c4d2:	bf0c      	ite	eq
 800c4d4:	6032      	streq	r2, [r6, #0]
 800c4d6:	605a      	strne	r2, [r3, #4]
 800c4d8:	e7ec      	b.n	800c4b4 <_malloc_r+0xa0>
 800c4da:	4623      	mov	r3, r4
 800c4dc:	6864      	ldr	r4, [r4, #4]
 800c4de:	e7b2      	b.n	800c446 <_malloc_r+0x32>
 800c4e0:	4634      	mov	r4, r6
 800c4e2:	6876      	ldr	r6, [r6, #4]
 800c4e4:	e7b9      	b.n	800c45a <_malloc_r+0x46>
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	603b      	str	r3, [r7, #0]
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	f000 f880 	bl	800c5f0 <__malloc_unlock>
 800c4f0:	e7a1      	b.n	800c436 <_malloc_r+0x22>
 800c4f2:	6025      	str	r5, [r4, #0]
 800c4f4:	e7de      	b.n	800c4b4 <_malloc_r+0xa0>
 800c4f6:	bf00      	nop
 800c4f8:	24000560 	.word	0x24000560
 800c4fc:	00000000 	.word	0x00000000

0800c500 <nan>:
 800c500:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c508 <nan+0x8>
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	00000000 	.word	0x00000000
 800c50c:	7ff80000 	.word	0x7ff80000

0800c510 <_sbrk_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_sbrk_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f5 fbd4 	bl	8001cc8 <_sbrk>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_sbrk_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_sbrk_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	24000568 	.word	0x24000568

0800c530 <strncmp>:
 800c530:	b510      	push	{r4, lr}
 800c532:	b17a      	cbz	r2, 800c554 <strncmp+0x24>
 800c534:	4603      	mov	r3, r0
 800c536:	3901      	subs	r1, #1
 800c538:	1884      	adds	r4, r0, r2
 800c53a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c53e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c542:	4290      	cmp	r0, r2
 800c544:	d101      	bne.n	800c54a <strncmp+0x1a>
 800c546:	42a3      	cmp	r3, r4
 800c548:	d101      	bne.n	800c54e <strncmp+0x1e>
 800c54a:	1a80      	subs	r0, r0, r2
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	2800      	cmp	r0, #0
 800c550:	d1f3      	bne.n	800c53a <strncmp+0xa>
 800c552:	e7fa      	b.n	800c54a <strncmp+0x1a>
 800c554:	4610      	mov	r0, r2
 800c556:	e7f9      	b.n	800c54c <strncmp+0x1c>

0800c558 <__ascii_wctomb>:
 800c558:	b149      	cbz	r1, 800c56e <__ascii_wctomb+0x16>
 800c55a:	2aff      	cmp	r2, #255	; 0xff
 800c55c:	bf85      	ittet	hi
 800c55e:	238a      	movhi	r3, #138	; 0x8a
 800c560:	6003      	strhi	r3, [r0, #0]
 800c562:	700a      	strbls	r2, [r1, #0]
 800c564:	f04f 30ff 	movhi.w	r0, #4294967295
 800c568:	bf98      	it	ls
 800c56a:	2001      	movls	r0, #1
 800c56c:	4770      	bx	lr
 800c56e:	4608      	mov	r0, r1
 800c570:	4770      	bx	lr
	...

0800c574 <__assert_func>:
 800c574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c576:	4614      	mov	r4, r2
 800c578:	461a      	mov	r2, r3
 800c57a:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <__assert_func+0x2c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4605      	mov	r5, r0
 800c580:	68d8      	ldr	r0, [r3, #12]
 800c582:	b14c      	cbz	r4, 800c598 <__assert_func+0x24>
 800c584:	4b07      	ldr	r3, [pc, #28]	; (800c5a4 <__assert_func+0x30>)
 800c586:	9100      	str	r1, [sp, #0]
 800c588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c58c:	4906      	ldr	r1, [pc, #24]	; (800c5a8 <__assert_func+0x34>)
 800c58e:	462b      	mov	r3, r5
 800c590:	f000 f80e 	bl	800c5b0 <fiprintf>
 800c594:	f000 fc2c 	bl	800cdf0 <abort>
 800c598:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <__assert_func+0x38>)
 800c59a:	461c      	mov	r4, r3
 800c59c:	e7f3      	b.n	800c586 <__assert_func+0x12>
 800c59e:	bf00      	nop
 800c5a0:	24000014 	.word	0x24000014
 800c5a4:	0800d7fc 	.word	0x0800d7fc
 800c5a8:	0800d809 	.word	0x0800d809
 800c5ac:	0800d837 	.word	0x0800d837

0800c5b0 <fiprintf>:
 800c5b0:	b40e      	push	{r1, r2, r3}
 800c5b2:	b503      	push	{r0, r1, lr}
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	ab03      	add	r3, sp, #12
 800c5b8:	4805      	ldr	r0, [pc, #20]	; (800c5d0 <fiprintf+0x20>)
 800c5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5be:	6800      	ldr	r0, [r0, #0]
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	f000 f891 	bl	800c6e8 <_vfiprintf_r>
 800c5c6:	b002      	add	sp, #8
 800c5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5cc:	b003      	add	sp, #12
 800c5ce:	4770      	bx	lr
 800c5d0:	24000014 	.word	0x24000014

0800c5d4 <malloc>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	; (800c5e0 <malloc+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f7ff bf1b 	b.w	800c414 <_malloc_r>
 800c5de:	bf00      	nop
 800c5e0:	24000014 	.word	0x24000014

0800c5e4 <__malloc_lock>:
 800c5e4:	4801      	ldr	r0, [pc, #4]	; (800c5ec <__malloc_lock+0x8>)
 800c5e6:	f000 bdc3 	b.w	800d170 <__retarget_lock_acquire_recursive>
 800c5ea:	bf00      	nop
 800c5ec:	2400056c 	.word	0x2400056c

0800c5f0 <__malloc_unlock>:
 800c5f0:	4801      	ldr	r0, [pc, #4]	; (800c5f8 <__malloc_unlock+0x8>)
 800c5f2:	f000 bdbe 	b.w	800d172 <__retarget_lock_release_recursive>
 800c5f6:	bf00      	nop
 800c5f8:	2400056c 	.word	0x2400056c

0800c5fc <_free_r>:
 800c5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fe:	2900      	cmp	r1, #0
 800c600:	d044      	beq.n	800c68c <_free_r+0x90>
 800c602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c606:	9001      	str	r0, [sp, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f1a1 0404 	sub.w	r4, r1, #4
 800c60e:	bfb8      	it	lt
 800c610:	18e4      	addlt	r4, r4, r3
 800c612:	f7ff ffe7 	bl	800c5e4 <__malloc_lock>
 800c616:	4a1e      	ldr	r2, [pc, #120]	; (800c690 <_free_r+0x94>)
 800c618:	9801      	ldr	r0, [sp, #4]
 800c61a:	6813      	ldr	r3, [r2, #0]
 800c61c:	b933      	cbnz	r3, 800c62c <_free_r+0x30>
 800c61e:	6063      	str	r3, [r4, #4]
 800c620:	6014      	str	r4, [r2, #0]
 800c622:	b003      	add	sp, #12
 800c624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c628:	f7ff bfe2 	b.w	800c5f0 <__malloc_unlock>
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	d908      	bls.n	800c642 <_free_r+0x46>
 800c630:	6825      	ldr	r5, [r4, #0]
 800c632:	1961      	adds	r1, r4, r5
 800c634:	428b      	cmp	r3, r1
 800c636:	bf01      	itttt	eq
 800c638:	6819      	ldreq	r1, [r3, #0]
 800c63a:	685b      	ldreq	r3, [r3, #4]
 800c63c:	1949      	addeq	r1, r1, r5
 800c63e:	6021      	streq	r1, [r4, #0]
 800c640:	e7ed      	b.n	800c61e <_free_r+0x22>
 800c642:	461a      	mov	r2, r3
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	b10b      	cbz	r3, 800c64c <_free_r+0x50>
 800c648:	42a3      	cmp	r3, r4
 800c64a:	d9fa      	bls.n	800c642 <_free_r+0x46>
 800c64c:	6811      	ldr	r1, [r2, #0]
 800c64e:	1855      	adds	r5, r2, r1
 800c650:	42a5      	cmp	r5, r4
 800c652:	d10b      	bne.n	800c66c <_free_r+0x70>
 800c654:	6824      	ldr	r4, [r4, #0]
 800c656:	4421      	add	r1, r4
 800c658:	1854      	adds	r4, r2, r1
 800c65a:	42a3      	cmp	r3, r4
 800c65c:	6011      	str	r1, [r2, #0]
 800c65e:	d1e0      	bne.n	800c622 <_free_r+0x26>
 800c660:	681c      	ldr	r4, [r3, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	6053      	str	r3, [r2, #4]
 800c666:	4421      	add	r1, r4
 800c668:	6011      	str	r1, [r2, #0]
 800c66a:	e7da      	b.n	800c622 <_free_r+0x26>
 800c66c:	d902      	bls.n	800c674 <_free_r+0x78>
 800c66e:	230c      	movs	r3, #12
 800c670:	6003      	str	r3, [r0, #0]
 800c672:	e7d6      	b.n	800c622 <_free_r+0x26>
 800c674:	6825      	ldr	r5, [r4, #0]
 800c676:	1961      	adds	r1, r4, r5
 800c678:	428b      	cmp	r3, r1
 800c67a:	bf04      	itt	eq
 800c67c:	6819      	ldreq	r1, [r3, #0]
 800c67e:	685b      	ldreq	r3, [r3, #4]
 800c680:	6063      	str	r3, [r4, #4]
 800c682:	bf04      	itt	eq
 800c684:	1949      	addeq	r1, r1, r5
 800c686:	6021      	streq	r1, [r4, #0]
 800c688:	6054      	str	r4, [r2, #4]
 800c68a:	e7ca      	b.n	800c622 <_free_r+0x26>
 800c68c:	b003      	add	sp, #12
 800c68e:	bd30      	pop	{r4, r5, pc}
 800c690:	24000560 	.word	0x24000560

0800c694 <__sfputc_r>:
 800c694:	6893      	ldr	r3, [r2, #8]
 800c696:	3b01      	subs	r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	b410      	push	{r4}
 800c69c:	6093      	str	r3, [r2, #8]
 800c69e:	da08      	bge.n	800c6b2 <__sfputc_r+0x1e>
 800c6a0:	6994      	ldr	r4, [r2, #24]
 800c6a2:	42a3      	cmp	r3, r4
 800c6a4:	db01      	blt.n	800c6aa <__sfputc_r+0x16>
 800c6a6:	290a      	cmp	r1, #10
 800c6a8:	d103      	bne.n	800c6b2 <__sfputc_r+0x1e>
 800c6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ae:	f000 badf 	b.w	800cc70 <__swbuf_r>
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	1c58      	adds	r0, r3, #1
 800c6b6:	6010      	str	r0, [r2, #0]
 800c6b8:	7019      	strb	r1, [r3, #0]
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <__sfputs_r>:
 800c6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	460f      	mov	r7, r1
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	18d5      	adds	r5, r2, r3
 800c6cc:	42ac      	cmp	r4, r5
 800c6ce:	d101      	bne.n	800c6d4 <__sfputs_r+0x12>
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	e007      	b.n	800c6e4 <__sfputs_r+0x22>
 800c6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d8:	463a      	mov	r2, r7
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f7ff ffda 	bl	800c694 <__sfputc_r>
 800c6e0:	1c43      	adds	r3, r0, #1
 800c6e2:	d1f3      	bne.n	800c6cc <__sfputs_r+0xa>
 800c6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6e8 <_vfiprintf_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	b09d      	sub	sp, #116	; 0x74
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	4698      	mov	r8, r3
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	b118      	cbz	r0, 800c700 <_vfiprintf_r+0x18>
 800c6f8:	6983      	ldr	r3, [r0, #24]
 800c6fa:	b90b      	cbnz	r3, 800c700 <_vfiprintf_r+0x18>
 800c6fc:	f000 fc9a 	bl	800d034 <__sinit>
 800c700:	4b89      	ldr	r3, [pc, #548]	; (800c928 <_vfiprintf_r+0x240>)
 800c702:	429d      	cmp	r5, r3
 800c704:	d11b      	bne.n	800c73e <_vfiprintf_r+0x56>
 800c706:	6875      	ldr	r5, [r6, #4]
 800c708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70a:	07d9      	lsls	r1, r3, #31
 800c70c:	d405      	bmi.n	800c71a <_vfiprintf_r+0x32>
 800c70e:	89ab      	ldrh	r3, [r5, #12]
 800c710:	059a      	lsls	r2, r3, #22
 800c712:	d402      	bmi.n	800c71a <_vfiprintf_r+0x32>
 800c714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c716:	f000 fd2b 	bl	800d170 <__retarget_lock_acquire_recursive>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	071b      	lsls	r3, r3, #28
 800c71e:	d501      	bpl.n	800c724 <_vfiprintf_r+0x3c>
 800c720:	692b      	ldr	r3, [r5, #16]
 800c722:	b9eb      	cbnz	r3, 800c760 <_vfiprintf_r+0x78>
 800c724:	4629      	mov	r1, r5
 800c726:	4630      	mov	r0, r6
 800c728:	f000 faf4 	bl	800cd14 <__swsetup_r>
 800c72c:	b1c0      	cbz	r0, 800c760 <_vfiprintf_r+0x78>
 800c72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c730:	07dc      	lsls	r4, r3, #31
 800c732:	d50e      	bpl.n	800c752 <_vfiprintf_r+0x6a>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	b01d      	add	sp, #116	; 0x74
 800c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73e:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <_vfiprintf_r+0x244>)
 800c740:	429d      	cmp	r5, r3
 800c742:	d101      	bne.n	800c748 <_vfiprintf_r+0x60>
 800c744:	68b5      	ldr	r5, [r6, #8]
 800c746:	e7df      	b.n	800c708 <_vfiprintf_r+0x20>
 800c748:	4b79      	ldr	r3, [pc, #484]	; (800c930 <_vfiprintf_r+0x248>)
 800c74a:	429d      	cmp	r5, r3
 800c74c:	bf08      	it	eq
 800c74e:	68f5      	ldreq	r5, [r6, #12]
 800c750:	e7da      	b.n	800c708 <_vfiprintf_r+0x20>
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	0598      	lsls	r0, r3, #22
 800c756:	d4ed      	bmi.n	800c734 <_vfiprintf_r+0x4c>
 800c758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75a:	f000 fd0a 	bl	800d172 <__retarget_lock_release_recursive>
 800c75e:	e7e9      	b.n	800c734 <_vfiprintf_r+0x4c>
 800c760:	2300      	movs	r3, #0
 800c762:	9309      	str	r3, [sp, #36]	; 0x24
 800c764:	2320      	movs	r3, #32
 800c766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c76a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76e:	2330      	movs	r3, #48	; 0x30
 800c770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c934 <_vfiprintf_r+0x24c>
 800c774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c778:	f04f 0901 	mov.w	r9, #1
 800c77c:	4623      	mov	r3, r4
 800c77e:	469a      	mov	sl, r3
 800c780:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c784:	b10a      	cbz	r2, 800c78a <_vfiprintf_r+0xa2>
 800c786:	2a25      	cmp	r2, #37	; 0x25
 800c788:	d1f9      	bne.n	800c77e <_vfiprintf_r+0x96>
 800c78a:	ebba 0b04 	subs.w	fp, sl, r4
 800c78e:	d00b      	beq.n	800c7a8 <_vfiprintf_r+0xc0>
 800c790:	465b      	mov	r3, fp
 800c792:	4622      	mov	r2, r4
 800c794:	4629      	mov	r1, r5
 800c796:	4630      	mov	r0, r6
 800c798:	f7ff ff93 	bl	800c6c2 <__sfputs_r>
 800c79c:	3001      	adds	r0, #1
 800c79e:	f000 80aa 	beq.w	800c8f6 <_vfiprintf_r+0x20e>
 800c7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a4:	445a      	add	r2, fp
 800c7a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 80a2 	beq.w	800c8f6 <_vfiprintf_r+0x20e>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7bc:	f10a 0a01 	add.w	sl, sl, #1
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	9307      	str	r3, [sp, #28]
 800c7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ca:	4654      	mov	r4, sl
 800c7cc:	2205      	movs	r2, #5
 800c7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d2:	4858      	ldr	r0, [pc, #352]	; (800c934 <_vfiprintf_r+0x24c>)
 800c7d4:	f7f3 fda4 	bl	8000320 <memchr>
 800c7d8:	9a04      	ldr	r2, [sp, #16]
 800c7da:	b9d8      	cbnz	r0, 800c814 <_vfiprintf_r+0x12c>
 800c7dc:	06d1      	lsls	r1, r2, #27
 800c7de:	bf44      	itt	mi
 800c7e0:	2320      	movmi	r3, #32
 800c7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e6:	0713      	lsls	r3, r2, #28
 800c7e8:	bf44      	itt	mi
 800c7ea:	232b      	movmi	r3, #43	; 0x2b
 800c7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f6:	d015      	beq.n	800c824 <_vfiprintf_r+0x13c>
 800c7f8:	9a07      	ldr	r2, [sp, #28]
 800c7fa:	4654      	mov	r4, sl
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	f04f 0c0a 	mov.w	ip, #10
 800c802:	4621      	mov	r1, r4
 800c804:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c808:	3b30      	subs	r3, #48	; 0x30
 800c80a:	2b09      	cmp	r3, #9
 800c80c:	d94e      	bls.n	800c8ac <_vfiprintf_r+0x1c4>
 800c80e:	b1b0      	cbz	r0, 800c83e <_vfiprintf_r+0x156>
 800c810:	9207      	str	r2, [sp, #28]
 800c812:	e014      	b.n	800c83e <_vfiprintf_r+0x156>
 800c814:	eba0 0308 	sub.w	r3, r0, r8
 800c818:	fa09 f303 	lsl.w	r3, r9, r3
 800c81c:	4313      	orrs	r3, r2
 800c81e:	9304      	str	r3, [sp, #16]
 800c820:	46a2      	mov	sl, r4
 800c822:	e7d2      	b.n	800c7ca <_vfiprintf_r+0xe2>
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1d19      	adds	r1, r3, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	9103      	str	r1, [sp, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfbb      	ittet	lt
 800c830:	425b      	neglt	r3, r3
 800c832:	f042 0202 	orrlt.w	r2, r2, #2
 800c836:	9307      	strge	r3, [sp, #28]
 800c838:	9307      	strlt	r3, [sp, #28]
 800c83a:	bfb8      	it	lt
 800c83c:	9204      	strlt	r2, [sp, #16]
 800c83e:	7823      	ldrb	r3, [r4, #0]
 800c840:	2b2e      	cmp	r3, #46	; 0x2e
 800c842:	d10c      	bne.n	800c85e <_vfiprintf_r+0x176>
 800c844:	7863      	ldrb	r3, [r4, #1]
 800c846:	2b2a      	cmp	r3, #42	; 0x2a
 800c848:	d135      	bne.n	800c8b6 <_vfiprintf_r+0x1ce>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	1d1a      	adds	r2, r3, #4
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	9203      	str	r2, [sp, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfb8      	it	lt
 800c856:	f04f 33ff 	movlt.w	r3, #4294967295
 800c85a:	3402      	adds	r4, #2
 800c85c:	9305      	str	r3, [sp, #20]
 800c85e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c944 <_vfiprintf_r+0x25c>
 800c862:	7821      	ldrb	r1, [r4, #0]
 800c864:	2203      	movs	r2, #3
 800c866:	4650      	mov	r0, sl
 800c868:	f7f3 fd5a 	bl	8000320 <memchr>
 800c86c:	b140      	cbz	r0, 800c880 <_vfiprintf_r+0x198>
 800c86e:	2340      	movs	r3, #64	; 0x40
 800c870:	eba0 000a 	sub.w	r0, r0, sl
 800c874:	fa03 f000 	lsl.w	r0, r3, r0
 800c878:	9b04      	ldr	r3, [sp, #16]
 800c87a:	4303      	orrs	r3, r0
 800c87c:	3401      	adds	r4, #1
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c884:	482c      	ldr	r0, [pc, #176]	; (800c938 <_vfiprintf_r+0x250>)
 800c886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c88a:	2206      	movs	r2, #6
 800c88c:	f7f3 fd48 	bl	8000320 <memchr>
 800c890:	2800      	cmp	r0, #0
 800c892:	d03f      	beq.n	800c914 <_vfiprintf_r+0x22c>
 800c894:	4b29      	ldr	r3, [pc, #164]	; (800c93c <_vfiprintf_r+0x254>)
 800c896:	bb1b      	cbnz	r3, 800c8e0 <_vfiprintf_r+0x1f8>
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	3307      	adds	r3, #7
 800c89c:	f023 0307 	bic.w	r3, r3, #7
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a6:	443b      	add	r3, r7
 800c8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8aa:	e767      	b.n	800c77c <_vfiprintf_r+0x94>
 800c8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	e7a5      	b.n	800c802 <_vfiprintf_r+0x11a>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	3401      	adds	r4, #1
 800c8ba:	9305      	str	r3, [sp, #20]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	f04f 0c0a 	mov.w	ip, #10
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c8:	3a30      	subs	r2, #48	; 0x30
 800c8ca:	2a09      	cmp	r2, #9
 800c8cc:	d903      	bls.n	800c8d6 <_vfiprintf_r+0x1ee>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0c5      	beq.n	800c85e <_vfiprintf_r+0x176>
 800c8d2:	9105      	str	r1, [sp, #20]
 800c8d4:	e7c3      	b.n	800c85e <_vfiprintf_r+0x176>
 800c8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8da:	4604      	mov	r4, r0
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e7f0      	b.n	800c8c2 <_vfiprintf_r+0x1da>
 800c8e0:	ab03      	add	r3, sp, #12
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	4b16      	ldr	r3, [pc, #88]	; (800c940 <_vfiprintf_r+0x258>)
 800c8e8:	a904      	add	r1, sp, #16
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	1c78      	adds	r0, r7, #1
 800c8f4:	d1d6      	bne.n	800c8a4 <_vfiprintf_r+0x1bc>
 800c8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f8:	07d9      	lsls	r1, r3, #31
 800c8fa:	d405      	bmi.n	800c908 <_vfiprintf_r+0x220>
 800c8fc:	89ab      	ldrh	r3, [r5, #12]
 800c8fe:	059a      	lsls	r2, r3, #22
 800c900:	d402      	bmi.n	800c908 <_vfiprintf_r+0x220>
 800c902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c904:	f000 fc35 	bl	800d172 <__retarget_lock_release_recursive>
 800c908:	89ab      	ldrh	r3, [r5, #12]
 800c90a:	065b      	lsls	r3, r3, #25
 800c90c:	f53f af12 	bmi.w	800c734 <_vfiprintf_r+0x4c>
 800c910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c912:	e711      	b.n	800c738 <_vfiprintf_r+0x50>
 800c914:	ab03      	add	r3, sp, #12
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	462a      	mov	r2, r5
 800c91a:	4b09      	ldr	r3, [pc, #36]	; (800c940 <_vfiprintf_r+0x258>)
 800c91c:	a904      	add	r1, sp, #16
 800c91e:	4630      	mov	r0, r6
 800c920:	f000 f880 	bl	800ca24 <_printf_i>
 800c924:	e7e4      	b.n	800c8f0 <_vfiprintf_r+0x208>
 800c926:	bf00      	nop
 800c928:	0800d88c 	.word	0x0800d88c
 800c92c:	0800d8ac 	.word	0x0800d8ac
 800c930:	0800d86c 	.word	0x0800d86c
 800c934:	0800d838 	.word	0x0800d838
 800c938:	0800d842 	.word	0x0800d842
 800c93c:	00000000 	.word	0x00000000
 800c940:	0800c6c3 	.word	0x0800c6c3
 800c944:	0800d83e 	.word	0x0800d83e

0800c948 <_printf_common>:
 800c948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c94c:	4616      	mov	r6, r2
 800c94e:	4699      	mov	r9, r3
 800c950:	688a      	ldr	r2, [r1, #8]
 800c952:	690b      	ldr	r3, [r1, #16]
 800c954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c958:	4293      	cmp	r3, r2
 800c95a:	bfb8      	it	lt
 800c95c:	4613      	movlt	r3, r2
 800c95e:	6033      	str	r3, [r6, #0]
 800c960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c964:	4607      	mov	r7, r0
 800c966:	460c      	mov	r4, r1
 800c968:	b10a      	cbz	r2, 800c96e <_printf_common+0x26>
 800c96a:	3301      	adds	r3, #1
 800c96c:	6033      	str	r3, [r6, #0]
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	0699      	lsls	r1, r3, #26
 800c972:	bf42      	ittt	mi
 800c974:	6833      	ldrmi	r3, [r6, #0]
 800c976:	3302      	addmi	r3, #2
 800c978:	6033      	strmi	r3, [r6, #0]
 800c97a:	6825      	ldr	r5, [r4, #0]
 800c97c:	f015 0506 	ands.w	r5, r5, #6
 800c980:	d106      	bne.n	800c990 <_printf_common+0x48>
 800c982:	f104 0a19 	add.w	sl, r4, #25
 800c986:	68e3      	ldr	r3, [r4, #12]
 800c988:	6832      	ldr	r2, [r6, #0]
 800c98a:	1a9b      	subs	r3, r3, r2
 800c98c:	42ab      	cmp	r3, r5
 800c98e:	dc26      	bgt.n	800c9de <_printf_common+0x96>
 800c990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c994:	1e13      	subs	r3, r2, #0
 800c996:	6822      	ldr	r2, [r4, #0]
 800c998:	bf18      	it	ne
 800c99a:	2301      	movne	r3, #1
 800c99c:	0692      	lsls	r2, r2, #26
 800c99e:	d42b      	bmi.n	800c9f8 <_printf_common+0xb0>
 800c9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	47c0      	blx	r8
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	d01e      	beq.n	800c9ec <_printf_common+0xa4>
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	68e5      	ldr	r5, [r4, #12]
 800c9b2:	6832      	ldr	r2, [r6, #0]
 800c9b4:	f003 0306 	and.w	r3, r3, #6
 800c9b8:	2b04      	cmp	r3, #4
 800c9ba:	bf08      	it	eq
 800c9bc:	1aad      	subeq	r5, r5, r2
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	6922      	ldr	r2, [r4, #16]
 800c9c2:	bf0c      	ite	eq
 800c9c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9c8:	2500      	movne	r5, #0
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	bfc4      	itt	gt
 800c9ce:	1a9b      	subgt	r3, r3, r2
 800c9d0:	18ed      	addgt	r5, r5, r3
 800c9d2:	2600      	movs	r6, #0
 800c9d4:	341a      	adds	r4, #26
 800c9d6:	42b5      	cmp	r5, r6
 800c9d8:	d11a      	bne.n	800ca10 <_printf_common+0xc8>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	e008      	b.n	800c9f0 <_printf_common+0xa8>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	47c0      	blx	r8
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d103      	bne.n	800c9f4 <_printf_common+0xac>
 800c9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	e7c6      	b.n	800c986 <_printf_common+0x3e>
 800c9f8:	18e1      	adds	r1, r4, r3
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	2030      	movs	r0, #48	; 0x30
 800c9fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca02:	4422      	add	r2, r4
 800ca04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca0c:	3302      	adds	r3, #2
 800ca0e:	e7c7      	b.n	800c9a0 <_printf_common+0x58>
 800ca10:	2301      	movs	r3, #1
 800ca12:	4622      	mov	r2, r4
 800ca14:	4649      	mov	r1, r9
 800ca16:	4638      	mov	r0, r7
 800ca18:	47c0      	blx	r8
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d0e6      	beq.n	800c9ec <_printf_common+0xa4>
 800ca1e:	3601      	adds	r6, #1
 800ca20:	e7d9      	b.n	800c9d6 <_printf_common+0x8e>
	...

0800ca24 <_printf_i>:
 800ca24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	7e0f      	ldrb	r7, [r1, #24]
 800ca2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca2c:	2f78      	cmp	r7, #120	; 0x78
 800ca2e:	4691      	mov	r9, r2
 800ca30:	4680      	mov	r8, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	469a      	mov	sl, r3
 800ca36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca3a:	d807      	bhi.n	800ca4c <_printf_i+0x28>
 800ca3c:	2f62      	cmp	r7, #98	; 0x62
 800ca3e:	d80a      	bhi.n	800ca56 <_printf_i+0x32>
 800ca40:	2f00      	cmp	r7, #0
 800ca42:	f000 80d8 	beq.w	800cbf6 <_printf_i+0x1d2>
 800ca46:	2f58      	cmp	r7, #88	; 0x58
 800ca48:	f000 80a3 	beq.w	800cb92 <_printf_i+0x16e>
 800ca4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca54:	e03a      	b.n	800cacc <_printf_i+0xa8>
 800ca56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca5a:	2b15      	cmp	r3, #21
 800ca5c:	d8f6      	bhi.n	800ca4c <_printf_i+0x28>
 800ca5e:	a101      	add	r1, pc, #4	; (adr r1, 800ca64 <_printf_i+0x40>)
 800ca60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca64:	0800cabd 	.word	0x0800cabd
 800ca68:	0800cad1 	.word	0x0800cad1
 800ca6c:	0800ca4d 	.word	0x0800ca4d
 800ca70:	0800ca4d 	.word	0x0800ca4d
 800ca74:	0800ca4d 	.word	0x0800ca4d
 800ca78:	0800ca4d 	.word	0x0800ca4d
 800ca7c:	0800cad1 	.word	0x0800cad1
 800ca80:	0800ca4d 	.word	0x0800ca4d
 800ca84:	0800ca4d 	.word	0x0800ca4d
 800ca88:	0800ca4d 	.word	0x0800ca4d
 800ca8c:	0800ca4d 	.word	0x0800ca4d
 800ca90:	0800cbdd 	.word	0x0800cbdd
 800ca94:	0800cb01 	.word	0x0800cb01
 800ca98:	0800cbbf 	.word	0x0800cbbf
 800ca9c:	0800ca4d 	.word	0x0800ca4d
 800caa0:	0800ca4d 	.word	0x0800ca4d
 800caa4:	0800cbff 	.word	0x0800cbff
 800caa8:	0800ca4d 	.word	0x0800ca4d
 800caac:	0800cb01 	.word	0x0800cb01
 800cab0:	0800ca4d 	.word	0x0800ca4d
 800cab4:	0800ca4d 	.word	0x0800ca4d
 800cab8:	0800cbc7 	.word	0x0800cbc7
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	1d1a      	adds	r2, r3, #4
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	602a      	str	r2, [r5, #0]
 800cac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cacc:	2301      	movs	r3, #1
 800cace:	e0a3      	b.n	800cc18 <_printf_i+0x1f4>
 800cad0:	6820      	ldr	r0, [r4, #0]
 800cad2:	6829      	ldr	r1, [r5, #0]
 800cad4:	0606      	lsls	r6, r0, #24
 800cad6:	f101 0304 	add.w	r3, r1, #4
 800cada:	d50a      	bpl.n	800caf2 <_printf_i+0xce>
 800cadc:	680e      	ldr	r6, [r1, #0]
 800cade:	602b      	str	r3, [r5, #0]
 800cae0:	2e00      	cmp	r6, #0
 800cae2:	da03      	bge.n	800caec <_printf_i+0xc8>
 800cae4:	232d      	movs	r3, #45	; 0x2d
 800cae6:	4276      	negs	r6, r6
 800cae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caec:	485e      	ldr	r0, [pc, #376]	; (800cc68 <_printf_i+0x244>)
 800caee:	230a      	movs	r3, #10
 800caf0:	e019      	b.n	800cb26 <_printf_i+0x102>
 800caf2:	680e      	ldr	r6, [r1, #0]
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cafa:	bf18      	it	ne
 800cafc:	b236      	sxthne	r6, r6
 800cafe:	e7ef      	b.n	800cae0 <_printf_i+0xbc>
 800cb00:	682b      	ldr	r3, [r5, #0]
 800cb02:	6820      	ldr	r0, [r4, #0]
 800cb04:	1d19      	adds	r1, r3, #4
 800cb06:	6029      	str	r1, [r5, #0]
 800cb08:	0601      	lsls	r1, r0, #24
 800cb0a:	d501      	bpl.n	800cb10 <_printf_i+0xec>
 800cb0c:	681e      	ldr	r6, [r3, #0]
 800cb0e:	e002      	b.n	800cb16 <_printf_i+0xf2>
 800cb10:	0646      	lsls	r6, r0, #25
 800cb12:	d5fb      	bpl.n	800cb0c <_printf_i+0xe8>
 800cb14:	881e      	ldrh	r6, [r3, #0]
 800cb16:	4854      	ldr	r0, [pc, #336]	; (800cc68 <_printf_i+0x244>)
 800cb18:	2f6f      	cmp	r7, #111	; 0x6f
 800cb1a:	bf0c      	ite	eq
 800cb1c:	2308      	moveq	r3, #8
 800cb1e:	230a      	movne	r3, #10
 800cb20:	2100      	movs	r1, #0
 800cb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb26:	6865      	ldr	r5, [r4, #4]
 800cb28:	60a5      	str	r5, [r4, #8]
 800cb2a:	2d00      	cmp	r5, #0
 800cb2c:	bfa2      	ittt	ge
 800cb2e:	6821      	ldrge	r1, [r4, #0]
 800cb30:	f021 0104 	bicge.w	r1, r1, #4
 800cb34:	6021      	strge	r1, [r4, #0]
 800cb36:	b90e      	cbnz	r6, 800cb3c <_printf_i+0x118>
 800cb38:	2d00      	cmp	r5, #0
 800cb3a:	d04d      	beq.n	800cbd8 <_printf_i+0x1b4>
 800cb3c:	4615      	mov	r5, r2
 800cb3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb42:	fb03 6711 	mls	r7, r3, r1, r6
 800cb46:	5dc7      	ldrb	r7, [r0, r7]
 800cb48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb4c:	4637      	mov	r7, r6
 800cb4e:	42bb      	cmp	r3, r7
 800cb50:	460e      	mov	r6, r1
 800cb52:	d9f4      	bls.n	800cb3e <_printf_i+0x11a>
 800cb54:	2b08      	cmp	r3, #8
 800cb56:	d10b      	bne.n	800cb70 <_printf_i+0x14c>
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	07de      	lsls	r6, r3, #31
 800cb5c:	d508      	bpl.n	800cb70 <_printf_i+0x14c>
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	6861      	ldr	r1, [r4, #4]
 800cb62:	4299      	cmp	r1, r3
 800cb64:	bfde      	ittt	le
 800cb66:	2330      	movle	r3, #48	; 0x30
 800cb68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb70:	1b52      	subs	r2, r2, r5
 800cb72:	6122      	str	r2, [r4, #16]
 800cb74:	f8cd a000 	str.w	sl, [sp]
 800cb78:	464b      	mov	r3, r9
 800cb7a:	aa03      	add	r2, sp, #12
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	4640      	mov	r0, r8
 800cb80:	f7ff fee2 	bl	800c948 <_printf_common>
 800cb84:	3001      	adds	r0, #1
 800cb86:	d14c      	bne.n	800cc22 <_printf_i+0x1fe>
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	b004      	add	sp, #16
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb92:	4835      	ldr	r0, [pc, #212]	; (800cc68 <_printf_i+0x244>)
 800cb94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb98:	6829      	ldr	r1, [r5, #0]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cba0:	6029      	str	r1, [r5, #0]
 800cba2:	061d      	lsls	r5, r3, #24
 800cba4:	d514      	bpl.n	800cbd0 <_printf_i+0x1ac>
 800cba6:	07df      	lsls	r7, r3, #31
 800cba8:	bf44      	itt	mi
 800cbaa:	f043 0320 	orrmi.w	r3, r3, #32
 800cbae:	6023      	strmi	r3, [r4, #0]
 800cbb0:	b91e      	cbnz	r6, 800cbba <_printf_i+0x196>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	f023 0320 	bic.w	r3, r3, #32
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	2310      	movs	r3, #16
 800cbbc:	e7b0      	b.n	800cb20 <_printf_i+0xfc>
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	f043 0320 	orr.w	r3, r3, #32
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	2378      	movs	r3, #120	; 0x78
 800cbc8:	4828      	ldr	r0, [pc, #160]	; (800cc6c <_printf_i+0x248>)
 800cbca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbce:	e7e3      	b.n	800cb98 <_printf_i+0x174>
 800cbd0:	0659      	lsls	r1, r3, #25
 800cbd2:	bf48      	it	mi
 800cbd4:	b2b6      	uxthmi	r6, r6
 800cbd6:	e7e6      	b.n	800cba6 <_printf_i+0x182>
 800cbd8:	4615      	mov	r5, r2
 800cbda:	e7bb      	b.n	800cb54 <_printf_i+0x130>
 800cbdc:	682b      	ldr	r3, [r5, #0]
 800cbde:	6826      	ldr	r6, [r4, #0]
 800cbe0:	6961      	ldr	r1, [r4, #20]
 800cbe2:	1d18      	adds	r0, r3, #4
 800cbe4:	6028      	str	r0, [r5, #0]
 800cbe6:	0635      	lsls	r5, r6, #24
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	d501      	bpl.n	800cbf0 <_printf_i+0x1cc>
 800cbec:	6019      	str	r1, [r3, #0]
 800cbee:	e002      	b.n	800cbf6 <_printf_i+0x1d2>
 800cbf0:	0670      	lsls	r0, r6, #25
 800cbf2:	d5fb      	bpl.n	800cbec <_printf_i+0x1c8>
 800cbf4:	8019      	strh	r1, [r3, #0]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	6123      	str	r3, [r4, #16]
 800cbfa:	4615      	mov	r5, r2
 800cbfc:	e7ba      	b.n	800cb74 <_printf_i+0x150>
 800cbfe:	682b      	ldr	r3, [r5, #0]
 800cc00:	1d1a      	adds	r2, r3, #4
 800cc02:	602a      	str	r2, [r5, #0]
 800cc04:	681d      	ldr	r5, [r3, #0]
 800cc06:	6862      	ldr	r2, [r4, #4]
 800cc08:	2100      	movs	r1, #0
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f7f3 fb88 	bl	8000320 <memchr>
 800cc10:	b108      	cbz	r0, 800cc16 <_printf_i+0x1f2>
 800cc12:	1b40      	subs	r0, r0, r5
 800cc14:	6060      	str	r0, [r4, #4]
 800cc16:	6863      	ldr	r3, [r4, #4]
 800cc18:	6123      	str	r3, [r4, #16]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc20:	e7a8      	b.n	800cb74 <_printf_i+0x150>
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	462a      	mov	r2, r5
 800cc26:	4649      	mov	r1, r9
 800cc28:	4640      	mov	r0, r8
 800cc2a:	47d0      	blx	sl
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	d0ab      	beq.n	800cb88 <_printf_i+0x164>
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	079b      	lsls	r3, r3, #30
 800cc34:	d413      	bmi.n	800cc5e <_printf_i+0x23a>
 800cc36:	68e0      	ldr	r0, [r4, #12]
 800cc38:	9b03      	ldr	r3, [sp, #12]
 800cc3a:	4298      	cmp	r0, r3
 800cc3c:	bfb8      	it	lt
 800cc3e:	4618      	movlt	r0, r3
 800cc40:	e7a4      	b.n	800cb8c <_printf_i+0x168>
 800cc42:	2301      	movs	r3, #1
 800cc44:	4632      	mov	r2, r6
 800cc46:	4649      	mov	r1, r9
 800cc48:	4640      	mov	r0, r8
 800cc4a:	47d0      	blx	sl
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d09b      	beq.n	800cb88 <_printf_i+0x164>
 800cc50:	3501      	adds	r5, #1
 800cc52:	68e3      	ldr	r3, [r4, #12]
 800cc54:	9903      	ldr	r1, [sp, #12]
 800cc56:	1a5b      	subs	r3, r3, r1
 800cc58:	42ab      	cmp	r3, r5
 800cc5a:	dcf2      	bgt.n	800cc42 <_printf_i+0x21e>
 800cc5c:	e7eb      	b.n	800cc36 <_printf_i+0x212>
 800cc5e:	2500      	movs	r5, #0
 800cc60:	f104 0619 	add.w	r6, r4, #25
 800cc64:	e7f5      	b.n	800cc52 <_printf_i+0x22e>
 800cc66:	bf00      	nop
 800cc68:	0800d849 	.word	0x0800d849
 800cc6c:	0800d85a 	.word	0x0800d85a

0800cc70 <__swbuf_r>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	460e      	mov	r6, r1
 800cc74:	4614      	mov	r4, r2
 800cc76:	4605      	mov	r5, r0
 800cc78:	b118      	cbz	r0, 800cc82 <__swbuf_r+0x12>
 800cc7a:	6983      	ldr	r3, [r0, #24]
 800cc7c:	b90b      	cbnz	r3, 800cc82 <__swbuf_r+0x12>
 800cc7e:	f000 f9d9 	bl	800d034 <__sinit>
 800cc82:	4b21      	ldr	r3, [pc, #132]	; (800cd08 <__swbuf_r+0x98>)
 800cc84:	429c      	cmp	r4, r3
 800cc86:	d12b      	bne.n	800cce0 <__swbuf_r+0x70>
 800cc88:	686c      	ldr	r4, [r5, #4]
 800cc8a:	69a3      	ldr	r3, [r4, #24]
 800cc8c:	60a3      	str	r3, [r4, #8]
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	071a      	lsls	r2, r3, #28
 800cc92:	d52f      	bpl.n	800ccf4 <__swbuf_r+0x84>
 800cc94:	6923      	ldr	r3, [r4, #16]
 800cc96:	b36b      	cbz	r3, 800ccf4 <__swbuf_r+0x84>
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	6820      	ldr	r0, [r4, #0]
 800cc9c:	1ac0      	subs	r0, r0, r3
 800cc9e:	6963      	ldr	r3, [r4, #20]
 800cca0:	b2f6      	uxtb	r6, r6
 800cca2:	4283      	cmp	r3, r0
 800cca4:	4637      	mov	r7, r6
 800cca6:	dc04      	bgt.n	800ccb2 <__swbuf_r+0x42>
 800cca8:	4621      	mov	r1, r4
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f000 f92e 	bl	800cf0c <_fflush_r>
 800ccb0:	bb30      	cbnz	r0, 800cd00 <__swbuf_r+0x90>
 800ccb2:	68a3      	ldr	r3, [r4, #8]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	60a3      	str	r3, [r4, #8]
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	6022      	str	r2, [r4, #0]
 800ccbe:	701e      	strb	r6, [r3, #0]
 800ccc0:	6963      	ldr	r3, [r4, #20]
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	4283      	cmp	r3, r0
 800ccc6:	d004      	beq.n	800ccd2 <__swbuf_r+0x62>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	07db      	lsls	r3, r3, #31
 800cccc:	d506      	bpl.n	800ccdc <__swbuf_r+0x6c>
 800ccce:	2e0a      	cmp	r6, #10
 800ccd0:	d104      	bne.n	800ccdc <__swbuf_r+0x6c>
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 f919 	bl	800cf0c <_fflush_r>
 800ccda:	b988      	cbnz	r0, 800cd00 <__swbuf_r+0x90>
 800ccdc:	4638      	mov	r0, r7
 800ccde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <__swbuf_r+0x9c>)
 800cce2:	429c      	cmp	r4, r3
 800cce4:	d101      	bne.n	800ccea <__swbuf_r+0x7a>
 800cce6:	68ac      	ldr	r4, [r5, #8]
 800cce8:	e7cf      	b.n	800cc8a <__swbuf_r+0x1a>
 800ccea:	4b09      	ldr	r3, [pc, #36]	; (800cd10 <__swbuf_r+0xa0>)
 800ccec:	429c      	cmp	r4, r3
 800ccee:	bf08      	it	eq
 800ccf0:	68ec      	ldreq	r4, [r5, #12]
 800ccf2:	e7ca      	b.n	800cc8a <__swbuf_r+0x1a>
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f000 f80c 	bl	800cd14 <__swsetup_r>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d0cb      	beq.n	800cc98 <__swbuf_r+0x28>
 800cd00:	f04f 37ff 	mov.w	r7, #4294967295
 800cd04:	e7ea      	b.n	800ccdc <__swbuf_r+0x6c>
 800cd06:	bf00      	nop
 800cd08:	0800d88c 	.word	0x0800d88c
 800cd0c:	0800d8ac 	.word	0x0800d8ac
 800cd10:	0800d86c 	.word	0x0800d86c

0800cd14 <__swsetup_r>:
 800cd14:	4b32      	ldr	r3, [pc, #200]	; (800cde0 <__swsetup_r+0xcc>)
 800cd16:	b570      	push	{r4, r5, r6, lr}
 800cd18:	681d      	ldr	r5, [r3, #0]
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	b125      	cbz	r5, 800cd2a <__swsetup_r+0x16>
 800cd20:	69ab      	ldr	r3, [r5, #24]
 800cd22:	b913      	cbnz	r3, 800cd2a <__swsetup_r+0x16>
 800cd24:	4628      	mov	r0, r5
 800cd26:	f000 f985 	bl	800d034 <__sinit>
 800cd2a:	4b2e      	ldr	r3, [pc, #184]	; (800cde4 <__swsetup_r+0xd0>)
 800cd2c:	429c      	cmp	r4, r3
 800cd2e:	d10f      	bne.n	800cd50 <__swsetup_r+0x3c>
 800cd30:	686c      	ldr	r4, [r5, #4]
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd38:	0719      	lsls	r1, r3, #28
 800cd3a:	d42c      	bmi.n	800cd96 <__swsetup_r+0x82>
 800cd3c:	06dd      	lsls	r5, r3, #27
 800cd3e:	d411      	bmi.n	800cd64 <__swsetup_r+0x50>
 800cd40:	2309      	movs	r3, #9
 800cd42:	6033      	str	r3, [r6, #0]
 800cd44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4e:	e03e      	b.n	800cdce <__swsetup_r+0xba>
 800cd50:	4b25      	ldr	r3, [pc, #148]	; (800cde8 <__swsetup_r+0xd4>)
 800cd52:	429c      	cmp	r4, r3
 800cd54:	d101      	bne.n	800cd5a <__swsetup_r+0x46>
 800cd56:	68ac      	ldr	r4, [r5, #8]
 800cd58:	e7eb      	b.n	800cd32 <__swsetup_r+0x1e>
 800cd5a:	4b24      	ldr	r3, [pc, #144]	; (800cdec <__swsetup_r+0xd8>)
 800cd5c:	429c      	cmp	r4, r3
 800cd5e:	bf08      	it	eq
 800cd60:	68ec      	ldreq	r4, [r5, #12]
 800cd62:	e7e6      	b.n	800cd32 <__swsetup_r+0x1e>
 800cd64:	0758      	lsls	r0, r3, #29
 800cd66:	d512      	bpl.n	800cd8e <__swsetup_r+0x7a>
 800cd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd6a:	b141      	cbz	r1, 800cd7e <__swsetup_r+0x6a>
 800cd6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd70:	4299      	cmp	r1, r3
 800cd72:	d002      	beq.n	800cd7a <__swsetup_r+0x66>
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7ff fc41 	bl	800c5fc <_free_r>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	2300      	movs	r3, #0
 800cd88:	6063      	str	r3, [r4, #4]
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f043 0308 	orr.w	r3, r3, #8
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	b94b      	cbnz	r3, 800cdae <__swsetup_r+0x9a>
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cda0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cda4:	d003      	beq.n	800cdae <__swsetup_r+0x9a>
 800cda6:	4621      	mov	r1, r4
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f000 fa09 	bl	800d1c0 <__smakebuf_r>
 800cdae:	89a0      	ldrh	r0, [r4, #12]
 800cdb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdb4:	f010 0301 	ands.w	r3, r0, #1
 800cdb8:	d00a      	beq.n	800cdd0 <__swsetup_r+0xbc>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	60a3      	str	r3, [r4, #8]
 800cdbe:	6963      	ldr	r3, [r4, #20]
 800cdc0:	425b      	negs	r3, r3
 800cdc2:	61a3      	str	r3, [r4, #24]
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	b943      	cbnz	r3, 800cdda <__swsetup_r+0xc6>
 800cdc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdcc:	d1ba      	bne.n	800cd44 <__swsetup_r+0x30>
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
 800cdd0:	0781      	lsls	r1, r0, #30
 800cdd2:	bf58      	it	pl
 800cdd4:	6963      	ldrpl	r3, [r4, #20]
 800cdd6:	60a3      	str	r3, [r4, #8]
 800cdd8:	e7f4      	b.n	800cdc4 <__swsetup_r+0xb0>
 800cdda:	2000      	movs	r0, #0
 800cddc:	e7f7      	b.n	800cdce <__swsetup_r+0xba>
 800cdde:	bf00      	nop
 800cde0:	24000014 	.word	0x24000014
 800cde4:	0800d88c 	.word	0x0800d88c
 800cde8:	0800d8ac 	.word	0x0800d8ac
 800cdec:	0800d86c 	.word	0x0800d86c

0800cdf0 <abort>:
 800cdf0:	b508      	push	{r3, lr}
 800cdf2:	2006      	movs	r0, #6
 800cdf4:	f000 fa4c 	bl	800d290 <raise>
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	f7f4 feed 	bl	8001bd8 <_exit>
	...

0800ce00 <__sflush_r>:
 800ce00:	898a      	ldrh	r2, [r1, #12]
 800ce02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce06:	4605      	mov	r5, r0
 800ce08:	0710      	lsls	r0, r2, #28
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	d458      	bmi.n	800cec0 <__sflush_r+0xc0>
 800ce0e:	684b      	ldr	r3, [r1, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc05      	bgt.n	800ce20 <__sflush_r+0x20>
 800ce14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	dc02      	bgt.n	800ce20 <__sflush_r+0x20>
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce22:	2e00      	cmp	r6, #0
 800ce24:	d0f9      	beq.n	800ce1a <__sflush_r+0x1a>
 800ce26:	2300      	movs	r3, #0
 800ce28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce2c:	682f      	ldr	r7, [r5, #0]
 800ce2e:	602b      	str	r3, [r5, #0]
 800ce30:	d032      	beq.n	800ce98 <__sflush_r+0x98>
 800ce32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	075a      	lsls	r2, r3, #29
 800ce38:	d505      	bpl.n	800ce46 <__sflush_r+0x46>
 800ce3a:	6863      	ldr	r3, [r4, #4]
 800ce3c:	1ac0      	subs	r0, r0, r3
 800ce3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce40:	b10b      	cbz	r3, 800ce46 <__sflush_r+0x46>
 800ce42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce44:	1ac0      	subs	r0, r0, r3
 800ce46:	2300      	movs	r3, #0
 800ce48:	4602      	mov	r2, r0
 800ce4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce4c:	6a21      	ldr	r1, [r4, #32]
 800ce4e:	4628      	mov	r0, r5
 800ce50:	47b0      	blx	r6
 800ce52:	1c43      	adds	r3, r0, #1
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	d106      	bne.n	800ce66 <__sflush_r+0x66>
 800ce58:	6829      	ldr	r1, [r5, #0]
 800ce5a:	291d      	cmp	r1, #29
 800ce5c:	d82c      	bhi.n	800ceb8 <__sflush_r+0xb8>
 800ce5e:	4a2a      	ldr	r2, [pc, #168]	; (800cf08 <__sflush_r+0x108>)
 800ce60:	40ca      	lsrs	r2, r1
 800ce62:	07d6      	lsls	r6, r2, #31
 800ce64:	d528      	bpl.n	800ceb8 <__sflush_r+0xb8>
 800ce66:	2200      	movs	r2, #0
 800ce68:	6062      	str	r2, [r4, #4]
 800ce6a:	04d9      	lsls	r1, r3, #19
 800ce6c:	6922      	ldr	r2, [r4, #16]
 800ce6e:	6022      	str	r2, [r4, #0]
 800ce70:	d504      	bpl.n	800ce7c <__sflush_r+0x7c>
 800ce72:	1c42      	adds	r2, r0, #1
 800ce74:	d101      	bne.n	800ce7a <__sflush_r+0x7a>
 800ce76:	682b      	ldr	r3, [r5, #0]
 800ce78:	b903      	cbnz	r3, 800ce7c <__sflush_r+0x7c>
 800ce7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce7e:	602f      	str	r7, [r5, #0]
 800ce80:	2900      	cmp	r1, #0
 800ce82:	d0ca      	beq.n	800ce1a <__sflush_r+0x1a>
 800ce84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	d002      	beq.n	800ce92 <__sflush_r+0x92>
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f7ff fbb5 	bl	800c5fc <_free_r>
 800ce92:	2000      	movs	r0, #0
 800ce94:	6360      	str	r0, [r4, #52]	; 0x34
 800ce96:	e7c1      	b.n	800ce1c <__sflush_r+0x1c>
 800ce98:	6a21      	ldr	r1, [r4, #32]
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b0      	blx	r6
 800cea0:	1c41      	adds	r1, r0, #1
 800cea2:	d1c7      	bne.n	800ce34 <__sflush_r+0x34>
 800cea4:	682b      	ldr	r3, [r5, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0c4      	beq.n	800ce34 <__sflush_r+0x34>
 800ceaa:	2b1d      	cmp	r3, #29
 800ceac:	d001      	beq.n	800ceb2 <__sflush_r+0xb2>
 800ceae:	2b16      	cmp	r3, #22
 800ceb0:	d101      	bne.n	800ceb6 <__sflush_r+0xb6>
 800ceb2:	602f      	str	r7, [r5, #0]
 800ceb4:	e7b1      	b.n	800ce1a <__sflush_r+0x1a>
 800ceb6:	89a3      	ldrh	r3, [r4, #12]
 800ceb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cebc:	81a3      	strh	r3, [r4, #12]
 800cebe:	e7ad      	b.n	800ce1c <__sflush_r+0x1c>
 800cec0:	690f      	ldr	r7, [r1, #16]
 800cec2:	2f00      	cmp	r7, #0
 800cec4:	d0a9      	beq.n	800ce1a <__sflush_r+0x1a>
 800cec6:	0793      	lsls	r3, r2, #30
 800cec8:	680e      	ldr	r6, [r1, #0]
 800ceca:	bf08      	it	eq
 800cecc:	694b      	ldreq	r3, [r1, #20]
 800cece:	600f      	str	r7, [r1, #0]
 800ced0:	bf18      	it	ne
 800ced2:	2300      	movne	r3, #0
 800ced4:	eba6 0807 	sub.w	r8, r6, r7
 800ced8:	608b      	str	r3, [r1, #8]
 800ceda:	f1b8 0f00 	cmp.w	r8, #0
 800cede:	dd9c      	ble.n	800ce1a <__sflush_r+0x1a>
 800cee0:	6a21      	ldr	r1, [r4, #32]
 800cee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cee4:	4643      	mov	r3, r8
 800cee6:	463a      	mov	r2, r7
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b0      	blx	r6
 800ceec:	2800      	cmp	r0, #0
 800ceee:	dc06      	bgt.n	800cefe <__sflush_r+0xfe>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	f04f 30ff 	mov.w	r0, #4294967295
 800cefc:	e78e      	b.n	800ce1c <__sflush_r+0x1c>
 800cefe:	4407      	add	r7, r0
 800cf00:	eba8 0800 	sub.w	r8, r8, r0
 800cf04:	e7e9      	b.n	800ceda <__sflush_r+0xda>
 800cf06:	bf00      	nop
 800cf08:	20400001 	.word	0x20400001

0800cf0c <_fflush_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	690b      	ldr	r3, [r1, #16]
 800cf10:	4605      	mov	r5, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	b913      	cbnz	r3, 800cf1c <_fflush_r+0x10>
 800cf16:	2500      	movs	r5, #0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	b118      	cbz	r0, 800cf26 <_fflush_r+0x1a>
 800cf1e:	6983      	ldr	r3, [r0, #24]
 800cf20:	b90b      	cbnz	r3, 800cf26 <_fflush_r+0x1a>
 800cf22:	f000 f887 	bl	800d034 <__sinit>
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <_fflush_r+0x6c>)
 800cf28:	429c      	cmp	r4, r3
 800cf2a:	d11b      	bne.n	800cf64 <_fflush_r+0x58>
 800cf2c:	686c      	ldr	r4, [r5, #4]
 800cf2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0ef      	beq.n	800cf16 <_fflush_r+0xa>
 800cf36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf38:	07d0      	lsls	r0, r2, #31
 800cf3a:	d404      	bmi.n	800cf46 <_fflush_r+0x3a>
 800cf3c:	0599      	lsls	r1, r3, #22
 800cf3e:	d402      	bmi.n	800cf46 <_fflush_r+0x3a>
 800cf40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf42:	f000 f915 	bl	800d170 <__retarget_lock_acquire_recursive>
 800cf46:	4628      	mov	r0, r5
 800cf48:	4621      	mov	r1, r4
 800cf4a:	f7ff ff59 	bl	800ce00 <__sflush_r>
 800cf4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf50:	07da      	lsls	r2, r3, #31
 800cf52:	4605      	mov	r5, r0
 800cf54:	d4e0      	bmi.n	800cf18 <_fflush_r+0xc>
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	059b      	lsls	r3, r3, #22
 800cf5a:	d4dd      	bmi.n	800cf18 <_fflush_r+0xc>
 800cf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5e:	f000 f908 	bl	800d172 <__retarget_lock_release_recursive>
 800cf62:	e7d9      	b.n	800cf18 <_fflush_r+0xc>
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <_fflush_r+0x70>)
 800cf66:	429c      	cmp	r4, r3
 800cf68:	d101      	bne.n	800cf6e <_fflush_r+0x62>
 800cf6a:	68ac      	ldr	r4, [r5, #8]
 800cf6c:	e7df      	b.n	800cf2e <_fflush_r+0x22>
 800cf6e:	4b04      	ldr	r3, [pc, #16]	; (800cf80 <_fflush_r+0x74>)
 800cf70:	429c      	cmp	r4, r3
 800cf72:	bf08      	it	eq
 800cf74:	68ec      	ldreq	r4, [r5, #12]
 800cf76:	e7da      	b.n	800cf2e <_fflush_r+0x22>
 800cf78:	0800d88c 	.word	0x0800d88c
 800cf7c:	0800d8ac 	.word	0x0800d8ac
 800cf80:	0800d86c 	.word	0x0800d86c

0800cf84 <std>:
 800cf84:	2300      	movs	r3, #0
 800cf86:	b510      	push	{r4, lr}
 800cf88:	4604      	mov	r4, r0
 800cf8a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf92:	6083      	str	r3, [r0, #8]
 800cf94:	8181      	strh	r1, [r0, #12]
 800cf96:	6643      	str	r3, [r0, #100]	; 0x64
 800cf98:	81c2      	strh	r2, [r0, #14]
 800cf9a:	6183      	str	r3, [r0, #24]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	2208      	movs	r2, #8
 800cfa0:	305c      	adds	r0, #92	; 0x5c
 800cfa2:	f7fd fb2d 	bl	800a600 <memset>
 800cfa6:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <std+0x38>)
 800cfa8:	6263      	str	r3, [r4, #36]	; 0x24
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <std+0x3c>)
 800cfac:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfae:	4b05      	ldr	r3, [pc, #20]	; (800cfc4 <std+0x40>)
 800cfb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfb2:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <std+0x44>)
 800cfb4:	6224      	str	r4, [r4, #32]
 800cfb6:	6323      	str	r3, [r4, #48]	; 0x30
 800cfb8:	bd10      	pop	{r4, pc}
 800cfba:	bf00      	nop
 800cfbc:	0800d2c9 	.word	0x0800d2c9
 800cfc0:	0800d2eb 	.word	0x0800d2eb
 800cfc4:	0800d323 	.word	0x0800d323
 800cfc8:	0800d347 	.word	0x0800d347

0800cfcc <_cleanup_r>:
 800cfcc:	4901      	ldr	r1, [pc, #4]	; (800cfd4 <_cleanup_r+0x8>)
 800cfce:	f000 b8af 	b.w	800d130 <_fwalk_reent>
 800cfd2:	bf00      	nop
 800cfd4:	0800cf0d 	.word	0x0800cf0d

0800cfd8 <__sfmoreglue>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	2268      	movs	r2, #104	; 0x68
 800cfdc:	1e4d      	subs	r5, r1, #1
 800cfde:	4355      	muls	r5, r2
 800cfe0:	460e      	mov	r6, r1
 800cfe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfe6:	f7ff fa15 	bl	800c414 <_malloc_r>
 800cfea:	4604      	mov	r4, r0
 800cfec:	b140      	cbz	r0, 800d000 <__sfmoreglue+0x28>
 800cfee:	2100      	movs	r1, #0
 800cff0:	e9c0 1600 	strd	r1, r6, [r0]
 800cff4:	300c      	adds	r0, #12
 800cff6:	60a0      	str	r0, [r4, #8]
 800cff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cffc:	f7fd fb00 	bl	800a600 <memset>
 800d000:	4620      	mov	r0, r4
 800d002:	bd70      	pop	{r4, r5, r6, pc}

0800d004 <__sfp_lock_acquire>:
 800d004:	4801      	ldr	r0, [pc, #4]	; (800d00c <__sfp_lock_acquire+0x8>)
 800d006:	f000 b8b3 	b.w	800d170 <__retarget_lock_acquire_recursive>
 800d00a:	bf00      	nop
 800d00c:	2400056d 	.word	0x2400056d

0800d010 <__sfp_lock_release>:
 800d010:	4801      	ldr	r0, [pc, #4]	; (800d018 <__sfp_lock_release+0x8>)
 800d012:	f000 b8ae 	b.w	800d172 <__retarget_lock_release_recursive>
 800d016:	bf00      	nop
 800d018:	2400056d 	.word	0x2400056d

0800d01c <__sinit_lock_acquire>:
 800d01c:	4801      	ldr	r0, [pc, #4]	; (800d024 <__sinit_lock_acquire+0x8>)
 800d01e:	f000 b8a7 	b.w	800d170 <__retarget_lock_acquire_recursive>
 800d022:	bf00      	nop
 800d024:	2400056e 	.word	0x2400056e

0800d028 <__sinit_lock_release>:
 800d028:	4801      	ldr	r0, [pc, #4]	; (800d030 <__sinit_lock_release+0x8>)
 800d02a:	f000 b8a2 	b.w	800d172 <__retarget_lock_release_recursive>
 800d02e:	bf00      	nop
 800d030:	2400056e 	.word	0x2400056e

0800d034 <__sinit>:
 800d034:	b510      	push	{r4, lr}
 800d036:	4604      	mov	r4, r0
 800d038:	f7ff fff0 	bl	800d01c <__sinit_lock_acquire>
 800d03c:	69a3      	ldr	r3, [r4, #24]
 800d03e:	b11b      	cbz	r3, 800d048 <__sinit+0x14>
 800d040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d044:	f7ff bff0 	b.w	800d028 <__sinit_lock_release>
 800d048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d04c:	6523      	str	r3, [r4, #80]	; 0x50
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <__sinit+0x68>)
 800d050:	4a13      	ldr	r2, [pc, #76]	; (800d0a0 <__sinit+0x6c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	62a2      	str	r2, [r4, #40]	; 0x28
 800d056:	42a3      	cmp	r3, r4
 800d058:	bf04      	itt	eq
 800d05a:	2301      	moveq	r3, #1
 800d05c:	61a3      	streq	r3, [r4, #24]
 800d05e:	4620      	mov	r0, r4
 800d060:	f000 f820 	bl	800d0a4 <__sfp>
 800d064:	6060      	str	r0, [r4, #4]
 800d066:	4620      	mov	r0, r4
 800d068:	f000 f81c 	bl	800d0a4 <__sfp>
 800d06c:	60a0      	str	r0, [r4, #8]
 800d06e:	4620      	mov	r0, r4
 800d070:	f000 f818 	bl	800d0a4 <__sfp>
 800d074:	2200      	movs	r2, #0
 800d076:	60e0      	str	r0, [r4, #12]
 800d078:	2104      	movs	r1, #4
 800d07a:	6860      	ldr	r0, [r4, #4]
 800d07c:	f7ff ff82 	bl	800cf84 <std>
 800d080:	68a0      	ldr	r0, [r4, #8]
 800d082:	2201      	movs	r2, #1
 800d084:	2109      	movs	r1, #9
 800d086:	f7ff ff7d 	bl	800cf84 <std>
 800d08a:	68e0      	ldr	r0, [r4, #12]
 800d08c:	2202      	movs	r2, #2
 800d08e:	2112      	movs	r1, #18
 800d090:	f7ff ff78 	bl	800cf84 <std>
 800d094:	2301      	movs	r3, #1
 800d096:	61a3      	str	r3, [r4, #24]
 800d098:	e7d2      	b.n	800d040 <__sinit+0xc>
 800d09a:	bf00      	nop
 800d09c:	0800d4a0 	.word	0x0800d4a0
 800d0a0:	0800cfcd 	.word	0x0800cfcd

0800d0a4 <__sfp>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	f7ff ffac 	bl	800d004 <__sfp_lock_acquire>
 800d0ac:	4b1e      	ldr	r3, [pc, #120]	; (800d128 <__sfp+0x84>)
 800d0ae:	681e      	ldr	r6, [r3, #0]
 800d0b0:	69b3      	ldr	r3, [r6, #24]
 800d0b2:	b913      	cbnz	r3, 800d0ba <__sfp+0x16>
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff ffbd 	bl	800d034 <__sinit>
 800d0ba:	3648      	adds	r6, #72	; 0x48
 800d0bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	d503      	bpl.n	800d0cc <__sfp+0x28>
 800d0c4:	6833      	ldr	r3, [r6, #0]
 800d0c6:	b30b      	cbz	r3, 800d10c <__sfp+0x68>
 800d0c8:	6836      	ldr	r6, [r6, #0]
 800d0ca:	e7f7      	b.n	800d0bc <__sfp+0x18>
 800d0cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0d0:	b9d5      	cbnz	r5, 800d108 <__sfp+0x64>
 800d0d2:	4b16      	ldr	r3, [pc, #88]	; (800d12c <__sfp+0x88>)
 800d0d4:	60e3      	str	r3, [r4, #12]
 800d0d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0da:	6665      	str	r5, [r4, #100]	; 0x64
 800d0dc:	f000 f847 	bl	800d16e <__retarget_lock_init_recursive>
 800d0e0:	f7ff ff96 	bl	800d010 <__sfp_lock_release>
 800d0e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0ec:	6025      	str	r5, [r4, #0]
 800d0ee:	61a5      	str	r5, [r4, #24]
 800d0f0:	2208      	movs	r2, #8
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0f8:	f7fd fa82 	bl	800a600 <memset>
 800d0fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d104:	4620      	mov	r0, r4
 800d106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d108:	3468      	adds	r4, #104	; 0x68
 800d10a:	e7d9      	b.n	800d0c0 <__sfp+0x1c>
 800d10c:	2104      	movs	r1, #4
 800d10e:	4638      	mov	r0, r7
 800d110:	f7ff ff62 	bl	800cfd8 <__sfmoreglue>
 800d114:	4604      	mov	r4, r0
 800d116:	6030      	str	r0, [r6, #0]
 800d118:	2800      	cmp	r0, #0
 800d11a:	d1d5      	bne.n	800d0c8 <__sfp+0x24>
 800d11c:	f7ff ff78 	bl	800d010 <__sfp_lock_release>
 800d120:	230c      	movs	r3, #12
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	e7ee      	b.n	800d104 <__sfp+0x60>
 800d126:	bf00      	nop
 800d128:	0800d4a0 	.word	0x0800d4a0
 800d12c:	ffff0001 	.word	0xffff0001

0800d130 <_fwalk_reent>:
 800d130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d134:	4606      	mov	r6, r0
 800d136:	4688      	mov	r8, r1
 800d138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d13c:	2700      	movs	r7, #0
 800d13e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d142:	f1b9 0901 	subs.w	r9, r9, #1
 800d146:	d505      	bpl.n	800d154 <_fwalk_reent+0x24>
 800d148:	6824      	ldr	r4, [r4, #0]
 800d14a:	2c00      	cmp	r4, #0
 800d14c:	d1f7      	bne.n	800d13e <_fwalk_reent+0xe>
 800d14e:	4638      	mov	r0, r7
 800d150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d154:	89ab      	ldrh	r3, [r5, #12]
 800d156:	2b01      	cmp	r3, #1
 800d158:	d907      	bls.n	800d16a <_fwalk_reent+0x3a>
 800d15a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d15e:	3301      	adds	r3, #1
 800d160:	d003      	beq.n	800d16a <_fwalk_reent+0x3a>
 800d162:	4629      	mov	r1, r5
 800d164:	4630      	mov	r0, r6
 800d166:	47c0      	blx	r8
 800d168:	4307      	orrs	r7, r0
 800d16a:	3568      	adds	r5, #104	; 0x68
 800d16c:	e7e9      	b.n	800d142 <_fwalk_reent+0x12>

0800d16e <__retarget_lock_init_recursive>:
 800d16e:	4770      	bx	lr

0800d170 <__retarget_lock_acquire_recursive>:
 800d170:	4770      	bx	lr

0800d172 <__retarget_lock_release_recursive>:
 800d172:	4770      	bx	lr

0800d174 <__swhatbuf_r>:
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	460e      	mov	r6, r1
 800d178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17c:	2900      	cmp	r1, #0
 800d17e:	b096      	sub	sp, #88	; 0x58
 800d180:	4614      	mov	r4, r2
 800d182:	461d      	mov	r5, r3
 800d184:	da08      	bge.n	800d198 <__swhatbuf_r+0x24>
 800d186:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	602a      	str	r2, [r5, #0]
 800d18e:	061a      	lsls	r2, r3, #24
 800d190:	d410      	bmi.n	800d1b4 <__swhatbuf_r+0x40>
 800d192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d196:	e00e      	b.n	800d1b6 <__swhatbuf_r+0x42>
 800d198:	466a      	mov	r2, sp
 800d19a:	f000 f8fb 	bl	800d394 <_fstat_r>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	dbf1      	blt.n	800d186 <__swhatbuf_r+0x12>
 800d1a2:	9a01      	ldr	r2, [sp, #4]
 800d1a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1ac:	425a      	negs	r2, r3
 800d1ae:	415a      	adcs	r2, r3
 800d1b0:	602a      	str	r2, [r5, #0]
 800d1b2:	e7ee      	b.n	800d192 <__swhatbuf_r+0x1e>
 800d1b4:	2340      	movs	r3, #64	; 0x40
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	b016      	add	sp, #88	; 0x58
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d1c0 <__smakebuf_r>:
 800d1c0:	898b      	ldrh	r3, [r1, #12]
 800d1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1c4:	079d      	lsls	r5, r3, #30
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	460c      	mov	r4, r1
 800d1ca:	d507      	bpl.n	800d1dc <__smakebuf_r+0x1c>
 800d1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	6163      	str	r3, [r4, #20]
 800d1d8:	b002      	add	sp, #8
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	ab01      	add	r3, sp, #4
 800d1de:	466a      	mov	r2, sp
 800d1e0:	f7ff ffc8 	bl	800d174 <__swhatbuf_r>
 800d1e4:	9900      	ldr	r1, [sp, #0]
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7ff f913 	bl	800c414 <_malloc_r>
 800d1ee:	b948      	cbnz	r0, 800d204 <__smakebuf_r+0x44>
 800d1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f4:	059a      	lsls	r2, r3, #22
 800d1f6:	d4ef      	bmi.n	800d1d8 <__smakebuf_r+0x18>
 800d1f8:	f023 0303 	bic.w	r3, r3, #3
 800d1fc:	f043 0302 	orr.w	r3, r3, #2
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	e7e3      	b.n	800d1cc <__smakebuf_r+0xc>
 800d204:	4b0d      	ldr	r3, [pc, #52]	; (800d23c <__smakebuf_r+0x7c>)
 800d206:	62b3      	str	r3, [r6, #40]	; 0x28
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	6020      	str	r0, [r4, #0]
 800d20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	9b00      	ldr	r3, [sp, #0]
 800d214:	6163      	str	r3, [r4, #20]
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	6120      	str	r0, [r4, #16]
 800d21a:	b15b      	cbz	r3, 800d234 <__smakebuf_r+0x74>
 800d21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d220:	4630      	mov	r0, r6
 800d222:	f000 f8c9 	bl	800d3b8 <_isatty_r>
 800d226:	b128      	cbz	r0, 800d234 <__smakebuf_r+0x74>
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	f023 0303 	bic.w	r3, r3, #3
 800d22e:	f043 0301 	orr.w	r3, r3, #1
 800d232:	81a3      	strh	r3, [r4, #12]
 800d234:	89a0      	ldrh	r0, [r4, #12]
 800d236:	4305      	orrs	r5, r0
 800d238:	81a5      	strh	r5, [r4, #12]
 800d23a:	e7cd      	b.n	800d1d8 <__smakebuf_r+0x18>
 800d23c:	0800cfcd 	.word	0x0800cfcd

0800d240 <_raise_r>:
 800d240:	291f      	cmp	r1, #31
 800d242:	b538      	push	{r3, r4, r5, lr}
 800d244:	4604      	mov	r4, r0
 800d246:	460d      	mov	r5, r1
 800d248:	d904      	bls.n	800d254 <_raise_r+0x14>
 800d24a:	2316      	movs	r3, #22
 800d24c:	6003      	str	r3, [r0, #0]
 800d24e:	f04f 30ff 	mov.w	r0, #4294967295
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d256:	b112      	cbz	r2, 800d25e <_raise_r+0x1e>
 800d258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d25c:	b94b      	cbnz	r3, 800d272 <_raise_r+0x32>
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 f830 	bl	800d2c4 <_getpid_r>
 800d264:	462a      	mov	r2, r5
 800d266:	4601      	mov	r1, r0
 800d268:	4620      	mov	r0, r4
 800d26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d26e:	f000 b817 	b.w	800d2a0 <_kill_r>
 800d272:	2b01      	cmp	r3, #1
 800d274:	d00a      	beq.n	800d28c <_raise_r+0x4c>
 800d276:	1c59      	adds	r1, r3, #1
 800d278:	d103      	bne.n	800d282 <_raise_r+0x42>
 800d27a:	2316      	movs	r3, #22
 800d27c:	6003      	str	r3, [r0, #0]
 800d27e:	2001      	movs	r0, #1
 800d280:	e7e7      	b.n	800d252 <_raise_r+0x12>
 800d282:	2400      	movs	r4, #0
 800d284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d288:	4628      	mov	r0, r5
 800d28a:	4798      	blx	r3
 800d28c:	2000      	movs	r0, #0
 800d28e:	e7e0      	b.n	800d252 <_raise_r+0x12>

0800d290 <raise>:
 800d290:	4b02      	ldr	r3, [pc, #8]	; (800d29c <raise+0xc>)
 800d292:	4601      	mov	r1, r0
 800d294:	6818      	ldr	r0, [r3, #0]
 800d296:	f7ff bfd3 	b.w	800d240 <_raise_r>
 800d29a:	bf00      	nop
 800d29c:	24000014 	.word	0x24000014

0800d2a0 <_kill_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4d07      	ldr	r5, [pc, #28]	; (800d2c0 <_kill_r+0x20>)
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	602b      	str	r3, [r5, #0]
 800d2ae:	f7f4 fc83 	bl	8001bb8 <_kill>
 800d2b2:	1c43      	adds	r3, r0, #1
 800d2b4:	d102      	bne.n	800d2bc <_kill_r+0x1c>
 800d2b6:	682b      	ldr	r3, [r5, #0]
 800d2b8:	b103      	cbz	r3, 800d2bc <_kill_r+0x1c>
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	bd38      	pop	{r3, r4, r5, pc}
 800d2be:	bf00      	nop
 800d2c0:	24000568 	.word	0x24000568

0800d2c4 <_getpid_r>:
 800d2c4:	f7f4 bc70 	b.w	8001ba8 <_getpid>

0800d2c8 <__sread>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d0:	f000 f894 	bl	800d3fc <_read_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	bfab      	itete	ge
 800d2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2da:	89a3      	ldrhlt	r3, [r4, #12]
 800d2dc:	181b      	addge	r3, r3, r0
 800d2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2e2:	bfac      	ite	ge
 800d2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2e6:	81a3      	strhlt	r3, [r4, #12]
 800d2e8:	bd10      	pop	{r4, pc}

0800d2ea <__swrite>:
 800d2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ee:	461f      	mov	r7, r3
 800d2f0:	898b      	ldrh	r3, [r1, #12]
 800d2f2:	05db      	lsls	r3, r3, #23
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	4616      	mov	r6, r2
 800d2fa:	d505      	bpl.n	800d308 <__swrite+0x1e>
 800d2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d300:	2302      	movs	r3, #2
 800d302:	2200      	movs	r2, #0
 800d304:	f000 f868 	bl	800d3d8 <_lseek_r>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d312:	81a3      	strh	r3, [r4, #12]
 800d314:	4632      	mov	r2, r6
 800d316:	463b      	mov	r3, r7
 800d318:	4628      	mov	r0, r5
 800d31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	f000 b817 	b.w	800d350 <_write_r>

0800d322 <__sseek>:
 800d322:	b510      	push	{r4, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32a:	f000 f855 	bl	800d3d8 <_lseek_r>
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	bf15      	itete	ne
 800d334:	6560      	strne	r0, [r4, #84]	; 0x54
 800d336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d33e:	81a3      	strheq	r3, [r4, #12]
 800d340:	bf18      	it	ne
 800d342:	81a3      	strhne	r3, [r4, #12]
 800d344:	bd10      	pop	{r4, pc}

0800d346 <__sclose>:
 800d346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d34a:	f000 b813 	b.w	800d374 <_close_r>
	...

0800d350 <_write_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d07      	ldr	r5, [pc, #28]	; (800d370 <_write_r+0x20>)
 800d354:	4604      	mov	r4, r0
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	602a      	str	r2, [r5, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7f4 fc61 	bl	8001c26 <_write>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_write_r+0x1e>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_write_r+0x1e>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	24000568 	.word	0x24000568

0800d374 <_close_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d06      	ldr	r5, [pc, #24]	; (800d390 <_close_r+0x1c>)
 800d378:	2300      	movs	r3, #0
 800d37a:	4604      	mov	r4, r0
 800d37c:	4608      	mov	r0, r1
 800d37e:	602b      	str	r3, [r5, #0]
 800d380:	f7f4 fc6d 	bl	8001c5e <_close>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_close_r+0x1a>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_close_r+0x1a>
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	24000568 	.word	0x24000568

0800d394 <_fstat_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d07      	ldr	r5, [pc, #28]	; (800d3b4 <_fstat_r+0x20>)
 800d398:	2300      	movs	r3, #0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4608      	mov	r0, r1
 800d39e:	4611      	mov	r1, r2
 800d3a0:	602b      	str	r3, [r5, #0]
 800d3a2:	f7f4 fc68 	bl	8001c76 <_fstat>
 800d3a6:	1c43      	adds	r3, r0, #1
 800d3a8:	d102      	bne.n	800d3b0 <_fstat_r+0x1c>
 800d3aa:	682b      	ldr	r3, [r5, #0]
 800d3ac:	b103      	cbz	r3, 800d3b0 <_fstat_r+0x1c>
 800d3ae:	6023      	str	r3, [r4, #0]
 800d3b0:	bd38      	pop	{r3, r4, r5, pc}
 800d3b2:	bf00      	nop
 800d3b4:	24000568 	.word	0x24000568

0800d3b8 <_isatty_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4d06      	ldr	r5, [pc, #24]	; (800d3d4 <_isatty_r+0x1c>)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	602b      	str	r3, [r5, #0]
 800d3c4:	f7f4 fc67 	bl	8001c96 <_isatty>
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	d102      	bne.n	800d3d2 <_isatty_r+0x1a>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	b103      	cbz	r3, 800d3d2 <_isatty_r+0x1a>
 800d3d0:	6023      	str	r3, [r4, #0]
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	24000568 	.word	0x24000568

0800d3d8 <_lseek_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4d07      	ldr	r5, [pc, #28]	; (800d3f8 <_lseek_r+0x20>)
 800d3dc:	4604      	mov	r4, r0
 800d3de:	4608      	mov	r0, r1
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	602a      	str	r2, [r5, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f7f4 fc60 	bl	8001cac <_lseek>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d102      	bne.n	800d3f6 <_lseek_r+0x1e>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	b103      	cbz	r3, 800d3f6 <_lseek_r+0x1e>
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	24000568 	.word	0x24000568

0800d3fc <_read_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4d07      	ldr	r5, [pc, #28]	; (800d41c <_read_r+0x20>)
 800d400:	4604      	mov	r4, r0
 800d402:	4608      	mov	r0, r1
 800d404:	4611      	mov	r1, r2
 800d406:	2200      	movs	r2, #0
 800d408:	602a      	str	r2, [r5, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	f7f4 fbee 	bl	8001bec <_read>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_read_r+0x1e>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_read_r+0x1e>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	24000568 	.word	0x24000568

0800d420 <_init>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	bf00      	nop
 800d424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d426:	bc08      	pop	{r3}
 800d428:	469e      	mov	lr, r3
 800d42a:	4770      	bx	lr

0800d42c <_fini>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	bf00      	nop
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr
