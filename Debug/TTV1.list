
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008170  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  24000000  08008484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000190  24000038  080084bc  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001c8  080084bc  000201c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b75  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000023e5  00000000  00000000  00035bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  00037fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fb0  00000000  00000000  00039038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032468  00000000  00000000  00039fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001624c  00000000  00000000  0006c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b0f7  00000000  00000000  0008269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cd793  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004648  00000000  00000000  001cd7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000038 	.word	0x24000038
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008424 	.word	0x08008424

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400003c 	.word	0x2400003c
 8000308:	08008424 	.word	0x08008424

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 ff71 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f8f3 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fa85 	bl	8000b2c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000622:	f000 f9eb 	bl	80009fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000626:	f000 fa35 	bl	8000a94 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800062a:	f000 f94b 	bl	80008c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800062e:	210c      	movs	r1, #12
 8000630:	486e      	ldr	r0, [pc, #440]	; (80007ec <main+0x1dc>)
 8000632:	f004 fb51 	bl	8004cd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000636:	2104      	movs	r1, #4
 8000638:	486c      	ldr	r0, [pc, #432]	; (80007ec <main+0x1dc>)
 800063a:	f004 fb4d 	bl	8004cd8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
 800063e:	2201      	movs	r2, #1
 8000640:	496b      	ldr	r1, [pc, #428]	; (80007f0 <main+0x1e0>)
 8000642:	486c      	ldr	r0, [pc, #432]	; (80007f4 <main+0x1e4>)
 8000644:	f005 fb3c 	bl	8005cc0 <HAL_UART_Receive_IT>
  TIM1->CCR4 = 183;
 8000648:	4b6b      	ldr	r3, [pc, #428]	; (80007f8 <main+0x1e8>)
 800064a:	22b7      	movs	r2, #183	; 0xb7
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
  TIM1->CCR2 =183;
 800064e:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <main+0x1e8>)
 8000650:	22b7      	movs	r2, #183	; 0xb7
 8000652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM1->CCR4 = 183;
 8000654:	4b68      	ldr	r3, [pc, #416]	; (80007f8 <main+0x1e8>)
 8000656:	22b7      	movs	r2, #183	; 0xb7
 8000658:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM1->CCR2 =183;
 800065a:	4b67      	ldr	r3, [pc, #412]	; (80007f8 <main+0x1e8>)
 800065c:	22b7      	movs	r2, #183	; 0xb7
 800065e:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(1000);
 8000660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000664:	f000 ffdc 	bl	8001620 <HAL_Delay>
	  TIM1->CCR4 = 65;
 8000668:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <main+0x1e8>)
 800066a:	2241      	movs	r2, #65	; 0x41
 800066c:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM1->CCR2 =65;
 800066e:	4b62      	ldr	r3, [pc, #392]	; (80007f8 <main+0x1e8>)
 8000670:	2241      	movs	r2, #65	; 0x41
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 ffd2 	bl	8001620 <HAL_Delay>
	  TIM1->CCR4 = 300;
 800067c:	4b5e      	ldr	r3, [pc, #376]	; (80007f8 <main+0x1e8>)
 800067e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000682:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM1->CCR2 =300;
 8000684:	4b5c      	ldr	r3, [pc, #368]	; (80007f8 <main+0x1e8>)
 8000686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800068a:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 ffc6 	bl	8001620 <HAL_Delay>
//	          received_data=' ';
//	      }

//	HAL_UART_Transmit(&huart1, tx1_buffer, 20, 10);
//	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_3);
 8000694:	2108      	movs	r1, #8
 8000696:	4859      	ldr	r0, [pc, #356]	; (80007fc <main+0x1ec>)
 8000698:	f002 f81b 	bl	80026d2 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800069c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a0:	f000 ffbe 	bl	8001620 <HAL_Delay>
	HAL_Delay(50);
 80006a4:	2032      	movs	r0, #50	; 0x32
 80006a6:	f000 ffbb 	bl	8001620 <HAL_Delay>
//	if(TIM1-> CCR4 < 65)
//	{
//		TIM1-> CCR4 = 300;
//	}

	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	4854      	ldr	r0, [pc, #336]	; (8000800 <main+0x1f0>)
 80006b0:	f001 fff6 	bl	80026a0 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4851      	ldr	r0, [pc, #324]	; (8000800 <main+0x1f0>)
 80006ba:	f001 fff1 	bl	80026a0 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c4:	484d      	ldr	r0, [pc, #308]	; (80007fc <main+0x1ec>)
 80006c6:	f001 ffeb 	bl	80026a0 <HAL_GPIO_WritePin>
	      // Spin the stepper motor 5 revolutions fast:
	      for (int i = 0; i < 5*200; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e034      	b.n	800073a <main+0x12a>
	      {
	        // One step:
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2102      	movs	r1, #2
 80006d4:	484a      	ldr	r0, [pc, #296]	; (8000800 <main+0x1f0>)
 80006d6:	f001 ffe3 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 ffa0 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2102      	movs	r1, #2
 80006e4:	4846      	ldr	r0, [pc, #280]	; (8000800 <main+0x1f0>)
 80006e6:	f001 ffdb 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 ff98 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2120      	movs	r1, #32
 80006f4:	4842      	ldr	r0, [pc, #264]	; (8000800 <main+0x1f0>)
 80006f6:	f001 ffd3 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 ff90 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	483e      	ldr	r0, [pc, #248]	; (8000800 <main+0x1f0>)
 8000706:	f001 ffcb 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 ff88 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4839      	ldr	r0, [pc, #228]	; (80007fc <main+0x1ec>)
 8000718:	f001 ffc2 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 ff7f 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	4834      	ldr	r0, [pc, #208]	; (80007fc <main+0x1ec>)
 800072a:	f001 ffb9 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 ff76 	bl	8001620 <HAL_Delay>
	      for (int i = 0; i < 5*200; i++)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3301      	adds	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000740:	dbc6      	blt.n	80006d0 <main+0xc0>
	      }

	      HAL_Delay(1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000746:	f000 ff6b 	bl	8001620 <HAL_Delay>

	      // Set the spinning direction counterclockwise:
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0x1f0>)
 8000750:	f001 ffa6 	bl	80026a0 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4829      	ldr	r0, [pc, #164]	; (8000800 <main+0x1f0>)
 800075a:	f001 ffa1 	bl	80026a0 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	4825      	ldr	r0, [pc, #148]	; (80007fc <main+0x1ec>)
 8000766:	f001 ff9b 	bl	80026a0 <HAL_GPIO_WritePin>
	      // Spin the stepper motor 5 revolutions fast:
	      for (int i = 0; i < 5*200; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	e034      	b.n	80007da <main+0x1ca>
	      {
	        // One step:
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	4822      	ldr	r0, [pc, #136]	; (8000800 <main+0x1f0>)
 8000776:	f001 ff93 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 ff50 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2102      	movs	r1, #2
 8000784:	481e      	ldr	r0, [pc, #120]	; (8000800 <main+0x1f0>)
 8000786:	f001 ff8b 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 ff48 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <main+0x1f0>)
 8000796:	f001 ff83 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 ff40 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2120      	movs	r1, #32
 80007a4:	4816      	ldr	r0, [pc, #88]	; (8000800 <main+0x1f0>)
 80007a6:	f001 ff7b 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 ff38 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <main+0x1ec>)
 80007b8:	f001 ff72 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 ff2f 	bl	8001620 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <main+0x1ec>)
 80007ca:	f001 ff69 	bl	80026a0 <HAL_GPIO_WritePin>
	        HAL_Delay(0.5);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 ff26 	bl	8001620 <HAL_Delay>
	      for (int i = 0; i < 5*200; i++)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007e0:	dbc6      	blt.n	8000770 <main+0x160>
	      }

	      HAL_Delay(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e6:	f000 ff1b 	bl	8001620 <HAL_Delay>
	  TIM1->CCR4 = 183;
 80007ea:	e733      	b.n	8000654 <main+0x44>
 80007ec:	24000054 	.word	0x24000054
 80007f0:	240001c0 	.word	0x240001c0
 80007f4:	24000130 	.word	0x24000130
 80007f8:	40010000 	.word	0x40010000
 80007fc:	58021000 	.word	0x58021000
 8000800:	58020000 	.word	0x58020000

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	; 0x70
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f007 fdfe 	bl	8008414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f007 fdf8 	bl	8008414 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000824:	2002      	movs	r0, #2
 8000826:	f001 ff6f 	bl	8002708 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <SystemClock_Config+0xbc>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <SystemClock_Config+0xbc>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <SystemClock_Config+0xbc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800084a:	bf00      	nop
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <SystemClock_Config+0xbc>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000858:	d1f8      	bne.n	800084c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085a:	2302      	movs	r3, #2
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800085e:	2301      	movs	r3, #1
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2340      	movs	r3, #64	; 0x40
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000866:	2300      	movs	r3, #0
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ff84 	bl	800277c <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800087a:	f000 fc21 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	; 0x3f
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8000886:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fb16 	bl	8002ed8 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008b2:	f000 fc05 	bl	80010c0 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3770      	adds	r7, #112	; 0x70
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58024800 	.word	0x58024800

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b098      	sub	sp, #96	; 0x60
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2234      	movs	r2, #52	; 0x34
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f007 fd8f 	bl	8008414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f6:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <MX_TIM1_Init+0x130>)
 80008f8:	4a3f      	ldr	r2, [pc, #252]	; (80009f8 <MX_TIM1_Init+0x134>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80008fc:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <MX_TIM1_Init+0x130>)
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <MX_TIM1_Init+0x130>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <MX_TIM1_Init+0x130>)
 800090a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800090e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <MX_TIM1_Init+0x130>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000916:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <MX_TIM1_Init+0x130>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <MX_TIM1_Init+0x130>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <MX_TIM1_Init+0x130>)
 8000924:	f004 f980 	bl	8004c28 <HAL_TIM_PWM_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 fbc7 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800093e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000942:	4619      	mov	r1, r3
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <MX_TIM1_Init+0x130>)
 8000946:	f004 ff99 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 fbb6 	bl	80010c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000954:	2360      	movs	r3, #96	; 0x60
 8000956:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000974:	2204      	movs	r2, #4
 8000976:	4619      	mov	r1, r3
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <MX_TIM1_Init+0x130>)
 800097a:	f004 fac9 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000984:	f000 fb9c 	bl	80010c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098c:	220c      	movs	r2, #12
 800098e:	4619      	mov	r1, r3
 8000990:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_TIM1_Init+0x130>)
 8000992:	f004 fabd 	bl	8004f10 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800099c:	f000 fb90 	bl	80010c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM1_Init+0x130>)
 80009d6:	f004 ffed 	bl	80059b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80009e0:	f000 fb6e 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM1_Init+0x130>)
 80009e6:	f000 fbad 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3760      	adds	r7, #96	; 0x60
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24000054 	.word	0x24000054
 80009f8:	40010000 	.word	0x40010000

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_USART1_UART_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a46:	f005 f855 	bl	8005af4 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 fb36 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a58:	f007 fbed 	bl	8008236 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f000 fb2d 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f007 fc22 	bl	80082b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fb24 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_USART1_UART_Init+0x90>)
 8000a7a:	f007 fba3 	bl	80081c4 <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 fb1c 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	240000a0 	.word	0x240000a0
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_USART3_UART_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ade:	f005 f809 	bl	8005af4 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 faea 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000af0:	f007 fba1 	bl	8008236 <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 fae1 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b02:	f007 fbd6 	bl	80082b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 fad8 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b12:	f007 fb57 	bl	80081c4 <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 fad0 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	24000130 	.word	0x24000130
 8000b28:	40004800 	.word	0x40004800

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a4a      	ldr	r2, [pc, #296]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	4b44      	ldr	r3, [pc, #272]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	4a43      	ldr	r2, [pc, #268]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b70:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a3b      	ldr	r2, [pc, #236]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a2c      	ldr	r2, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_GPIO_Init+0x148>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f640 2108 	movw	r1, #2568	; 0xa08
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x14c>)
 8000be0:	f001 fd5e 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	21aa      	movs	r1, #170	; 0xaa
 8000be8:	4824      	ldr	r0, [pc, #144]	; (8000c7c <MX_GPIO_Init+0x150>)
 8000bea:	f001 fd59 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	4823      	ldr	r0, [pc, #140]	; (8000c80 <MX_GPIO_Init+0x154>)
 8000bf4:	f001 fd54 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_11;
 8000bf8:	f640 2308 	movw	r3, #2568	; 0xa08
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_GPIO_Init+0x14c>)
 8000c12:	f001 fb9d 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000c16:	23aa      	movs	r3, #170	; 0xaa
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <MX_GPIO_Init+0x150>)
 8000c2e:	f001 fb8f 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_GPIO_Init+0x154>)
 8000c4a:	f001 fb81 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x154>)
 8000c66:	f001 fb73 	bl	8002350 <HAL_GPIO_Init>

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58021000 	.word	0x58021000
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020400 	.word	0x58020400

08000c84 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a5b      	ldr	r2, [pc, #364]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	f040 80af 	bne.w	8000df4 <HAL_UART_RxCpltCallback+0x170>
		received_data = rx1_buffer;
 8000c96:	4b5a      	ldr	r3, [pc, #360]	; (8000e00 <HAL_UART_RxCpltCallback+0x17c>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000c9c:	701a      	strb	r2, [r3, #0]
		switch (received_data) {
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	3b30      	subs	r3, #48	; 0x30
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	f200 809f 	bhi.w	8000de8 <HAL_UART_RxCpltCallback+0x164>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <HAL_UART_RxCpltCallback+0x2c>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cd1 	.word	0x08000cd1
 8000cb4:	08000cf5 	.word	0x08000cf5
 8000cb8:	08000d1b 	.word	0x08000d1b
 8000cbc:	08000d3f 	.word	0x08000d3f
 8000cc0:	08000d63 	.word	0x08000d63
 8000cc4:	08000d89 	.word	0x08000d89
 8000cc8:	08000dad 	.word	0x08000dad
 8000ccc:	08000dc5 	.word	0x08000dc5
			        case '0':
			          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	484c      	ldr	r0, [pc, #304]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000cd6:	f001 fce3 	bl	80026a0 <HAL_GPIO_WritePin>
			          HAL_UART_Transmit(&huart3, tx1_buffer, 20, 10);
 8000cda:	230a      	movs	r3, #10
 8000cdc:	2214      	movs	r2, #20
 8000cde:	494b      	ldr	r1, [pc, #300]	; (8000e0c <HAL_UART_RxCpltCallback+0x188>)
 8000ce0:	4846      	ldr	r0, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000ce2:	f004 ff57 	bl	8005b94 <HAL_UART_Transmit>
			          TIM1->CCR2 = 65;
 8000ce6:	4b4a      	ldr	r3, [pc, #296]	; (8000e10 <HAL_UART_RxCpltCallback+0x18c>)
 8000ce8:	2241      	movs	r2, #65	; 0x41
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
			          received_data=' ';
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000cee:	2220      	movs	r2, #32
 8000cf0:	701a      	strb	r2, [r3, #0]
			          break;
 8000cf2:	e07a      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '1':
			          HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	2214      	movs	r2, #20
 8000cf8:	4946      	ldr	r1, [pc, #280]	; (8000e14 <HAL_UART_RxCpltCallback+0x190>)
 8000cfa:	4840      	ldr	r0, [pc, #256]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000cfc:	f004 ff4a 	bl	8005b94 <HAL_UART_Transmit>
			          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	4840      	ldr	r0, [pc, #256]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000d06:	f001 fccb 	bl	80026a0 <HAL_GPIO_WritePin>
			          TIM1->CCR2 = 300;
 8000d0a:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <HAL_UART_RxCpltCallback+0x18c>)
 8000d0c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
			          received_data=' ';
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000d14:	2220      	movs	r2, #32
 8000d16:	701a      	strb	r2, [r3, #0]
			          break;
 8000d18:	e067      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '2':
			        	HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	2214      	movs	r2, #20
 8000d1e:	493d      	ldr	r1, [pc, #244]	; (8000e14 <HAL_UART_RxCpltCallback+0x190>)
 8000d20:	4836      	ldr	r0, [pc, #216]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000d22:	f004 ff37 	bl	8005b94 <HAL_UART_Transmit>
			        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4837      	ldr	r0, [pc, #220]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000d2c:	f001 fcb8 	bl	80026a0 <HAL_GPIO_WritePin>
			        	TIM1->CCR2 = 182;
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <HAL_UART_RxCpltCallback+0x18c>)
 8000d32:	22b6      	movs	r2, #182	; 0xb6
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38
			        	received_data=' ';
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000d38:	2220      	movs	r2, #32
 8000d3a:	701a      	strb	r2, [r3, #0]
			        	break;
 8000d3c:	e055      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '3':
			        	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2108      	movs	r1, #8
 8000d42:	4831      	ldr	r0, [pc, #196]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000d44:	f001 fcac 	bl	80026a0 <HAL_GPIO_WritePin>
			        	 HAL_UART_Transmit(&huart3, tx1_buffer, 20, 10);
 8000d48:	230a      	movs	r3, #10
 8000d4a:	2214      	movs	r2, #20
 8000d4c:	492f      	ldr	r1, [pc, #188]	; (8000e0c <HAL_UART_RxCpltCallback+0x188>)
 8000d4e:	482b      	ldr	r0, [pc, #172]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000d50:	f004 ff20 	bl	8005b94 <HAL_UART_Transmit>
			        	 TIM1->CCR4 = 65;
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_UART_RxCpltCallback+0x18c>)
 8000d56:	2241      	movs	r2, #65	; 0x41
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
			        	 received_data=' ';
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	701a      	strb	r2, [r3, #0]
			        	 break;
 8000d60:	e043      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '4':
			        	 HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000d62:	230a      	movs	r3, #10
 8000d64:	2214      	movs	r2, #20
 8000d66:	492b      	ldr	r1, [pc, #172]	; (8000e14 <HAL_UART_RxCpltCallback+0x190>)
 8000d68:	4824      	ldr	r0, [pc, #144]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000d6a:	f004 ff13 	bl	8005b94 <HAL_UART_Transmit>
			             HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2108      	movs	r1, #8
 8000d72:	4825      	ldr	r0, [pc, #148]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000d74:	f001 fc94 	bl	80026a0 <HAL_GPIO_WritePin>
			             TIM1->CCR4 = 300;
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_UART_RxCpltCallback+0x18c>)
 8000d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
			             received_data=' ';
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000d82:	2220      	movs	r2, #32
 8000d84:	701a      	strb	r2, [r3, #0]
			             break;
 8000d86:	e030      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '5':
			        	HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000d88:	230a      	movs	r3, #10
 8000d8a:	2214      	movs	r2, #20
 8000d8c:	4921      	ldr	r1, [pc, #132]	; (8000e14 <HAL_UART_RxCpltCallback+0x190>)
 8000d8e:	481b      	ldr	r0, [pc, #108]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000d90:	f004 ff00 	bl	8005b94 <HAL_UART_Transmit>
			        	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	481b      	ldr	r0, [pc, #108]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000d9a:	f001 fc81 	bl	80026a0 <HAL_GPIO_WritePin>
			        	TIM1->CCR4 = 182;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_UART_RxCpltCallback+0x18c>)
 8000da0:	22b6      	movs	r2, #182	; 0xb6
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40
			        	received_data=' ';
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000da6:	2220      	movs	r2, #32
 8000da8:	701a      	strb	r2, [r3, #0]
			        	break;
 8000daa:	e01e      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '6':
			          HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000dac:	230a      	movs	r3, #10
 8000dae:	2214      	movs	r2, #20
 8000db0:	4918      	ldr	r1, [pc, #96]	; (8000e14 <HAL_UART_RxCpltCallback+0x190>)
 8000db2:	4812      	ldr	r0, [pc, #72]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000db4:	f004 feee 	bl	8005b94 <HAL_UART_Transmit>
			          Media(); // Call Media function for another motor movement
 8000db8:	f000 f82e 	bl	8000e18 <Media>
			          received_data=' ';
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	701a      	strb	r2, [r3, #0]
			          break;
 8000dc2:	e012      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        case '7':
			          HAL_UART_Transmit(&huart3, tx2_buffer, 20, 10);
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	2214      	movs	r2, #20
 8000dc8:	4912      	ldr	r1, [pc, #72]	; (8000e14 <HAL_UART_RxCpltCallback+0x190>)
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000dcc:	f004 fee2 	bl	8005b94 <HAL_UART_Transmit>
			          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_UART_RxCpltCallback+0x184>)
 8000dd8:	f001 fc62 	bl	80026a0 <HAL_GPIO_WritePin>
			          Una();
 8000ddc:	f000 f8c6 	bl	8000f6c <Una>
			          received_data=' ';
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_UART_RxCpltCallback+0x180>)
 8000de2:	2220      	movs	r2, #32
 8000de4:	701a      	strb	r2, [r3, #0]
			          break;
 8000de6:	e000      	b.n	8000dea <HAL_UART_RxCpltCallback+0x166>
			        default:
			          // Handle unexpected characters (optional)
			          break;
 8000de8:	bf00      	nop
			          received_data=' ';
			      }

	    HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer)); // Restart interrupt
 8000dea:	2201      	movs	r2, #1
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <HAL_UART_RxCpltCallback+0x17c>)
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <HAL_UART_RxCpltCallback+0x178>)
 8000df0:	f004 ff66 	bl	8005cc0 <HAL_UART_Receive_IT>
	  }
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	24000130 	.word	0x24000130
 8000e00:	240001c0 	.word	0x240001c0
 8000e04:	240001c1 	.word	0x240001c1
 8000e08:	58021000 	.word	0x58021000
 8000e0c:	24000000 	.word	0x24000000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	24000014 	.word	0x24000014

08000e18 <Media>:

void Media(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e24:	484f      	ldr	r0, [pc, #316]	; (8000f64 <Media+0x14c>)
 8000e26:	f001 fc3b 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	484e      	ldr	r0, [pc, #312]	; (8000f68 <Media+0x150>)
 8000e30:	f001 fc36 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2108      	movs	r1, #8
 8000e38:	484b      	ldr	r0, [pc, #300]	; (8000f68 <Media+0x150>)
 8000e3a:	f001 fc31 	bl	80026a0 <HAL_GPIO_WritePin>
    // Spin the stepper motor 5 revolutions fast:
    for (int i = 0; i < 100; i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e034      	b.n	8000eae <Media+0x96>
    {
      // One step:
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4a:	4846      	ldr	r0, [pc, #280]	; (8000f64 <Media+0x14c>)
 8000e4c:	f001 fc28 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 fbe5 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	4841      	ldr	r0, [pc, #260]	; (8000f64 <Media+0x14c>)
 8000e5e:	f001 fc1f 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 fbdc 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	483e      	ldr	r0, [pc, #248]	; (8000f68 <Media+0x150>)
 8000e6e:	f001 fc17 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 fbd4 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	483a      	ldr	r0, [pc, #232]	; (8000f68 <Media+0x150>)
 8000e7e:	f001 fc0f 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 fbcc 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4836      	ldr	r0, [pc, #216]	; (8000f68 <Media+0x150>)
 8000e8e:	f001 fc07 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 fbc4 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <Media+0x150>)
 8000e9e:	f001 fbff 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 fbbc 	bl	8001620 <HAL_Delay>
    for (int i = 0; i < 100; i++)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b63      	cmp	r3, #99	; 0x63
 8000eb2:	ddc7      	ble.n	8000e44 <Media+0x2c>
    }

    HAL_Delay(1000);
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	f000 fbb2 	bl	8001620 <HAL_Delay>

    // Set the spinning direction counterclockwise:
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec2:	4828      	ldr	r0, [pc, #160]	; (8000f64 <Media+0x14c>)
 8000ec4:	f001 fbec 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	4826      	ldr	r0, [pc, #152]	; (8000f68 <Media+0x150>)
 8000ece:	f001 fbe7 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4824      	ldr	r0, [pc, #144]	; (8000f68 <Media+0x150>)
 8000ed8:	f001 fbe2 	bl	80026a0 <HAL_GPIO_WritePin>
    // Spin the stepper motor 5 revolutions fast:
    for (int i = 0; i < 100; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	e034      	b.n	8000f4c <Media+0x134>
    {
      // One step:
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee8:	481e      	ldr	r0, [pc, #120]	; (8000f64 <Media+0x14c>)
 8000eea:	f001 fbd9 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 fb96 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <Media+0x14c>)
 8000efc:	f001 fbd0 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 fb8d 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <Media+0x150>)
 8000f0c:	f001 fbc8 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 fb85 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <Media+0x150>)
 8000f1c:	f001 fbc0 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f000 fb7d 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2102      	movs	r1, #2
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <Media+0x150>)
 8000f2c:	f001 fbb8 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fb75 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <Media+0x150>)
 8000f3c:	f001 fbb0 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fb6d 	bl	8001620 <HAL_Delay>
    for (int i = 0; i < 100; i++)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b63      	cmp	r3, #99	; 0x63
 8000f50:	ddc7      	ble.n	8000ee2 <Media+0xca>
    }

    HAL_Delay(1000);
 8000f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f56:	f000 fb63 	bl	8001620 <HAL_Delay>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	58021000 	.word	0x58021000
 8000f68:	58020000 	.word	0x58020000

08000f6c <Una>:

void Una(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f78:	484f      	ldr	r0, [pc, #316]	; (80010b8 <Una+0x14c>)
 8000f7a:	f001 fb91 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	484e      	ldr	r0, [pc, #312]	; (80010bc <Una+0x150>)
 8000f84:	f001 fb8c 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	484b      	ldr	r0, [pc, #300]	; (80010bc <Una+0x150>)
 8000f8e:	f001 fb87 	bl	80026a0 <HAL_GPIO_WritePin>
    // Spin the stepper motor 5 revolutions fast:
    for (int i = 0; i < 200; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	e034      	b.n	8001002 <Una+0x96>
    {
      // One step:
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9e:	4846      	ldr	r0, [pc, #280]	; (80010b8 <Una+0x14c>)
 8000fa0:	f001 fb7e 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fb3b 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	4841      	ldr	r0, [pc, #260]	; (80010b8 <Una+0x14c>)
 8000fb2:	f001 fb75 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fb32 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	483e      	ldr	r0, [pc, #248]	; (80010bc <Una+0x150>)
 8000fc2:	f001 fb6d 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 fb2a 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2120      	movs	r1, #32
 8000fd0:	483a      	ldr	r0, [pc, #232]	; (80010bc <Una+0x150>)
 8000fd2:	f001 fb65 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 fb22 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4836      	ldr	r0, [pc, #216]	; (80010bc <Una+0x150>)
 8000fe2:	f001 fb5d 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fb1a 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4832      	ldr	r0, [pc, #200]	; (80010bc <Una+0x150>)
 8000ff2:	f001 fb55 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 fb12 	bl	8001620 <HAL_Delay>
    for (int i = 0; i < 200; i++)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2bc7      	cmp	r3, #199	; 0xc7
 8001006:	ddc7      	ble.n	8000f98 <Una+0x2c>
    }

    HAL_Delay(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	f000 fb08 	bl	8001620 <HAL_Delay>

    // Set the spinning direction counterclockwise:
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001016:	4828      	ldr	r0, [pc, #160]	; (80010b8 <Una+0x14c>)
 8001018:	f001 fb42 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4826      	ldr	r0, [pc, #152]	; (80010bc <Una+0x150>)
 8001022:	f001 fb3d 	bl	80026a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	4824      	ldr	r0, [pc, #144]	; (80010bc <Una+0x150>)
 800102c:	f001 fb38 	bl	80026a0 <HAL_GPIO_WritePin>
    // Spin the stepper motor 5 revolutions fast:
    for (int i = 0; i < 200; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	e034      	b.n	80010a0 <Una+0x134>
    {
      // One step:
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103c:	481e      	ldr	r0, [pc, #120]	; (80010b8 <Una+0x14c>)
 800103e:	f001 fb2f 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 faec 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	481a      	ldr	r0, [pc, #104]	; (80010b8 <Una+0x14c>)
 8001050:	f001 fb26 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f000 fae3 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2120      	movs	r1, #32
 800105e:	4817      	ldr	r0, [pc, #92]	; (80010bc <Una+0x150>)
 8001060:	f001 fb1e 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fadb 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <Una+0x150>)
 8001070:	f001 fb16 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8001074:	2000      	movs	r0, #0
 8001076:	f000 fad3 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2102      	movs	r1, #2
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <Una+0x150>)
 8001080:	f001 fb0e 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8001084:	2000      	movs	r0, #0
 8001086:	f000 facb 	bl	8001620 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2102      	movs	r1, #2
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <Una+0x150>)
 8001090:	f001 fb06 	bl	80026a0 <HAL_GPIO_WritePin>
      HAL_Delay(0.5);
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fac3 	bl	8001620 <HAL_Delay>
    for (int i = 0; i < 200; i++)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2bc7      	cmp	r3, #199	; 0xc7
 80010a4:	ddc7      	ble.n	8001036 <Una+0xca>
    }

    HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010aa:	f000 fab9 	bl	8001620 <HAL_Delay>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	58021000 	.word	0x58021000
 80010bc:	58020000 	.word	0x58020000

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_MspInit+0x30>)
 80010d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x30>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x30>)
 80010e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	58024400 	.word	0x58024400

08001100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_TIM_PWM_MspInit+0x3c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10e      	bne.n	8001130 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_TIM_PWM_MspInit+0x40>)
 8001114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_TIM_PWM_MspInit+0x40>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_TIM_PWM_MspInit+0x40>)
 8001124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40010000 	.word	0x40010000
 8001140:	58024400 	.word	0x58024400

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_TIM_MspPostInit+0x6c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d11f      	bne.n	80011a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_TIM_MspPostInit+0x70>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <HAL_TIM_MspPostInit+0x70>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_TIM_MspPostInit+0x70>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001184:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001188:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001196:	2301      	movs	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_TIM_MspPostInit+0x74>)
 80011a2:	f001 f8d5 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010000 	.word	0x40010000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020000 	.word	0x58020000

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b8      	sub	sp, #224	; 0xe0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	22b4      	movs	r2, #180	; 0xb4
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f007 f919 	bl	8008414 <memset>
  if(huart->Instance==USART1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a51      	ldr	r2, [pc, #324]	; (800132c <HAL_UART_MspInit+0x170>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d14b      	bne.n	8001284 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 f9f8 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001206:	f7ff ff5b 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <HAL_UART_MspInit+0x174>)
 800120c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001210:	4a47      	ldr	r2, [pc, #284]	; (8001330 <HAL_UART_MspInit+0x174>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <HAL_UART_MspInit+0x174>)
 800121c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_UART_MspInit+0x174>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_UART_MspInit+0x174>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HAL_UART_MspInit+0x174>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001246:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800124a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001260:	2304      	movs	r3, #4
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800126a:	4619      	mov	r1, r3
 800126c:	4831      	ldr	r0, [pc, #196]	; (8001334 <HAL_UART_MspInit+0x178>)
 800126e:	f001 f86f 	bl	8002350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2025      	movs	r0, #37	; 0x25
 8001278:	f000 fad1 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800127c:	2025      	movs	r0, #37	; 0x25
 800127e:	f000 fae8 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001282:	e04f      	b.n	8001324 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <HAL_UART_MspInit+0x17c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d14a      	bne.n	8001324 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	4618      	mov	r0, r3
 800129e:	f002 f9a7 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80012a8:	f7ff ff0a 	bl	80010c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_UART_MspInit+0x174>)
 80012ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012b2:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_UART_MspInit+0x174>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_UART_MspInit+0x174>)
 80012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_UART_MspInit+0x174>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_UART_MspInit+0x174>)
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x174>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001302:	2307      	movs	r3, #7
 8001304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130c:	4619      	mov	r1, r3
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <HAL_UART_MspInit+0x178>)
 8001310:	f001 f81e 	bl	8002350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2027      	movs	r0, #39	; 0x27
 800131a:	f000 fa80 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800131e:	2027      	movs	r0, #39	; 0x27
 8001320:	f000 fa97 	bl	8001852 <HAL_NVIC_EnableIRQ>
}
 8001324:	bf00      	nop
 8001326:	37e0      	adds	r7, #224	; 0xe0
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40011000 	.word	0x40011000
 8001330:	58024400 	.word	0x58024400
 8001334:	58020400 	.word	0x58020400
 8001338:	40004800 	.word	0x40004800

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <NMI_Handler+0x4>

08001342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001388:	f000 f92a 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <USART1_IRQHandler+0x10>)
 8001396:	f004 fce9 	bl	8005d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	240000a0 	.word	0x240000a0

080013a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <USART3_IRQHandler+0x10>)
 80013aa:	f004 fcdf 	bl	8005d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	24000130 	.word	0x24000130

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <SystemInit+0xd0>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a31      	ldr	r2, [pc, #196]	; (8001488 <SystemInit+0xd0>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <SystemInit+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d807      	bhi.n	80013e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <SystemInit+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 030f 	bic.w	r3, r3, #15
 80013e0:	4a2a      	ldr	r2, [pc, #168]	; (800148c <SystemInit+0xd4>)
 80013e2:	f043 0307 	orr.w	r3, r3, #7
 80013e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <SystemInit+0xd8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <SystemInit+0xd8>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013f4:	4b26      	ldr	r3, [pc, #152]	; (8001490 <SystemInit+0xd8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <SystemInit+0xd8>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4924      	ldr	r1, [pc, #144]	; (8001490 <SystemInit+0xd8>)
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <SystemInit+0xdc>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <SystemInit+0xd4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <SystemInit+0xd4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <SystemInit+0xd4>)
 800141c:	f043 0307 	orr.w	r3, r3, #7
 8001420:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <SystemInit+0xd8>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <SystemInit+0xd8>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <SystemInit+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <SystemInit+0xd8>)
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <SystemInit+0xe0>)
 8001438:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <SystemInit+0xd8>)
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <SystemInit+0xe4>)
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <SystemInit+0xd8>)
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <SystemInit+0xe8>)
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <SystemInit+0xd8>)
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <SystemInit+0xd8>)
 800144e:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <SystemInit+0xe8>)
 8001450:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <SystemInit+0xd8>)
 8001454:	2200      	movs	r2, #0
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <SystemInit+0xd8>)
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <SystemInit+0xe8>)
 800145c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <SystemInit+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <SystemInit+0xd8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <SystemInit+0xd8>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <SystemInit+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <SystemInit+0xec>)
 8001478:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800147c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	52002000 	.word	0x52002000
 8001490:	58024400 	.word	0x58024400
 8001494:	eaf6ed7f 	.word	0xeaf6ed7f
 8001498:	02020200 	.word	0x02020200
 800149c:	01ff0000 	.word	0x01ff0000
 80014a0:	01010280 	.word	0x01010280
 80014a4:	52004000 	.word	0x52004000

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014ac:	f7ff ff84 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f006 ff79 	bl	80083cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f899 	bl	8000610 <main>
  bx  lr
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e8:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 80014ec:	08008484 	.word	0x08008484
  ldr r2, =_sbss
 80014f0:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 80014f4:	240001c8 	.word	0x240001c8

080014f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC3_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
 8001504:	f000 f980 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001508:	f001 fe9c 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_Init+0x68>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4913      	ldr	r1, [pc, #76]	; (8001568 <HAL_Init+0x6c>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_Init+0x68>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_Init+0x6c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_Init+0x70>)
 800153e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_Init+0x74>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001546:	200f      	movs	r0, #15
 8001548:	f000 f814 	bl	8001574 <HAL_InitTick>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e002      	b.n	800155c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001556:	f7ff fdb9 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	58024400 	.word	0x58024400
 8001568:	0800843c 	.word	0x0800843c
 800156c:	2400002c 	.word	0x2400002c
 8001570:	24000028 	.word	0x24000028

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_InitTick+0x60>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e021      	b.n	80015cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_InitTick+0x64>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f965 	bl	800186e <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f92f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x68>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000034 	.word	0x24000034
 80015d8:	24000028 	.word	0x24000028
 80015dc:	24000030 	.word	0x24000030

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	24000034 	.word	0x24000034
 8001604:	240001c4 	.word	0x240001c4

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	240001c4 	.word	0x240001c4

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24000034 	.word	0x24000034

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	4313      	orrs	r3, r2
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	05fa0000 	.word	0x05fa0000

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff40 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff33 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa4 	bl	80017c4 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff feba 	bl	8001608 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e2dc      	b.n	8001e5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d008      	beq.n	80018be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e2cd      	b.n	8001e5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a76      	ldr	r2, [pc, #472]	; (8001a9c <HAL_DMA_Abort+0x214>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d04a      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a74      	ldr	r2, [pc, #464]	; (8001aa0 <HAL_DMA_Abort+0x218>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d045      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a73      	ldr	r2, [pc, #460]	; (8001aa4 <HAL_DMA_Abort+0x21c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d040      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a71      	ldr	r2, [pc, #452]	; (8001aa8 <HAL_DMA_Abort+0x220>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d03b      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a70      	ldr	r2, [pc, #448]	; (8001aac <HAL_DMA_Abort+0x224>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d036      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a6e      	ldr	r2, [pc, #440]	; (8001ab0 <HAL_DMA_Abort+0x228>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6d      	ldr	r2, [pc, #436]	; (8001ab4 <HAL_DMA_Abort+0x22c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d02c      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_DMA_Abort+0x230>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d027      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <HAL_DMA_Abort+0x234>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a68      	ldr	r2, [pc, #416]	; (8001ac0 <HAL_DMA_Abort+0x238>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01d      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_DMA_Abort+0x23c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d018      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_DMA_Abort+0x240>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a64      	ldr	r2, [pc, #400]	; (8001acc <HAL_DMA_Abort+0x244>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00e      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a62      	ldr	r2, [pc, #392]	; (8001ad0 <HAL_DMA_Abort+0x248>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a61      	ldr	r2, [pc, #388]	; (8001ad4 <HAL_DMA_Abort+0x24c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_DMA_Abort+0xd6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <HAL_DMA_Abort+0x250>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Abort+0xda>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_DMA_Abort+0xdc>
 8001962:	2300      	movs	r3, #0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 021e 	bic.w	r2, r2, #30
 8001976:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001986:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e00a      	b.n	80019a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 020e 	bic.w	r2, r2, #14
 800199e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a3c      	ldr	r2, [pc, #240]	; (8001a9c <HAL_DMA_Abort+0x214>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d072      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3a      	ldr	r2, [pc, #232]	; (8001aa0 <HAL_DMA_Abort+0x218>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d06d      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a39      	ldr	r2, [pc, #228]	; (8001aa4 <HAL_DMA_Abort+0x21c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d068      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a37      	ldr	r2, [pc, #220]	; (8001aa8 <HAL_DMA_Abort+0x220>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d063      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a36      	ldr	r2, [pc, #216]	; (8001aac <HAL_DMA_Abort+0x224>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d05e      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <HAL_DMA_Abort+0x228>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d059      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_DMA_Abort+0x22c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d054      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <HAL_DMA_Abort+0x230>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d04f      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a30      	ldr	r2, [pc, #192]	; (8001abc <HAL_DMA_Abort+0x234>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d04a      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <HAL_DMA_Abort+0x238>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d045      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <HAL_DMA_Abort+0x23c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d040      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2b      	ldr	r2, [pc, #172]	; (8001ac8 <HAL_DMA_Abort+0x240>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d03b      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_DMA_Abort+0x244>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d036      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_DMA_Abort+0x248>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d031      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <HAL_DMA_Abort+0x24c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d02c      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <HAL_DMA_Abort+0x250>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d027      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_DMA_Abort+0x254>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d022      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_DMA_Abort+0x258>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01d      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_DMA_Abort+0x25c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d018      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_DMA_Abort+0x260>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_DMA_Abort+0x264>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_DMA_Abort+0x268>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d009      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_DMA_Abort+0x26c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d004      	beq.n	8001a96 <HAL_DMA_Abort+0x20e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_DMA_Abort+0x270>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d132      	bne.n	8001afc <HAL_DMA_Abort+0x274>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e031      	b.n	8001afe <HAL_DMA_Abort+0x276>
 8001a9a:	bf00      	nop
 8001a9c:	40020010 	.word	0x40020010
 8001aa0:	40020028 	.word	0x40020028
 8001aa4:	40020040 	.word	0x40020040
 8001aa8:	40020058 	.word	0x40020058
 8001aac:	40020070 	.word	0x40020070
 8001ab0:	40020088 	.word	0x40020088
 8001ab4:	400200a0 	.word	0x400200a0
 8001ab8:	400200b8 	.word	0x400200b8
 8001abc:	40020410 	.word	0x40020410
 8001ac0:	40020428 	.word	0x40020428
 8001ac4:	40020440 	.word	0x40020440
 8001ac8:	40020458 	.word	0x40020458
 8001acc:	40020470 	.word	0x40020470
 8001ad0:	40020488 	.word	0x40020488
 8001ad4:	400204a0 	.word	0x400204a0
 8001ad8:	400204b8 	.word	0x400204b8
 8001adc:	58025408 	.word	0x58025408
 8001ae0:	5802541c 	.word	0x5802541c
 8001ae4:	58025430 	.word	0x58025430
 8001ae8:	58025444 	.word	0x58025444
 8001aec:	58025458 	.word	0x58025458
 8001af0:	5802546c 	.word	0x5802546c
 8001af4:	58025480 	.word	0x58025480
 8001af8:	58025494 	.word	0x58025494
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <HAL_DMA_Abort+0x444>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04a      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <HAL_DMA_Abort+0x448>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d045      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_DMA_Abort+0x44c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d040      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a68      	ldr	r2, [pc, #416]	; (8001cd8 <HAL_DMA_Abort+0x450>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d03b      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <HAL_DMA_Abort+0x454>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d036      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_DMA_Abort+0x458>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a64      	ldr	r2, [pc, #400]	; (8001ce4 <HAL_DMA_Abort+0x45c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d02c      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a62      	ldr	r2, [pc, #392]	; (8001ce8 <HAL_DMA_Abort+0x460>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d027      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_DMA_Abort+0x464>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <HAL_DMA_Abort+0x468>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <HAL_DMA_Abort+0x46c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a5c      	ldr	r2, [pc, #368]	; (8001cf8 <HAL_DMA_Abort+0x470>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <HAL_DMA_Abort+0x474>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a59      	ldr	r2, [pc, #356]	; (8001d00 <HAL_DMA_Abort+0x478>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_DMA_Abort+0x47c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_Abort+0x32a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a56      	ldr	r2, [pc, #344]	; (8001d08 <HAL_DMA_Abort+0x480>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <HAL_DMA_Abort+0x33c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_DMA_Abort+0x34c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bd4:	e013      	b.n	8001bfe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bd6:	f7ff fd17 	bl	8001608 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d90c      	bls.n	8001bfe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2220      	movs	r2, #32
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2203      	movs	r2, #3
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e12d      	b.n	8001e5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e5      	bne.n	8001bd6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <HAL_DMA_Abort+0x444>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <HAL_DMA_Abort+0x448>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_DMA_Abort+0x44c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_DMA_Abort+0x450>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <HAL_DMA_Abort+0x454>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <HAL_DMA_Abort+0x458>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_DMA_Abort+0x45c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <HAL_DMA_Abort+0x460>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_DMA_Abort+0x464>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <HAL_DMA_Abort+0x468>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_DMA_Abort+0x46c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_DMA_Abort+0x470>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_DMA_Abort+0x474>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_DMA_Abort+0x478>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_DMA_Abort+0x47c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort+0x422>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_DMA_Abort+0x480>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Abort+0x426>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_Abort+0x428>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d02b      	beq.n	8001d0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	223f      	movs	r2, #63	; 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e02a      	b.n	8001d22 <HAL_DMA_Abort+0x49a>
 8001ccc:	40020010 	.word	0x40020010
 8001cd0:	40020028 	.word	0x40020028
 8001cd4:	40020040 	.word	0x40020040
 8001cd8:	40020058 	.word	0x40020058
 8001cdc:	40020070 	.word	0x40020070
 8001ce0:	40020088 	.word	0x40020088
 8001ce4:	400200a0 	.word	0x400200a0
 8001ce8:	400200b8 	.word	0x400200b8
 8001cec:	40020410 	.word	0x40020410
 8001cf0:	40020428 	.word	0x40020428
 8001cf4:	40020440 	.word	0x40020440
 8001cf8:	40020458 	.word	0x40020458
 8001cfc:	40020470 	.word	0x40020470
 8001d00:	40020488 	.word	0x40020488
 8001d04:	400204a0 	.word	0x400204a0
 8001d08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a4f      	ldr	r2, [pc, #316]	; (8001e64 <HAL_DMA_Abort+0x5dc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d072      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a4d      	ldr	r2, [pc, #308]	; (8001e68 <HAL_DMA_Abort+0x5e0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d06d      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a4c      	ldr	r2, [pc, #304]	; (8001e6c <HAL_DMA_Abort+0x5e4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d068      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_DMA_Abort+0x5e8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d063      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_DMA_Abort+0x5ec>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_DMA_Abort+0x5f0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d059      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_DMA_Abort+0x5f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d054      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a44      	ldr	r2, [pc, #272]	; (8001e80 <HAL_DMA_Abort+0x5f8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04f      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a43      	ldr	r2, [pc, #268]	; (8001e84 <HAL_DMA_Abort+0x5fc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04a      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <HAL_DMA_Abort+0x600>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d045      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <HAL_DMA_Abort+0x604>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d040      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <HAL_DMA_Abort+0x608>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d03b      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_DMA_Abort+0x60c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d036      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <HAL_DMA_Abort+0x610>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <HAL_DMA_Abort+0x614>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d02c      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <HAL_DMA_Abort+0x618>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d027      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <HAL_DMA_Abort+0x61c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <HAL_DMA_Abort+0x620>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01d      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_DMA_Abort+0x624>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d018      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_DMA_Abort+0x628>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_DMA_Abort+0x62c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <HAL_DMA_Abort+0x630>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <HAL_DMA_Abort+0x634>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_DMA_Abort+0x58a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <HAL_DMA_Abort+0x638>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_DMA_Abort+0x58e>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_DMA_Abort+0x590>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d015      	beq.n	8001e48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020010 	.word	0x40020010
 8001e68:	40020028 	.word	0x40020028
 8001e6c:	40020040 	.word	0x40020040
 8001e70:	40020058 	.word	0x40020058
 8001e74:	40020070 	.word	0x40020070
 8001e78:	40020088 	.word	0x40020088
 8001e7c:	400200a0 	.word	0x400200a0
 8001e80:	400200b8 	.word	0x400200b8
 8001e84:	40020410 	.word	0x40020410
 8001e88:	40020428 	.word	0x40020428
 8001e8c:	40020440 	.word	0x40020440
 8001e90:	40020458 	.word	0x40020458
 8001e94:	40020470 	.word	0x40020470
 8001e98:	40020488 	.word	0x40020488
 8001e9c:	400204a0 	.word	0x400204a0
 8001ea0:	400204b8 	.word	0x400204b8
 8001ea4:	58025408 	.word	0x58025408
 8001ea8:	5802541c 	.word	0x5802541c
 8001eac:	58025430 	.word	0x58025430
 8001eb0:	58025444 	.word	0x58025444
 8001eb4:	58025458 	.word	0x58025458
 8001eb8:	5802546c 	.word	0x5802546c
 8001ebc:	58025480 	.word	0x58025480
 8001ec0:	58025494 	.word	0x58025494

08001ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e237      	b.n	8002346 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d004      	beq.n	8001eec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e22c      	b.n	8002346 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_DMA_Abort_IT+0x1a0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d04a      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5b      	ldr	r2, [pc, #364]	; (8002068 <HAL_DMA_Abort_IT+0x1a4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d045      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a59      	ldr	r2, [pc, #356]	; (800206c <HAL_DMA_Abort_IT+0x1a8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d040      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_DMA_Abort_IT+0x1ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d03b      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_DMA_Abort_IT+0x1b0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d036      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a55      	ldr	r2, [pc, #340]	; (8002078 <HAL_DMA_Abort_IT+0x1b4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d031      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a53      	ldr	r2, [pc, #332]	; (800207c <HAL_DMA_Abort_IT+0x1b8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02c      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_DMA_Abort_IT+0x1bc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d027      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a50      	ldr	r2, [pc, #320]	; (8002084 <HAL_DMA_Abort_IT+0x1c0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d022      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4f      	ldr	r2, [pc, #316]	; (8002088 <HAL_DMA_Abort_IT+0x1c4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01d      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	; (800208c <HAL_DMA_Abort_IT+0x1c8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d018      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4c      	ldr	r2, [pc, #304]	; (8002090 <HAL_DMA_Abort_IT+0x1cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_DMA_Abort_IT+0x1d0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00e      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a49      	ldr	r2, [pc, #292]	; (8002098 <HAL_DMA_Abort_IT+0x1d4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_DMA_Abort_IT+0x1d8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_DMA_Abort_IT+0xc8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <HAL_DMA_Abort_IT+0x1dc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Abort_IT+0xcc>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_DMA_Abort_IT+0xce>
 8001f90:	2300      	movs	r3, #0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8086 	beq.w	80020a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <HAL_DMA_Abort_IT+0x1a0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d04a      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <HAL_DMA_Abort_IT+0x1a4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d045      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <HAL_DMA_Abort_IT+0x1a8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d040      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <HAL_DMA_Abort_IT+0x1ac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d03b      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a29      	ldr	r2, [pc, #164]	; (8002074 <HAL_DMA_Abort_IT+0x1b0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d036      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_DMA_Abort_IT+0x1b4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d031      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <HAL_DMA_Abort_IT+0x1b8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02c      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <HAL_DMA_Abort_IT+0x1bc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d027      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_DMA_Abort_IT+0x1c0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d022      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_DMA_Abort_IT+0x1c4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01d      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_DMA_Abort_IT+0x1c8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d018      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_DMA_Abort_IT+0x1cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_DMA_Abort_IT+0x1d0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <HAL_DMA_Abort_IT+0x1d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_DMA_Abort_IT+0x1d8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_DMA_Abort_IT+0x17c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_DMA_Abort_IT+0x1dc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <HAL_DMA_Abort_IT+0x18e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e178      	b.n	8002344 <HAL_DMA_Abort_IT+0x480>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e16f      	b.n	8002344 <HAL_DMA_Abort_IT+0x480>
 8002064:	40020010 	.word	0x40020010
 8002068:	40020028 	.word	0x40020028
 800206c:	40020040 	.word	0x40020040
 8002070:	40020058 	.word	0x40020058
 8002074:	40020070 	.word	0x40020070
 8002078:	40020088 	.word	0x40020088
 800207c:	400200a0 	.word	0x400200a0
 8002080:	400200b8 	.word	0x400200b8
 8002084:	40020410 	.word	0x40020410
 8002088:	40020428 	.word	0x40020428
 800208c:	40020440 	.word	0x40020440
 8002090:	40020458 	.word	0x40020458
 8002094:	40020470 	.word	0x40020470
 8002098:	40020488 	.word	0x40020488
 800209c:	400204a0 	.word	0x400204a0
 80020a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020e 	bic.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6c      	ldr	r2, [pc, #432]	; (800226c <HAL_DMA_Abort_IT+0x3a8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d04a      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a6b      	ldr	r2, [pc, #428]	; (8002270 <HAL_DMA_Abort_IT+0x3ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d045      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_DMA_Abort_IT+0x3b0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d040      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_DMA_Abort_IT+0x3b4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d03b      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a66      	ldr	r2, [pc, #408]	; (800227c <HAL_DMA_Abort_IT+0x3b8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d036      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a65      	ldr	r2, [pc, #404]	; (8002280 <HAL_DMA_Abort_IT+0x3bc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d031      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a63      	ldr	r2, [pc, #396]	; (8002284 <HAL_DMA_Abort_IT+0x3c0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02c      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a62      	ldr	r2, [pc, #392]	; (8002288 <HAL_DMA_Abort_IT+0x3c4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d027      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a60      	ldr	r2, [pc, #384]	; (800228c <HAL_DMA_Abort_IT+0x3c8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d022      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a5f      	ldr	r2, [pc, #380]	; (8002290 <HAL_DMA_Abort_IT+0x3cc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d01d      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5d      	ldr	r2, [pc, #372]	; (8002294 <HAL_DMA_Abort_IT+0x3d0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d018      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5c      	ldr	r2, [pc, #368]	; (8002298 <HAL_DMA_Abort_IT+0x3d4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a5a      	ldr	r2, [pc, #360]	; (800229c <HAL_DMA_Abort_IT+0x3d8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00e      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a59      	ldr	r2, [pc, #356]	; (80022a0 <HAL_DMA_Abort_IT+0x3dc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <HAL_DMA_Abort_IT+0x3e0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <HAL_DMA_Abort_IT+0x290>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_DMA_Abort_IT+0x3e4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <HAL_DMA_Abort_IT+0x2a2>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e007      	b.n	8002176 <HAL_DMA_Abort_IT+0x2b2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HAL_DMA_Abort_IT+0x3a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d072      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_DMA_Abort_IT+0x3ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d06d      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a39      	ldr	r2, [pc, #228]	; (8002274 <HAL_DMA_Abort_IT+0x3b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d068      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_DMA_Abort_IT+0x3b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d063      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a36      	ldr	r2, [pc, #216]	; (800227c <HAL_DMA_Abort_IT+0x3b8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_DMA_Abort_IT+0x3bc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d059      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a33      	ldr	r2, [pc, #204]	; (8002284 <HAL_DMA_Abort_IT+0x3c0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d054      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a31      	ldr	r2, [pc, #196]	; (8002288 <HAL_DMA_Abort_IT+0x3c4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04f      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_DMA_Abort_IT+0x3c8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <HAL_DMA_Abort_IT+0x3cc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2d      	ldr	r2, [pc, #180]	; (8002294 <HAL_DMA_Abort_IT+0x3d0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <HAL_DMA_Abort_IT+0x3d4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_DMA_Abort_IT+0x3d8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_DMA_Abort_IT+0x3dc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_DMA_Abort_IT+0x3e0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_DMA_Abort_IT+0x3e4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a24      	ldr	r2, [pc, #144]	; (80022ac <HAL_DMA_Abort_IT+0x3e8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_DMA_Abort_IT+0x3ec>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <HAL_DMA_Abort_IT+0x3f0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_DMA_Abort_IT+0x3f4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_DMA_Abort_IT+0x3f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_DMA_Abort_IT+0x3fc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_DMA_Abort_IT+0x400>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort_IT+0x3a2>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_DMA_Abort_IT+0x404>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d132      	bne.n	80022cc <HAL_DMA_Abort_IT+0x408>
 8002266:	2301      	movs	r3, #1
 8002268:	e031      	b.n	80022ce <HAL_DMA_Abort_IT+0x40a>
 800226a:	bf00      	nop
 800226c:	40020010 	.word	0x40020010
 8002270:	40020028 	.word	0x40020028
 8002274:	40020040 	.word	0x40020040
 8002278:	40020058 	.word	0x40020058
 800227c:	40020070 	.word	0x40020070
 8002280:	40020088 	.word	0x40020088
 8002284:	400200a0 	.word	0x400200a0
 8002288:	400200b8 	.word	0x400200b8
 800228c:	40020410 	.word	0x40020410
 8002290:	40020428 	.word	0x40020428
 8002294:	40020440 	.word	0x40020440
 8002298:	40020458 	.word	0x40020458
 800229c:	40020470 	.word	0x40020470
 80022a0:	40020488 	.word	0x40020488
 80022a4:	400204a0 	.word	0x400204a0
 80022a8:	400204b8 	.word	0x400204b8
 80022ac:	58025408 	.word	0x58025408
 80022b0:	5802541c 	.word	0x5802541c
 80022b4:	58025430 	.word	0x58025430
 80022b8:	58025444 	.word	0x58025444
 80022bc:	58025458 	.word	0x58025458
 80022c0:	5802546c 	.word	0x5802546c
 80022c4:	58025480 	.word	0x58025480
 80022c8:	58025494 	.word	0x58025494
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2201      	movs	r2, #1
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002300:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002318:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002322:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800235e:	4b86      	ldr	r3, [pc, #536]	; (8002578 <HAL_GPIO_Init+0x228>)
 8002360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002362:	e18c      	b.n	800267e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 817e 	beq.w	8002678 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d005      	beq.n	8002394 <HAL_GPIO_Init+0x44>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d130      	bne.n	80023f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ca:	2201      	movs	r2, #1
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 0201 	and.w	r2, r3, #1
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d017      	beq.n	8002432 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d123      	bne.n	8002486 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	69b9      	ldr	r1, [r7, #24]
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0203 	and.w	r2, r3, #3
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80d8 	beq.w	8002678 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_GPIO_Init+0x22c>)
 80024ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ce:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_GPIO_Init+0x22c>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_GPIO_Init+0x22c>)
 80024da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e6:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_GPIO_Init+0x230>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_GPIO_Init+0x234>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_GPIO_Init+0x258>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_GPIO_Init+0x238>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02b      	beq.n	8002572 <HAL_GPIO_Init+0x222>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <HAL_GPIO_Init+0x23c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x21e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x240>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x21a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x244>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x216>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_GPIO_Init+0x248>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x212>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_GPIO_Init+0x24c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x20e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_GPIO_Init+0x250>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x20a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_GPIO_Init+0x254>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x206>
 8002552:	2309      	movs	r3, #9
 8002554:	e029      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 8002556:	230a      	movs	r3, #10
 8002558:	e027      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 800255a:	2307      	movs	r3, #7
 800255c:	e025      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 800255e:	2306      	movs	r3, #6
 8002560:	e023      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 8002562:	2305      	movs	r3, #5
 8002564:	e021      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 8002566:	2304      	movs	r3, #4
 8002568:	e01f      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 800256a:	2303      	movs	r3, #3
 800256c:	e01d      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 800256e:	2302      	movs	r3, #2
 8002570:	e01b      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 8002572:	2301      	movs	r3, #1
 8002574:	e019      	b.n	80025aa <HAL_GPIO_Init+0x25a>
 8002576:	bf00      	nop
 8002578:	58000080 	.word	0x58000080
 800257c:	58024400 	.word	0x58024400
 8002580:	58000400 	.word	0x58000400
 8002584:	58020000 	.word	0x58020000
 8002588:	58020400 	.word	0x58020400
 800258c:	58020800 	.word	0x58020800
 8002590:	58020c00 	.word	0x58020c00
 8002594:	58021000 	.word	0x58021000
 8002598:	58021400 	.word	0x58021400
 800259c:	58021800 	.word	0x58021800
 80025a0:	58021c00 	.word	0x58021c00
 80025a4:	58022400 	.word	0x58022400
 80025a8:	2300      	movs	r3, #0
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ba:	4938      	ldr	r1, [pc, #224]	; (800269c <HAL_GPIO_Init+0x34c>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800261c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae6b 	bne.w	8002364 <HAL_GPIO_Init+0x14>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	3724      	adds	r7, #36	; 0x24
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	58000400 	.word	0x58000400

080026a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
 80026ac:	4613      	mov	r3, r2
 80026ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026bc:	e003      	b.n	80026c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	041a      	lsls	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	619a      	str	r2, [r3, #24]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026e4:	887a      	ldrh	r2, [r7, #2]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	041a      	lsls	r2, r3, #16
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	400b      	ands	r3, r1
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_PWREx_ConfigSupply+0x70>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d00a      	beq.n	8002732 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_PWREx_ConfigSupply+0x70>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e01f      	b.n	800276e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e01d      	b.n	800276e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_PWREx_ConfigSupply+0x70>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	490f      	ldr	r1, [pc, #60]	; (8002778 <HAL_PWREx_ConfigSupply+0x70>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002742:	f7fe ff61 	bl	8001608 <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002748:	e009      	b.n	800275e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800274a:	f7fe ff5d 	bl	8001608 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002758:	d901      	bls.n	800275e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e007      	b.n	800276e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_PWREx_ConfigSupply+0x70>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d1ee      	bne.n	800274a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	58024800 	.word	0x58024800

0800277c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e39d      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8087 	beq.w	80028aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279c:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a6:	4b86      	ldr	r3, [pc, #536]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d007      	beq.n	80027c2 <HAL_RCC_OscConfig+0x46>
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b18      	cmp	r3, #24
 80027b6:	d110      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d10b      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x12c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d168      	bne.n	80028a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e377      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x76>
 80027e4:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a75      	ldr	r2, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e02e      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b71      	ldr	r3, [pc, #452]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a70      	ldr	r2, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6d      	ldr	r2, [pc, #436]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0xbc>
 800281e:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a67      	ldr	r2, [pc, #412]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a64      	ldr	r2, [pc, #400]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002838:	4b61      	ldr	r3, [pc, #388]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a60      	ldr	r2, [pc, #384]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b5e      	ldr	r3, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5d      	ldr	r2, [pc, #372]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fed6 	bl	8001608 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fed2 	bl	8001608 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e32b      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002872:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xe4>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fec2 	bl	8001608 <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe febe 	bl	8001608 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e317      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x10c>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 808c 	beq.w	80029d0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b8:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c2:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_RCC_OscConfig+0x162>
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b18      	cmp	r3, #24
 80028d2:	d137      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c8>
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d132      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e2e9      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0219 	bic.w	r2, r3, #25
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	492f      	ldr	r1, [pc, #188]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002908:	f7fe fe7e 	bl	8001608 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002910:	f7fe fe7a 	bl	8001608 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e2d3      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	061b      	lsls	r3, r3, #24
 800293c:	4920      	ldr	r1, [pc, #128]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002942:	e045      	b.n	80029d0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d026      	beq.n	800299a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 0219 	bic.w	r2, r3, #25
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4919      	ldr	r1, [pc, #100]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe fe53 	bl	8001608 <HAL_GetTick>
 8002962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002966:	f7fe fe4f 	bl	8001608 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e2a8      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	490b      	ldr	r1, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
 8002998:	e01a      	b.n	80029d0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fe2f 	bl	8001608 <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fe fe2b 	bl	8001608 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d903      	bls.n	80029c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e284      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
 80029c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029c4:	4b96      	ldr	r3, [pc, #600]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d06a      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029dc:	4b90      	ldr	r3, [pc, #576]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029e6:	4b8e      	ldr	r3, [pc, #568]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d007      	beq.n	8002a02 <HAL_RCC_OscConfig+0x286>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b18      	cmp	r3, #24
 80029f6:	d11b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2b4>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a02:	4b87      	ldr	r3, [pc, #540]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x29e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e257      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a1a:	4b81      	ldr	r3, [pc, #516]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	497d      	ldr	r1, [pc, #500]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a2e:	e040      	b.n	8002ab2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d023      	beq.n	8002a80 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a38:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a78      	ldr	r2, [pc, #480]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fde0 	bl	8001608 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fddc 	bl	8001608 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e235      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a5e:	4b70      	ldr	r3, [pc, #448]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	4969      	ldr	r1, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60cb      	str	r3, [r1, #12]
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a80:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a66      	ldr	r2, [pc, #408]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fdbc 	bl	8001608 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a94:	f7fe fdb8 	bl	8001608 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e211      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aa6:	4b5e      	ldr	r3, [pc, #376]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d036      	beq.n	8002b2c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aca:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fd99 	bl	8001608 <HAL_GetTick>
 8002ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ada:	f7fe fd95 	bl	8001608 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1ee      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aec:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x35e>
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fd7f 	bl	8001608 <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fd7b 	bl	8001608 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1d4      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d036      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b40:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a36      	ldr	r2, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fd5c 	bl	8001608 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b54:	f7fe fd58 	bl	8001608 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1b1      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3d8>
 8002b72:	e018      	b.n	8002ba6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a29      	ldr	r2, [pc, #164]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b80:	f7fe fd42 	bl	8001608 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b88:	f7fe fd3e 	bl	8001608 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e197      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8086 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4a8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_RCC_OscConfig+0x4a8>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fd22 	bl	8001608 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fd1e 	bl	8001608 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e177      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x4a8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x480>
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d111      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4ac>
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a02      	ldr	r2, [pc, #8]	; (8002c20 <HAL_RCC_OscConfig+0x4a4>)
 8002c16:	f023 0304 	bic.w	r3, r3, #4
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e021      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e6>
 8002c1e:	bf00      	nop
 8002c20:	58024400 	.word	0x58024400
 8002c24:	58024800 	.word	0x58024800
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d10c      	bne.n	8002c4a <HAL_RCC_OscConfig+0x4ce>
 8002c30:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a82      	ldr	r2, [pc, #520]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e00b      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e6>
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c5c:	f023 0304 	bic.w	r3, r3, #4
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d015      	beq.n	8002c96 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fccd 	bl	8001608 <HAL_GetTick>
 8002c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe fcc9 	bl	8001608 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e120      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c88:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0ee      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
 8002c94:	e014      	b.n	8002cc0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe fcb7 	bl	8001608 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fcb3 	bl	8001608 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e10a      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb4:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ee      	bne.n	8002c9e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80ff 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	f000 80ba 	beq.w	8002e4c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f040 8095 	bne.w	8002e0c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002ce8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fc8b 	bl	8001608 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe fc87 	bl	8001608 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0e0      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d14:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x6c8>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	430a      	orrs	r2, r1
 8002d28:	4945      	ldr	r1, [pc, #276]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	3b01      	subs	r3, #1
 8002d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	025b      	lsls	r3, r3, #9
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	3b01      	subs	r3, #1
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d5e:	4938      	ldr	r1, [pc, #224]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4a35      	ldr	r2, [pc, #212]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCC_OscConfig+0x6cc>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d7c:	00d2      	lsls	r2, r2, #3
 8002d7e:	4930      	ldr	r1, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f023 020c 	bic.w	r2, r3, #12
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	492b      	ldr	r1, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d96:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f023 0202 	bic.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4927      	ldr	r1, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4a21      	ldr	r2, [pc, #132]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fc10 	bl	8001608 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fc0c 	bl	8001608 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e065      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x670>
 8002e0a:	e05d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fbf6 	bl	8001608 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fbf2 	bl	8001608 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e04b      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e32:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCC_OscConfig+0x6c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x6a4>
 8002e3e:	e043      	b.n	8002ec8 <HAL_RCC_OscConfig+0x74c>
 8002e40:	58024400 	.word	0x58024400
 8002e44:	fffffc0c 	.word	0xfffffc0c
 8002e48:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e4c:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_RCC_OscConfig+0x758>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCC_OscConfig+0x758>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d031      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d12a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d122      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0a5b      	lsrs	r3, r3, #9
 8002e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3730      	adds	r7, #48	; 0x30
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	58024400 	.word	0x58024400

08002ed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e19c      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b8a      	ldr	r3, [pc, #552]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b87      	ldr	r3, [pc, #540]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 020f 	bic.w	r2, r3, #15
 8002f02:	4985      	ldr	r1, [pc, #532]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e184      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d010      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	4b7b      	ldr	r3, [pc, #492]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d908      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f38:	4b78      	ldr	r3, [pc, #480]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4975      	ldr	r1, [pc, #468]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	4b70      	ldr	r3, [pc, #448]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f66:	4b6d      	ldr	r3, [pc, #436]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	496a      	ldr	r1, [pc, #424]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	495e      	ldr	r1, [pc, #376]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d908      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fc2:	4b56      	ldr	r3, [pc, #344]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4953      	ldr	r1, [pc, #332]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b4a      	ldr	r3, [pc, #296]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f023 020f 	bic.w	r2, r3, #15
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4947      	ldr	r1, [pc, #284]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d055      	beq.n	80030ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800300e:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4940      	ldr	r1, [pc, #256]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 800301c:	4313      	orrs	r3, r2
 800301e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003028:	4b3c      	ldr	r3, [pc, #240]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d121      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0f6      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d115      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0ea      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0de      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0d6      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4925      	ldr	r1, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 8003086:	4313      	orrs	r3, r2
 8003088:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe fabd 	bl	8001608 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003092:	f7fe fab9 	bl	8001608 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0be      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a8:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d1eb      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d208      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	490e      	ldr	r1, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x244>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d214      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4906      	ldr	r1, [pc, #24]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_RCC_ClockConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e086      	b.n	8003226 <HAL_RCC_ClockConfig+0x34e>
 8003118:	52002000 	.word	0x52002000
 800311c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003138:	429a      	cmp	r2, r3
 800313a:	d208      	bcs.n	800314e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800313c:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	4939      	ldr	r1, [pc, #228]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 800314a:	4313      	orrs	r3, r2
 800314c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003166:	429a      	cmp	r2, r3
 8003168:	d208      	bcs.n	800317c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	492e      	ldr	r1, [pc, #184]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4922      	ldr	r1, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d208      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4917      	ldr	r1, [pc, #92]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031d8:	f000 f834 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	4912      	ldr	r1, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x35c>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x358>)
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <HAL_RCC_ClockConfig+0x35c>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x360>)
 800320e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x364>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_ClockConfig+0x368>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe f9aa 	bl	8001574 <HAL_InitTick>
 8003220:	4603      	mov	r3, r0
 8003222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	58024400 	.word	0x58024400
 8003234:	0800843c 	.word	0x0800843c
 8003238:	2400002c 	.word	0x2400002c
 800323c:	24000028 	.word	0x24000028
 8003240:	24000030 	.word	0x24000030

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324a:	4bb3      	ldr	r3, [pc, #716]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003252:	2b18      	cmp	r3, #24
 8003254:	f200 8155 	bhi.w	8003502 <HAL_RCC_GetSysClockFreq+0x2be>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_RCC_GetSysClockFreq+0x1c>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	080032c5 	.word	0x080032c5
 8003264:	08003503 	.word	0x08003503
 8003268:	08003503 	.word	0x08003503
 800326c:	08003503 	.word	0x08003503
 8003270:	08003503 	.word	0x08003503
 8003274:	08003503 	.word	0x08003503
 8003278:	08003503 	.word	0x08003503
 800327c:	08003503 	.word	0x08003503
 8003280:	080032eb 	.word	0x080032eb
 8003284:	08003503 	.word	0x08003503
 8003288:	08003503 	.word	0x08003503
 800328c:	08003503 	.word	0x08003503
 8003290:	08003503 	.word	0x08003503
 8003294:	08003503 	.word	0x08003503
 8003298:	08003503 	.word	0x08003503
 800329c:	08003503 	.word	0x08003503
 80032a0:	080032f1 	.word	0x080032f1
 80032a4:	08003503 	.word	0x08003503
 80032a8:	08003503 	.word	0x08003503
 80032ac:	08003503 	.word	0x08003503
 80032b0:	08003503 	.word	0x08003503
 80032b4:	08003503 	.word	0x08003503
 80032b8:	08003503 	.word	0x08003503
 80032bc:	08003503 	.word	0x08003503
 80032c0:	080032f7 	.word	0x080032f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032c4:	4b94      	ldr	r3, [pc, #592]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032d0:	4b91      	ldr	r3, [pc, #580]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	08db      	lsrs	r3, r3, #3
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	4a90      	ldr	r2, [pc, #576]	; (800351c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032e2:	e111      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032e4:	4b8d      	ldr	r3, [pc, #564]	; (800351c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032e6:	61bb      	str	r3, [r7, #24]
    break;
 80032e8:	e10e      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032ea:	4b8d      	ldr	r3, [pc, #564]	; (8003520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032ec:	61bb      	str	r3, [r7, #24]
    break;
 80032ee:	e10b      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032f0:	4b8c      	ldr	r3, [pc, #560]	; (8003524 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032f2:	61bb      	str	r3, [r7, #24]
    break;
 80032f4:	e108      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003300:	4b85      	ldr	r3, [pc, #532]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800330a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800330c:	4b82      	ldr	r3, [pc, #520]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003316:	4b80      	ldr	r3, [pc, #512]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	08db      	lsrs	r3, r3, #3
 800331c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80e1 	beq.w	80034fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b02      	cmp	r3, #2
 800333e:	f000 8083 	beq.w	8003448 <HAL_RCC_GetSysClockFreq+0x204>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b02      	cmp	r3, #2
 8003346:	f200 80a1 	bhi.w	800348c <HAL_RCC_GetSysClockFreq+0x248>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x114>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d056      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003356:	e099      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d02d      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003364:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	08db      	lsrs	r3, r3, #3
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	4a6b      	ldr	r2, [pc, #428]	; (800351c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b62      	ldr	r3, [pc, #392]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033be:	e087      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800352c <HAL_RCC_GetSysClockFreq+0x2e8>
 80033ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d2:	4b51      	ldr	r3, [pc, #324]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003402:	e065      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	ee07 3a90 	vmov	s15, r3
 800340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003530 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003416:	4b40      	ldr	r3, [pc, #256]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003426:	ed97 6a02 	vldr	s12, [r7, #8]
 800342a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003528 <HAL_RCC_GetSysClockFreq+0x2e4>
 800342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003446:	e043      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003452:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003534 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346a:	ed97 6a02 	vldr	s12, [r7, #8]
 800346e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003528 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800347a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800348a:	e021      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003496:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003530 <HAL_RCC_GetSysClockFreq+0x2ec>
 800349a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80034b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003528 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	0a5b      	lsrs	r3, r3, #9
 80034d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034da:	3301      	adds	r3, #1
 80034dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f4:	ee17 3a90 	vmov	r3, s15
 80034f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
    break;
 8003500:	e002      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003504:	61bb      	str	r3, [r7, #24]
    break;
 8003506:	bf00      	nop
  }

  return sysclockfreq;
 8003508:	69bb      	ldr	r3, [r7, #24]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	58024400 	.word	0x58024400
 800351c:	03d09000 	.word	0x03d09000
 8003520:	003d0900 	.word	0x003d0900
 8003524:	017d7840 	.word	0x017d7840
 8003528:	46000000 	.word	0x46000000
 800352c:	4c742400 	.word	0x4c742400
 8003530:	4a742400 	.word	0x4a742400
 8003534:	4bbebc20 	.word	0x4bbebc20

08003538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800353e:	f7ff fe81 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_RCC_GetHCLKFreq+0x50>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490f      	ldr	r1, [pc, #60]	; (800358c <HAL_RCC_GetHCLKFreq+0x54>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_RCC_GetHCLKFreq+0x50>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <HAL_RCC_GetHCLKFreq+0x54>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_RCC_GetHCLKFreq+0x58>)
 8003574:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_RCC_GetHCLKFreq+0x58>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	58024400 	.word	0x58024400
 800358c:	0800843c 	.word	0x0800843c
 8003590:	2400002c 	.word	0x2400002c
 8003594:	24000028 	.word	0x24000028

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800359c:	f7ff ffcc 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4904      	ldr	r1, [pc, #16]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	58024400 	.word	0x58024400
 80035c0:	0800843c 	.word	0x0800843c

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035c8:	f7ff ffb6 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58024400 	.word	0x58024400
 80035ec:	0800843c 	.word	0x0800843c

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035fc:	2300      	movs	r3, #0
 80035fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d03f      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003614:	d02a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800361a:	d824      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800361c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003620:	d018      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003626:	d81e      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800362c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003630:	d007      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003632:	e018      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4ba4      	ldr	r3, [pc, #656]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4aa3      	ldr	r2, [pc, #652]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003640:	e015      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f989 	bl	8004960 <RCCEx_PLL2_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003652:	e00c      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3324      	adds	r3, #36	; 0x24
 8003658:	2102      	movs	r1, #2
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fa32 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003664:	e003      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
      break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800366c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003674:	4b94      	ldr	r3, [pc, #592]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	4991      	ldr	r1, [pc, #580]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	650b      	str	r3, [r1, #80]	; 0x50
 8003686:	e001      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2b04      	cmp	r3, #4
 800369e:	d826      	bhi.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036bd 	.word	0x080036bd
 80036ac:	080036cb 	.word	0x080036cb
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036f5 	.word	0x080036f5
 80036b8:	080036f5 	.word	0x080036f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036bc:	4b82      	ldr	r3, [pc, #520]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a81      	ldr	r2, [pc, #516]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c8:	e015      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f945 	bl	8004960 <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036da:	e00c      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f9ee 	bl	8004ac4 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
      break;
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036fc:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	f023 0207 	bic.w	r2, r3, #7
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	496f      	ldr	r1, [pc, #444]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	650b      	str	r3, [r1, #80]	; 0x50
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d051      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003726:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800372a:	d036      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800372c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003730:	d830      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003732:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003736:	d032      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800373c:	d82a      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800373e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003742:	d02e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003744:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003748:	d824      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374e:	d018      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003754:	d81e      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375e:	d007      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003760:	e018      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003762:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800376e:	e019      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f8f2 	bl	8004960 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003780:	e010      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f99b 	bl	8004ac4 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003792:	e007      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
      break;
 8003798:	e004      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800379a:	bf00      	nop
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037b8:	4943      	ldr	r1, [pc, #268]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	658b      	str	r3, [r1, #88]	; 0x58
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d051      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037da:	d036      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80037dc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037e0:	d830      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80037e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e6:	d032      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80037e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ec:	d82a      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80037ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f2:	d02e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80037f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f8:	d824      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80037fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037fe:	d018      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003804:	d81e      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800380a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380e:	d007      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003810:	e018      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800381e:	e019      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 f89a 	bl	8004960 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003830:	e010      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3324      	adds	r3, #36	; 0x24
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f001 f943 	bl	8004ac4 <RCCEx_PLL3_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003842:	e007      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
      break;
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800384a:	bf00      	nop
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003868:	4917      	ldr	r1, [pc, #92]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	658b      	str	r3, [r1, #88]	; 0x58
 800386e:	e001      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d035      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d01c      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003888:	2b30      	cmp	r3, #48	; 0x30
 800388a:	d817      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d00c      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d813      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d019      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003898:	2b10      	cmp	r3, #16
 800389a:	d10f      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038a8:	e011      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2102      	movs	r1, #2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f855 	bl	8004960 <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038ba:	e008      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	e005      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80038c2:	bf00      	nop
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038c6:	bf00      	nop
 80038c8:	58024400 	.word	0x58024400
      break;
 80038cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038d4:	4ba3      	ldr	r3, [pc, #652]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	49a0      	ldr	r1, [pc, #640]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038e6:	e001      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d047      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d030      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003906:	d82a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390c:	d02c      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800390e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003912:	d824      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d018      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391e:	d81e      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d007      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800392a:	e018      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a8c      	ldr	r2, [pc, #560]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003938:	e017      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f80d 	bl	8004960 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800394a:	e00e      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3324      	adds	r3, #36	; 0x24
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f8b6 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800395c:	e005      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003970:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	4979      	ldr	r1, [pc, #484]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800397e:	4313      	orrs	r3, r2
 8003980:	650b      	str	r3, [r1, #80]	; 0x50
 8003982:	e001      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d049      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800399c:	d02e      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800399e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a2:	d828      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a8:	d02a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ae:	d822      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039b4:	d026      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80039b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ba:	d81c      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80039c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c6:	d816      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01d      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d111      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2101      	movs	r1, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 ffc1 	bl	8004960 <RCCEx_PLL2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039e2:	e012      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3324      	adds	r3, #36	; 0x24
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f86a 	bl	8004ac4 <RCCEx_PLL3_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039f4:	e009      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      break;
 80039fa:	e006      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80039fc:	bf00      	nop
 80039fe:	e004      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a00:	bf00      	nop
 8003a02:	e002      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a10:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	4951      	ldr	r1, [pc, #324]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	650b      	str	r3, [r1, #80]	; 0x50
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d04b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a3e:	d02e      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a44:	d828      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d02a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d822      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a56:	d026      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a5c:	d81c      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a62:	d010      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a68:	d816      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01d      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d111      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 ff70 	bl	8004960 <RCCEx_PLL2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a84:	e012      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3324      	adds	r3, #36	; 0x24
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 f819 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a96:	e009      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ac0:	4928      	ldr	r1, [pc, #160]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ac6:	e001      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02f      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d00e      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae6:	d814      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af0:	d10f      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003afe:	e00c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	2101      	movs	r1, #1
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 ff2a 	bl	8004960 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2c:	490d      	ldr	r1, [pc, #52]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	650b      	str	r3, [r1, #80]	; 0x50
 8003b32:	e001      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d034      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d81d      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b8f 	.word	0x08003b8f
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b77 	.word	0x08003b77
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4bb1      	ldr	r3, [pc, #708]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4ab0      	ldr	r2, [pc, #704]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 feef 	bl	8004960 <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b96:	4ba6      	ldr	r3, [pc, #664]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	49a3      	ldr	r1, [pc, #652]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ba8:	e001      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8086 	beq.w	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9c      	ldr	r2, [pc, #624]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fd1e 	bl	8001608 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bce:	e009      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fd fd1a 	bl	8001608 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d902      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	75fb      	strb	r3, [r7, #23]
        break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be4:	4b93      	ldr	r3, [pc, #588]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ef      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d166      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bf6:	4b8e      	ldr	r3, [pc, #568]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c00:	4053      	eors	r3, r2
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0a:	4b89      	ldr	r3, [pc, #548]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c14:	4b86      	ldr	r3, [pc, #536]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a85      	ldr	r2, [pc, #532]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	4b83      	ldr	r3, [pc, #524]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a82      	ldr	r2, [pc, #520]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c2c:	4a80      	ldr	r2, [pc, #512]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d115      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fce3 	bl	8001608 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c44:	e00b      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd fcdf 	bl	8001608 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d902      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c5c:	e005      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c5e:	4b74      	ldr	r3, [pc, #464]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ed      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d126      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003c80:	4b6b      	ldr	r3, [pc, #428]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8e:	0919      	lsrs	r1, r3, #4
 8003c90:	4b69      	ldr	r3, [pc, #420]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	4966      	ldr	r1, [pc, #408]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	610b      	str	r3, [r1, #16]
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003c9c:	4b64      	ldr	r3, [pc, #400]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	4a63      	ldr	r2, [pc, #396]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ca2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ca6:	6113      	str	r3, [r2, #16]
 8003ca8:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb6:	495e      	ldr	r1, [pc, #376]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	670b      	str	r3, [r1, #112]	; 0x70
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	75bb      	strb	r3, [r7, #22]
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d07e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	2b28      	cmp	r3, #40	; 0x28
 8003cda:	d867      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003db3 	.word	0x08003db3
 8003ce8:	08003dad 	.word	0x08003dad
 8003cec:	08003dad 	.word	0x08003dad
 8003cf0:	08003dad 	.word	0x08003dad
 8003cf4:	08003dad 	.word	0x08003dad
 8003cf8:	08003dad 	.word	0x08003dad
 8003cfc:	08003dad 	.word	0x08003dad
 8003d00:	08003dad 	.word	0x08003dad
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003dad 	.word	0x08003dad
 8003d0c:	08003dad 	.word	0x08003dad
 8003d10:	08003dad 	.word	0x08003dad
 8003d14:	08003dad 	.word	0x08003dad
 8003d18:	08003dad 	.word	0x08003dad
 8003d1c:	08003dad 	.word	0x08003dad
 8003d20:	08003dad 	.word	0x08003dad
 8003d24:	08003d9b 	.word	0x08003d9b
 8003d28:	08003dad 	.word	0x08003dad
 8003d2c:	08003dad 	.word	0x08003dad
 8003d30:	08003dad 	.word	0x08003dad
 8003d34:	08003dad 	.word	0x08003dad
 8003d38:	08003dad 	.word	0x08003dad
 8003d3c:	08003dad 	.word	0x08003dad
 8003d40:	08003dad 	.word	0x08003dad
 8003d44:	08003db3 	.word	0x08003db3
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003dad 	.word	0x08003dad
 8003d50:	08003dad 	.word	0x08003dad
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003db3 	.word	0x08003db3
 8003d68:	08003dad 	.word	0x08003dad
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dad 	.word	0x08003dad
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003db3 	.word	0x08003db3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fde6 	bl	8004960 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d98:	e00c      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3324      	adds	r3, #36	; 0x24
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fe8f 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
      break;
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	491a      	ldr	r1, [pc, #104]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	654b      	str	r3, [r1, #84]	; 0x54
 8003dcc:	e001      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03e      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d820      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e17 	.word	0x08003e17
 8003df8:	08003e3d 	.word	0x08003e3d
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e3d 	.word	0x08003e3d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fda8 	bl	8004960 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e14:	e013      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3324      	adds	r3, #36	; 0x24
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fe51 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e26:	e00a      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	e007      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	58024800 	.word	0x58024800
 8003e38:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e44:	4b9f      	ldr	r3, [pc, #636]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f023 0207 	bic.w	r2, r3, #7
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	499c      	ldr	r1, [pc, #624]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	654b      	str	r3, [r1, #84]	; 0x54
 8003e56:	e001      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d039      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d820      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ebb 	.word	0x08003ebb
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	08003ea3 	.word	0x08003ea3
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ebb 	.word	0x08003ebb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fd62 	bl	8004960 <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fe0b 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec2:	4b80      	ldr	r3, [pc, #512]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed0:	497c      	ldr	r1, [pc, #496]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d04b      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef2:	d02e      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef8:	d828      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d02a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d822      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f0a:	d026      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f10:	d81c      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f16:	d010      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1c:	d816      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01d      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f26:	d111      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fd16 	bl	8004960 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f38:	e012      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fdbf 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f4a:	e009      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f52:	bf00      	nop
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	4953      	ldr	r1, [pc, #332]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	654b      	str	r3, [r1, #84]	; 0x54
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d04b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f96:	d02e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f9c:	d828      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d02a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa8:	d822      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fae:	d026      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb4:	d81c      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d010      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc0:	d816      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d111      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fcc4 	bl	8004960 <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fdc:	e012      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fd6d 	bl	8004ac4 <RCCEx_PLL3_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fee:	e009      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e004      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800400a:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004018:	492a      	ldr	r1, [pc, #168]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	658b      	str	r3, [r1, #88]	; 0x58
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d04d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004036:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800403a:	d02e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800403c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004040:	d828      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d02a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404c:	d822      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800404e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004052:	d026      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004054:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004058:	d81c      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800405a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405e:	d010      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004064:	d816      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406e:	d111      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fc72 	bl	8004960 <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004080:	e012      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3324      	adds	r3, #36	; 0x24
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fd1b 	bl	8004ac4 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004092:	e009      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e006      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800409a:	bf00      	nop
 800409c:	e004      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80040a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040bc:	4901      	ldr	r1, [pc, #4]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	658b      	str	r3, [r1, #88]	; 0x58
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d018      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d10a      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fceb 	bl	8004ac4 <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80040f8:	4b8a      	ldr	r3, [pc, #552]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004104:	4987      	ldr	r1, [pc, #540]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004106:	4313      	orrs	r3, r2
 8004108:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fccb 	bl	8004ac4 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004138:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	4977      	ldr	r1, [pc, #476]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004148:	4313      	orrs	r3, r2
 800414a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d034      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800415e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004162:	d01d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004168:	d817      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d009      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004174:	e011      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fbef 	bl	8004960 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc98 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b6:	495b      	ldr	r1, [pc, #364]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	658b      	str	r3, [r1, #88]	; 0x58
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d033      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041d8:	d01c      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80041da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041de:	d816      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e4:	d003      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ea:	d007      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80041ec:	e00f      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a4c      	ldr	r2, [pc, #304]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80041fa:	e00c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3324      	adds	r3, #36	; 0x24
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fc5e 	bl	8004ac4 <RCCEx_PLL3_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
      break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422a:	493e      	ldr	r1, [pc, #248]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800422c:	4313      	orrs	r3, r2
 800422e:	654b      	str	r3, [r1, #84]	; 0x54
 8004230:	e001      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d029      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424e:	d007      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004250:	e00f      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a33      	ldr	r2, [pc, #204]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800425e:	e00b      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	2102      	movs	r1, #2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb7a 	bl	8004960 <RCCEx_PLL2_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	75fb      	strb	r3, [r7, #23]
      break;
 8004276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800427e:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	4926      	ldr	r1, [pc, #152]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800428c:	4313      	orrs	r3, r2
 800428e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004290:	e001      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3324      	adds	r3, #36	; 0x24
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fc0b 	bl	8004ac4 <RCCEx_PLL3_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d033      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042cc:	d017      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80042ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d2:	d811      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d013      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80042da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042de:	d80b      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80042f6:	e007      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
      break;
 80042fc:	e004      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10c      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431a:	4902      	ldr	r1, [pc, #8]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800431c:	4313      	orrs	r3, r2
 800431e:	654b      	str	r3, [r1, #84]	; 0x54
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004322:	bf00      	nop
 8004324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004338:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004344:	4926      	ldr	r1, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004346:	4313      	orrs	r3, r2
 8004348:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004362:	491f      	ldr	r1, [pc, #124]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800437a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800437e:	6113      	str	r3, [r2, #16]
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800438a:	4915      	ldr	r1, [pc, #84]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	da08      	bge.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	490e      	ldr	r1, [pc, #56]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c4:	4906      	ldr	r1, [pc, #24]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043ca:	7dbb      	ldrb	r3, [r7, #22]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400

080043e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80043e8:	f7ff f8a6 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4904      	ldr	r1, [pc, #16]	; (800440c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	58024400 	.word	0x58024400
 800440c:	0800843c 	.word	0x0800843c

08004410 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004418:	4ba1      	ldr	r3, [pc, #644]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004422:	4b9f      	ldr	r3, [pc, #636]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	0b1b      	lsrs	r3, r3, #12
 8004428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800442e:	4b9c      	ldr	r3, [pc, #624]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800443a:	4b99      	ldr	r3, [pc, #612]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	08db      	lsrs	r3, r3, #3
 8004440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8111 	beq.w	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b02      	cmp	r3, #2
 8004462:	f000 8083 	beq.w	800456c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b02      	cmp	r3, #2
 800446a:	f200 80a1 	bhi.w	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d056      	beq.n	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800447a:	e099      	b.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800447c:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02d      	beq.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004488:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	08db      	lsrs	r3, r3, #3
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	4a84      	ldr	r2, [pc, #528]	; (80046a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b7b      	ldr	r3, [pc, #492]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80044e2:	e087      	b.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80044f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f6:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004506:	ed97 6a03 	vldr	s12, [r7, #12]
 800450a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004526:	e065      	b.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b59      	ldr	r3, [pc, #356]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a03 	vldr	s12, [r7, #12]
 800454e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800456a:	e043      	b.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004592:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ae:	e021      	b.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80045f4:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	0a5b      	lsrs	r3, r3, #9
 80045fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800460a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800460e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461a:	ee17 2a90 	vmov	r2, s15
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004622:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800463c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004648:	ee17 2a90 	vmov	r2, s15
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	0e1b      	lsrs	r3, r3, #24
 8004656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800466a:	edd7 6a07 	vldr	s13, [r7, #28]
 800466e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004676:	ee17 2a90 	vmov	r2, s15
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800467e:	e008      	b.n	8004692 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
}
 8004692:	bf00      	nop
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	58024400 	.word	0x58024400
 80046a4:	03d09000 	.word	0x03d09000
 80046a8:	46000000 	.word	0x46000000
 80046ac:	4c742400 	.word	0x4c742400
 80046b0:	4a742400 	.word	0x4a742400
 80046b4:	4bbebc20 	.word	0x4bbebc20

080046b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046c0:	4ba1      	ldr	r3, [pc, #644]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80046ca:	4b9f      	ldr	r3, [pc, #636]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	0d1b      	lsrs	r3, r3, #20
 80046d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046d6:	4b9c      	ldr	r3, [pc, #624]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80046e2:	4b99      	ldr	r3, [pc, #612]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	08db      	lsrs	r3, r3, #3
 80046e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8111 	beq.w	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b02      	cmp	r3, #2
 800470a:	f000 8083 	beq.w	8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b02      	cmp	r3, #2
 8004712:	f200 80a1 	bhi.w	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d056      	beq.n	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004722:	e099      	b.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004724:	4b88      	ldr	r3, [pc, #544]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02d      	beq.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004730:	4b85      	ldr	r3, [pc, #532]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	08db      	lsrs	r3, r3, #3
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	4a84      	ldr	r2, [pc, #528]	; (800494c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b7b      	ldr	r3, [pc, #492]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800478a:	e087      	b.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004954 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ce:	e065      	b.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004812:	e043      	b.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800495c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b48      	ldr	r3, [pc, #288]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004856:	e021      	b.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800489a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800489c:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	0a5b      	lsrs	r3, r3, #9
 80048a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c2:	ee17 2a90 	vmov	r2, s15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f0:	ee17 2a90 	vmov	r2, s15
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80048f8:	4b13      	ldr	r3, [pc, #76]	; (8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	0e1b      	lsrs	r3, r3, #24
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004926:	e008      	b.n	800493a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
}
 800493a:	bf00      	nop
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
 800494c:	03d09000 	.word	0x03d09000
 8004950:	46000000 	.word	0x46000000
 8004954:	4c742400 	.word	0x4c742400
 8004958:	4a742400 	.word	0x4a742400
 800495c:	4bbebc20 	.word	0x4bbebc20

08004960 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800496e:	4b53      	ldr	r3, [pc, #332]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b03      	cmp	r3, #3
 8004978:	d101      	bne.n	800497e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e099      	b.n	8004ab2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800497e:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4e      	ldr	r2, [pc, #312]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498a:	f7fc fe3d 	bl	8001608 <HAL_GetTick>
 800498e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004990:	e008      	b.n	80049a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004992:	f7fc fe39 	bl	8001608 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e086      	b.n	8004ab2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049b0:	4b42      	ldr	r3, [pc, #264]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	493f      	ldr	r1, [pc, #252]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	628b      	str	r3, [r1, #40]	; 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	025b      	lsls	r3, r3, #9
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	3b01      	subs	r3, #1
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049f4:	4931      	ldr	r1, [pc, #196]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049fa:	4b30      	ldr	r3, [pc, #192]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	492d      	ldr	r1, [pc, #180]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	f023 0220 	bic.w	r2, r3, #32
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	4928      	ldr	r1, [pc, #160]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a1e:	4b27      	ldr	r3, [pc, #156]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4a26      	ldr	r2, [pc, #152]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <RCCEx_PLL2_Config+0x160>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	69d2      	ldr	r2, [r2, #28]
 8004a36:	00d2      	lsls	r2, r2, #3
 8004a38:	4920      	ldr	r1, [pc, #128]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f043 0310 	orr.w	r3, r3, #16
 8004a48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a5c:	e00f      	b.n	8004a7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a70:	e005      	b.n	8004a7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8a:	f7fc fdbd 	bl	8001608 <HAL_GetTick>
 8004a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a92:	f7fc fdb9 	bl	8001608 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e006      	b.n	8004ab2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <RCCEx_PLL2_Config+0x15c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	ffff0007 	.word	0xffff0007

08004ac4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ad2:	4b53      	ldr	r3, [pc, #332]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d101      	bne.n	8004ae2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e099      	b.n	8004c16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a4e      	ldr	r2, [pc, #312]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fc fd8b 	bl	8001608 <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004af4:	e008      	b.n	8004b08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004af6:	f7fc fd87 	bl	8001608 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e086      	b.n	8004c16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b08:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b14:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	051b      	lsls	r3, r3, #20
 8004b22:	493f      	ldr	r1, [pc, #252]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	628b      	str	r3, [r1, #40]	; 0x28
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	025b      	lsls	r3, r3, #9
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b58:	4931      	ldr	r1, [pc, #196]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b5e:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	492d      	ldr	r1, [pc, #180]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b70:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4928      	ldr	r1, [pc, #160]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b82:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <RCCEx_PLL3_Config+0x160>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	69d2      	ldr	r2, [r2, #28]
 8004b9a:	00d2      	lsls	r2, r2, #3
 8004b9c:	4920      	ldr	r1, [pc, #128]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc0:	e00f      	b.n	8004be2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d106      	bne.n	8004bd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bd4:	e005      	b.n	8004be2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fc fd0b 	bl	8001608 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bf4:	e008      	b.n	8004c08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bf6:	f7fc fd07 	bl	8001608 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e006      	b.n	8004c16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <RCCEx_PLL3_Config+0x15c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
 8004c24:	ffff0007 	.word	0xffff0007

08004c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e049      	b.n	8004cce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fa56 	bl	8001100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f000 fa66 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_TIM_PWM_Start+0x24>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e03c      	b.n	8004d76 <HAL_TIM_PWM_Start+0x9e>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d109      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x3e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e02f      	b.n	8004d76 <HAL_TIM_PWM_Start+0x9e>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start+0x58>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e022      	b.n	8004d76 <HAL_TIM_PWM_Start+0x9e>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d109      	bne.n	8004d4a <HAL_TIM_PWM_Start+0x72>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	bf14      	ite	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	2300      	moveq	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e015      	b.n	8004d76 <HAL_TIM_PWM_Start+0x9e>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d109      	bne.n	8004d64 <HAL_TIM_PWM_Start+0x8c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e008      	b.n	8004d76 <HAL_TIM_PWM_Start+0x9e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e0ab      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_PWM_Start+0xb6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d8c:	e023      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xfe>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_PWM_Start+0xc6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9c:	e01b      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xfe>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_PWM_Start+0xd6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dac:	e013      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xfe>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0xe6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dbc:	e00b      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xfe>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0xf6>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dcc:	e003      	b.n	8004dd6 <HAL_TIM_PWM_Start+0xfe>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fd26 	bl	8005830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3d      	ldr	r2, [pc, #244]	; (8004ee0 <HAL_TIM_PWM_Start+0x208>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_TIM_PWM_Start+0x13e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <HAL_TIM_PWM_Start+0x20c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_TIM_PWM_Start+0x13e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <HAL_TIM_PWM_Start+0x210>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_TIM_PWM_Start+0x13e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_TIM_PWM_Start+0x214>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_TIM_PWM_Start+0x13e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a37      	ldr	r2, [pc, #220]	; (8004ef0 <HAL_TIM_PWM_Start+0x218>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x142>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_PWM_Start+0x144>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <HAL_TIM_PWM_Start+0x208>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d027      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <HAL_TIM_PWM_Start+0x21c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <HAL_TIM_PWM_Start+0x220>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a27      	ldr	r2, [pc, #156]	; (8004efc <HAL_TIM_PWM_Start+0x224>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_TIM_PWM_Start+0x20c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <HAL_TIM_PWM_Start+0x228>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <HAL_TIM_PWM_Start+0x210>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <HAL_TIM_PWM_Start+0x22c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x1bc>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <HAL_TIM_PWM_Start+0x230>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d115      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <HAL_TIM_PWM_Start+0x234>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d015      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x1fa>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d011      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	e008      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40010400 	.word	0x40010400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40001800 	.word	0x40001800
 8004f04:	4000e000 	.word	0x4000e000
 8004f08:	4000e400 	.word	0x4000e400
 8004f0c:	00010007 	.word	0x00010007

08004f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e0ff      	b.n	800512e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b14      	cmp	r3, #20
 8004f3a:	f200 80f0 	bhi.w	800511e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	0800511f 	.word	0x0800511f
 8004f4c:	0800511f 	.word	0x0800511f
 8004f50:	0800511f 	.word	0x0800511f
 8004f54:	08004fd9 	.word	0x08004fd9
 8004f58:	0800511f 	.word	0x0800511f
 8004f5c:	0800511f 	.word	0x0800511f
 8004f60:	0800511f 	.word	0x0800511f
 8004f64:	0800501b 	.word	0x0800501b
 8004f68:	0800511f 	.word	0x0800511f
 8004f6c:	0800511f 	.word	0x0800511f
 8004f70:	0800511f 	.word	0x0800511f
 8004f74:	0800505b 	.word	0x0800505b
 8004f78:	0800511f 	.word	0x0800511f
 8004f7c:	0800511f 	.word	0x0800511f
 8004f80:	0800511f 	.word	0x0800511f
 8004f84:	0800509d 	.word	0x0800509d
 8004f88:	0800511f 	.word	0x0800511f
 8004f8c:	0800511f 	.word	0x0800511f
 8004f90:	0800511f 	.word	0x0800511f
 8004f94:	080050dd 	.word	0x080050dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f970 	bl	8005284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0208 	orr.w	r2, r2, #8
 8004fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0204 	bic.w	r2, r2, #4
 8004fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6999      	ldr	r1, [r3, #24]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]
      break;
 8004fd6:	e0a5      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f9e0 	bl	80053a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6999      	ldr	r1, [r3, #24]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	021a      	lsls	r2, r3, #8
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	619a      	str	r2, [r3, #24]
      break;
 8005018:	e084      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fa49 	bl	80054b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0208 	orr.w	r2, r2, #8
 8005034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0204 	bic.w	r2, r2, #4
 8005044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69d9      	ldr	r1, [r3, #28]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	61da      	str	r2, [r3, #28]
      break;
 8005058:	e064      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fab1 	bl	80055c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69d9      	ldr	r1, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	021a      	lsls	r2, r3, #8
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	61da      	str	r2, [r3, #28]
      break;
 800509a:	e043      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fafa 	bl	800569c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050da:	e023      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fb3e 	bl	8005764 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800511c:	e002      	b.n	8005124 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
      break;
 8005122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop

08005138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a44      	ldr	r2, [pc, #272]	; (800525c <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a41      	ldr	r2, [pc, #260]	; (8005260 <TIM_Base_SetConfig+0x128>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a40      	ldr	r2, [pc, #256]	; (8005264 <TIM_Base_SetConfig+0x12c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <TIM_Base_SetConfig+0x130>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3e      	ldr	r2, [pc, #248]	; (800526c <TIM_Base_SetConfig+0x134>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a33      	ldr	r2, [pc, #204]	; (800525c <TIM_Base_SetConfig+0x124>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d023      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <TIM_Base_SetConfig+0x128>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01f      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2f      	ldr	r2, [pc, #188]	; (8005264 <TIM_Base_SetConfig+0x12c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01b      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2e      	ldr	r2, [pc, #184]	; (8005268 <TIM_Base_SetConfig+0x130>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d017      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2d      	ldr	r2, [pc, #180]	; (800526c <TIM_Base_SetConfig+0x134>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <TIM_Base_SetConfig+0x138>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a2b      	ldr	r2, [pc, #172]	; (8005274 <TIM_Base_SetConfig+0x13c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2a      	ldr	r2, [pc, #168]	; (8005278 <TIM_Base_SetConfig+0x140>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a29      	ldr	r2, [pc, #164]	; (800527c <TIM_Base_SetConfig+0x144>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0xaa>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a28      	ldr	r2, [pc, #160]	; (8005280 <TIM_Base_SetConfig+0x148>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <TIM_Base_SetConfig+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_Base_SetConfig+0x108>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <TIM_Base_SetConfig+0x134>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_Base_SetConfig+0x108>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a11      	ldr	r2, [pc, #68]	; (8005270 <TIM_Base_SetConfig+0x138>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_Base_SetConfig+0x108>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <TIM_Base_SetConfig+0x13c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0x108>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <TIM_Base_SetConfig+0x140>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40010400 	.word	0x40010400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800
 800527c:	4000e000 	.word	0x4000e000
 8005280:	4000e400 	.word	0x4000e400

08005284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4b37      	ldr	r3, [pc, #220]	; (800538c <TIM_OC1_SetConfig+0x108>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 0302 	bic.w	r3, r3, #2
 80052cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a2d      	ldr	r2, [pc, #180]	; (8005390 <TIM_OC1_SetConfig+0x10c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00f      	beq.n	8005300 <TIM_OC1_SetConfig+0x7c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <TIM_OC1_SetConfig+0x110>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_OC1_SetConfig+0x7c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <TIM_OC1_SetConfig+0x114>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_OC1_SetConfig+0x7c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a2a      	ldr	r2, [pc, #168]	; (800539c <TIM_OC1_SetConfig+0x118>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_OC1_SetConfig+0x7c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <TIM_OC1_SetConfig+0x11c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10c      	bne.n	800531a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0308 	bic.w	r3, r3, #8
 8005306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 0304 	bic.w	r3, r3, #4
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_OC1_SetConfig+0x10c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00f      	beq.n	8005342 <TIM_OC1_SetConfig+0xbe>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <TIM_OC1_SetConfig+0x110>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00b      	beq.n	8005342 <TIM_OC1_SetConfig+0xbe>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <TIM_OC1_SetConfig+0x114>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <TIM_OC1_SetConfig+0xbe>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a19      	ldr	r2, [pc, #100]	; (800539c <TIM_OC1_SetConfig+0x118>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_OC1_SetConfig+0xbe>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <TIM_OC1_SetConfig+0x11c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d111      	bne.n	8005366 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	fffeff8f 	.word	0xfffeff8f
 8005390:	40010000 	.word	0x40010000
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800

080053a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0210 	bic.w	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <TIM_OC2_SetConfig+0xfc>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0320 	bic.w	r3, r3, #32
 80053ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a29      	ldr	r2, [pc, #164]	; (80054a4 <TIM_OC2_SetConfig+0x100>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC2_SetConfig+0x68>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <TIM_OC2_SetConfig+0x104>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10d      	bne.n	8005428 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <TIM_OC2_SetConfig+0x100>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_OC2_SetConfig+0xac>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <TIM_OC2_SetConfig+0x104>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_OC2_SetConfig+0xac>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <TIM_OC2_SetConfig+0x108>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_OC2_SetConfig+0xac>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <TIM_OC2_SetConfig+0x10c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC2_SetConfig+0xac>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <TIM_OC2_SetConfig+0x110>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d113      	bne.n	8005478 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	feff8fff 	.word	0xfeff8fff
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40010400 	.word	0x40010400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <TIM_OC3_SetConfig+0xf8>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a28      	ldr	r2, [pc, #160]	; (80055b4 <TIM_OC3_SetConfig+0xfc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_OC3_SetConfig+0x66>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a27      	ldr	r2, [pc, #156]	; (80055b8 <TIM_OC3_SetConfig+0x100>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10d      	bne.n	800553a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <TIM_OC3_SetConfig+0xfc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_OC3_SetConfig+0xaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <TIM_OC3_SetConfig+0x100>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_OC3_SetConfig+0xaa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <TIM_OC3_SetConfig+0x104>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_OC3_SetConfig+0xaa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <TIM_OC3_SetConfig+0x108>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_OC3_SetConfig+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <TIM_OC3_SetConfig+0x10c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d113      	bne.n	800558a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	fffeff8f 	.word	0xfffeff8f
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4b24      	ldr	r3, [pc, #144]	; (8005684 <TIM_OC4_SetConfig+0xbc>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a19      	ldr	r2, [pc, #100]	; (8005688 <TIM_OC4_SetConfig+0xc0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00f      	beq.n	8005648 <TIM_OC4_SetConfig+0x80>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <TIM_OC4_SetConfig+0xc4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_OC4_SetConfig+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <TIM_OC4_SetConfig+0xc8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_OC4_SetConfig+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <TIM_OC4_SetConfig+0xcc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC4_SetConfig+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC4_SetConfig+0xd0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d109      	bne.n	800565c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	019b      	lsls	r3, r3, #6
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	feff8fff 	.word	0xfeff8fff
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4b21      	ldr	r3, [pc, #132]	; (800574c <TIM_OC5_SetConfig+0xb0>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <TIM_OC5_SetConfig+0xb4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_OC5_SetConfig+0x76>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a17      	ldr	r2, [pc, #92]	; (8005754 <TIM_OC5_SetConfig+0xb8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_OC5_SetConfig+0x76>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a16      	ldr	r2, [pc, #88]	; (8005758 <TIM_OC5_SetConfig+0xbc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_OC5_SetConfig+0x76>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <TIM_OC5_SetConfig+0xc0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC5_SetConfig+0x76>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a14      	ldr	r2, [pc, #80]	; (8005760 <TIM_OC5_SetConfig+0xc4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d109      	bne.n	8005726 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	fffeff8f 	.word	0xfffeff8f
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4b22      	ldr	r3, [pc, #136]	; (8005818 <TIM_OC6_SetConfig+0xb4>)
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	051b      	lsls	r3, r3, #20
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <TIM_OC6_SetConfig+0xb8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00f      	beq.n	80057dc <TIM_OC6_SetConfig+0x78>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <TIM_OC6_SetConfig+0xbc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_OC6_SetConfig+0x78>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a17      	ldr	r2, [pc, #92]	; (8005824 <TIM_OC6_SetConfig+0xc0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_OC6_SetConfig+0x78>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <TIM_OC6_SetConfig+0xc4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC6_SetConfig+0x78>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <TIM_OC6_SetConfig+0xc8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d109      	bne.n	80057f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	029b      	lsls	r3, r3, #10
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	feff8fff 	.word	0xfeff8fff
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e077      	b.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a35      	ldr	r2, [pc, #212]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a34      	ldr	r2, [pc, #208]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d108      	bne.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d02c      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005906:	d027      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a22      	ldr	r2, [pc, #136]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d01d      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10c      	bne.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40001800 	.word	0x40001800
 80059a8:	40014000 	.word	0x40014000
 80059ac:	4000e000 	.word	0x4000e000
 80059b0:	4000e400 	.word	0x4000e400

080059b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e087      	b.n	8005ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	; (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d106      	bne.n	8005a6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d126      	bne.n	8005ace <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	051b      	lsls	r3, r3, #20
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d106      	bne.n	8005ace <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e042      	b.n	8005b8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fb fb4f 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fcd6 	bl	80064e8 <UART_SetConfig>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e022      	b.n	8005b8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 fb36 	bl	80071c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fbbd 	bl	8007304 <UART_CheckIdleState>
 8005b8a:	4603      	mov	r3, r0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	f040 8083 	bne.w	8005cb6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Transmit+0x28>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e07b      	b.n	8005cb8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Transmit+0x3a>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e074      	b.n	8005cb8 <HAL_UART_Transmit+0x124>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2221      	movs	r2, #33	; 0x21
 8005be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be6:	f7fb fd0f 	bl	8001608 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d108      	bne.n	8005c18 <HAL_UART_Transmit+0x84>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e003      	b.n	8005c20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005c28:	e02c      	b.n	8005c84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f001 fbb0 	bl	800739a <UART_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e039      	b.n	8005cb8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e007      	b.n	8005c72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1cc      	bne.n	8005c2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f001 fb7d 	bl	800739a <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e006      	b.n	8005cb8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e000      	b.n	8005cb8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d142      	bne.n	8005d5e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_UART_Receive_IT+0x24>
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e03b      	b.n	8005d60 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Receive_IT+0x36>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e034      	b.n	8005d60 <HAL_UART_Receive_IT+0xa0>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <HAL_UART_Receive_IT+0xa8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d018      	beq.n	8005d4e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	623b      	str	r3, [r7, #32]
 8005d3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	69f9      	ldr	r1, [r7, #28]
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e6      	bne.n	8005d1c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f001 fbe9 	bl	800752c <UART_Start_Receive_IT>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	e000      	b.n	8005d60 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3728      	adds	r7, #40	; 0x28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	58000c00 	.word	0x58000c00

08005d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b0ba      	sub	sp, #232	; 0xe8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11b      	bne.n	8005de0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d015      	beq.n	8005de0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 835a 	beq.w	800648a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
      }
      return;
 8005dde:	e354      	b.n	800648a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 811f 	beq.w	8006028 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dee:	4b8b      	ldr	r3, [pc, #556]	; (800601c <HAL_UART_IRQHandler+0x2b0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dfa:	4b89      	ldr	r3, [pc, #548]	; (8006020 <HAL_UART_IRQHandler+0x2b4>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8112 	beq.w	8006028 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d011      	beq.n	8005e34 <HAL_UART_IRQHandler+0xc8>
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2201      	movs	r2, #1
 8005e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d011      	beq.n	8005e64 <HAL_UART_IRQHandler+0xf8>
 8005e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2202      	movs	r2, #2
 8005e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5a:	f043 0204 	orr.w	r2, r3, #4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d011      	beq.n	8005e94 <HAL_UART_IRQHandler+0x128>
 8005e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2204      	movs	r2, #4
 8005e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005eb0:	4b5a      	ldr	r3, [pc, #360]	; (800601c <HAL_UART_IRQHandler+0x2b0>)
 8005eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d012      	beq.n	8005f02 <HAL_UART_IRQHandler+0x196>
 8005edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 82c0 	beq.w	800648e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d005      	beq.n	8005f66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d04f      	beq.n	8006006 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 fc0a 	bl	8007780 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d141      	bne.n	8005ffe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d9      	bne.n	8005f7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d013      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd2:	4a14      	ldr	r2, [pc, #80]	; (8006024 <HAL_UART_IRQHandler+0x2b8>)
 8005fd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fb ff72 	bl	8001ec4 <HAL_DMA_Abort_IT>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d017      	beq.n	8006016 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	e00f      	b.n	8006016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa60 	bl	80064bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	e00b      	b.n	8006016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa5c 	bl	80064bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	e007      	b.n	8006016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa58 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006014:	e23b      	b.n	800648e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006016:	bf00      	nop
    return;
 8006018:	e239      	b.n	800648e <HAL_UART_IRQHandler+0x722>
 800601a:	bf00      	nop
 800601c:	10000001 	.word	0x10000001
 8006020:	04000120 	.word	0x04000120
 8006024:	0800784d 	.word	0x0800784d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 81ce 	bne.w	80063ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 81c7 	beq.w	80063ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 81c0 	beq.w	80063ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2210      	movs	r2, #16
 8006054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	f040 813b 	bne.w	80062dc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a8b      	ldr	r2, [pc, #556]	; (800629c <HAL_UART_IRQHandler+0x530>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d059      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a89      	ldr	r2, [pc, #548]	; (80062a0 <HAL_UART_IRQHandler+0x534>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d053      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_UART_IRQHandler+0x538>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d04d      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a85      	ldr	r2, [pc, #532]	; (80062a8 <HAL_UART_IRQHandler+0x53c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d047      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a83      	ldr	r2, [pc, #524]	; (80062ac <HAL_UART_IRQHandler+0x540>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d041      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a81      	ldr	r2, [pc, #516]	; (80062b0 <HAL_UART_IRQHandler+0x544>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d03b      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a7f      	ldr	r2, [pc, #508]	; (80062b4 <HAL_UART_IRQHandler+0x548>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d035      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <HAL_UART_IRQHandler+0x54c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d02f      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a7b      	ldr	r2, [pc, #492]	; (80062bc <HAL_UART_IRQHandler+0x550>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d029      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a79      	ldr	r2, [pc, #484]	; (80062c0 <HAL_UART_IRQHandler+0x554>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d023      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a77      	ldr	r2, [pc, #476]	; (80062c4 <HAL_UART_IRQHandler+0x558>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01d      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a75      	ldr	r2, [pc, #468]	; (80062c8 <HAL_UART_IRQHandler+0x55c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d017      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a73      	ldr	r2, [pc, #460]	; (80062cc <HAL_UART_IRQHandler+0x560>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d011      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a71      	ldr	r2, [pc, #452]	; (80062d0 <HAL_UART_IRQHandler+0x564>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00b      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6f      	ldr	r2, [pc, #444]	; (80062d4 <HAL_UART_IRQHandler+0x568>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d005      	beq.n	8006126 <HAL_UART_IRQHandler+0x3ba>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a6d      	ldr	r2, [pc, #436]	; (80062d8 <HAL_UART_IRQHandler+0x56c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d105      	bne.n	8006132 <HAL_UART_IRQHandler+0x3c6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	b29b      	uxth	r3, r3
 8006130:	e004      	b.n	800613c <HAL_UART_IRQHandler+0x3d0>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 81a4 	beq.w	8006492 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006154:	429a      	cmp	r2, r3
 8006156:	f080 819c 	bcs.w	8006492 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616e:	f000 8086 	beq.w	800627e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800618a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800619c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1da      	bne.n	8006172 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ce:	f023 0301 	bic.w	r3, r3, #1
 80061d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3308      	adds	r3, #8
 80061dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e1      	bne.n	80061bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3308      	adds	r3, #8
 80061fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800621c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800621e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006222:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800622a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e3      	bne.n	80061f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800624c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624e:	f023 0310 	bic.w	r3, r3, #16
 8006252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006260:	65bb      	str	r3, [r7, #88]	; 0x58
 8006262:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006266:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800626e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e4      	bne.n	800623e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006278:	4618      	mov	r0, r3
 800627a:	f7fb fb05 	bl	8001888 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800628a:	b29b      	uxth	r3, r3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	b29b      	uxth	r3, r3
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f91c 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006298:	e0fb      	b.n	8006492 <HAL_UART_IRQHandler+0x726>
 800629a:	bf00      	nop
 800629c:	40020010 	.word	0x40020010
 80062a0:	40020028 	.word	0x40020028
 80062a4:	40020040 	.word	0x40020040
 80062a8:	40020058 	.word	0x40020058
 80062ac:	40020070 	.word	0x40020070
 80062b0:	40020088 	.word	0x40020088
 80062b4:	400200a0 	.word	0x400200a0
 80062b8:	400200b8 	.word	0x400200b8
 80062bc:	40020410 	.word	0x40020410
 80062c0:	40020428 	.word	0x40020428
 80062c4:	40020440 	.word	0x40020440
 80062c8:	40020458 	.word	0x40020458
 80062cc:	40020470 	.word	0x40020470
 80062d0:	40020488 	.word	0x40020488
 80062d4:	400204a0 	.word	0x400204a0
 80062d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80cc 	beq.w	8006496 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80062fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80c7 	beq.w	8006496 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800631c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
 800632c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e4      	bne.n	8006308 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	623b      	str	r3, [r7, #32]
   return(result);
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	4b54      	ldr	r3, [pc, #336]	; (80064a4 <HAL_UART_IRQHandler+0x738>)
 8006352:	4013      	ands	r3, r2
 8006354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006362:	633a      	str	r2, [r7, #48]	; 0x30
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e3      	bne.n	800633e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	60fb      	str	r3, [r7, #12]
   return(result);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0310 	bic.w	r3, r3, #16
 800639e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	69b9      	ldr	r1, [r7, #24]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e4      	bne.n	800638a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f882 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063cc:	e063      	b.n	8006496 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00e      	beq.n	80063f8 <HAL_UART_IRQHandler+0x68c>
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 fec9 	bl	8008188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f6:	e051      	b.n	800649c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	d014      	beq.n	800642e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006420:	2b00      	cmp	r3, #0
 8006422:	d03a      	beq.n	800649a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
    }
    return;
 800642c:	e035      	b.n	800649a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_UART_IRQHandler+0x6e2>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fa16 	bl	8007878 <UART_EndTransmit_IT>
    return;
 800644c:	e026      	b.n	800649c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800644e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <HAL_UART_IRQHandler+0x702>
 800645a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fea2 	bl	80081b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800646c:	e016      	b.n	800649c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <HAL_UART_IRQHandler+0x730>
 800647a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647e:	2b00      	cmp	r3, #0
 8006480:	da0c      	bge.n	800649c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fe8a 	bl	800819c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006488:	e008      	b.n	800649c <HAL_UART_IRQHandler+0x730>
      return;
 800648a:	bf00      	nop
 800648c:	e006      	b.n	800649c <HAL_UART_IRQHandler+0x730>
    return;
 800648e:	bf00      	nop
 8006490:	e004      	b.n	800649c <HAL_UART_IRQHandler+0x730>
      return;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <HAL_UART_IRQHandler+0x730>
      return;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_UART_IRQHandler+0x730>
    return;
 800649a:	bf00      	nop
  }
}
 800649c:	37e8      	adds	r7, #232	; 0xe8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	effffffe 	.word	0xeffffffe

080064a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ec:	b092      	sub	sp, #72	; 0x48
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	431a      	orrs	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	431a      	orrs	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	4313      	orrs	r3, r2
 800650e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4bbe      	ldr	r3, [pc, #760]	; (8006810 <UART_SetConfig+0x328>)
 8006518:	4013      	ands	r3, r2
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006520:	430b      	orrs	r3, r1
 8006522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4ab3      	ldr	r2, [pc, #716]	; (8006814 <UART_SetConfig+0x32c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006550:	4313      	orrs	r3, r2
 8006552:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	4baf      	ldr	r3, [pc, #700]	; (8006818 <UART_SetConfig+0x330>)
 800655c:	4013      	ands	r3, r2
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006564:	430b      	orrs	r3, r1
 8006566:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f023 010f 	bic.w	r1, r3, #15
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4aa6      	ldr	r2, [pc, #664]	; (800681c <UART_SetConfig+0x334>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d177      	bne.n	8006678 <UART_SetConfig+0x190>
 8006588:	4ba5      	ldr	r3, [pc, #660]	; (8006820 <UART_SetConfig+0x338>)
 800658a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006590:	2b28      	cmp	r3, #40	; 0x28
 8006592:	d86d      	bhi.n	8006670 <UART_SetConfig+0x188>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0xb4>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	08006641 	.word	0x08006641
 80065a0:	08006671 	.word	0x08006671
 80065a4:	08006671 	.word	0x08006671
 80065a8:	08006671 	.word	0x08006671
 80065ac:	08006671 	.word	0x08006671
 80065b0:	08006671 	.word	0x08006671
 80065b4:	08006671 	.word	0x08006671
 80065b8:	08006671 	.word	0x08006671
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006671 	.word	0x08006671
 80065c4:	08006671 	.word	0x08006671
 80065c8:	08006671 	.word	0x08006671
 80065cc:	08006671 	.word	0x08006671
 80065d0:	08006671 	.word	0x08006671
 80065d4:	08006671 	.word	0x08006671
 80065d8:	08006671 	.word	0x08006671
 80065dc:	08006651 	.word	0x08006651
 80065e0:	08006671 	.word	0x08006671
 80065e4:	08006671 	.word	0x08006671
 80065e8:	08006671 	.word	0x08006671
 80065ec:	08006671 	.word	0x08006671
 80065f0:	08006671 	.word	0x08006671
 80065f4:	08006671 	.word	0x08006671
 80065f8:	08006671 	.word	0x08006671
 80065fc:	08006659 	.word	0x08006659
 8006600:	08006671 	.word	0x08006671
 8006604:	08006671 	.word	0x08006671
 8006608:	08006671 	.word	0x08006671
 800660c:	08006671 	.word	0x08006671
 8006610:	08006671 	.word	0x08006671
 8006614:	08006671 	.word	0x08006671
 8006618:	08006671 	.word	0x08006671
 800661c:	08006661 	.word	0x08006661
 8006620:	08006671 	.word	0x08006671
 8006624:	08006671 	.word	0x08006671
 8006628:	08006671 	.word	0x08006671
 800662c:	08006671 	.word	0x08006671
 8006630:	08006671 	.word	0x08006671
 8006634:	08006671 	.word	0x08006671
 8006638:	08006671 	.word	0x08006671
 800663c:	08006669 	.word	0x08006669
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e326      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e322      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e31e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e31a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006660:	2320      	movs	r3, #32
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e316      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e312      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e30e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a69      	ldr	r2, [pc, #420]	; (8006824 <UART_SetConfig+0x33c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d130      	bne.n	80066e4 <UART_SetConfig+0x1fc>
 8006682:	4b67      	ldr	r3, [pc, #412]	; (8006820 <UART_SetConfig+0x338>)
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b05      	cmp	r3, #5
 800668c:	d826      	bhi.n	80066dc <UART_SetConfig+0x1f4>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x1ac>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066ad 	.word	0x080066ad
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e2f0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e2ec      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e2e8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e2e4      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066cc:	2320      	movs	r3, #32
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e2e0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e2dc      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e2d8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a4f      	ldr	r2, [pc, #316]	; (8006828 <UART_SetConfig+0x340>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d130      	bne.n	8006750 <UART_SetConfig+0x268>
 80066ee:	4b4c      	ldr	r3, [pc, #304]	; (8006820 <UART_SetConfig+0x338>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d826      	bhi.n	8006748 <UART_SetConfig+0x260>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <UART_SetConfig+0x218>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006719 	.word	0x08006719
 8006704:	08006721 	.word	0x08006721
 8006708:	08006729 	.word	0x08006729
 800670c:	08006731 	.word	0x08006731
 8006710:	08006739 	.word	0x08006739
 8006714:	08006741 	.word	0x08006741
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e2ba      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e2b6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e2b2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e2ae      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006738:	2320      	movs	r3, #32
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e2aa      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006740:	2340      	movs	r3, #64	; 0x40
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e2a6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674e:	e2a2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <UART_SetConfig+0x344>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d130      	bne.n	80067bc <UART_SetConfig+0x2d4>
 800675a:	4b31      	ldr	r3, [pc, #196]	; (8006820 <UART_SetConfig+0x338>)
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	2b05      	cmp	r3, #5
 8006764:	d826      	bhi.n	80067b4 <UART_SetConfig+0x2cc>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0x284>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006785 	.word	0x08006785
 8006770:	0800678d 	.word	0x0800678d
 8006774:	08006795 	.word	0x08006795
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	2300      	movs	r3, #0
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e284      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e280      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e27c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e278      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067a4:	2320      	movs	r3, #32
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e274      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e270      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e26c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <UART_SetConfig+0x348>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d142      	bne.n	800684c <UART_SetConfig+0x364>
 80067c6:	4b16      	ldr	r3, [pc, #88]	; (8006820 <UART_SetConfig+0x338>)
 80067c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d838      	bhi.n	8006844 <UART_SetConfig+0x35c>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x2f0>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067f1 	.word	0x080067f1
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	08006801 	.word	0x08006801
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006835 	.word	0x08006835
 80067ec:	0800683d 	.word	0x0800683d
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e24e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e24a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e246      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e242      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006810:	cfff69f3 	.word	0xcfff69f3
 8006814:	58000c00 	.word	0x58000c00
 8006818:	11fff4ff 	.word	0x11fff4ff
 800681c:	40011000 	.word	0x40011000
 8006820:	58024400 	.word	0x58024400
 8006824:	40004400 	.word	0x40004400
 8006828:	40004800 	.word	0x40004800
 800682c:	40004c00 	.word	0x40004c00
 8006830:	40005000 	.word	0x40005000
 8006834:	2320      	movs	r3, #32
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e22c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800683c:	2340      	movs	r3, #64	; 0x40
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e228      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e224      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4ab1      	ldr	r2, [pc, #708]	; (8006b18 <UART_SetConfig+0x630>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d176      	bne.n	8006944 <UART_SetConfig+0x45c>
 8006856:	4bb1      	ldr	r3, [pc, #708]	; (8006b1c <UART_SetConfig+0x634>)
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800685e:	2b28      	cmp	r3, #40	; 0x28
 8006860:	d86c      	bhi.n	800693c <UART_SetConfig+0x454>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0x380>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	0800690d 	.word	0x0800690d
 800686c:	0800693d 	.word	0x0800693d
 8006870:	0800693d 	.word	0x0800693d
 8006874:	0800693d 	.word	0x0800693d
 8006878:	0800693d 	.word	0x0800693d
 800687c:	0800693d 	.word	0x0800693d
 8006880:	0800693d 	.word	0x0800693d
 8006884:	0800693d 	.word	0x0800693d
 8006888:	08006915 	.word	0x08006915
 800688c:	0800693d 	.word	0x0800693d
 8006890:	0800693d 	.word	0x0800693d
 8006894:	0800693d 	.word	0x0800693d
 8006898:	0800693d 	.word	0x0800693d
 800689c:	0800693d 	.word	0x0800693d
 80068a0:	0800693d 	.word	0x0800693d
 80068a4:	0800693d 	.word	0x0800693d
 80068a8:	0800691d 	.word	0x0800691d
 80068ac:	0800693d 	.word	0x0800693d
 80068b0:	0800693d 	.word	0x0800693d
 80068b4:	0800693d 	.word	0x0800693d
 80068b8:	0800693d 	.word	0x0800693d
 80068bc:	0800693d 	.word	0x0800693d
 80068c0:	0800693d 	.word	0x0800693d
 80068c4:	0800693d 	.word	0x0800693d
 80068c8:	08006925 	.word	0x08006925
 80068cc:	0800693d 	.word	0x0800693d
 80068d0:	0800693d 	.word	0x0800693d
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	0800693d 	.word	0x0800693d
 80068dc:	0800693d 	.word	0x0800693d
 80068e0:	0800693d 	.word	0x0800693d
 80068e4:	0800693d 	.word	0x0800693d
 80068e8:	0800692d 	.word	0x0800692d
 80068ec:	0800693d 	.word	0x0800693d
 80068f0:	0800693d 	.word	0x0800693d
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	0800693d 	.word	0x0800693d
 80068fc:	0800693d 	.word	0x0800693d
 8006900:	0800693d 	.word	0x0800693d
 8006904:	0800693d 	.word	0x0800693d
 8006908:	08006935 	.word	0x08006935
 800690c:	2301      	movs	r3, #1
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006912:	e1c0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691a:	e1bc      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006922:	e1b8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692a:	e1b4      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006932:	e1b0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693a:	e1ac      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006942:	e1a8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a75      	ldr	r2, [pc, #468]	; (8006b20 <UART_SetConfig+0x638>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d130      	bne.n	80069b0 <UART_SetConfig+0x4c8>
 800694e:	4b73      	ldr	r3, [pc, #460]	; (8006b1c <UART_SetConfig+0x634>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b05      	cmp	r3, #5
 8006958:	d826      	bhi.n	80069a8 <UART_SetConfig+0x4c0>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <UART_SetConfig+0x478>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	08006999 	.word	0x08006999
 8006974:	080069a1 	.word	0x080069a1
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e18a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e186      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698e:	e182      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006996:	e17e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006998:	2320      	movs	r3, #32
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699e:	e17a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a6:	e176      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ae:	e172      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a5b      	ldr	r2, [pc, #364]	; (8006b24 <UART_SetConfig+0x63c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d130      	bne.n	8006a1c <UART_SetConfig+0x534>
 80069ba:	4b58      	ldr	r3, [pc, #352]	; (8006b1c <UART_SetConfig+0x634>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d826      	bhi.n	8006a14 <UART_SetConfig+0x52c>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0x4e4>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ea:	e154      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f2:	e150      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fa:	e14c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a02:	e148      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a04:	2320      	movs	r3, #32
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0a:	e144      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a0c:	2340      	movs	r3, #64	; 0x40
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a12:	e140      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1a:	e13c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a41      	ldr	r2, [pc, #260]	; (8006b28 <UART_SetConfig+0x640>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f040 8082 	bne.w	8006b2c <UART_SetConfig+0x644>
 8006a28:	4b3c      	ldr	r3, [pc, #240]	; (8006b1c <UART_SetConfig+0x634>)
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a30:	2b28      	cmp	r3, #40	; 0x28
 8006a32:	d86d      	bhi.n	8006b10 <UART_SetConfig+0x628>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x554>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006ae1 	.word	0x08006ae1
 8006a40:	08006b11 	.word	0x08006b11
 8006a44:	08006b11 	.word	0x08006b11
 8006a48:	08006b11 	.word	0x08006b11
 8006a4c:	08006b11 	.word	0x08006b11
 8006a50:	08006b11 	.word	0x08006b11
 8006a54:	08006b11 	.word	0x08006b11
 8006a58:	08006b11 	.word	0x08006b11
 8006a5c:	08006ae9 	.word	0x08006ae9
 8006a60:	08006b11 	.word	0x08006b11
 8006a64:	08006b11 	.word	0x08006b11
 8006a68:	08006b11 	.word	0x08006b11
 8006a6c:	08006b11 	.word	0x08006b11
 8006a70:	08006b11 	.word	0x08006b11
 8006a74:	08006b11 	.word	0x08006b11
 8006a78:	08006b11 	.word	0x08006b11
 8006a7c:	08006af1 	.word	0x08006af1
 8006a80:	08006b11 	.word	0x08006b11
 8006a84:	08006b11 	.word	0x08006b11
 8006a88:	08006b11 	.word	0x08006b11
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b11 	.word	0x08006b11
 8006a94:	08006b11 	.word	0x08006b11
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006af9 	.word	0x08006af9
 8006aa0:	08006b11 	.word	0x08006b11
 8006aa4:	08006b11 	.word	0x08006b11
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006b11 	.word	0x08006b11
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b01 	.word	0x08006b01
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b11 	.word	0x08006b11
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae6:	e0d6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aee:	e0d2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af6:	e0ce      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e0ca      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b00:	2320      	movs	r3, #32
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e0c6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e0c2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e0be      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b18:	40011400 	.word	0x40011400
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	40007800 	.word	0x40007800
 8006b24:	40007c00 	.word	0x40007c00
 8006b28:	40011800 	.word	0x40011800
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4aad      	ldr	r2, [pc, #692]	; (8006de8 <UART_SetConfig+0x900>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d176      	bne.n	8006c24 <UART_SetConfig+0x73c>
 8006b36:	4bad      	ldr	r3, [pc, #692]	; (8006dec <UART_SetConfig+0x904>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b3e:	2b28      	cmp	r3, #40	; 0x28
 8006b40:	d86c      	bhi.n	8006c1c <UART_SetConfig+0x734>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x660>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006c1d 	.word	0x08006c1d
 8006b50:	08006c1d 	.word	0x08006c1d
 8006b54:	08006c1d 	.word	0x08006c1d
 8006b58:	08006c1d 	.word	0x08006c1d
 8006b5c:	08006c1d 	.word	0x08006c1d
 8006b60:	08006c1d 	.word	0x08006c1d
 8006b64:	08006c1d 	.word	0x08006c1d
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006c1d 	.word	0x08006c1d
 8006b70:	08006c1d 	.word	0x08006c1d
 8006b74:	08006c1d 	.word	0x08006c1d
 8006b78:	08006c1d 	.word	0x08006c1d
 8006b7c:	08006c1d 	.word	0x08006c1d
 8006b80:	08006c1d 	.word	0x08006c1d
 8006b84:	08006c1d 	.word	0x08006c1d
 8006b88:	08006bfd 	.word	0x08006bfd
 8006b8c:	08006c1d 	.word	0x08006c1d
 8006b90:	08006c1d 	.word	0x08006c1d
 8006b94:	08006c1d 	.word	0x08006c1d
 8006b98:	08006c1d 	.word	0x08006c1d
 8006b9c:	08006c1d 	.word	0x08006c1d
 8006ba0:	08006c1d 	.word	0x08006c1d
 8006ba4:	08006c1d 	.word	0x08006c1d
 8006ba8:	08006c05 	.word	0x08006c05
 8006bac:	08006c1d 	.word	0x08006c1d
 8006bb0:	08006c1d 	.word	0x08006c1d
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006c1d 	.word	0x08006c1d
 8006bbc:	08006c1d 	.word	0x08006c1d
 8006bc0:	08006c1d 	.word	0x08006c1d
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c0d 	.word	0x08006c0d
 8006bcc:	08006c1d 	.word	0x08006c1d
 8006bd0:	08006c1d 	.word	0x08006c1d
 8006bd4:	08006c1d 	.word	0x08006c1d
 8006bd8:	08006c1d 	.word	0x08006c1d
 8006bdc:	08006c1d 	.word	0x08006c1d
 8006be0:	08006c1d 	.word	0x08006c1d
 8006be4:	08006c1d 	.word	0x08006c1d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e050      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e04c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e048      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e044      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e040      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e03c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c1c:	2380      	movs	r3, #128	; 0x80
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e038      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a71      	ldr	r2, [pc, #452]	; (8006df0 <UART_SetConfig+0x908>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d130      	bne.n	8006c90 <UART_SetConfig+0x7a8>
 8006c2e:	4b6f      	ldr	r3, [pc, #444]	; (8006dec <UART_SetConfig+0x904>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d826      	bhi.n	8006c88 <UART_SetConfig+0x7a0>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0x758>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c59 	.word	0x08006c59
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	08006c69 	.word	0x08006c69
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	2302      	movs	r3, #2
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e01a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c60:	2304      	movs	r3, #4
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e016      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e012      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e00e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c78:	2320      	movs	r3, #32
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e00a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e006      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e002      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a55      	ldr	r2, [pc, #340]	; (8006df0 <UART_SetConfig+0x908>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	f040 80f8 	bne.w	8006e92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ca2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	dc46      	bgt.n	8006d38 <UART_SetConfig+0x850>
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	db75      	blt.n	8006d9a <UART_SetConfig+0x8b2>
 8006cae:	3b02      	subs	r3, #2
 8006cb0:	2b1e      	cmp	r3, #30
 8006cb2:	d872      	bhi.n	8006d9a <UART_SetConfig+0x8b2>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x7d4>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006d3f 	.word	0x08006d3f
 8006cc0:	08006d9b 	.word	0x08006d9b
 8006cc4:	08006d47 	.word	0x08006d47
 8006cc8:	08006d9b 	.word	0x08006d9b
 8006ccc:	08006d9b 	.word	0x08006d9b
 8006cd0:	08006d9b 	.word	0x08006d9b
 8006cd4:	08006d57 	.word	0x08006d57
 8006cd8:	08006d9b 	.word	0x08006d9b
 8006cdc:	08006d9b 	.word	0x08006d9b
 8006ce0:	08006d9b 	.word	0x08006d9b
 8006ce4:	08006d9b 	.word	0x08006d9b
 8006ce8:	08006d9b 	.word	0x08006d9b
 8006cec:	08006d9b 	.word	0x08006d9b
 8006cf0:	08006d9b 	.word	0x08006d9b
 8006cf4:	08006d67 	.word	0x08006d67
 8006cf8:	08006d9b 	.word	0x08006d9b
 8006cfc:	08006d9b 	.word	0x08006d9b
 8006d00:	08006d9b 	.word	0x08006d9b
 8006d04:	08006d9b 	.word	0x08006d9b
 8006d08:	08006d9b 	.word	0x08006d9b
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006d9b 	.word	0x08006d9b
 8006d14:	08006d9b 	.word	0x08006d9b
 8006d18:	08006d9b 	.word	0x08006d9b
 8006d1c:	08006d9b 	.word	0x08006d9b
 8006d20:	08006d9b 	.word	0x08006d9b
 8006d24:	08006d9b 	.word	0x08006d9b
 8006d28:	08006d9b 	.word	0x08006d9b
 8006d2c:	08006d9b 	.word	0x08006d9b
 8006d30:	08006d9b 	.word	0x08006d9b
 8006d34:	08006d8d 	.word	0x08006d8d
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d02a      	beq.n	8006d92 <UART_SetConfig+0x8aa>
 8006d3c:	e02d      	b.n	8006d9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d3e:	f7fd fb51 	bl	80043e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d44:	e02f      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fd fb60 	bl	8004410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d54:	e027      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d56:	f107 0318 	add.w	r3, r7, #24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fd fcac 	bl	80046b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d64:	e01f      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <UART_SetConfig+0x904>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d72:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <UART_SetConfig+0x904>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <UART_SetConfig+0x90c>)
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d84:	e00f      	b.n	8006da6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d86:	4b1b      	ldr	r3, [pc, #108]	; (8006df4 <UART_SetConfig+0x90c>)
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8a:	e00c      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <UART_SetConfig+0x910>)
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d90:	e009      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d98:	e005      	b.n	8006da6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006da4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 81ee 	beq.w	800718a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <UART_SetConfig+0x914>)
 8006db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d305      	bcc.n	8006dde <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d910      	bls.n	8006e00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006de4:	e1d1      	b.n	800718a <UART_SetConfig+0xca2>
 8006de6:	bf00      	nop
 8006de8:	40011c00 	.word	0x40011c00
 8006dec:	58024400 	.word	0x58024400
 8006df0:	58000c00 	.word	0x58000c00
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	003d0900 	.word	0x003d0900
 8006dfc:	0800844c 	.word	0x0800844c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	2200      	movs	r2, #0
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	60fa      	str	r2, [r7, #12]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	4ac0      	ldr	r2, [pc, #768]	; (8007110 <UART_SetConfig+0xc28>)
 8006e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2200      	movs	r2, #0
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e22:	f7f9 fa73 	bl	800030c <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	020b      	lsls	r3, r1, #8
 8006e38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e3c:	0202      	lsls	r2, r0, #8
 8006e3e:	6979      	ldr	r1, [r7, #20]
 8006e40:	6849      	ldr	r1, [r1, #4]
 8006e42:	0849      	lsrs	r1, r1, #1
 8006e44:	2000      	movs	r0, #0
 8006e46:	460c      	mov	r4, r1
 8006e48:	4605      	mov	r5, r0
 8006e4a:	eb12 0804 	adds.w	r8, r2, r4
 8006e4e:	eb43 0905 	adc.w	r9, r3, r5
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	469a      	mov	sl, r3
 8006e5a:	4693      	mov	fp, r2
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	465b      	mov	r3, fp
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 fa52 	bl	800030c <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e76:	d308      	bcc.n	8006e8a <UART_SetConfig+0x9a2>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e7e:	d204      	bcs.n	8006e8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	e17f      	b.n	800718a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e90:	e17b      	b.n	800718a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9a:	f040 80bd 	bne.w	8007018 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	dc48      	bgt.n	8006f38 <UART_SetConfig+0xa50>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	db7b      	blt.n	8006fa2 <UART_SetConfig+0xaba>
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d879      	bhi.n	8006fa2 <UART_SetConfig+0xaba>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <UART_SetConfig+0x9cc>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006f3f 	.word	0x08006f3f
 8006eb8:	08006f47 	.word	0x08006f47
 8006ebc:	08006fa3 	.word	0x08006fa3
 8006ec0:	08006fa3 	.word	0x08006fa3
 8006ec4:	08006f4f 	.word	0x08006f4f
 8006ec8:	08006fa3 	.word	0x08006fa3
 8006ecc:	08006fa3 	.word	0x08006fa3
 8006ed0:	08006fa3 	.word	0x08006fa3
 8006ed4:	08006f5f 	.word	0x08006f5f
 8006ed8:	08006fa3 	.word	0x08006fa3
 8006edc:	08006fa3 	.word	0x08006fa3
 8006ee0:	08006fa3 	.word	0x08006fa3
 8006ee4:	08006fa3 	.word	0x08006fa3
 8006ee8:	08006fa3 	.word	0x08006fa3
 8006eec:	08006fa3 	.word	0x08006fa3
 8006ef0:	08006fa3 	.word	0x08006fa3
 8006ef4:	08006f6f 	.word	0x08006f6f
 8006ef8:	08006fa3 	.word	0x08006fa3
 8006efc:	08006fa3 	.word	0x08006fa3
 8006f00:	08006fa3 	.word	0x08006fa3
 8006f04:	08006fa3 	.word	0x08006fa3
 8006f08:	08006fa3 	.word	0x08006fa3
 8006f0c:	08006fa3 	.word	0x08006fa3
 8006f10:	08006fa3 	.word	0x08006fa3
 8006f14:	08006fa3 	.word	0x08006fa3
 8006f18:	08006fa3 	.word	0x08006fa3
 8006f1c:	08006fa3 	.word	0x08006fa3
 8006f20:	08006fa3 	.word	0x08006fa3
 8006f24:	08006fa3 	.word	0x08006fa3
 8006f28:	08006fa3 	.word	0x08006fa3
 8006f2c:	08006fa3 	.word	0x08006fa3
 8006f30:	08006fa3 	.word	0x08006fa3
 8006f34:	08006f95 	.word	0x08006f95
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d02e      	beq.n	8006f9a <UART_SetConfig+0xab2>
 8006f3c:	e031      	b.n	8006fa2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f7fc fb2b 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8006f42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f44:	e033      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f46:	f7fc fb3d 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8006f4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f4c:	e02f      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fa5c 	bl	8004410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f5c:	e027      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f5e:	f107 0318 	add.w	r3, r7, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd fba8 	bl	80046b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6c:	e01f      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f6e:	4b69      	ldr	r3, [pc, #420]	; (8007114 <UART_SetConfig+0xc2c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f7a:	4b66      	ldr	r3, [pc, #408]	; (8007114 <UART_SetConfig+0xc2c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	4a64      	ldr	r2, [pc, #400]	; (8007118 <UART_SetConfig+0xc30>)
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f8c:	e00f      	b.n	8006fae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006f8e:	4b62      	ldr	r3, [pc, #392]	; (8007118 <UART_SetConfig+0xc30>)
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f92:	e00c      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f94:	4b61      	ldr	r3, [pc, #388]	; (800711c <UART_SetConfig+0xc34>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f98:	e009      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa0:	e005      	b.n	8006fae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80ea 	beq.w	800718a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	4a55      	ldr	r2, [pc, #340]	; (8007110 <UART_SetConfig+0xc28>)
 8006fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc8:	005a      	lsls	r2, r3, #1
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	441a      	add	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	d916      	bls.n	8007010 <UART_SetConfig+0xb28>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe8:	d212      	bcs.n	8007010 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f023 030f 	bic.w	r3, r3, #15
 8006ff2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007002:	4313      	orrs	r3, r2
 8007004:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	e0bc      	b.n	800718a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007016:	e0b8      	b.n	800718a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007018:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800701c:	2b20      	cmp	r3, #32
 800701e:	dc4b      	bgt.n	80070b8 <UART_SetConfig+0xbd0>
 8007020:	2b00      	cmp	r3, #0
 8007022:	f2c0 8087 	blt.w	8007134 <UART_SetConfig+0xc4c>
 8007026:	2b20      	cmp	r3, #32
 8007028:	f200 8084 	bhi.w	8007134 <UART_SetConfig+0xc4c>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0xb4c>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	080070bf 	.word	0x080070bf
 8007038:	080070c7 	.word	0x080070c7
 800703c:	08007135 	.word	0x08007135
 8007040:	08007135 	.word	0x08007135
 8007044:	080070cf 	.word	0x080070cf
 8007048:	08007135 	.word	0x08007135
 800704c:	08007135 	.word	0x08007135
 8007050:	08007135 	.word	0x08007135
 8007054:	080070df 	.word	0x080070df
 8007058:	08007135 	.word	0x08007135
 800705c:	08007135 	.word	0x08007135
 8007060:	08007135 	.word	0x08007135
 8007064:	08007135 	.word	0x08007135
 8007068:	08007135 	.word	0x08007135
 800706c:	08007135 	.word	0x08007135
 8007070:	08007135 	.word	0x08007135
 8007074:	080070ef 	.word	0x080070ef
 8007078:	08007135 	.word	0x08007135
 800707c:	08007135 	.word	0x08007135
 8007080:	08007135 	.word	0x08007135
 8007084:	08007135 	.word	0x08007135
 8007088:	08007135 	.word	0x08007135
 800708c:	08007135 	.word	0x08007135
 8007090:	08007135 	.word	0x08007135
 8007094:	08007135 	.word	0x08007135
 8007098:	08007135 	.word	0x08007135
 800709c:	08007135 	.word	0x08007135
 80070a0:	08007135 	.word	0x08007135
 80070a4:	08007135 	.word	0x08007135
 80070a8:	08007135 	.word	0x08007135
 80070ac:	08007135 	.word	0x08007135
 80070b0:	08007135 	.word	0x08007135
 80070b4:	08007127 	.word	0x08007127
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	d037      	beq.n	800712c <UART_SetConfig+0xc44>
 80070bc:	e03a      	b.n	8007134 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070be:	f7fc fa6b 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 80070c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070c4:	e03c      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c6:	f7fc fa7d 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 80070ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070cc:	e038      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd f99c 	bl	8004410 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070dc:	e030      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070de:	f107 0318 	add.w	r3, r7, #24
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fd fae8 	bl	80046b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ec:	e028      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <UART_SetConfig+0xc2c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <UART_SetConfig+0xc2c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <UART_SetConfig+0xc30>)
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800710c:	e018      	b.n	8007140 <UART_SetConfig+0xc58>
 800710e:	bf00      	nop
 8007110:	0800844c 	.word	0x0800844c
 8007114:	58024400 	.word	0x58024400
 8007118:	03d09000 	.word	0x03d09000
 800711c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007120:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <UART_SetConfig+0xccc>)
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007124:	e00c      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007126:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <UART_SetConfig+0xcd0>)
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800712a:	e009      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800712c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007132:	e005      	b.n	8007140 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800713e:	bf00      	nop
    }

    if (pclk != 0U)
 8007140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d021      	beq.n	800718a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <UART_SetConfig+0xcd4>)
 800714c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007150:	461a      	mov	r2, r3
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	fbb3 f2f2 	udiv	r2, r3, r2
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	441a      	add	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	2b0f      	cmp	r3, #15
 800716e:	d909      	bls.n	8007184 <UART_SetConfig+0xc9c>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007176:	d205      	bcs.n	8007184 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	b29a      	uxth	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	e002      	b.n	800718a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2201      	movs	r2, #1
 800718e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2201      	movs	r2, #1
 8007196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2200      	movs	r2, #0
 800719e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3748      	adds	r7, #72	; 0x48
 80071ae:	46bd      	mov	sp, r7
 80071b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b4:	03d09000 	.word	0x03d09000
 80071b8:	003d0900 	.word	0x003d0900
 80071bc:	0800844c 	.word	0x0800844c

080071c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01a      	beq.n	80072d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072be:	d10a      	bne.n	80072d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af02      	add	r7, sp, #8
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007314:	f7fa f978 	bl	8001608 <HAL_GetTick>
 8007318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b08      	cmp	r3, #8
 8007326:	d10e      	bne.n	8007346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f82f 	bl	800739a <UART_WaitOnFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e025      	b.n	8007392 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b04      	cmp	r3, #4
 8007352:	d10e      	bne.n	8007372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f819 	bl	800739a <UART_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e00f      	b.n	8007392 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b09c      	sub	sp, #112	; 0x70
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	4613      	mov	r3, r2
 80073a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073aa:	e0a9      	b.n	8007500 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	f000 80a5 	beq.w	8007500 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b6:	f7fa f927 	bl	8001608 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <UART_WaitOnFlagUntilTimeout+0x32>
 80073c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d140      	bne.n	800744e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073e0:	667b      	str	r3, [r7, #100]	; 0x64
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e6      	bne.n	80073cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	663b      	str	r3, [r7, #96]	; 0x60
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800741e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007420:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800742c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e069      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d051      	beq.n	8007500 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800746a:	d149      	bne.n	8007500 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007474:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800748a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
 8007496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800749a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e6      	bne.n	8007476 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	e853 3f00 	ldrex	r3, [r3]
 80074b6:	613b      	str	r3, [r7, #16]
   return(result);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	66bb      	str	r3, [r7, #104]	; 0x68
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074c8:	623a      	str	r2, [r7, #32]
 80074ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	69f9      	ldr	r1, [r7, #28]
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e5      	bne.n	80074a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e010      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4013      	ands	r3, r2
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	429a      	cmp	r2, r3
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	429a      	cmp	r2, r3
 800751c:	f43f af46 	beq.w	80073ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3770      	adds	r7, #112	; 0x70
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800752c:	b480      	push	{r7}
 800752e:	b0a3      	sub	sp, #140	; 0x8c
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755e:	d10e      	bne.n	800757e <UART_Start_Receive_IT+0x52>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d105      	bne.n	8007574 <UART_Start_Receive_IT+0x48>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800756e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007572:	e02d      	b.n	80075d0 <UART_Start_Receive_IT+0xa4>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	22ff      	movs	r2, #255	; 0xff
 8007578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800757c:	e028      	b.n	80075d0 <UART_Start_Receive_IT+0xa4>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10d      	bne.n	80075a2 <UART_Start_Receive_IT+0x76>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <UART_Start_Receive_IT+0x6c>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	22ff      	movs	r2, #255	; 0xff
 8007592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007596:	e01b      	b.n	80075d0 <UART_Start_Receive_IT+0xa4>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	227f      	movs	r2, #127	; 0x7f
 800759c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075a0:	e016      	b.n	80075d0 <UART_Start_Receive_IT+0xa4>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075aa:	d10d      	bne.n	80075c8 <UART_Start_Receive_IT+0x9c>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <UART_Start_Receive_IT+0x92>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	227f      	movs	r2, #127	; 0x7f
 80075b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075bc:	e008      	b.n	80075d0 <UART_Start_Receive_IT+0xa4>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	223f      	movs	r2, #63	; 0x3f
 80075c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075c6:	e003      	b.n	80075d0 <UART_Start_Receive_IT+0xa4>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2222      	movs	r2, #34	; 0x22
 80075dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3308      	adds	r3, #8
 80075e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80075f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007604:	673a      	str	r2, [r7, #112]	; 0x70
 8007606:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800760a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e3      	bne.n	80075e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800761c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007620:	d153      	bne.n	80076ca <UART_Start_Receive_IT+0x19e>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	429a      	cmp	r2, r3
 800762c:	d34d      	bcc.n	80076ca <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d107      	bne.n	8007648 <UART_Start_Receive_IT+0x11c>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d103      	bne.n	8007648 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a4b      	ldr	r2, [pc, #300]	; (8007770 <UART_Start_Receive_IT+0x244>)
 8007644:	671a      	str	r2, [r3, #112]	; 0x70
 8007646:	e002      	b.n	800764e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4a4a      	ldr	r2, [pc, #296]	; (8007774 <UART_Start_Receive_IT+0x248>)
 800764c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01a      	beq.n	8007694 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800766c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007682:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007686:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800768e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e4      	bne.n	800765e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80076b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e5      	bne.n	8007694 <UART_Start_Receive_IT+0x168>
 80076c8:	e04a      	b.n	8007760 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d107      	bne.n	80076e4 <UART_Start_Receive_IT+0x1b8>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4a26      	ldr	r2, [pc, #152]	; (8007778 <UART_Start_Receive_IT+0x24c>)
 80076e0:	671a      	str	r2, [r3, #112]	; 0x70
 80076e2:	e002      	b.n	80076ea <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a25      	ldr	r2, [pc, #148]	; (800777c <UART_Start_Receive_IT+0x250>)
 80076e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d019      	beq.n	800772e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800770e:	677b      	str	r3, [r7, #116]	; 0x74
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
 800771a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800771e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_Start_Receive_IT+0x1ce>
 800772c:	e018      	b.n	8007760 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	613b      	str	r3, [r7, #16]
   return(result);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f043 0320 	orr.w	r3, r3, #32
 8007742:	67bb      	str	r3, [r7, #120]	; 0x78
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800774c:	623b      	str	r3, [r7, #32]
 800774e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	69f9      	ldr	r1, [r7, #28]
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	61bb      	str	r3, [r7, #24]
   return(result);
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	378c      	adds	r7, #140	; 0x8c
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	08007e89 	.word	0x08007e89
 8007774:	08007b91 	.word	0x08007b91
 8007778:	08007a2f 	.word	0x08007a2f
 800777c:	080078cf 	.word	0x080078cf

08007780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b095      	sub	sp, #84	; 0x54
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800779c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a6:	643b      	str	r3, [r7, #64]	; 0x40
 80077a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e6      	bne.n	8007788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <UART_EndRxTransfer+0xc8>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e5      	bne.n	80077ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d118      	bne.n	8007828 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	60bb      	str	r3, [r7, #8]
   return(result);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f023 0310 	bic.w	r3, r3, #16
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6979      	ldr	r1, [r7, #20]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	613b      	str	r3, [r7, #16]
   return(result);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e6      	bne.n	80077f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800783c:	bf00      	nop
 800783e:	3754      	adds	r7, #84	; 0x54
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	effffffe 	.word	0xeffffffe

0800784c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7fe fe26 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	60bb      	str	r3, [r7, #8]
   return(result);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6979      	ldr	r1, [r7, #20]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	613b      	str	r3, [r7, #16]
   return(result);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe fdf1 	bl	80064a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c6:	bf00      	nop
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b096      	sub	sp, #88	; 0x58
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e6:	2b22      	cmp	r3, #34	; 0x22
 80078e8:	f040 8095 	bne.w	8007a16 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80078fa:	b2d9      	uxtb	r1, r3
 80078fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007900:	b2da      	uxtb	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	400a      	ands	r2, r1
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d178      	bne.n	8007a26 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007948:	653b      	str	r3, [r7, #80]	; 0x50
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007952:	647b      	str	r3, [r7, #68]	; 0x44
 8007954:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e6      	bne.n	8007934 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	623b      	str	r3, [r7, #32]
   return(result);
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007986:	633a      	str	r2, [r7, #48]	; 0x30
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e5      	bne.n	8007966 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d12e      	bne.n	8007a0e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0310 	bic.w	r3, r3, #16
 80079ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	617b      	str	r3, [r7, #20]
   return(result);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e6      	bne.n	80079b6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d103      	bne.n	80079fe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2210      	movs	r2, #16
 80079fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fe fd62 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a0c:	e00b      	b.n	8007a26 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 f938 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 8007a14:	e007      	b.n	8007a26 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0208 	orr.w	r2, r2, #8
 8007a24:	619a      	str	r2, [r3, #24]
}
 8007a26:	bf00      	nop
 8007a28:	3758      	adds	r7, #88	; 0x58
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b096      	sub	sp, #88	; 0x58
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a46:	2b22      	cmp	r3, #34	; 0x22
 8007a48:	f040 8095 	bne.w	8007b76 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a64:	4013      	ands	r3, r2
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a70:	1c9a      	adds	r2, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d178      	bne.n	8007b86 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d12e      	bne.n	8007b6e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f023 0310 	bic.w	r3, r3, #16
 8007b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6979      	ldr	r1, [r7, #20]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	613b      	str	r3, [r7, #16]
   return(result);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d103      	bne.n	8007b5e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe fcb2 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b6c:	e00b      	b.n	8007b86 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7f9 f888 	bl	8000c84 <HAL_UART_RxCpltCallback>
}
 8007b74:	e007      	b.n	8007b86 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0208 	orr.w	r2, r2, #8
 8007b84:	619a      	str	r2, [r3, #24]
}
 8007b86:	bf00      	nop
 8007b88:	3758      	adds	r7, #88	; 0x58
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b0a6      	sub	sp, #152	; 0x98
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b9e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	2b22      	cmp	r3, #34	; 0x22
 8007bc8:	f040 814d 	bne.w	8007e66 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bd6:	e0f4      	b.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007be2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007be6:	b2d9      	uxtb	r1, r3
 8007be8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d053      	beq.n	8007cd2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2201      	movs	r2, #1
 8007c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c50:	f043 0201 	orr.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d011      	beq.n	8007c8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2202      	movs	r2, #2
 8007c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c80:	f043 0204 	orr.w	r2, r3, #4
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d011      	beq.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00b      	beq.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2204      	movs	r2, #4
 8007ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb0:	f043 0202 	orr.w	r2, r3, #2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fe fbf9 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d171      	bne.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d02:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e4      	bne.n	8007cde <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d26:	4b56      	ldr	r3, [pc, #344]	; (8007e80 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d34:	657a      	str	r2, [r7, #84]	; 0x54
 8007d36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e5      	bne.n	8007d14 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d12e      	bne.n	8007dbc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	f023 0310 	bic.w	r3, r3, #16
 8007d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d82:	643b      	str	r3, [r7, #64]	; 0x40
 8007d84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d103      	bne.n	8007dac <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2210      	movs	r2, #16
 8007daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7fe fb8b 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
 8007dba:	e002      	b.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7f8 ff61 	bl	8000c84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <UART_RxISR_8BIT_FIFOEN+0x248>
 8007dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f47f af00 	bne.w	8007bd8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007de2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d045      	beq.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007df0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d23e      	bcs.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3308      	adds	r3, #8
 8007e16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	; (8007e84 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007e30:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f043 0320 	orr.w	r3, r3, #32
 8007e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e6      	bne.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e64:	e007      	b.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0208 	orr.w	r2, r2, #8
 8007e74:	619a      	str	r2, [r3, #24]
}
 8007e76:	bf00      	nop
 8007e78:	3798      	adds	r7, #152	; 0x98
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	effffffe 	.word	0xeffffffe
 8007e84:	080078cf 	.word	0x080078cf

08007e88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b0a8      	sub	sp, #160	; 0xa0
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e96:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	2b22      	cmp	r3, #34	; 0x22
 8007ec0:	f040 8151 	bne.w	8008166 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007eca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ece:	e0f8      	b.n	80080c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ee2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007ee6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007eea:	4013      	ands	r3, r2
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ef2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	1c9a      	adds	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d053      	beq.n	8007fce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d011      	beq.n	8007f56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2201      	movs	r2, #1
 8007f44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f4c:	f043 0201 	orr.w	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d011      	beq.n	8007f86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2202      	movs	r2, #2
 8007f74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7c:	f043 0204 	orr.w	r2, r3, #4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d011      	beq.n	8007fb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fac:	f043 0202 	orr.w	r2, r3, #2
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d006      	beq.n	8007fce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fe fa7b 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d173      	bne.n	80080c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ffe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800800a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e4      	bne.n	8007fda <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3308      	adds	r3, #8
 8008016:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008022:	4b57      	ldr	r3, [pc, #348]	; (8008180 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8008024:	4013      	ands	r3, r2
 8008026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008034:	65ba      	str	r2, [r7, #88]	; 0x58
 8008036:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800803a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e3      	bne.n	8008010 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805a:	2b01      	cmp	r3, #1
 800805c:	d12e      	bne.n	80080bc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	f023 0310 	bic.w	r3, r3, #16
 8008078:	67fb      	str	r3, [r7, #124]	; 0x7c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008082:	647b      	str	r3, [r7, #68]	; 0x44
 8008084:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e6      	bne.n	8008064 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d103      	bne.n	80080ac <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2210      	movs	r2, #16
 80080aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7fe fa0b 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
 80080ba:	e002      	b.n	80080c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7f8 fde1 	bl	8000c84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d006      	beq.n	80080d8 <UART_RxISR_16BIT_FIFOEN+0x250>
 80080ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f47f aefc 	bne.w	8007ed0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d045      	beq.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080f0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d23e      	bcs.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3308      	adds	r3, #8
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	623b      	str	r3, [r7, #32]
   return(result);
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800810e:	677b      	str	r3, [r7, #116]	; 0x74
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008118:	633a      	str	r2, [r7, #48]	; 0x30
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800811e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e5      	bne.n	80080f8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a15      	ldr	r2, [pc, #84]	; (8008184 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008130:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f043 0320 	orr.w	r3, r3, #32
 8008146:	673b      	str	r3, [r7, #112]	; 0x70
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	69b9      	ldr	r1, [r7, #24]
 8008156:	69fa      	ldr	r2, [r7, #28]
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	617b      	str	r3, [r7, #20]
   return(result);
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e6      	bne.n	8008132 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008164:	e007      	b.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699a      	ldr	r2, [r3, #24]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0208 	orr.w	r2, r2, #8
 8008174:	619a      	str	r2, [r3, #24]
}
 8008176:	bf00      	nop
 8008178:	37a0      	adds	r7, #160	; 0xa0
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	effffffe 	.word	0xeffffffe
 8008184:	08007a2f 	.word	0x08007a2f

08008188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_UARTEx_DisableFifoMode+0x16>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e027      	b.n	800822a <HAL_UARTEx_DisableFifoMode+0x66>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2224      	movs	r2, #36	; 0x24
 80081e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800824a:	2302      	movs	r3, #2
 800824c:	e02d      	b.n	80082aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2224      	movs	r2, #36	; 0x24
 800825a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0201 	bic.w	r2, r2, #1
 8008274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f850 	bl	8008330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e02d      	b.n	8008326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2224      	movs	r2, #36	; 0x24
 80082d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f812 	bl	8008330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008350:	e031      	b.n	80083b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008352:	2310      	movs	r3, #16
 8008354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008356:	2310      	movs	r3, #16
 8008358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	0e5b      	lsrs	r3, r3, #25
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	0f5b      	lsrs	r3, r3, #29
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	7b3a      	ldrb	r2, [r7, #12]
 800837e:	4911      	ldr	r1, [pc, #68]	; (80083c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008380:	5c8a      	ldrb	r2, [r1, r2]
 8008382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008386:	7b3a      	ldrb	r2, [r7, #12]
 8008388:	490f      	ldr	r1, [pc, #60]	; (80083c8 <UARTEx_SetNbDataToProcess+0x98>)
 800838a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	7b7a      	ldrb	r2, [r7, #13]
 800839c:	4909      	ldr	r1, [pc, #36]	; (80083c4 <UARTEx_SetNbDataToProcess+0x94>)
 800839e:	5c8a      	ldrb	r2, [r1, r2]
 80083a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083a4:	7b7a      	ldrb	r2, [r7, #13]
 80083a6:	4908      	ldr	r1, [pc, #32]	; (80083c8 <UARTEx_SetNbDataToProcess+0x98>)
 80083a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	08008464 	.word	0x08008464
 80083c8:	0800846c 	.word	0x0800846c

080083cc <__libc_init_array>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4d0d      	ldr	r5, [pc, #52]	; (8008404 <__libc_init_array+0x38>)
 80083d0:	4c0d      	ldr	r4, [pc, #52]	; (8008408 <__libc_init_array+0x3c>)
 80083d2:	1b64      	subs	r4, r4, r5
 80083d4:	10a4      	asrs	r4, r4, #2
 80083d6:	2600      	movs	r6, #0
 80083d8:	42a6      	cmp	r6, r4
 80083da:	d109      	bne.n	80083f0 <__libc_init_array+0x24>
 80083dc:	4d0b      	ldr	r5, [pc, #44]	; (800840c <__libc_init_array+0x40>)
 80083de:	4c0c      	ldr	r4, [pc, #48]	; (8008410 <__libc_init_array+0x44>)
 80083e0:	f000 f820 	bl	8008424 <_init>
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	2600      	movs	r6, #0
 80083ea:	42a6      	cmp	r6, r4
 80083ec:	d105      	bne.n	80083fa <__libc_init_array+0x2e>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f4:	4798      	blx	r3
 80083f6:	3601      	adds	r6, #1
 80083f8:	e7ee      	b.n	80083d8 <__libc_init_array+0xc>
 80083fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fe:	4798      	blx	r3
 8008400:	3601      	adds	r6, #1
 8008402:	e7f2      	b.n	80083ea <__libc_init_array+0x1e>
 8008404:	0800847c 	.word	0x0800847c
 8008408:	0800847c 	.word	0x0800847c
 800840c:	0800847c 	.word	0x0800847c
 8008410:	08008480 	.word	0x08008480

08008414 <memset>:
 8008414:	4402      	add	r2, r0
 8008416:	4603      	mov	r3, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	d100      	bne.n	800841e <memset+0xa>
 800841c:	4770      	bx	lr
 800841e:	f803 1b01 	strb.w	r1, [r3], #1
 8008422:	e7f9      	b.n	8008418 <memset+0x4>

08008424 <_init>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr

08008430 <_fini>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr
