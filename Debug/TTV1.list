
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b78  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08009eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  24000014  08009ec0  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400088c  08009ec0  0002088c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165d3  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024cb  00000000  00000000  00036615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001028  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a3a  00000000  00000000  0003abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000165a4  00000000  00000000  0006d632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c502  00000000  00000000  00083bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d00d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000489c  00000000  00000000  001d0128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009e30 	.word	0x08009e30

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	08009e30 	.word	0x08009e30

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <HAL_GPIO_EXTI_Callback>:
volatile uint8_t motor_running = 1;// Variable to control motor state
volatile uint8_t motor_running1 = 1;

volatile int pasos_retroceso = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000634:	d102      	bne.n	800063c <HAL_GPIO_EXTI_Callback+0x18>
        motor_running = 0; // Stop the motor when the interrupt occurs
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_GPIO_EXTI_Callback+0x34>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_13) {
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000642:	d102      	bne.n	800064a <HAL_GPIO_EXTI_Callback+0x26>
    	motor_running1 = 0; // Stop the motor when the interrupt occurs
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_GPIO_EXTI_Callback+0x38>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
    }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	24000000 	.word	0x24000000
 800065c:	24000001 	.word	0x24000001

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 ff68 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f86e 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 fa38 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000670:	f000 f966 	bl	8000940 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000674:	f000 f9fc 	bl	8000a70 <MX_DMA_Init>
  MX_TIM1_Init();
 8000678:	f000 f8c6 	bl	8000808 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800067c:	f000 f9ac 	bl	80009d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000680:	210c      	movs	r1, #12
 8000682:	4827      	ldr	r0, [pc, #156]	; (8000720 <main+0xc0>)
 8000684:	f006 f806 	bl	8006694 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <main+0xc0>)
 800068c:	f006 f802 	bl	8006694 <HAL_TIM_PWM_Start>
  //HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
  HAL_UART_Receive_IT(&huart1,&byte,bufersize);
 8000690:	2201      	movs	r2, #1
 8000692:	4924      	ldr	r1, [pc, #144]	; (8000724 <main+0xc4>)
 8000694:	4824      	ldr	r0, [pc, #144]	; (8000728 <main+0xc8>)
 8000696:	f006 fff1 	bl	800767c <HAL_UART_Receive_IT>

  A4988_Setup();
 800069a:	f000 fb9b 	bl	8000dd4 <A4988_Setup>
//  mover_motorq1(0);
//  mover_motorq2_mm(100);
//  mover_motorq3_mm(100);
//  TIM1->CCR2 = radianes_a_valor(1.5707);
//
  mover_motorq1(0);
 800069e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800072c <main+0xcc>
 80006a2:	f000 fbb5 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 80006a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006aa:	f000 ffd7 	bl	800165c <HAL_Delay>
  mover_motorq1(M_PI/2);
 80006ae:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000730 <main+0xd0>
 80006b2:	f000 fbad 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 80006b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ba:	f000 ffcf 	bl	800165c <HAL_Delay>
  mover_motorq1(M_PI);
 80006be:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8000734 <main+0xd4>
 80006c2:	f000 fba5 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 80006c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ca:	f000 ffc7 	bl	800165c <HAL_Delay>
  mover_motorq1((3*M_PI)/2);
 80006ce:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000738 <main+0xd8>
 80006d2:	f000 fb9d 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 80006d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006da:	f000 ffbf 	bl	800165c <HAL_Delay>
  mover_motorq1(2*M_PI);
 80006de:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800073c <main+0xdc>
 80006e2:	f000 fb95 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 80006e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ea:	f000 ffb7 	bl	800165c <HAL_Delay>
  mover_motorq1(M_PI/4);
 80006ee:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000740 <main+0xe0>
 80006f2:	f000 fb8d 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 80006f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fa:	f000 ffaf 	bl	800165c <HAL_Delay>
  mover_motorq1((3*M_PI)/4);
 80006fe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000744 <main+0xe4>
 8000702:	f000 fb85 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 8000706:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800070a:	f000 ffa7 	bl	800165c <HAL_Delay>
  mover_motorq1(0);
 800070e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800072c <main+0xcc>
 8000712:	f000 fb7d 	bl	8000e10 <mover_motorq1>
  HAL_Delay(2000);
 8000716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071a:	f000 ff9f 	bl	800165c <HAL_Delay>
//  TIM1->CCR2 = 304;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0xbe>
 8000720:	24000030 	.word	0x24000030
 8000724:	2400037c 	.word	0x2400037c
 8000728:	2400007c 	.word	0x2400007c
 800072c:	00000000 	.word	0x00000000
 8000730:	3fc90fdb 	.word	0x3fc90fdb
 8000734:	40490fdb 	.word	0x40490fdb
 8000738:	4096cbe4 	.word	0x4096cbe4
 800073c:	40c90fdb 	.word	0x40c90fdb
 8000740:	3f490fdb 	.word	0x3f490fdb
 8000744:	4016cbe4 	.word	0x4016cbe4

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	224c      	movs	r2, #76	; 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f009 fb3a 	bl	8009dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f009 fb34 	bl	8009dd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000768:	2002      	movs	r0, #2
 800076a:	f003 fcab 	bl	80040c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemClock_Config+0xbc>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <SystemClock_Config+0xbc>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <SystemClock_Config+0xbc>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078e:	bf00      	nop
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <SystemClock_Config+0xbc>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800079c:	d1f8      	bne.n	8000790 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2340      	movs	r3, #64	; 0x40
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fcc0 	bl	8004138 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007be:	f000 fba3 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	233f      	movs	r3, #63	; 0x3f
 80007c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 80007ca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e2:	2340      	movs	r3, #64	; 0x40
 80007e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 f852 	bl	8004894 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007f6:	f000 fb87 	bl	8000f08 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3770      	adds	r7, #112	; 0x70
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58024800 	.word	0x58024800

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b098      	sub	sp, #96	; 0x60
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2234      	movs	r2, #52	; 0x34
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f009 facb 	bl	8009dd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800083a:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <MX_TIM1_Init+0x130>)
 800083c:	4a3f      	ldr	r2, [pc, #252]	; (800093c <MX_TIM1_Init+0x134>)
 800083e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_TIM1_Init+0x130>)
 8000842:	2240      	movs	r2, #64	; 0x40
 8000844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_TIM1_Init+0x130>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_TIM1_Init+0x130>)
 800084e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b38      	ldr	r3, [pc, #224]	; (8000938 <MX_TIM1_Init+0x130>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_TIM1_Init+0x130>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <MX_TIM1_Init+0x130>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000866:	4834      	ldr	r0, [pc, #208]	; (8000938 <MX_TIM1_Init+0x130>)
 8000868:	f005 febc 	bl	80065e4 <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 fb49 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000882:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000886:	4619      	mov	r1, r3
 8000888:	482b      	ldr	r0, [pc, #172]	; (8000938 <MX_TIM1_Init+0x130>)
 800088a:	f006 fcd5 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000894:	f000 fb38 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000898:	2360      	movs	r3, #96	; 0x60
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b8:	2204      	movs	r2, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	481e      	ldr	r0, [pc, #120]	; (8000938 <MX_TIM1_Init+0x130>)
 80008be:	f006 f805 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008c8:	f000 fb1e 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d0:	220c      	movs	r2, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_TIM1_Init+0x130>)
 80008d6:	f005 fff9 	bl	80068cc <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80008e0:	f000 fb12 	bl	8000f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM1_Init+0x130>)
 800091a:	f006 fd29 	bl	8007370 <HAL_TIMEx_ConfigBreakDeadTime>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000924:	f000 faf0 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM1_Init+0x130>)
 800092a:	f000 fb2f 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 800092e:	bf00      	nop
 8000930:	3760      	adds	r7, #96	; 0x60
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000030 	.word	0x24000030
 800093c:	40010000 	.word	0x40010000

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_USART1_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 800098a:	f006 fd91 	bl	80074b0 <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 fab8 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 800099c:	f009 f929 	bl	8009bf2 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 faaf 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 80009ae:	f009 f95e 	bl	8009c6e <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 faa6 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_USART1_UART_Init+0x90>)
 80009be:	f009 f8df 	bl	8009b80 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 fa9e 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2400007c 	.word	0x2400007c
 80009d4:	40011000 	.word	0x40011000

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_USART3_UART_Init+0x94>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a22:	f006 fd45 	bl	80074b0 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 fa6c 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a34:	f009 f8dd 	bl	8009bf2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3e:	f000 fa63 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a46:	f009 f912 	bl	8009c6e <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f000 fa5a 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a56:	f009 f893 	bl	8009b80 <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 fa52 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2400010c 	.word	0x2400010c
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_DMA_Init+0x6c>)
 8000a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_DMA_Init+0x6c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_DMA_Init+0x6c>)
 8000a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f000 fede 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f000 fef5 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200c      	movs	r0, #12
 8000aaa:	f000 fed6 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aae:	200c      	movs	r0, #12
 8000ab0:	f000 feed 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f000 fece 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f000 fee5 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	200e      	movs	r0, #14
 8000aca:	f000 fec6 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ace:	200e      	movs	r0, #14
 8000ad0:	f000 fedd 	bl	800188e <HAL_NVIC_EnableIRQ>

}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4b59      	ldr	r3, [pc, #356]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	4b51      	ldr	r3, [pc, #324]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a50      	ldr	r2, [pc, #320]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b4d      	ldr	r3, [pc, #308]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a48      	ldr	r2, [pc, #288]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a41      	ldr	r2, [pc, #260]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a39      	ldr	r2, [pc, #228]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_GPIO_Init+0x17c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f640 2128 	movw	r1, #2600	; 0xa28
 8000b92:	4833      	ldr	r0, [pc, #204]	; (8000c60 <MX_GPIO_Init+0x180>)
 8000b94:	f003 fa62 	bl	800405c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	4831      	ldr	r0, [pc, #196]	; (8000c64 <MX_GPIO_Init+0x184>)
 8000b9e:	f003 fa5d 	bl	800405c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	21ae      	movs	r1, #174	; 0xae
 8000ba6:	4830      	ldr	r0, [pc, #192]	; (8000c68 <MX_GPIO_Init+0x188>)
 8000ba8:	f003 fa58 	bl	800405c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2120      	movs	r1, #32
 8000bb0:	482e      	ldr	r0, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x18c>)
 8000bb2:	f003 fa53 	bl	800405c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 8000bb6:	f640 2328 	movw	r3, #2600	; 0xa28
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4824      	ldr	r0, [pc, #144]	; (8000c60 <MX_GPIO_Init+0x180>)
 8000bd0:	f003 f89c 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MX_GPIO_Init+0x184>)
 8000bec:	f003 f88e 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000bf0:	23ae      	movs	r3, #174	; 0xae
 8000bf2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4818      	ldr	r0, [pc, #96]	; (8000c68 <MX_GPIO_Init+0x188>)
 8000c08:	f003 f880 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c0c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <MX_GPIO_Init+0x18c>)
 8000c24:	f003 f872 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_GPIO_Init+0x18c>)
 8000c40:	f003 f864 	bl	8003d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2028      	movs	r0, #40	; 0x28
 8000c4a:	f000 fe06 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f000 fe1d 	bl	800188e <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58021000 	.word	0x58021000
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58020000 	.word	0x58020000
 8000c6c:	58020400 	.word	0x58020400

08000c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_UART_RxCpltCallback+0x6c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d128      	bne.n	8000cd4 <HAL_UART_RxCpltCallback+0x64>
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_LED, GPIO_PIN_SET); // Enciende el LED
        //HAL_UART_Transmit(&huart1,&byte,1, 100); // Envía la cadena a través de UART


        // Almacenar el byte recibido en el buffer si no es '>'
        if (byte != 62) // 62 es el código ASCII para '>'
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_RxCpltCallback+0x70>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b3e      	cmp	r3, #62	; 0x3e
 8000c88:	d016      	beq.n	8000cb8 <HAL_UART_RxCpltCallback+0x48>
        {

            if (bufferIndex < BUFFER_SIZE)
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_UART_RxCpltCallback+0x74>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	2bff      	cmp	r3, #255	; 0xff
 8000c90:	d80b      	bhi.n	8000caa <HAL_UART_RxCpltCallback+0x3a>
            {

                buffer[bufferIndex++] = byte;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_UART_RxCpltCallback+0x74>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	b291      	uxth	r1, r2
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_UART_RxCpltCallback+0x74>)
 8000c9c:	8011      	strh	r1, [r2, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_UART_RxCpltCallback+0x70>)
 8000ca2:	7819      	ldrb	r1, [r3, #0]
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_UART_RxCpltCallback+0x78>)
 8000ca6:	5499      	strb	r1, [r3, r2]
 8000ca8:	e00f      	b.n	8000cca <HAL_UART_RxCpltCallback+0x5a>

            }
            else
            {
                // Manejar el caso de desbordamiento del buffer
                bufferOverflowFlag = 1; // Establecer la bandera de desbordamiento
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_UART_RxCpltCallback+0x7c>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
                bufferIndex = 0; // Opcional: restablecer el índice del buffer
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_UART_RxCpltCallback+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
 8000cb6:	e008      	b.n	8000cca <HAL_UART_RxCpltCallback+0x5a>
        {
            // Aquí puedes manejar el caso cuando se recibe '>'
            // Por ejemplo, procesar el buffer y restablecer bufferIndex
        	 //HAL_UART_Transmit(&huart1, prueba_1, sizeof(prueba_1) - 1, 100);
        	 //HAL_UART_Transmit(&huart1, buffer,bufferIndex, 100);// Envía la cadena a través de UART
            processBuffer(buffer, bufferIndex);
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_UART_RxCpltCallback+0x74>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <HAL_UART_RxCpltCallback+0x78>)
 8000cc0:	f000 f818 	bl	8000cf4 <processBuffer>
            bufferIndex = 0;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_UART_RxCpltCallback+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, &byte, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4904      	ldr	r1, [pc, #16]	; (8000ce0 <HAL_UART_RxCpltCallback+0x70>)
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <HAL_UART_RxCpltCallback+0x80>)
 8000cd0:	f006 fcd4 	bl	800767c <HAL_UART_Receive_IT>


        // Vuelve a habilitar la recepción por interrupción

    }
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	2400037c 	.word	0x2400037c
 8000ce4:	24000480 	.word	0x24000480
 8000ce8:	24000380 	.word	0x24000380
 8000cec:	24000482 	.word	0x24000482
 8000cf0:	2400007c 	.word	0x2400007c

08000cf4 <processBuffer>:

void processBuffer(uint8_t *buffer, uint16_t length)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
    if (bufferOverflowFlag)
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <processBuffer+0xc4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <processBuffer+0x28>
    {
        // Manejar el desbordamiento del buffer
        // Por ejemplo, enviar un mensaje de error o realizar acciones correctivas
        HAL_UART_Transmit(&huart1, (uint8_t *)"Buffer overflow\n", 16, 100);
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	492b      	ldr	r1, [pc, #172]	; (8000dbc <processBuffer+0xc8>)
 8000d0e:	482c      	ldr	r0, [pc, #176]	; (8000dc0 <processBuffer+0xcc>)
 8000d10:	f006 fc1e 	bl	8007550 <HAL_UART_Transmit>
        bufferOverflowFlag = 0; // Restablecer la bandera de desbordamiento
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <processBuffer+0xc4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
        return;
 8000d1a:	e04a      	b.n	8000db2 <processBuffer+0xbe>
//    char q2[BUFFER_SIZE] = {0};
//    char q3[BUFFER_SIZE] = {0};
//    char q4[BUFFER_SIZE] = {0};

    // Punteros para la división de la cadena
    char *ptr = (char *)buffer;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	617b      	str	r3, [r7, #20]
    char *start = ptr;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
    char *end = strchr(start, 'a');
 8000d24:	2161      	movs	r1, #97	; 0x61
 8000d26:	6938      	ldr	r0, [r7, #16]
 8000d28:	f009 f85a 	bl	8009de0 <strchr>
 8000d2c:	60f8      	str	r0, [r7, #12]

    if (end != NULL)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d034      	beq.n	8000d9e <processBuffer+0xaa>
    {
        strncpy(q1, start, end - start);
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	6939      	ldr	r1, [r7, #16]
 8000d3e:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <processBuffer+0xd0>)
 8000d40:	f009 f863 	bl	8009e0a <strncpy>
        start = end + 1;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
        end = strchr(start, 'b');
 8000d4a:	2162      	movs	r1, #98	; 0x62
 8000d4c:	6938      	ldr	r0, [r7, #16]
 8000d4e:	f009 f847 	bl	8009de0 <strchr>
 8000d52:	60f8      	str	r0, [r7, #12]

        if (end != NULL)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d021      	beq.n	8000d9e <processBuffer+0xaa>
        {
            strncpy(q2, start, end - start);
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	6939      	ldr	r1, [r7, #16]
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <processBuffer+0xd4>)
 8000d66:	f009 f850 	bl	8009e0a <strncpy>
            start = end + 1;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
            end = strchr(start, 'c');
 8000d70:	2163      	movs	r1, #99	; 0x63
 8000d72:	6938      	ldr	r0, [r7, #16]
 8000d74:	f009 f834 	bl	8009de0 <strchr>
 8000d78:	60f8      	str	r0, [r7, #12]

            if (end != NULL)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00e      	beq.n	8000d9e <processBuffer+0xaa>
            {
                strncpy(q3, start, end - start);
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	6939      	ldr	r1, [r7, #16]
 8000d8a:	4810      	ldr	r0, [pc, #64]	; (8000dcc <processBuffer+0xd8>)
 8000d8c:	f009 f83d 	bl	8009e0a <strncpy>
                start = end + 1;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3301      	adds	r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
                strcpy(q4, start);
 8000d96:	6939      	ldr	r1, [r7, #16]
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <processBuffer+0xdc>)
 8000d9a:	f009 f82e 	bl	8009dfa <strcpy>
    }



    // Enviar cada parte a través de UART para verificar
    HAL_UART_Transmit(&huart1, (uint8_t *)q1, strlen(q1), 100); // 0 puntos desfazados
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <processBuffer+0xd0>)
 8000da0:	f7ff fab6 	bl	8000310 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <processBuffer+0xd0>)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <processBuffer+0xcc>)
 8000dae:	f006 fbcf 	bl	8007550 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); // 5 puntos desfazados
    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); // 2 puntos malos
    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100); // Enviar q4 si hay datos
}
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000482 	.word	0x24000482
 8000dbc:	08009e48 	.word	0x08009e48
 8000dc0:	2400007c 	.word	0x2400007c
 8000dc4:	24000484 	.word	0x24000484
 8000dc8:	24000584 	.word	0x24000584
 8000dcc:	24000684 	.word	0x24000684
 8000dd0:	24000784 	.word	0x24000784

08000dd4 <A4988_Setup>:



void A4988_Setup() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    // Configurar pines de modo (MS0, MS1, MS2) para medio paso
    HAL_GPIO_WritePin(GPIOE, MS0_PIN, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2120      	movs	r1, #32
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <A4988_Setup+0x30>)
 8000dde:	f003 f93d 	bl	800405c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS1_PIN, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2102      	movs	r1, #2
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <A4988_Setup+0x34>)
 8000de8:	f003 f938 	bl	800405c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS2_PIN, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2108      	movs	r1, #8
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <A4988_Setup+0x34>)
 8000df2:	f003 f933 	bl	800405c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, ENABLE_PIN, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2108      	movs	r1, #8
 8000dfa:	4802      	ldr	r0, [pc, #8]	; (8000e04 <A4988_Setup+0x30>)
 8000dfc:	f003 f92e 	bl	800405c <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58021000 	.word	0x58021000
 8000e08:	58020800 	.word	0x58020800
 8000e0c:	00000000 	.word	0x00000000

08000e10 <mover_motorq1>:
    HAL_Delay(500);

    motor_running1 = 1;
}

void mover_motorq1(float radianes) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a01 	vstr	s0, [r7, #4]
    // Convertir radianes a pasos
    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 8000e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e22:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8000ef0 <mover_motorq1+0xe0>
 8000e26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e2a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8000ef8 <mover_motorq1+0xe8>
 8000e2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e36:	ee17 3a90 	vmov	r3, s15
 8000e3a:	617b      	str	r3, [r7, #20]

    // Calcular el nuevo paso deseado
    int nuevo_paso = pasos;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <mover_motorq1+0xf0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd1f      	ble.n	8000e90 <mover_motorq1+0x80>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2108      	movs	r1, #8
 8000e54:	482b      	ldr	r0, [pc, #172]	; (8000f04 <mover_motorq1+0xf4>)
 8000e56:	f003 f901 	bl	800405c <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e012      	b.n	8000e86 <mover_motorq1+0x76>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2102      	movs	r1, #2
 8000e64:	4827      	ldr	r0, [pc, #156]	; (8000f04 <mover_motorq1+0xf4>)
 8000e66:	f003 f8f9 	bl	800405c <HAL_GPIO_WritePin>
            HAL_Delay(VELOCIDAD);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fbf6 	bl	800165c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	4823      	ldr	r0, [pc, #140]	; (8000f04 <mover_motorq1+0xf4>)
 8000e76:	f003 f8f1 	bl	800405c <HAL_GPIO_WritePin>
            HAL_Delay(VELOCIDAD);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 fbee 	bl	800165c <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	3301      	adds	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbe8      	blt.n	8000e60 <mover_motorq1+0x50>
 8000e8e:	e024      	b.n	8000eda <mover_motorq1+0xca>
        }
    } else if (diferencia_pasos < 0) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da21      	bge.n	8000eda <mover_motorq1+0xca>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <mover_motorq1+0xf4>)
 8000e9c:	f003 f8de 	bl	800405c <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	e012      	b.n	8000ed2 <mover_motorq1+0xc2>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <mover_motorq1+0xf4>)
 8000eb2:	f003 f8d3 	bl	800405c <HAL_GPIO_WritePin>
            HAL_Delay(VELOCIDAD);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 fbd0 	bl	800165c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <mover_motorq1+0xf4>)
 8000ec2:	f003 f8cb 	bl	800405c <HAL_GPIO_WritePin>
            HAL_Delay(VELOCIDAD);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 fbc8 	bl	800165c <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dbe8      	blt.n	8000eac <mover_motorq1+0x9c>
        }
    }

    // Actualizar el paso actual
    paso_actual_q1 = nuevo_paso;
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <mover_motorq1+0xf0>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f000 fbba 	bl	800165c <HAL_Delay>
}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	54442d18 	.word	0x54442d18
 8000ef4:	401921fb 	.word	0x401921fb
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	40790000 	.word	0x40790000
 8000f00:	24000884 	.word	0x24000884
 8000f04:	58020000 	.word	0x58020000

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_MspInit+0x30>)
 8000f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x30>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x30>)
 8000f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	58024400 	.word	0x58024400

08000f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10e      	bne.n	8000f78 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_TIM_PWM_MspInit+0x40>)
 8000f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_PWM_MspInit+0x40>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_TIM_PWM_MspInit+0x40>)
 8000f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40010000 	.word	0x40010000
 8000f88:	58024400 	.word	0x58024400

08000f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d11f      	bne.n	8000fee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_TIM_MspPostInit+0x70>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_TIM_MspPostInit+0x70>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_TIM_MspPostInit+0x70>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000fcc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000fd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_TIM_MspPostInit+0x74>)
 8000fea:	f002 fe8f 	bl	8003d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020000 	.word	0x58020000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0b8      	sub	sp, #224	; 0xe0
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	22b4      	movs	r2, #180	; 0xb4
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 fed3 	bl	8009dd0 <memset>
  if(huart->Instance==USART1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4aac      	ldr	r2, [pc, #688]	; (80012e0 <HAL_UART_MspInit+0x2dc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	f040 80a6 	bne.w	8001182 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f003 ffb1 	bl	8004fac <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001050:	f7ff ff5a 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001054:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 8001056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800105a:	4aa2      	ldr	r2, [pc, #648]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001064:	4b9f      	ldr	r3, [pc, #636]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 8001066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b9c      	ldr	r3, [pc, #624]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a9a      	ldr	r2, [pc, #616]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b98      	ldr	r3, [pc, #608]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001090:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80010aa:	2304      	movs	r3, #4
 80010ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b4:	4619      	mov	r1, r3
 80010b6:	488c      	ldr	r0, [pc, #560]	; (80012e8 <HAL_UART_MspInit+0x2e4>)
 80010b8:	f002 fe28 	bl	8003d0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80010bc:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010be:	4a8c      	ldr	r2, [pc, #560]	; (80012f0 <HAL_UART_MspInit+0x2ec>)
 80010c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010c2:	4b8a      	ldr	r3, [pc, #552]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010c4:	2229      	movs	r2, #41	; 0x29
 80010c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c8:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ce:	4b87      	ldr	r3, [pc, #540]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d4:	4b85      	ldr	r3, [pc, #532]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010dc:	4b83      	ldr	r3, [pc, #524]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e2:	4b82      	ldr	r3, [pc, #520]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010e8:	4b80      	ldr	r3, [pc, #512]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ee:	4b7f      	ldr	r3, [pc, #508]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f4:	4b7d      	ldr	r3, [pc, #500]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010fa:	487c      	ldr	r0, [pc, #496]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 80010fc:	f000 fbe2 	bl	80018c4 <HAL_DMA_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001106:	f7ff feff 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a77      	ldr	r2, [pc, #476]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 800110e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001110:	4a76      	ldr	r2, [pc, #472]	; (80012ec <HAL_UART_MspInit+0x2e8>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001116:	4b77      	ldr	r3, [pc, #476]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001118:	4a77      	ldr	r2, [pc, #476]	; (80012f8 <HAL_UART_MspInit+0x2f4>)
 800111a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800111c:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 800111e:	222a      	movs	r2, #42	; 0x2a
 8001120:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001122:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	4b72      	ldr	r3, [pc, #456]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800112e:	4b71      	ldr	r3, [pc, #452]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001134:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001136:	4b6f      	ldr	r3, [pc, #444]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001142:	4b6c      	ldr	r3, [pc, #432]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001154:	4867      	ldr	r0, [pc, #412]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001156:	f000 fbb5 	bl	80018c4 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001160:	f7ff fed2 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a63      	ldr	r2, [pc, #396]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001168:	679a      	str	r2, [r3, #120]	; 0x78
 800116a:	4a62      	ldr	r2, [pc, #392]	; (80012f4 <HAL_UART_MspInit+0x2f0>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2025      	movs	r0, #37	; 0x25
 8001176:	f000 fb70 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800117a:	2025      	movs	r0, #37	; 0x25
 800117c:	f000 fb87 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001180:	e0aa      	b.n	80012d8 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_UART_MspInit+0x2f8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	f040 80a5 	bne.w	80012d8 <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4618      	mov	r0, r3
 800119e:	f003 ff05 	bl	8004fac <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80011a8:	f7ff feae 	bl	8000f08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ac:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 80011ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b2:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 80011be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a44      	ldr	r2, [pc, #272]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_UART_MspInit+0x2e0>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001202:	2307      	movs	r3, #7
 8001204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800120c:	4619      	mov	r1, r3
 800120e:	4836      	ldr	r0, [pc, #216]	; (80012e8 <HAL_UART_MspInit+0x2e4>)
 8001210:	f002 fd7c 	bl	8003d0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001216:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_UART_MspInit+0x300>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 800121c:	222d      	movs	r2, #45	; 0x2d
 800121e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 800122e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001232:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001252:	482b      	ldr	r0, [pc, #172]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001254:	f000 fb36 	bl	80018c4 <HAL_DMA_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800125e:	f7ff fe53 	bl	8000f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 8001266:	67da      	str	r2, [r3, #124]	; 0x7c
 8001268:	4a25      	ldr	r2, [pc, #148]	; (8001300 <HAL_UART_MspInit+0x2fc>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_UART_MspInit+0x304>)
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_UART_MspInit+0x308>)
 8001272:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_UART_MspInit+0x304>)
 8001276:	222e      	movs	r2, #46	; 0x2e
 8001278:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_UART_MspInit+0x304>)
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_UART_MspInit+0x304>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_UART_MspInit+0x304>)
 8001288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_UART_MspInit+0x304>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_UART_MspInit+0x304>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_UART_MspInit+0x304>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_UART_MspInit+0x304>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_UART_MspInit+0x304>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <HAL_UART_MspInit+0x304>)
 80012ae:	f000 fb09 	bl	80018c4 <HAL_DMA_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 80012b8:	f7ff fe26 	bl	8000f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <HAL_UART_MspInit+0x304>)
 80012c0:	679a      	str	r2, [r3, #120]	; 0x78
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_UART_MspInit+0x304>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2027      	movs	r0, #39	; 0x27
 80012ce:	f000 fac4 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012d2:	2027      	movs	r0, #39	; 0x27
 80012d4:	f000 fadb 	bl	800188e <HAL_NVIC_EnableIRQ>
}
 80012d8:	bf00      	nop
 80012da:	37e0      	adds	r7, #224	; 0xe0
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40011000 	.word	0x40011000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020400 	.word	0x58020400
 80012ec:	2400019c 	.word	0x2400019c
 80012f0:	40020010 	.word	0x40020010
 80012f4:	24000214 	.word	0x24000214
 80012f8:	40020028 	.word	0x40020028
 80012fc:	40004800 	.word	0x40004800
 8001300:	2400028c 	.word	0x2400028c
 8001304:	40020040 	.word	0x40020040
 8001308:	24000304 	.word	0x24000304
 800130c:	40020058 	.word	0x40020058

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f95e 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <DMA1_Stream0_IRQHandler+0x10>)
 800136a:	f001 fb69 	bl	8002a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2400019c 	.word	0x2400019c

08001378 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <DMA1_Stream1_IRQHandler+0x10>)
 800137e:	f001 fb5f 	bl	8002a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	24000214 	.word	0x24000214

0800138c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DMA1_Stream2_IRQHandler+0x10>)
 8001392:	f001 fb55 	bl	8002a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2400028c 	.word	0x2400028c

080013a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <DMA1_Stream3_IRQHandler+0x10>)
 80013a6:	f001 fb4b 	bl	8002a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000304 	.word	0x24000304

080013b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART1_IRQHandler+0x10>)
 80013ba:	f006 f9b5 	bl	8007728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2400007c 	.word	0x2400007c

080013c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <USART3_IRQHandler+0x10>)
 80013ce:	f006 f9ab 	bl	8007728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2400010c 	.word	0x2400010c

080013dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80013e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013e4:	f002 fe53 	bl	800408e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013ec:	f002 fe4f 	bl	800408e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f8:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <SystemInit+0xd0>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <SystemInit+0xd0>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <SystemInit+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	2b06      	cmp	r3, #6
 8001412:	d807      	bhi.n	8001424 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <SystemInit+0xd4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 030f 	bic.w	r3, r3, #15
 800141c:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <SystemInit+0xd4>)
 800141e:	f043 0307 	orr.w	r3, r3, #7
 8001422:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <SystemInit+0xd8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <SystemInit+0xd8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <SystemInit+0xd8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SystemInit+0xd8>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <SystemInit+0xd8>)
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <SystemInit+0xdc>)
 800143e:	4013      	ands	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <SystemInit+0xd4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <SystemInit+0xd4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 030f 	bic.w	r3, r3, #15
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <SystemInit+0xd4>)
 8001458:	f043 0307 	orr.w	r3, r3, #7
 800145c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <SystemInit+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <SystemInit+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <SystemInit+0xd8>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <SystemInit+0xd8>)
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <SystemInit+0xe0>)
 8001474:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <SystemInit+0xd8>)
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <SystemInit+0xe4>)
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <SystemInit+0xd8>)
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <SystemInit+0xe8>)
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <SystemInit+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <SystemInit+0xd8>)
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <SystemInit+0xe8>)
 800148c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <SystemInit+0xd8>)
 8001490:	2200      	movs	r2, #0
 8001492:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <SystemInit+0xd8>)
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <SystemInit+0xe8>)
 8001498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <SystemInit+0xd8>)
 800149c:	2200      	movs	r2, #0
 800149e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <SystemInit+0xd8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <SystemInit+0xd8>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <SystemInit+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <SystemInit+0xec>)
 80014b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	52002000 	.word	0x52002000
 80014cc:	58024400 	.word	0x58024400
 80014d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d4:	02020200 	.word	0x02020200
 80014d8:	01ff0000 	.word	0x01ff0000
 80014dc:	01010280 	.word	0x01010280
 80014e0:	52004000 	.word	0x52004000

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e8:	f7ff ff84 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f008 fc39 	bl	8009d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff f8a3 	bl	8000660 <main>
  bx  lr
 800151a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001520:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001524:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001528:	08009eac 	.word	0x08009eac
  ldr r2, =_sbss
 800152c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001530:	2400088c 	.word	0x2400088c

08001534 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC3_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 f980 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001544:	f003 fb5c 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	4913      	ldr	r1, [pc, #76]	; (80015a4 <HAL_Init+0x6c>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_Init+0x68>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_Init+0x6c>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_Init+0x70>)
 800157a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_Init+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f814 	bl	80015b0 <HAL_InitTick>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e002      	b.n	8001598 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001592:	f7ff fcbf 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	58024400 	.word	0x58024400
 80015a4:	08009e5c 	.word	0x08009e5c
 80015a8:	24000008 	.word	0x24000008
 80015ac:	24000004 	.word	0x24000004

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_InitTick+0x60>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e021      	b.n	8001608 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_InitTick+0x64>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_InitTick+0x60>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f965 	bl	80018aa <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f92f 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_InitTick+0x68>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000010 	.word	0x24000010
 8001614:	24000004 	.word	0x24000004
 8001618:	2400000c 	.word	0x2400000c

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	24000010 	.word	0x24000010
 8001640:	24000888 	.word	0x24000888

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	24000888 	.word	0x24000888

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000010 	.word	0x24000010

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x40>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	05fa0000 	.word	0x05fa0000

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff40 	bl	80016ec <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff33 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa4 	bl	8001800 <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff feba 	bl	8001644 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e314      	b.n	8001f06 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_DMA_Init+0x1b8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d04a      	beq.n	800197c <HAL_DMA_Init+0xb8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a65      	ldr	r2, [pc, #404]	; (8001a80 <HAL_DMA_Init+0x1bc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d045      	beq.n	800197c <HAL_DMA_Init+0xb8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_DMA_Init+0x1c0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d040      	beq.n	800197c <HAL_DMA_Init+0xb8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a62      	ldr	r2, [pc, #392]	; (8001a88 <HAL_DMA_Init+0x1c4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d03b      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a60      	ldr	r2, [pc, #384]	; (8001a8c <HAL_DMA_Init+0x1c8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d036      	beq.n	800197c <HAL_DMA_Init+0xb8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a5f      	ldr	r2, [pc, #380]	; (8001a90 <HAL_DMA_Init+0x1cc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d031      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a5d      	ldr	r2, [pc, #372]	; (8001a94 <HAL_DMA_Init+0x1d0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d02c      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a5c      	ldr	r2, [pc, #368]	; (8001a98 <HAL_DMA_Init+0x1d4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d027      	beq.n	800197c <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_DMA_Init+0x1d8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d022      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a59      	ldr	r2, [pc, #356]	; (8001aa0 <HAL_DMA_Init+0x1dc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d01d      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_DMA_Init+0x1e0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d018      	beq.n	800197c <HAL_DMA_Init+0xb8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a56      	ldr	r2, [pc, #344]	; (8001aa8 <HAL_DMA_Init+0x1e4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a54      	ldr	r2, [pc, #336]	; (8001aac <HAL_DMA_Init+0x1e8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00e      	beq.n	800197c <HAL_DMA_Init+0xb8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a53      	ldr	r2, [pc, #332]	; (8001ab0 <HAL_DMA_Init+0x1ec>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d009      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a51      	ldr	r2, [pc, #324]	; (8001ab4 <HAL_DMA_Init+0x1f0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d004      	beq.n	800197c <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <HAL_DMA_Init+0x1f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_DMA_Init+0xbc>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_DMA_Init+0xbe>
 8001980:	2300      	movs	r3, #0
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 813c 	beq.w	8001c00 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a37      	ldr	r2, [pc, #220]	; (8001a7c <HAL_DMA_Init+0x1b8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d04a      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <HAL_DMA_Init+0x1bc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d045      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_DMA_Init+0x1c0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d040      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a33      	ldr	r2, [pc, #204]	; (8001a88 <HAL_DMA_Init+0x1c4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d03b      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <HAL_DMA_Init+0x1c8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d036      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a30      	ldr	r2, [pc, #192]	; (8001a90 <HAL_DMA_Init+0x1cc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d031      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_DMA_Init+0x1d0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02c      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <HAL_DMA_Init+0x1d4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d027      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <HAL_DMA_Init+0x1d8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d022      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <HAL_DMA_Init+0x1dc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d01d      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <HAL_DMA_Init+0x1e0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d018      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <HAL_DMA_Init+0x1e4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d013      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <HAL_DMA_Init+0x1e8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00e      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_DMA_Init+0x1ec>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d009      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <HAL_DMA_Init+0x1f0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_DMA_Init+0x1f4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d108      	bne.n	8001a4a <HAL_DMA_Init+0x186>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_DMA_Init+0x196>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a5a:	e02f      	b.n	8001abc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5c:	f7ff fdf2 	bl	8001644 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d928      	bls.n	8001abc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e244      	b.n	8001f06 <HAL_DMA_Init+0x642>
 8001a7c:	40020010 	.word	0x40020010
 8001a80:	40020028 	.word	0x40020028
 8001a84:	40020040 	.word	0x40020040
 8001a88:	40020058 	.word	0x40020058
 8001a8c:	40020070 	.word	0x40020070
 8001a90:	40020088 	.word	0x40020088
 8001a94:	400200a0 	.word	0x400200a0
 8001a98:	400200b8 	.word	0x400200b8
 8001a9c:	40020410 	.word	0x40020410
 8001aa0:	40020428 	.word	0x40020428
 8001aa4:	40020440 	.word	0x40020440
 8001aa8:	40020458 	.word	0x40020458
 8001aac:	40020470 	.word	0x40020470
 8001ab0:	40020488 	.word	0x40020488
 8001ab4:	400204a0 	.word	0x400204a0
 8001ab8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1c8      	bne.n	8001a5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4b84      	ldr	r3, [pc, #528]	; (8001ce8 <HAL_DMA_Init+0x424>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ae2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b28      	cmp	r3, #40	; 0x28
 8001b26:	d903      	bls.n	8001b30 <HAL_DMA_Init+0x26c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8001b2e:	d91f      	bls.n	8001b70 <HAL_DMA_Init+0x2ac>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b3e      	cmp	r3, #62	; 0x3e
 8001b36:	d903      	bls.n	8001b40 <HAL_DMA_Init+0x27c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b42      	cmp	r3, #66	; 0x42
 8001b3e:	d917      	bls.n	8001b70 <HAL_DMA_Init+0x2ac>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b46      	cmp	r3, #70	; 0x46
 8001b46:	d903      	bls.n	8001b50 <HAL_DMA_Init+0x28c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b48      	cmp	r3, #72	; 0x48
 8001b4e:	d90f      	bls.n	8001b70 <HAL_DMA_Init+0x2ac>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b4e      	cmp	r3, #78	; 0x4e
 8001b56:	d903      	bls.n	8001b60 <HAL_DMA_Init+0x29c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b52      	cmp	r3, #82	; 0x52
 8001b5e:	d907      	bls.n	8001b70 <HAL_DMA_Init+0x2ac>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b73      	cmp	r3, #115	; 0x73
 8001b66:	d905      	bls.n	8001b74 <HAL_DMA_Init+0x2b0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b77      	cmp	r3, #119	; 0x77
 8001b6e:	d801      	bhi.n	8001b74 <HAL_DMA_Init+0x2b0>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_DMA_Init+0x2b2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f023 0307 	bic.w	r3, r3, #7
 8001b98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d117      	bne.n	8001bdc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f001 ff1a 	bl	80039f8 <DMA_CheckFifoParam>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e194      	b.n	8001f06 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f001 fe55 	bl	8003894 <DMA_CalcBaseAndBitshift>
 8001bea:	4603      	mov	r3, r0
 8001bec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	223f      	movs	r2, #63	; 0x3f
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	e0ca      	b.n	8001d96 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a39      	ldr	r2, [pc, #228]	; (8001cec <HAL_DMA_Init+0x428>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d022      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a38      	ldr	r2, [pc, #224]	; (8001cf0 <HAL_DMA_Init+0x42c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d01d      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_DMA_Init+0x430>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <HAL_DMA_Init+0x434>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a33      	ldr	r2, [pc, #204]	; (8001cfc <HAL_DMA_Init+0x438>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_DMA_Init+0x43c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a30      	ldr	r2, [pc, #192]	; (8001d04 <HAL_DMA_Init+0x440>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_DMA_Init+0x38c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <HAL_DMA_Init+0x444>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0x390>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_DMA_Init+0x392>
 8001c54:	2300      	movs	r3, #0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8094 	beq.w	8001d84 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_DMA_Init+0x428>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d021      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <HAL_DMA_Init+0x42c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d01c      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_DMA_Init+0x430>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d017      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_DMA_Init+0x434>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d012      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_DMA_Init+0x438>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_DMA_Init+0x43c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d008      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_DMA_Init+0x440>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_DMA_Init+0x3e6>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_DMA_Init+0x444>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_DMA_Init+0x448>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b40      	cmp	r3, #64	; 0x40
 8001cd2:	d01d      	beq.n	8001d10 <HAL_DMA_Init+0x44c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d102      	bne.n	8001ce2 <HAL_DMA_Init+0x41e>
 8001cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ce0:	e017      	b.n	8001d12 <HAL_DMA_Init+0x44e>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e015      	b.n	8001d12 <HAL_DMA_Init+0x44e>
 8001ce6:	bf00      	nop
 8001ce8:	fe10803f 	.word	0xfe10803f
 8001cec:	58025408 	.word	0x58025408
 8001cf0:	5802541c 	.word	0x5802541c
 8001cf4:	58025430 	.word	0x58025430
 8001cf8:	58025444 	.word	0x58025444
 8001cfc:	58025458 	.word	0x58025458
 8001d00:	5802546c 	.word	0x5802546c
 8001d04:	58025480 	.word	0x58025480
 8001d08:	58025494 	.word	0x58025494
 8001d0c:	fffe000f 	.word	0xfffe000f
 8001d10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68d2      	ldr	r2, [r2, #12]
 8001d16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <HAL_DMA_Init+0x64c>)
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_DMA_Init+0x650>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f001 fd93 	bl	8003894 <DMA_CalcBaseAndBitshift>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e008      	b.n	8001d96 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0b7      	b.n	8001f06 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	; (8001f18 <HAL_DMA_Init+0x654>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d072      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_DMA_Init+0x658>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d06d      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_DMA_Init+0x65c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d068      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <HAL_DMA_Init+0x660>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d063      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a59      	ldr	r2, [pc, #356]	; (8001f28 <HAL_DMA_Init+0x664>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d05e      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_DMA_Init+0x668>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d059      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a56      	ldr	r2, [pc, #344]	; (8001f30 <HAL_DMA_Init+0x66c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d054      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <HAL_DMA_Init+0x670>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04f      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_DMA_Init+0x674>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04a      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_DMA_Init+0x678>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d045      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_DMA_Init+0x67c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d040      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <HAL_DMA_Init+0x680>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d03b      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a4d      	ldr	r2, [pc, #308]	; (8001f48 <HAL_DMA_Init+0x684>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d036      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_DMA_Init+0x688>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d031      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_DMA_Init+0x68c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d02c      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a48      	ldr	r2, [pc, #288]	; (8001f54 <HAL_DMA_Init+0x690>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_DMA_Init+0x694>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a45      	ldr	r2, [pc, #276]	; (8001f5c <HAL_DMA_Init+0x698>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01d      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <HAL_DMA_Init+0x69c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d018      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_DMA_Init+0x6a0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a41      	ldr	r2, [pc, #260]	; (8001f68 <HAL_DMA_Init+0x6a4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <HAL_DMA_Init+0x6a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a3e      	ldr	r2, [pc, #248]	; (8001f70 <HAL_DMA_Init+0x6ac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_Init+0x5c2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3c      	ldr	r2, [pc, #240]	; (8001f74 <HAL_DMA_Init+0x6b0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_DMA_Init+0x5c6>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_DMA_Init+0x5c8>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d032      	beq.n	8001ef6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 fe2d 	bl	8003af0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b80      	cmp	r3, #128	; 0x80
 8001e9c:	d102      	bne.n	8001ea4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eb8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <HAL_DMA_Init+0x620>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d80c      	bhi.n	8001ee4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f001 feaa 	bl	8003c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e008      	b.n	8001ef6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	a7fdabf8 	.word	0xa7fdabf8
 8001f14:	cccccccd 	.word	0xcccccccd
 8001f18:	40020010 	.word	0x40020010
 8001f1c:	40020028 	.word	0x40020028
 8001f20:	40020040 	.word	0x40020040
 8001f24:	40020058 	.word	0x40020058
 8001f28:	40020070 	.word	0x40020070
 8001f2c:	40020088 	.word	0x40020088
 8001f30:	400200a0 	.word	0x400200a0
 8001f34:	400200b8 	.word	0x400200b8
 8001f38:	40020410 	.word	0x40020410
 8001f3c:	40020428 	.word	0x40020428
 8001f40:	40020440 	.word	0x40020440
 8001f44:	40020458 	.word	0x40020458
 8001f48:	40020470 	.word	0x40020470
 8001f4c:	40020488 	.word	0x40020488
 8001f50:	400204a0 	.word	0x400204a0
 8001f54:	400204b8 	.word	0x400204b8
 8001f58:	58025408 	.word	0x58025408
 8001f5c:	5802541c 	.word	0x5802541c
 8001f60:	58025430 	.word	0x58025430
 8001f64:	58025444 	.word	0x58025444
 8001f68:	58025458 	.word	0x58025458
 8001f6c:	5802546c 	.word	0x5802546c
 8001f70:	58025480 	.word	0x58025480
 8001f74:	58025494 	.word	0x58025494

08001f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fb60 	bl	8001644 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e2dc      	b.n	800254a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e2cd      	b.n	800254a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a76      	ldr	r2, [pc, #472]	; (800218c <HAL_DMA_Abort+0x214>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04a      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a74      	ldr	r2, [pc, #464]	; (8002190 <HAL_DMA_Abort+0x218>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d045      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a73      	ldr	r2, [pc, #460]	; (8002194 <HAL_DMA_Abort+0x21c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d040      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a71      	ldr	r2, [pc, #452]	; (8002198 <HAL_DMA_Abort+0x220>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d03b      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a70      	ldr	r2, [pc, #448]	; (800219c <HAL_DMA_Abort+0x224>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d036      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6e      	ldr	r2, [pc, #440]	; (80021a0 <HAL_DMA_Abort+0x228>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6d      	ldr	r2, [pc, #436]	; (80021a4 <HAL_DMA_Abort+0x22c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d02c      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6b      	ldr	r2, [pc, #428]	; (80021a8 <HAL_DMA_Abort+0x230>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d027      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_DMA_Abort+0x234>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <HAL_DMA_Abort+0x238>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01d      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a67      	ldr	r2, [pc, #412]	; (80021b4 <HAL_DMA_Abort+0x23c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d018      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a65      	ldr	r2, [pc, #404]	; (80021b8 <HAL_DMA_Abort+0x240>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a64      	ldr	r2, [pc, #400]	; (80021bc <HAL_DMA_Abort+0x244>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a62      	ldr	r2, [pc, #392]	; (80021c0 <HAL_DMA_Abort+0x248>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a61      	ldr	r2, [pc, #388]	; (80021c4 <HAL_DMA_Abort+0x24c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_DMA_Abort+0xd6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_DMA_Abort+0x250>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_DMA_Abort+0xda>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_DMA_Abort+0xdc>
 8002052:	2300      	movs	r3, #0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 021e 	bic.w	r2, r2, #30
 8002066:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002076:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e00a      	b.n	8002096 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 020e 	bic.w	r2, r2, #14
 800208e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3c      	ldr	r2, [pc, #240]	; (800218c <HAL_DMA_Abort+0x214>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d072      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <HAL_DMA_Abort+0x218>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d06d      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a39      	ldr	r2, [pc, #228]	; (8002194 <HAL_DMA_Abort+0x21c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d068      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a37      	ldr	r2, [pc, #220]	; (8002198 <HAL_DMA_Abort+0x220>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d063      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a36      	ldr	r2, [pc, #216]	; (800219c <HAL_DMA_Abort+0x224>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d05e      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_DMA_Abort+0x228>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d059      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_DMA_Abort+0x22c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d054      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <HAL_DMA_Abort+0x230>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d04f      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_DMA_Abort+0x234>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d04a      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2e      	ldr	r2, [pc, #184]	; (80021b0 <HAL_DMA_Abort+0x238>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d045      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_DMA_Abort+0x23c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d040      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <HAL_DMA_Abort+0x240>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d03b      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <HAL_DMA_Abort+0x244>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d036      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_DMA_Abort+0x248>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d031      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_DMA_Abort+0x24c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d02c      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_DMA_Abort+0x250>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d027      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <HAL_DMA_Abort+0x254>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d022      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_DMA_Abort+0x258>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01d      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_DMA_Abort+0x25c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d018      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_DMA_Abort+0x260>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_DMA_Abort+0x264>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00e      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <HAL_DMA_Abort+0x268>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d009      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_DMA_Abort+0x26c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d004      	beq.n	8002186 <HAL_DMA_Abort+0x20e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_DMA_Abort+0x270>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d132      	bne.n	80021ec <HAL_DMA_Abort+0x274>
 8002186:	2301      	movs	r3, #1
 8002188:	e031      	b.n	80021ee <HAL_DMA_Abort+0x276>
 800218a:	bf00      	nop
 800218c:	40020010 	.word	0x40020010
 8002190:	40020028 	.word	0x40020028
 8002194:	40020040 	.word	0x40020040
 8002198:	40020058 	.word	0x40020058
 800219c:	40020070 	.word	0x40020070
 80021a0:	40020088 	.word	0x40020088
 80021a4:	400200a0 	.word	0x400200a0
 80021a8:	400200b8 	.word	0x400200b8
 80021ac:	40020410 	.word	0x40020410
 80021b0:	40020428 	.word	0x40020428
 80021b4:	40020440 	.word	0x40020440
 80021b8:	40020458 	.word	0x40020458
 80021bc:	40020470 	.word	0x40020470
 80021c0:	40020488 	.word	0x40020488
 80021c4:	400204a0 	.word	0x400204a0
 80021c8:	400204b8 	.word	0x400204b8
 80021cc:	58025408 	.word	0x58025408
 80021d0:	5802541c 	.word	0x5802541c
 80021d4:	58025430 	.word	0x58025430
 80021d8:	58025444 	.word	0x58025444
 80021dc:	58025458 	.word	0x58025458
 80021e0:	5802546c 	.word	0x5802546c
 80021e4:	58025480 	.word	0x58025480
 80021e8:	58025494 	.word	0x58025494
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002200:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_DMA_Abort+0x444>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04a      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_DMA_Abort+0x448>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d045      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_DMA_Abort+0x44c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d040      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_DMA_Abort+0x450>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d03b      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_DMA_Abort+0x454>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d036      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_DMA_Abort+0x458>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d031      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a64      	ldr	r2, [pc, #400]	; (80023d4 <HAL_DMA_Abort+0x45c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d02c      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a62      	ldr	r2, [pc, #392]	; (80023d8 <HAL_DMA_Abort+0x460>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d027      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a61      	ldr	r2, [pc, #388]	; (80023dc <HAL_DMA_Abort+0x464>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d022      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a5f      	ldr	r2, [pc, #380]	; (80023e0 <HAL_DMA_Abort+0x468>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01d      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5e      	ldr	r2, [pc, #376]	; (80023e4 <HAL_DMA_Abort+0x46c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d018      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a5c      	ldr	r2, [pc, #368]	; (80023e8 <HAL_DMA_Abort+0x470>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5b      	ldr	r2, [pc, #364]	; (80023ec <HAL_DMA_Abort+0x474>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a59      	ldr	r2, [pc, #356]	; (80023f0 <HAL_DMA_Abort+0x478>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_DMA_Abort+0x47c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_DMA_Abort+0x32a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a56      	ldr	r2, [pc, #344]	; (80023f8 <HAL_DMA_Abort+0x480>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <HAL_DMA_Abort+0x33c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e007      	b.n	80022c4 <HAL_DMA_Abort+0x34c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022c4:	e013      	b.n	80022ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c6:	f7ff f9bd 	bl	8001644 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d90c      	bls.n	80022ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e12d      	b.n	800254a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e5      	bne.n	80022c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <HAL_DMA_Abort+0x444>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d04a      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <HAL_DMA_Abort+0x448>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d045      	beq.n	800239a <HAL_DMA_Abort+0x422>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <HAL_DMA_Abort+0x44c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d040      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <HAL_DMA_Abort+0x450>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d03b      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a29      	ldr	r2, [pc, #164]	; (80023cc <HAL_DMA_Abort+0x454>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d036      	beq.n	800239a <HAL_DMA_Abort+0x422>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_DMA_Abort+0x458>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d031      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_DMA_Abort+0x45c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d02c      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <HAL_DMA_Abort+0x460>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d027      	beq.n	800239a <HAL_DMA_Abort+0x422>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_DMA_Abort+0x464>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d022      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_DMA_Abort+0x468>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01d      	beq.n	800239a <HAL_DMA_Abort+0x422>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_DMA_Abort+0x46c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d018      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_DMA_Abort+0x470>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_DMA_Abort+0x474>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00e      	beq.n	800239a <HAL_DMA_Abort+0x422>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_DMA_Abort+0x478>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_DMA_Abort+0x47c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_DMA_Abort+0x422>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_DMA_Abort+0x480>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_DMA_Abort+0x426>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_DMA_Abort+0x428>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d02b      	beq.n	80023fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	223f      	movs	r2, #63	; 0x3f
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	e02a      	b.n	8002412 <HAL_DMA_Abort+0x49a>
 80023bc:	40020010 	.word	0x40020010
 80023c0:	40020028 	.word	0x40020028
 80023c4:	40020040 	.word	0x40020040
 80023c8:	40020058 	.word	0x40020058
 80023cc:	40020070 	.word	0x40020070
 80023d0:	40020088 	.word	0x40020088
 80023d4:	400200a0 	.word	0x400200a0
 80023d8:	400200b8 	.word	0x400200b8
 80023dc:	40020410 	.word	0x40020410
 80023e0:	40020428 	.word	0x40020428
 80023e4:	40020440 	.word	0x40020440
 80023e8:	40020458 	.word	0x40020458
 80023ec:	40020470 	.word	0x40020470
 80023f0:	40020488 	.word	0x40020488
 80023f4:	400204a0 	.word	0x400204a0
 80023f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2201      	movs	r2, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <HAL_DMA_Abort+0x5dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d072      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_DMA_Abort+0x5e0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d06d      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4c      	ldr	r2, [pc, #304]	; (800255c <HAL_DMA_Abort+0x5e4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d068      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_DMA_Abort+0x5e8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d063      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_DMA_Abort+0x5ec>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a47      	ldr	r2, [pc, #284]	; (8002568 <HAL_DMA_Abort+0x5f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d059      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_DMA_Abort+0x5f4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d054      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a44      	ldr	r2, [pc, #272]	; (8002570 <HAL_DMA_Abort+0x5f8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d04f      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a43      	ldr	r2, [pc, #268]	; (8002574 <HAL_DMA_Abort+0x5fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d04a      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a41      	ldr	r2, [pc, #260]	; (8002578 <HAL_DMA_Abort+0x600>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d045      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_DMA_Abort+0x604>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3e      	ldr	r2, [pc, #248]	; (8002580 <HAL_DMA_Abort+0x608>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d03b      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <HAL_DMA_Abort+0x60c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d036      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <HAL_DMA_Abort+0x610>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_DMA_Abort+0x614>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02c      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a38      	ldr	r2, [pc, #224]	; (8002590 <HAL_DMA_Abort+0x618>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a37      	ldr	r2, [pc, #220]	; (8002594 <HAL_DMA_Abort+0x61c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d022      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a35      	ldr	r2, [pc, #212]	; (8002598 <HAL_DMA_Abort+0x620>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a34      	ldr	r2, [pc, #208]	; (800259c <HAL_DMA_Abort+0x624>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d018      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <HAL_DMA_Abort+0x628>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_DMA_Abort+0x62c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <HAL_DMA_Abort+0x630>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <HAL_DMA_Abort+0x634>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_Abort+0x58a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <HAL_DMA_Abort+0x638>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Abort+0x58e>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_DMA_Abort+0x590>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002514:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800252c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002536:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	40020040 	.word	0x40020040
 8002560:	40020058 	.word	0x40020058
 8002564:	40020070 	.word	0x40020070
 8002568:	40020088 	.word	0x40020088
 800256c:	400200a0 	.word	0x400200a0
 8002570:	400200b8 	.word	0x400200b8
 8002574:	40020410 	.word	0x40020410
 8002578:	40020428 	.word	0x40020428
 800257c:	40020440 	.word	0x40020440
 8002580:	40020458 	.word	0x40020458
 8002584:	40020470 	.word	0x40020470
 8002588:	40020488 	.word	0x40020488
 800258c:	400204a0 	.word	0x400204a0
 8002590:	400204b8 	.word	0x400204b8
 8002594:	58025408 	.word	0x58025408
 8002598:	5802541c 	.word	0x5802541c
 800259c:	58025430 	.word	0x58025430
 80025a0:	58025444 	.word	0x58025444
 80025a4:	58025458 	.word	0x58025458
 80025a8:	5802546c 	.word	0x5802546c
 80025ac:	58025480 	.word	0x58025480
 80025b0:	58025494 	.word	0x58025494

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e237      	b.n	8002a36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e22c      	b.n	8002a36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5c      	ldr	r2, [pc, #368]	; (8002754 <HAL_DMA_Abort_IT+0x1a0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d04a      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <HAL_DMA_Abort_IT+0x1a4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d045      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a59      	ldr	r2, [pc, #356]	; (800275c <HAL_DMA_Abort_IT+0x1a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d040      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_DMA_Abort_IT+0x1ac>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d03b      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_DMA_Abort_IT+0x1b0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d036      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a55      	ldr	r2, [pc, #340]	; (8002768 <HAL_DMA_Abort_IT+0x1b4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d031      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a53      	ldr	r2, [pc, #332]	; (800276c <HAL_DMA_Abort_IT+0x1b8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d02c      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_DMA_Abort_IT+0x1bc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d027      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a50      	ldr	r2, [pc, #320]	; (8002774 <HAL_DMA_Abort_IT+0x1c0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a4f      	ldr	r2, [pc, #316]	; (8002778 <HAL_DMA_Abort_IT+0x1c4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01d      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a4d      	ldr	r2, [pc, #308]	; (800277c <HAL_DMA_Abort_IT+0x1c8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <HAL_DMA_Abort_IT+0x1cc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a4a      	ldr	r2, [pc, #296]	; (8002784 <HAL_DMA_Abort_IT+0x1d0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a49      	ldr	r2, [pc, #292]	; (8002788 <HAL_DMA_Abort_IT+0x1d4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a47      	ldr	r2, [pc, #284]	; (800278c <HAL_DMA_Abort_IT+0x1d8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_DMA_Abort_IT+0xc8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a46      	ldr	r2, [pc, #280]	; (8002790 <HAL_DMA_Abort_IT+0x1dc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Abort_IT+0xcc>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_DMA_Abort_IT+0xce>
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8086 	beq.w	8002794 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <HAL_DMA_Abort_IT+0x1a0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d04a      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2e      	ldr	r2, [pc, #184]	; (8002758 <HAL_DMA_Abort_IT+0x1a4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d045      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2c      	ldr	r2, [pc, #176]	; (800275c <HAL_DMA_Abort_IT+0x1a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d040      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_DMA_Abort_IT+0x1ac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d03b      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_DMA_Abort_IT+0x1b0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d036      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a28      	ldr	r2, [pc, #160]	; (8002768 <HAL_DMA_Abort_IT+0x1b4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d031      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_DMA_Abort_IT+0x1b8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02c      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_DMA_Abort_IT+0x1bc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d027      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <HAL_DMA_Abort_IT+0x1c0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d022      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_DMA_Abort_IT+0x1c4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d01d      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a20      	ldr	r2, [pc, #128]	; (800277c <HAL_DMA_Abort_IT+0x1c8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d018      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <HAL_DMA_Abort_IT+0x1cc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <HAL_DMA_Abort_IT+0x1d0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00e      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_DMA_Abort_IT+0x1d4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <HAL_DMA_Abort_IT+0x1d8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_DMA_Abort_IT+0x17c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_DMA_Abort_IT+0x1dc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d108      	bne.n	8002742 <HAL_DMA_Abort_IT+0x18e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e178      	b.n	8002a34 <HAL_DMA_Abort_IT+0x480>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e16f      	b.n	8002a34 <HAL_DMA_Abort_IT+0x480>
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 020e 	bic.w	r2, r2, #14
 80027a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6c      	ldr	r2, [pc, #432]	; (800295c <HAL_DMA_Abort_IT+0x3a8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04a      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6b      	ldr	r2, [pc, #428]	; (8002960 <HAL_DMA_Abort_IT+0x3ac>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d045      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a69      	ldr	r2, [pc, #420]	; (8002964 <HAL_DMA_Abort_IT+0x3b0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d040      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a68      	ldr	r2, [pc, #416]	; (8002968 <HAL_DMA_Abort_IT+0x3b4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d03b      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_DMA_Abort_IT+0x3b8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d036      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a65      	ldr	r2, [pc, #404]	; (8002970 <HAL_DMA_Abort_IT+0x3bc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d031      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a63      	ldr	r2, [pc, #396]	; (8002974 <HAL_DMA_Abort_IT+0x3c0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02c      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a62      	ldr	r2, [pc, #392]	; (8002978 <HAL_DMA_Abort_IT+0x3c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d027      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a60      	ldr	r2, [pc, #384]	; (800297c <HAL_DMA_Abort_IT+0x3c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d022      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_DMA_Abort_IT+0x3cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d01d      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_DMA_Abort_IT+0x3d0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d018      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_DMA_Abort_IT+0x3d4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_DMA_Abort_IT+0x3d8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a59      	ldr	r2, [pc, #356]	; (8002990 <HAL_DMA_Abort_IT+0x3dc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_DMA_Abort_IT+0x3e0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_DMA_Abort_IT+0x290>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_DMA_Abort_IT+0x3e4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <HAL_DMA_Abort_IT+0x2a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e007      	b.n	8002866 <HAL_DMA_Abort_IT+0x2b2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3c      	ldr	r2, [pc, #240]	; (800295c <HAL_DMA_Abort_IT+0x3a8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d072      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_DMA_Abort_IT+0x3ac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d06d      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a39      	ldr	r2, [pc, #228]	; (8002964 <HAL_DMA_Abort_IT+0x3b0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d068      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a37      	ldr	r2, [pc, #220]	; (8002968 <HAL_DMA_Abort_IT+0x3b4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d063      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a36      	ldr	r2, [pc, #216]	; (800296c <HAL_DMA_Abort_IT+0x3b8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d05e      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a34      	ldr	r2, [pc, #208]	; (8002970 <HAL_DMA_Abort_IT+0x3bc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d059      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a33      	ldr	r2, [pc, #204]	; (8002974 <HAL_DMA_Abort_IT+0x3c0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d054      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a31      	ldr	r2, [pc, #196]	; (8002978 <HAL_DMA_Abort_IT+0x3c4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d04f      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_DMA_Abort_IT+0x3c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04a      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <HAL_DMA_Abort_IT+0x3cc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d045      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_DMA_Abort_IT+0x3d0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <HAL_DMA_Abort_IT+0x3d4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d03b      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_DMA_Abort_IT+0x3d8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_DMA_Abort_IT+0x3dc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_DMA_Abort_IT+0x3e0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_DMA_Abort_IT+0x3e4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_DMA_Abort_IT+0x3e8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_Abort_IT+0x3ec>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_DMA_Abort_IT+0x3f0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_DMA_Abort_IT+0x3f4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_DMA_Abort_IT+0x3f8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_DMA_Abort_IT+0x3fc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_DMA_Abort_IT+0x400>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x3a2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_DMA_Abort_IT+0x404>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d132      	bne.n	80029bc <HAL_DMA_Abort_IT+0x408>
 8002956:	2301      	movs	r3, #1
 8002958:	e031      	b.n	80029be <HAL_DMA_Abort_IT+0x40a>
 800295a:	bf00      	nop
 800295c:	40020010 	.word	0x40020010
 8002960:	40020028 	.word	0x40020028
 8002964:	40020040 	.word	0x40020040
 8002968:	40020058 	.word	0x40020058
 800296c:	40020070 	.word	0x40020070
 8002970:	40020088 	.word	0x40020088
 8002974:	400200a0 	.word	0x400200a0
 8002978:	400200b8 	.word	0x400200b8
 800297c:	40020410 	.word	0x40020410
 8002980:	40020428 	.word	0x40020428
 8002984:	40020440 	.word	0x40020440
 8002988:	40020458 	.word	0x40020458
 800298c:	40020470 	.word	0x40020470
 8002990:	40020488 	.word	0x40020488
 8002994:	400204a0 	.word	0x400204a0
 8002998:	400204b8 	.word	0x400204b8
 800299c:	58025408 	.word	0x58025408
 80029a0:	5802541c 	.word	0x5802541c
 80029a4:	58025430 	.word	0x58025430
 80029a8:	58025444 	.word	0x58025444
 80029ac:	58025458 	.word	0x58025458
 80029b0:	5802546c 	.word	0x5802546c
 80029b4:	58025480 	.word	0x58025480
 80029b8:	58025494 	.word	0x58025494
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d028      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2201      	movs	r2, #1
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop

08002a40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a4c:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_DMA_IRQHandler+0x1ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <HAL_DMA_IRQHandler+0x1b0>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	; (8002bf4 <HAL_DMA_IRQHandler+0x1b4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04a      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_DMA_IRQHandler+0x1b8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d045      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	; (8002bfc <HAL_DMA_IRQHandler+0x1bc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d040      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5a      	ldr	r2, [pc, #360]	; (8002c00 <HAL_DMA_IRQHandler+0x1c0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d03b      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a59      	ldr	r2, [pc, #356]	; (8002c04 <HAL_DMA_IRQHandler+0x1c4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d036      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_DMA_IRQHandler+0x1c8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d031      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_DMA_IRQHandler+0x1cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d02c      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_DMA_IRQHandler+0x1d0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d027      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_DMA_IRQHandler+0x1d4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_DMA_IRQHandler+0x1d8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_DMA_IRQHandler+0x1dc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_DMA_IRQHandler+0x1e0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_DMA_IRQHandler+0x1e4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	; (8002c28 <HAL_DMA_IRQHandler+0x1e8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <HAL_DMA_IRQHandler+0x1ec>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_DMA_IRQHandler+0xd2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a48      	ldr	r2, [pc, #288]	; (8002c30 <HAL_DMA_IRQHandler+0x1f0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_DMA_IRQHandler+0xd6>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_DMA_IRQHandler+0xd8>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 842b 	beq.w	8003374 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2208      	movs	r2, #8
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80a2 	beq.w	8002c78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <HAL_DMA_IRQHandler+0x1b4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04a      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <HAL_DMA_IRQHandler+0x1b8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d045      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <HAL_DMA_IRQHandler+0x1bc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d040      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <HAL_DMA_IRQHandler+0x1c0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d03b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <HAL_DMA_IRQHandler+0x1c4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d036      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <HAL_DMA_IRQHandler+0x1c8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d031      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <HAL_DMA_IRQHandler+0x1cc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02c      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <HAL_DMA_IRQHandler+0x1d0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d027      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <HAL_DMA_IRQHandler+0x1d4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d022      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <HAL_DMA_IRQHandler+0x1d8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d01d      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <HAL_DMA_IRQHandler+0x1dc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_DMA_IRQHandler+0x1e0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_DMA_IRQHandler+0x1e4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <HAL_DMA_IRQHandler+0x1e8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_DMA_IRQHandler+0x1ec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x194>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_DMA_IRQHandler+0x1f0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d12f      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x1f4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	e02e      	b.n	8002c48 <HAL_DMA_IRQHandler+0x208>
 8002bea:	bf00      	nop
 8002bec:	24000004 	.word	0x24000004
 8002bf0:	1b4e81b5 	.word	0x1b4e81b5
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d015      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0204 	bic.w	r2, r2, #4
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2208      	movs	r2, #8
 8002c66:	409a      	lsls	r2, r3
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d06e      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a69      	ldr	r2, [pc, #420]	; (8002e38 <HAL_DMA_IRQHandler+0x3f8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d04a      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_DMA_IRQHandler+0x3fc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d045      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a66      	ldr	r2, [pc, #408]	; (8002e40 <HAL_DMA_IRQHandler+0x400>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d040      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HAL_DMA_IRQHandler+0x404>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d03b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_DMA_IRQHandler+0x408>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d036      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a61      	ldr	r2, [pc, #388]	; (8002e4c <HAL_DMA_IRQHandler+0x40c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d031      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_DMA_IRQHandler+0x410>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02c      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5e      	ldr	r2, [pc, #376]	; (8002e54 <HAL_DMA_IRQHandler+0x414>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d027      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_DMA_IRQHandler+0x418>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5b      	ldr	r2, [pc, #364]	; (8002e5c <HAL_DMA_IRQHandler+0x41c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <HAL_DMA_IRQHandler+0x420>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_DMA_IRQHandler+0x424>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_DMA_IRQHandler+0x428>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a55      	ldr	r2, [pc, #340]	; (8002e6c <HAL_DMA_IRQHandler+0x42c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a54      	ldr	r2, [pc, #336]	; (8002e70 <HAL_DMA_IRQHandler+0x430>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x2ee>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_DMA_IRQHandler+0x434>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10a      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x304>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e003      	b.n	8002d4c <HAL_DMA_IRQHandler+0x30c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2204      	movs	r2, #4
 8002d76:	409a      	lsls	r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 808f 	beq.w	8002ea0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <HAL_DMA_IRQHandler+0x3f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d04a      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2a      	ldr	r2, [pc, #168]	; (8002e3c <HAL_DMA_IRQHandler+0x3fc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d045      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_DMA_IRQHandler+0x400>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d040      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <HAL_DMA_IRQHandler+0x404>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d03b      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_DMA_IRQHandler+0x408>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d036      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <HAL_DMA_IRQHandler+0x40c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d031      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <HAL_DMA_IRQHandler+0x410>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d02c      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_DMA_IRQHandler+0x414>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d027      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_DMA_IRQHandler+0x418>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_DMA_IRQHandler+0x41c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_DMA_IRQHandler+0x420>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_DMA_IRQHandler+0x424>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <HAL_DMA_IRQHandler+0x428>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_DMA_IRQHandler+0x42c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_DMA_IRQHandler+0x430>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x3e2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_DMA_IRQHandler+0x434>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d12a      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x438>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e023      	b.n	8002e80 <HAL_DMA_IRQHandler+0x440>
 8002e38:	40020010 	.word	0x40020010
 8002e3c:	40020028 	.word	0x40020028
 8002e40:	40020040 	.word	0x40020040
 8002e44:	40020058 	.word	0x40020058
 8002e48:	40020070 	.word	0x40020070
 8002e4c:	40020088 	.word	0x40020088
 8002e50:	400200a0 	.word	0x400200a0
 8002e54:	400200b8 	.word	0x400200b8
 8002e58:	40020410 	.word	0x40020410
 8002e5c:	40020428 	.word	0x40020428
 8002e60:	40020440 	.word	0x40020440
 8002e64:	40020458 	.word	0x40020458
 8002e68:	40020470 	.word	0x40020470
 8002e6c:	40020488 	.word	0x40020488
 8002e70:	400204a0 	.word	0x400204a0
 8002e74:	400204b8 	.word	0x400204b8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a6 	beq.w	8003002 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a85      	ldr	r2, [pc, #532]	; (80030d0 <HAL_DMA_IRQHandler+0x690>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a83      	ldr	r2, [pc, #524]	; (80030d4 <HAL_DMA_IRQHandler+0x694>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a82      	ldr	r2, [pc, #520]	; (80030d8 <HAL_DMA_IRQHandler+0x698>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a80      	ldr	r2, [pc, #512]	; (80030dc <HAL_DMA_IRQHandler+0x69c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7f      	ldr	r2, [pc, #508]	; (80030e0 <HAL_DMA_IRQHandler+0x6a0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7d      	ldr	r2, [pc, #500]	; (80030e4 <HAL_DMA_IRQHandler+0x6a4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7c      	ldr	r2, [pc, #496]	; (80030e8 <HAL_DMA_IRQHandler+0x6a8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a7a      	ldr	r2, [pc, #488]	; (80030ec <HAL_DMA_IRQHandler+0x6ac>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a79      	ldr	r2, [pc, #484]	; (80030f0 <HAL_DMA_IRQHandler+0x6b0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a77      	ldr	r2, [pc, #476]	; (80030f4 <HAL_DMA_IRQHandler+0x6b4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a76      	ldr	r2, [pc, #472]	; (80030f8 <HAL_DMA_IRQHandler+0x6b8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a74      	ldr	r2, [pc, #464]	; (80030fc <HAL_DMA_IRQHandler+0x6bc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a73      	ldr	r2, [pc, #460]	; (8003100 <HAL_DMA_IRQHandler+0x6c0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a71      	ldr	r2, [pc, #452]	; (8003104 <HAL_DMA_IRQHandler+0x6c4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a70      	ldr	r2, [pc, #448]	; (8003108 <HAL_DMA_IRQHandler+0x6c8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x516>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_DMA_IRQHandler+0x6cc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10a      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x52c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e009      	b.n	8002f80 <HAL_DMA_IRQHandler+0x540>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d03e      	beq.n	8003002 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d108      	bne.n	8002fc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d024      	beq.n	8003002 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e01f      	b.n	8003002 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01b      	beq.n	8003002 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
 8002fd2:	e016      	b.n	8003002 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2220      	movs	r2, #32
 800300c:	409a      	lsls	r2, r3
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8110 	beq.w	8003238 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <HAL_DMA_IRQHandler+0x690>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04a      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <HAL_DMA_IRQHandler+0x694>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d045      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <HAL_DMA_IRQHandler+0x698>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d040      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_DMA_IRQHandler+0x69c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d03b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d036      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d031      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a23      	ldr	r2, [pc, #140]	; (80030e8 <HAL_DMA_IRQHandler+0x6a8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d02c      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_DMA_IRQHandler+0x6ac>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d027      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <HAL_DMA_IRQHandler+0x6b0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d022      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d01d      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d018      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_DMA_IRQHandler+0x6bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1a      	ldr	r2, [pc, #104]	; (8003100 <HAL_DMA_IRQHandler+0x6c0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_DMA_IRQHandler+0x6c4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_DMA_IRQHandler+0x6c8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x678>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_DMA_IRQHandler+0x6cc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d12b      	bne.n	8003110 <HAL_DMA_IRQHandler+0x6d0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e02a      	b.n	8003124 <HAL_DMA_IRQHandler+0x6e4>
 80030ce:	bf00      	nop
 80030d0:	40020010 	.word	0x40020010
 80030d4:	40020028 	.word	0x40020028
 80030d8:	40020040 	.word	0x40020040
 80030dc:	40020058 	.word	0x40020058
 80030e0:	40020070 	.word	0x40020070
 80030e4:	40020088 	.word	0x40020088
 80030e8:	400200a0 	.word	0x400200a0
 80030ec:	400200b8 	.word	0x400200b8
 80030f0:	40020410 	.word	0x40020410
 80030f4:	40020428 	.word	0x40020428
 80030f8:	40020440 	.word	0x40020440
 80030fc:	40020458 	.word	0x40020458
 8003100:	40020470 	.word	0x40020470
 8003104:	40020488 	.word	0x40020488
 8003108:	400204a0 	.word	0x400204a0
 800310c:	400204b8 	.word	0x400204b8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf14      	ite	ne
 800311e:	2301      	movne	r3, #1
 8003120:	2300      	moveq	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8087 	beq.w	8003238 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2220      	movs	r2, #32
 8003134:	409a      	lsls	r2, r3
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b04      	cmp	r3, #4
 8003144:	d139      	bne.n	80031ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003164:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_IRQHandler+0x736>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	223f      	movs	r2, #63	; 0x3f
 8003190:	409a      	lsls	r2, r3
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 834a 	beq.w	8003844 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
          }
          return;
 80031b8:	e344      	b.n	8003844 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d108      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02c      	beq.n	8003238 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
 80031e6:	e027      	b.n	8003238 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e01e      	b.n	8003238 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8306 	beq.w	800384e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8088 	beq.w	8003360 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2204      	movs	r2, #4
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_DMA_IRQHandler+0xa08>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a79      	ldr	r2, [pc, #484]	; (800344c <HAL_DMA_IRQHandler+0xa0c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a77      	ldr	r2, [pc, #476]	; (8003450 <HAL_DMA_IRQHandler+0xa10>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a76      	ldr	r2, [pc, #472]	; (8003454 <HAL_DMA_IRQHandler+0xa14>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a74      	ldr	r2, [pc, #464]	; (8003458 <HAL_DMA_IRQHandler+0xa18>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a73      	ldr	r2, [pc, #460]	; (800345c <HAL_DMA_IRQHandler+0xa1c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a71      	ldr	r2, [pc, #452]	; (8003460 <HAL_DMA_IRQHandler+0xa20>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a70      	ldr	r2, [pc, #448]	; (8003464 <HAL_DMA_IRQHandler+0xa24>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_DMA_IRQHandler+0xa28>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6d      	ldr	r2, [pc, #436]	; (800346c <HAL_DMA_IRQHandler+0xa2c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_DMA_IRQHandler+0xa30>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6a      	ldr	r2, [pc, #424]	; (8003474 <HAL_DMA_IRQHandler+0xa34>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a68      	ldr	r2, [pc, #416]	; (8003478 <HAL_DMA_IRQHandler+0xa38>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_DMA_IRQHandler+0xa3c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_DMA_IRQHandler+0xa40>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x8b8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a64      	ldr	r2, [pc, #400]	; (8003484 <HAL_DMA_IRQHandler+0xa44>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d108      	bne.n	800330a <HAL_DMA_IRQHandler+0x8ca>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e007      	b.n	800331a <HAL_DMA_IRQHandler+0x8da>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	429a      	cmp	r2, r3
 8003324:	d307      	bcc.n	8003336 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f2      	bne.n	800331a <HAL_DMA_IRQHandler+0x8da>
 8003334:	e000      	b.n	8003338 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003336:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800334e:	e003      	b.n	8003358 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8272 	beq.w	800384e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	e26c      	b.n	800384e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a43      	ldr	r2, [pc, #268]	; (8003488 <HAL_DMA_IRQHandler+0xa48>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d022      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a42      	ldr	r2, [pc, #264]	; (800348c <HAL_DMA_IRQHandler+0xa4c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d01d      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a40      	ldr	r2, [pc, #256]	; (8003490 <HAL_DMA_IRQHandler+0xa50>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d018      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a3f      	ldr	r2, [pc, #252]	; (8003494 <HAL_DMA_IRQHandler+0xa54>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <HAL_DMA_IRQHandler+0xa58>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00e      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a3c      	ldr	r2, [pc, #240]	; (800349c <HAL_DMA_IRQHandler+0xa5c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <HAL_DMA_IRQHandler+0xa60>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x984>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a39      	ldr	r2, [pc, #228]	; (80034a4 <HAL_DMA_IRQHandler+0xa64>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x988>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <HAL_DMA_IRQHandler+0x98a>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 823f 	beq.w	800384e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2204      	movs	r2, #4
 80033e2:	409a      	lsls	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80cd 	beq.w	8003588 <HAL_DMA_IRQHandler+0xb48>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80c7 	beq.w	8003588 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2204      	movs	r2, #4
 8003404:	409a      	lsls	r2, r3
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d049      	beq.n	80034a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8210 	beq.w	8003848 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003430:	e20a      	b.n	8003848 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8206 	beq.w	8003848 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003444:	e200      	b.n	8003848 <HAL_DMA_IRQHandler+0xe08>
 8003446:	bf00      	nop
 8003448:	40020010 	.word	0x40020010
 800344c:	40020028 	.word	0x40020028
 8003450:	40020040 	.word	0x40020040
 8003454:	40020058 	.word	0x40020058
 8003458:	40020070 	.word	0x40020070
 800345c:	40020088 	.word	0x40020088
 8003460:	400200a0 	.word	0x400200a0
 8003464:	400200b8 	.word	0x400200b8
 8003468:	40020410 	.word	0x40020410
 800346c:	40020428 	.word	0x40020428
 8003470:	40020440 	.word	0x40020440
 8003474:	40020458 	.word	0x40020458
 8003478:	40020470 	.word	0x40020470
 800347c:	40020488 	.word	0x40020488
 8003480:	400204a0 	.word	0x400204a0
 8003484:	400204b8 	.word	0x400204b8
 8003488:	58025408 	.word	0x58025408
 800348c:	5802541c 	.word	0x5802541c
 8003490:	58025430 	.word	0x58025430
 8003494:	58025444 	.word	0x58025444
 8003498:	58025458 	.word	0x58025458
 800349c:	5802546c 	.word	0x5802546c
 80034a0:	58025480 	.word	0x58025480
 80034a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d160      	bne.n	8003574 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7f      	ldr	r2, [pc, #508]	; (80036b4 <HAL_DMA_IRQHandler+0xc74>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a7d      	ldr	r2, [pc, #500]	; (80036b8 <HAL_DMA_IRQHandler+0xc78>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7c      	ldr	r2, [pc, #496]	; (80036bc <HAL_DMA_IRQHandler+0xc7c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a7a      	ldr	r2, [pc, #488]	; (80036c0 <HAL_DMA_IRQHandler+0xc80>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a79      	ldr	r2, [pc, #484]	; (80036c4 <HAL_DMA_IRQHandler+0xc84>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_DMA_IRQHandler+0xc88>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a76      	ldr	r2, [pc, #472]	; (80036cc <HAL_DMA_IRQHandler+0xc8c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a74      	ldr	r2, [pc, #464]	; (80036d0 <HAL_DMA_IRQHandler+0xc90>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a73      	ldr	r2, [pc, #460]	; (80036d4 <HAL_DMA_IRQHandler+0xc94>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a71      	ldr	r2, [pc, #452]	; (80036d8 <HAL_DMA_IRQHandler+0xc98>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a70      	ldr	r2, [pc, #448]	; (80036dc <HAL_DMA_IRQHandler+0xc9c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_DMA_IRQHandler+0xca0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6d      	ldr	r2, [pc, #436]	; (80036e4 <HAL_DMA_IRQHandler+0xca4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6b      	ldr	r2, [pc, #428]	; (80036e8 <HAL_DMA_IRQHandler+0xca8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6a      	ldr	r2, [pc, #424]	; (80036ec <HAL_DMA_IRQHandler+0xcac>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_IRQHandler+0xb12>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a68      	ldr	r2, [pc, #416]	; (80036f0 <HAL_DMA_IRQHandler+0xcb0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0xb24>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e007      	b.n	8003574 <HAL_DMA_IRQHandler+0xb34>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8165 	beq.w	8003848 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003586:	e15f      	b.n	8003848 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2202      	movs	r2, #2
 8003592:	409a      	lsls	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80c5 	beq.w	8003728 <HAL_DMA_IRQHandler+0xce8>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80bf 	beq.w	8003728 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2202      	movs	r2, #2
 80035b4:	409a      	lsls	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 813a 	beq.w	800384c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035e0:	e134      	b.n	800384c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8130 	beq.w	800384c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035f4:	e12a      	b.n	800384c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 8089 	bne.w	8003714 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <HAL_DMA_IRQHandler+0xc74>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04a      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <HAL_DMA_IRQHandler+0xc78>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d045      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_DMA_IRQHandler+0xc7c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d040      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <HAL_DMA_IRQHandler+0xc80>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d03b      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <HAL_DMA_IRQHandler+0xc84>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d036      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_DMA_IRQHandler+0xc88>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_DMA_IRQHandler+0xc8c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d02c      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <HAL_DMA_IRQHandler+0xc90>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d027      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_DMA_IRQHandler+0xc94>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d022      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_DMA_IRQHandler+0xc98>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01d      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <HAL_DMA_IRQHandler+0xc9c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <HAL_DMA_IRQHandler+0xca0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_DMA_IRQHandler+0xca4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_DMA_IRQHandler+0xca8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_DMA_IRQHandler+0xcac>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_DMA_IRQHandler+0xc62>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_DMA_IRQHandler+0xcb0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d128      	bne.n	80036f4 <HAL_DMA_IRQHandler+0xcb4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0214 	bic.w	r2, r2, #20
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e027      	b.n	8003704 <HAL_DMA_IRQHandler+0xcc4>
 80036b4:	40020010 	.word	0x40020010
 80036b8:	40020028 	.word	0x40020028
 80036bc:	40020040 	.word	0x40020040
 80036c0:	40020058 	.word	0x40020058
 80036c4:	40020070 	.word	0x40020070
 80036c8:	40020088 	.word	0x40020088
 80036cc:	400200a0 	.word	0x400200a0
 80036d0:	400200b8 	.word	0x400200b8
 80036d4:	40020410 	.word	0x40020410
 80036d8:	40020428 	.word	0x40020428
 80036dc:	40020440 	.word	0x40020440
 80036e0:	40020458 	.word	0x40020458
 80036e4:	40020470 	.word	0x40020470
 80036e8:	40020488 	.word	0x40020488
 80036ec:	400204a0 	.word	0x400204a0
 80036f0:	400204b8 	.word	0x400204b8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020a 	bic.w	r2, r2, #10
 8003702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8097 	beq.w	800384c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003726:	e091      	b.n	800384c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2208      	movs	r2, #8
 8003732:	409a      	lsls	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8088 	beq.w	800384e <HAL_DMA_IRQHandler+0xe0e>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8082 	beq.w	800384e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_DMA_IRQHandler+0xe14>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <HAL_DMA_IRQHandler+0xe18>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3e      	ldr	r2, [pc, #248]	; (800385c <HAL_DMA_IRQHandler+0xe1c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3c      	ldr	r2, [pc, #240]	; (8003860 <HAL_DMA_IRQHandler+0xe20>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <HAL_DMA_IRQHandler+0xe24>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a39      	ldr	r2, [pc, #228]	; (8003868 <HAL_DMA_IRQHandler+0xe28>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a38      	ldr	r2, [pc, #224]	; (800386c <HAL_DMA_IRQHandler+0xe2c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a36      	ldr	r2, [pc, #216]	; (8003870 <HAL_DMA_IRQHandler+0xe30>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a35      	ldr	r2, [pc, #212]	; (8003874 <HAL_DMA_IRQHandler+0xe34>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a33      	ldr	r2, [pc, #204]	; (8003878 <HAL_DMA_IRQHandler+0xe38>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a32      	ldr	r2, [pc, #200]	; (800387c <HAL_DMA_IRQHandler+0xe3c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a30      	ldr	r2, [pc, #192]	; (8003880 <HAL_DMA_IRQHandler+0xe40>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <HAL_DMA_IRQHandler+0xe44>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2d      	ldr	r2, [pc, #180]	; (8003888 <HAL_DMA_IRQHandler+0xe48>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	; (800388c <HAL_DMA_IRQHandler+0xe4c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_IRQHandler+0xdaa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <HAL_DMA_IRQHandler+0xe50>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <HAL_DMA_IRQHandler+0xdbc>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 021c 	bic.w	r2, r2, #28
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e007      	b.n	800380c <HAL_DMA_IRQHandler+0xdcc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 020e 	bic.w	r2, r2, #14
 800380a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
 8003842:	e004      	b.n	800384e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8

08003894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a42      	ldr	r2, [pc, #264]	; (80039ac <DMA_CalcBaseAndBitshift+0x118>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d04a      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d045      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3f      	ldr	r2, [pc, #252]	; (80039b4 <DMA_CalcBaseAndBitshift+0x120>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d040      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3e      	ldr	r2, [pc, #248]	; (80039b8 <DMA_CalcBaseAndBitshift+0x124>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d03b      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <DMA_CalcBaseAndBitshift+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d036      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d031      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a39      	ldr	r2, [pc, #228]	; (80039c4 <DMA_CalcBaseAndBitshift+0x130>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02c      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <DMA_CalcBaseAndBitshift+0x134>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d027      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a36      	ldr	r2, [pc, #216]	; (80039cc <DMA_CalcBaseAndBitshift+0x138>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a35      	ldr	r2, [pc, #212]	; (80039d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01d      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <DMA_CalcBaseAndBitshift+0x140>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d018      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <DMA_CalcBaseAndBitshift+0x144>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a30      	ldr	r2, [pc, #192]	; (80039dc <DMA_CalcBaseAndBitshift+0x148>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <DMA_CalcBaseAndBitshift+0x150>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <DMA_CalcBaseAndBitshift+0xa8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <DMA_CalcBaseAndBitshift+0x154>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <DMA_CalcBaseAndBitshift+0xac>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <DMA_CalcBaseAndBitshift+0xae>
 8003940:	2300      	movs	r3, #0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d024      	beq.n	8003990 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3b10      	subs	r3, #16
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <DMA_CalcBaseAndBitshift+0x158>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003960:	5cd3      	ldrb	r3, [r2, r3]
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d908      	bls.n	8003980 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <DMA_CalcBaseAndBitshift+0x160>)
 8003976:	4013      	ands	r3, r2
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	659a      	str	r2, [r3, #88]	; 0x58
 800397e:	e00d      	b.n	800399c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <DMA_CalcBaseAndBitshift+0x160>)
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6593      	str	r3, [r2, #88]	; 0x58
 800398e:	e005      	b.n	800399c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40020010 	.word	0x40020010
 80039b0:	40020028 	.word	0x40020028
 80039b4:	40020040 	.word	0x40020040
 80039b8:	40020058 	.word	0x40020058
 80039bc:	40020070 	.word	0x40020070
 80039c0:	40020088 	.word	0x40020088
 80039c4:	400200a0 	.word	0x400200a0
 80039c8:	400200b8 	.word	0x400200b8
 80039cc:	40020410 	.word	0x40020410
 80039d0:	40020428 	.word	0x40020428
 80039d4:	40020440 	.word	0x40020440
 80039d8:	40020458 	.word	0x40020458
 80039dc:	40020470 	.word	0x40020470
 80039e0:	40020488 	.word	0x40020488
 80039e4:	400204a0 	.word	0x400204a0
 80039e8:	400204b8 	.word	0x400204b8
 80039ec:	aaaaaaab 	.word	0xaaaaaaab
 80039f0:	08009e6c 	.word	0x08009e6c
 80039f4:	fffffc00 	.word	0xfffffc00

080039f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d120      	bne.n	8003a4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d858      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xce>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <DMA_CheckFifoParam+0x24>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3f 	.word	0x08003a3f
 8003a24:	08003a2d 	.word	0x08003a2d
 8003a28:	08003ac7 	.word	0x08003ac7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d048      	beq.n	8003aca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a3c:	e045      	b.n	8003aca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a46:	d142      	bne.n	8003ace <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a4c:	e03f      	b.n	8003ace <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	d123      	bne.n	8003aa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d838      	bhi.n	8003ad2 <DMA_CheckFifoParam+0xda>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <DMA_CheckFifoParam+0x70>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003a7f 	.word	0x08003a7f
 8003a70:	08003a79 	.word	0x08003a79
 8003a74:	08003a91 	.word	0x08003a91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7c:	e030      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d025      	beq.n	8003ad6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a8e:	e022      	b.n	8003ad6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a98:	d11f      	bne.n	8003ada <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a9e:	e01c      	b.n	8003ada <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d902      	bls.n	8003aae <DMA_CheckFifoParam+0xb6>
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d003      	beq.n	8003ab4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003aac:	e018      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e015      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ac4:	e00b      	b.n	8003ade <DMA_CheckFifoParam+0xe6>
        break;
 8003ac6:	bf00      	nop
 8003ac8:	e00a      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8003aca:	bf00      	nop
 8003acc:	e008      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e006      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e004      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <DMA_CheckFifoParam+0xe8>
    break;
 8003ade:	bf00      	nop
    }
  }

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a38      	ldr	r2, [pc, #224]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a36      	ldr	r2, [pc, #216]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a35      	ldr	r2, [pc, #212]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01a      	beq.n	8003b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3b08      	subs	r3, #8
 8003b60:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2201      	movs	r2, #1
 8003b86:	409a      	lsls	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b8c:	e024      	b.n	8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3b10      	subs	r3, #16
 8003b96:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d806      	bhi.n	8003bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d902      	bls.n	8003bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003bc8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	58025408 	.word	0x58025408
 8003be8:	5802541c 	.word	0x5802541c
 8003bec:	58025430 	.word	0x58025430
 8003bf0:	58025444 	.word	0x58025444
 8003bf4:	58025458 	.word	0x58025458
 8003bf8:	5802546c 	.word	0x5802546c
 8003bfc:	58025480 	.word	0x58025480
 8003c00:	58025494 	.word	0x58025494
 8003c04:	cccccccd 	.word	0xcccccccd
 8003c08:	16009600 	.word	0x16009600
 8003c0c:	58025880 	.word	0x58025880
 8003c10:	aaaaaaab 	.word	0xaaaaaaab
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	4002040f 	.word	0x4002040f
 8003c1c:	10008200 	.word	0x10008200
 8003c20:	40020880 	.word	0x40020880

08003c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d04a      	beq.n	8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d847      	bhi.n	8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d022      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d01d      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d018      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003cac:	671a      	str	r2, [r3, #112]	; 0x70
 8003cae:	e009      	b.n	8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cc2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	2201      	movs	r2, #1
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	58025408 	.word	0x58025408
 8003ce0:	5802541c 	.word	0x5802541c
 8003ce4:	58025430 	.word	0x58025430
 8003ce8:	58025444 	.word	0x58025444
 8003cec:	58025458 	.word	0x58025458
 8003cf0:	5802546c 	.word	0x5802546c
 8003cf4:	58025480 	.word	0x58025480
 8003cf8:	58025494 	.word	0x58025494
 8003cfc:	1600963f 	.word	0x1600963f
 8003d00:	58025940 	.word	0x58025940
 8003d04:	1000823f 	.word	0x1000823f
 8003d08:	40020940 	.word	0x40020940

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d1a:	4b86      	ldr	r3, [pc, #536]	; (8003f34 <HAL_GPIO_Init+0x228>)
 8003d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d1e:	e18c      	b.n	800403a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2101      	movs	r1, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 817e 	beq.w	8004034 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d005      	beq.n	8003d50 <HAL_GPIO_Init+0x44>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d130      	bne.n	8003db2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d86:	2201      	movs	r2, #1
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0201 	and.w	r2, r3, #1
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d017      	beq.n	8003dee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	2203      	movs	r2, #3
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d123      	bne.n	8003e42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	08da      	lsrs	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3208      	adds	r2, #8
 8003e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	08da      	lsrs	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3208      	adds	r2, #8
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80d8 	beq.w	8004034 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e84:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_GPIO_Init+0x22c>)
 8003e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <HAL_GPIO_Init+0x22c>)
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_GPIO_Init+0x22c>)
 8003e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ea2:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <HAL_GPIO_Init+0x230>)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <HAL_GPIO_Init+0x234>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d04a      	beq.n	8003f64 <HAL_GPIO_Init+0x258>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <HAL_GPIO_Init+0x238>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x222>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_GPIO_Init+0x23c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x21e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_GPIO_Init+0x240>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x21a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_GPIO_Init+0x244>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x216>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_GPIO_Init+0x248>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x212>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_GPIO_Init+0x24c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x20e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <HAL_GPIO_Init+0x250>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x20a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <HAL_GPIO_Init+0x254>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x206>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	e029      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e027      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e025      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f1a:	2306      	movs	r3, #6
 8003f1c:	e023      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f1e:	2305      	movs	r3, #5
 8003f20:	e021      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f22:	2304      	movs	r3, #4
 8003f24:	e01f      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f26:	2303      	movs	r3, #3
 8003f28:	e01d      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e01b      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e019      	b.n	8003f66 <HAL_GPIO_Init+0x25a>
 8003f32:	bf00      	nop
 8003f34:	58000080 	.word	0x58000080
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	58000400 	.word	0x58000400
 8003f40:	58020000 	.word	0x58020000
 8003f44:	58020400 	.word	0x58020400
 8003f48:	58020800 	.word	0x58020800
 8003f4c:	58020c00 	.word	0x58020c00
 8003f50:	58021000 	.word	0x58021000
 8003f54:	58021400 	.word	0x58021400
 8003f58:	58021800 	.word	0x58021800
 8003f5c:	58021c00 	.word	0x58021c00
 8003f60:	58022400 	.word	0x58022400
 8003f64:	2300      	movs	r3, #0
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	f002 0203 	and.w	r2, r2, #3
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	4093      	lsls	r3, r2
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f76:	4938      	ldr	r1, [pc, #224]	; (8004058 <HAL_GPIO_Init+0x34c>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f ae6b 	bne.w	8003d20 <HAL_GPIO_Init+0x14>
  }
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	3724      	adds	r7, #36	; 0x24
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	58000400 	.word	0x58000400

0800405c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
 8004068:	4613      	mov	r3, r2
 800406a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800406c:	787b      	ldrb	r3, [r7, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004078:	e003      	b.n	8004082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	041a      	lsls	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fab5 	bl	8000624 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_PWREx_ConfigSupply+0x70>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00a      	beq.n	80040ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_PWREx_ConfigSupply+0x70>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e01f      	b.n	800412a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e01d      	b.n	800412a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_PWREx_ConfigSupply+0x70>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 0207 	bic.w	r2, r3, #7
 80040f6:	490f      	ldr	r1, [pc, #60]	; (8004134 <HAL_PWREx_ConfigSupply+0x70>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040fe:	f7fd faa1 	bl	8001644 <HAL_GetTick>
 8004102:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004104:	e009      	b.n	800411a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004106:	f7fd fa9d 	bl	8001644 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004114:	d901      	bls.n	800411a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e007      	b.n	800412a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_PWREx_ConfigSupply+0x70>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	d1ee      	bne.n	8004106 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	58024800 	.word	0x58024800

08004138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08c      	sub	sp, #48	; 0x30
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e39d      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8087 	beq.w	8004266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004158:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x244>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004162:	4b86      	ldr	r3, [pc, #536]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	2b10      	cmp	r3, #16
 800416c:	d007      	beq.n	800417e <HAL_RCC_OscConfig+0x46>
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	2b18      	cmp	r3, #24
 8004172:	d110      	bne.n	8004196 <HAL_RCC_OscConfig+0x5e>
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d10b      	bne.n	8004196 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417e:	4b7f      	ldr	r3, [pc, #508]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d06c      	beq.n	8004264 <HAL_RCC_OscConfig+0x12c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d168      	bne.n	8004264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e377      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d106      	bne.n	80041ae <HAL_RCC_OscConfig+0x76>
 80041a0:	4b76      	ldr	r3, [pc, #472]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a75      	ldr	r2, [pc, #468]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	e02e      	b.n	800420c <HAL_RCC_OscConfig+0xd4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x98>
 80041b6:	4b71      	ldr	r3, [pc, #452]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a70      	ldr	r2, [pc, #448]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b6e      	ldr	r3, [pc, #440]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a6d      	ldr	r2, [pc, #436]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xd4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0xbc>
 80041da:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a67      	ldr	r2, [pc, #412]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a64      	ldr	r2, [pc, #400]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xd4>
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a60      	ldr	r2, [pc, #384]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b5e      	ldr	r3, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd fa16 	bl	8001644 <HAL_GetTick>
 8004218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fd fa12 	bl	8001644 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e32b      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800422e:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xe4>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fa02 	bl	8001644 <HAL_GetTick>
 8004240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fd f9fe 	bl	8001644 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e317      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004256:	4b49      	ldr	r3, [pc, #292]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x10c>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 808c 	beq.w	800438c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004274:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800427c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_RCC_OscConfig+0x162>
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	2b18      	cmp	r3, #24
 800428e:	d137      	bne.n	8004300 <HAL_RCC_OscConfig+0x1c8>
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d132      	bne.n	8004300 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429a:	4b38      	ldr	r3, [pc, #224]	; (800437c <HAL_RCC_OscConfig+0x244>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_RCC_OscConfig+0x17a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e2e9      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042b2:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0219 	bic.w	r2, r3, #25
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	492f      	ldr	r1, [pc, #188]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042c4:	f7fd f9be 	bl	8001644 <HAL_GetTick>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042cc:	f7fd f9ba 	bl	8001644 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e2d3      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042de:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	061b      	lsls	r3, r3, #24
 80042f8:	4920      	ldr	r1, [pc, #128]	; (800437c <HAL_RCC_OscConfig+0x244>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fe:	e045      	b.n	800438c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d026      	beq.n	8004356 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <HAL_RCC_OscConfig+0x244>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 0219 	bic.w	r2, r3, #25
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4919      	ldr	r1, [pc, #100]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd f993 	bl	8001644 <HAL_GetTick>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004322:	f7fd f98f 	bl	8001644 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e2a8      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	490b      	ldr	r1, [pc, #44]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
 8004354:	e01a      	b.n	800438c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_OscConfig+0x244>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a08      	ldr	r2, [pc, #32]	; (800437c <HAL_RCC_OscConfig+0x244>)
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd f96f 	bl	8001644 <HAL_GetTick>
 8004366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7fd f96b 	bl	8001644 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d903      	bls.n	8004380 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e284      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
 800437c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004380:	4b96      	ldr	r3, [pc, #600]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ee      	bne.n	800436a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d06a      	beq.n	800446e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004398:	4b90      	ldr	r3, [pc, #576]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043a2:	4b8e      	ldr	r3, [pc, #568]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d007      	beq.n	80043be <HAL_RCC_OscConfig+0x286>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b18      	cmp	r3, #24
 80043b2:	d11b      	bne.n	80043ec <HAL_RCC_OscConfig+0x2b4>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d116      	bne.n	80043ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043be:	4b87      	ldr	r3, [pc, #540]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x29e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e257      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043d6:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	061b      	lsls	r3, r3, #24
 80043e4:	497d      	ldr	r1, [pc, #500]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ea:	e040      	b.n	800446e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d023      	beq.n	800443c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043f4:	4b79      	ldr	r3, [pc, #484]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a78      	ldr	r2, [pc, #480]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80043fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd f920 	bl	8001644 <HAL_GetTick>
 8004404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004408:	f7fd f91c 	bl	8001644 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e235      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800441a:	4b70      	ldr	r3, [pc, #448]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004426:	4b6d      	ldr	r3, [pc, #436]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	4969      	ldr	r1, [pc, #420]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	60cb      	str	r3, [r1, #12]
 800443a:	e018      	b.n	800446e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800443c:	4b67      	ldr	r3, [pc, #412]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a66      	ldr	r2, [pc, #408]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fd f8fc 	bl	8001644 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004450:	f7fd f8f8 	bl	8001644 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e211      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004462:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d019      	beq.n	80044b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b56      	ldr	r3, [pc, #344]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	4a55      	ldr	r2, [pc, #340]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fd f8d9 	bl	8001644 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004496:	f7fd f8d5 	bl	8001644 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e1ee      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044a8:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80044aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x35e>
 80044b4:	e018      	b.n	80044e8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b6:	4b49      	ldr	r3, [pc, #292]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	4a48      	ldr	r2, [pc, #288]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd f8bf 	bl	8001644 <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fd f8bb 	bl	8001644 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1d4      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044dc:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80044de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d036      	beq.n	8004562 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d019      	beq.n	8004530 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a36      	ldr	r2, [pc, #216]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004506:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004508:	f7fd f89c 	bl	8001644 <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004510:	f7fd f898 	bl	8001644 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e1b1      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004522:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x3d8>
 800452e:	e018      	b.n	8004562 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800453c:	f7fd f882 	bl	8001644 <HAL_GetTick>
 8004540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004544:	f7fd f87e 	bl	8001644 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e197      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8086 	beq.w	800467c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x4a8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1a      	ldr	r2, [pc, #104]	; (80045e0 <HAL_RCC_OscConfig+0x4a8>)
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800457c:	f7fd f862 	bl	8001644 <HAL_GetTick>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004584:	f7fd f85e 	bl	8001644 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e177      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_RCC_OscConfig+0x4a8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x480>
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	e032      	b.n	800461e <HAL_RCC_OscConfig+0x4e6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d111      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4ac>
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a05      	ldr	r2, [pc, #20]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <HAL_RCC_OscConfig+0x4a4>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	e021      	b.n	800461e <HAL_RCC_OscConfig+0x4e6>
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
 80045e0:	58024800 	.word	0x58024800
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_OscConfig+0x4ce>
 80045ec:	4b83      	ldr	r3, [pc, #524]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a82      	ldr	r2, [pc, #520]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	4b80      	ldr	r3, [pc, #512]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a7f      	ldr	r2, [pc, #508]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	e00b      	b.n	800461e <HAL_RCC_OscConfig+0x4e6>
 8004606:	4b7d      	ldr	r3, [pc, #500]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a7c      	ldr	r2, [pc, #496]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	4b7a      	ldr	r3, [pc, #488]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a79      	ldr	r2, [pc, #484]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d015      	beq.n	8004652 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fd f80d 	bl	8001644 <HAL_GetTick>
 800462a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd f809 	bl	8001644 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e120      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004644:	4b6d      	ldr	r3, [pc, #436]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0ee      	beq.n	800462e <HAL_RCC_OscConfig+0x4f6>
 8004650:	e014      	b.n	800467c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fc fff7 	bl	8001644 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fc fff3 	bl	8001644 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e10a      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004670:	4b62      	ldr	r3, [pc, #392]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ee      	bne.n	800465a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80ff 	beq.w	8004884 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004686:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468e:	2b18      	cmp	r3, #24
 8004690:	f000 80ba 	beq.w	8004808 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b02      	cmp	r3, #2
 800469a:	f040 8095 	bne.w	80047c8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b57      	ldr	r3, [pc, #348]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a56      	ldr	r2, [pc, #344]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80046a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fc ffcb 	bl	8001644 <HAL_GetTick>
 80046ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fc ffc7 	bl	8001644 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0e0      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046c4:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d0:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80046d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d4:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_RCC_OscConfig+0x6c8>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	430a      	orrs	r2, r1
 80046e4:	4945      	ldr	r1, [pc, #276]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	628b      	str	r3, [r1, #40]	; 0x28
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	3b01      	subs	r3, #1
 80046f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	3b01      	subs	r3, #1
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	3b01      	subs	r3, #1
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	3b01      	subs	r3, #1
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800471a:	4938      	ldr	r1, [pc, #224]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800471c:	4313      	orrs	r3, r2
 800471e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a35      	ldr	r2, [pc, #212]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800472c:	4b33      	ldr	r3, [pc, #204]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800472e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <HAL_RCC_OscConfig+0x6cc>)
 8004732:	4013      	ands	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004738:	00d2      	lsls	r2, r2, #3
 800473a:	4930      	ldr	r1, [pc, #192]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004740:	4b2e      	ldr	r3, [pc, #184]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f023 020c 	bic.w	r2, r3, #12
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	492b      	ldr	r1, [pc, #172]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f023 0202 	bic.w	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4927      	ldr	r1, [pc, #156]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004764:	4b25      	ldr	r3, [pc, #148]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4a21      	ldr	r2, [pc, #132]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800477c:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004794:	4b19      	ldr	r3, [pc, #100]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fc ff50 	bl	8001644 <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fc ff4c 	bl	8001644 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e065      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x670>
 80047c6:	e05d      	b.n	8004884 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0b      	ldr	r2, [pc, #44]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fc ff36 	bl	8001644 <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fc ff32 	bl	8001644 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04b      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ee:	4b03      	ldr	r3, [pc, #12]	; (80047fc <HAL_RCC_OscConfig+0x6c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x6a4>
 80047fa:	e043      	b.n	8004884 <HAL_RCC_OscConfig+0x74c>
 80047fc:	58024400 	.word	0x58024400
 8004800:	fffffc0c 	.word	0xfffffc0c
 8004804:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004808:	4b21      	ldr	r3, [pc, #132]	; (8004890 <HAL_RCC_OscConfig+0x758>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCC_OscConfig+0x758>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b01      	cmp	r3, #1
 800481a:	d031      	beq.n	8004880 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f003 0203 	and.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d12a      	bne.n	8004880 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d122      	bne.n	8004880 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d11a      	bne.n	8004880 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d111      	bne.n	8004880 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d108      	bne.n	8004880 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	0e1b      	lsrs	r3, r3, #24
 8004872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3730      	adds	r7, #48	; 0x30
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400

08004894 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e19c      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b8a      	ldr	r3, [pc, #552]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d910      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b87      	ldr	r3, [pc, #540]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 020f 	bic.w	r2, r3, #15
 80048be:	4985      	ldr	r1, [pc, #532]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b83      	ldr	r3, [pc, #524]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e184      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	4b7b      	ldr	r3, [pc, #492]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d908      	bls.n	8004906 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048f4:	4b78      	ldr	r3, [pc, #480]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	4975      	ldr	r1, [pc, #468]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004902:	4313      	orrs	r3, r2
 8004904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d010      	beq.n	8004934 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	4b70      	ldr	r3, [pc, #448]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800491e:	429a      	cmp	r2, r3
 8004920:	d908      	bls.n	8004934 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004922:	4b6d      	ldr	r3, [pc, #436]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	496a      	ldr	r1, [pc, #424]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004930:	4313      	orrs	r3, r2
 8004932:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	4b64      	ldr	r3, [pc, #400]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800494c:	429a      	cmp	r2, r3
 800494e:	d908      	bls.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004950:	4b61      	ldr	r3, [pc, #388]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	495e      	ldr	r1, [pc, #376]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 800495e:	4313      	orrs	r3, r2
 8004960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d010      	beq.n	8004990 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69da      	ldr	r2, [r3, #28]
 8004972:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800497a:	429a      	cmp	r2, r3
 800497c:	d908      	bls.n	8004990 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800497e:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4953      	ldr	r1, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 800498c:	4313      	orrs	r3, r2
 800498e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d908      	bls.n	80049be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f023 020f 	bic.w	r2, r3, #15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4947      	ldr	r1, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d055      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049ca:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4940      	ldr	r1, [pc, #256]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e4:	4b3c      	ldr	r3, [pc, #240]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d121      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0f6      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049fc:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d115      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0ea      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0de      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a24:	4b2c      	ldr	r3, [pc, #176]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0d6      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f023 0207 	bic.w	r2, r3, #7
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4925      	ldr	r1, [pc, #148]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fc fdfd 	bl	8001644 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4e:	f7fc fdf9 	bl	8001644 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0be      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a64:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d1eb      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d010      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d208      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x244>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d214      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020f 	bic.w	r2, r3, #15
 8004aba:	4906      	ldr	r1, [pc, #24]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <HAL_RCC_ClockConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e086      	b.n	8004be2 <HAL_RCC_ClockConfig+0x34e>
 8004ad4:	52002000 	.word	0x52002000
 8004ad8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d208      	bcs.n	8004b0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004af8:	4b3c      	ldr	r3, [pc, #240]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	4939      	ldr	r1, [pc, #228]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d010      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d208      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b26:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	492e      	ldr	r1, [pc, #184]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d208      	bcs.n	8004b66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	4922      	ldr	r1, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d010      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d208      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4917      	ldr	r1, [pc, #92]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b94:	f000 f834 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b14      	ldr	r3, [pc, #80]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	4912      	ldr	r1, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x35c>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCC_ClockConfig+0x358>)
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <HAL_RCC_ClockConfig+0x35c>)
 8004bbc:	5cd3      	ldrb	r3, [r2, r3]
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x360>)
 8004bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bcc:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <HAL_RCC_ClockConfig+0x364>)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x368>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fc fcea 	bl	80015b0 <HAL_InitTick>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	08009e5c 	.word	0x08009e5c
 8004bf4:	24000008 	.word	0x24000008
 8004bf8:	24000004 	.word	0x24000004
 8004bfc:	2400000c 	.word	0x2400000c

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	; 0x24
 8004c04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c06:	4bb3      	ldr	r3, [pc, #716]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0e:	2b18      	cmp	r3, #24
 8004c10:	f200 8155 	bhi.w	8004ebe <HAL_RCC_GetSysClockFreq+0x2be>
 8004c14:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c81 	.word	0x08004c81
 8004c20:	08004ebf 	.word	0x08004ebf
 8004c24:	08004ebf 	.word	0x08004ebf
 8004c28:	08004ebf 	.word	0x08004ebf
 8004c2c:	08004ebf 	.word	0x08004ebf
 8004c30:	08004ebf 	.word	0x08004ebf
 8004c34:	08004ebf 	.word	0x08004ebf
 8004c38:	08004ebf 	.word	0x08004ebf
 8004c3c:	08004ca7 	.word	0x08004ca7
 8004c40:	08004ebf 	.word	0x08004ebf
 8004c44:	08004ebf 	.word	0x08004ebf
 8004c48:	08004ebf 	.word	0x08004ebf
 8004c4c:	08004ebf 	.word	0x08004ebf
 8004c50:	08004ebf 	.word	0x08004ebf
 8004c54:	08004ebf 	.word	0x08004ebf
 8004c58:	08004ebf 	.word	0x08004ebf
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004ebf 	.word	0x08004ebf
 8004c64:	08004ebf 	.word	0x08004ebf
 8004c68:	08004ebf 	.word	0x08004ebf
 8004c6c:	08004ebf 	.word	0x08004ebf
 8004c70:	08004ebf 	.word	0x08004ebf
 8004c74:	08004ebf 	.word	0x08004ebf
 8004c78:	08004ebf 	.word	0x08004ebf
 8004c7c:	08004cb3 	.word	0x08004cb3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c80:	4b94      	ldr	r3, [pc, #592]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c8c:	4b91      	ldr	r3, [pc, #580]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	08db      	lsrs	r3, r3, #3
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	4a90      	ldr	r2, [pc, #576]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c9e:	e111      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ca0:	4b8d      	ldr	r3, [pc, #564]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ca2:	61bb      	str	r3, [r7, #24]
    break;
 8004ca4:	e10e      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004ca6:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ca8:	61bb      	str	r3, [r7, #24]
    break;
 8004caa:	e10b      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004cac:	4b8c      	ldr	r3, [pc, #560]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cae:	61bb      	str	r3, [r7, #24]
    break;
 8004cb0:	e108      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cb2:	4b88      	ldr	r3, [pc, #544]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004cbc:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cc8:	4b82      	ldr	r3, [pc, #520]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004cd2:	4b80      	ldr	r3, [pc, #512]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	08db      	lsrs	r3, r3, #3
 8004cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80e1 	beq.w	8004eb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f000 8083 	beq.w	8004e04 <HAL_RCC_GetSysClockFreq+0x204>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f200 80a1 	bhi.w	8004e48 <HAL_RCC_GetSysClockFreq+0x248>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x114>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d056      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d12:	e099      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d14:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02d      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d20:	4b6c      	ldr	r3, [pc, #432]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	4a6b      	ldr	r2, [pc, #428]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4a:	4b62      	ldr	r3, [pc, #392]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d7a:	e087      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b51      	ldr	r3, [pc, #324]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004da2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dbe:	e065      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004eec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e02:	e043      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ef0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e46:	e021      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004eec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	0a5b      	lsrs	r3, r3, #9
 8004e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e96:	3301      	adds	r3, #1
 8004e98:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb0:	ee17 3a90 	vmov	r3, s15
 8004eb4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004eb6:	e005      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
    break;
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ec0:	61bb      	str	r3, [r7, #24]
    break;
 8004ec2:	bf00      	nop
  }

  return sysclockfreq;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3724      	adds	r7, #36	; 0x24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	03d09000 	.word	0x03d09000
 8004edc:	003d0900 	.word	0x003d0900
 8004ee0:	017d7840 	.word	0x017d7840
 8004ee4:	46000000 	.word	0x46000000
 8004ee8:	4c742400 	.word	0x4c742400
 8004eec:	4a742400 	.word	0x4a742400
 8004ef0:	4bbebc20 	.word	0x4bbebc20

08004ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004efa:	f7ff fe81 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004efe:	4602      	mov	r2, r0
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	490f      	ldr	r1, [pc, #60]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f0c:	5ccb      	ldrb	r3, [r1, r3]
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	fa22 f303 	lsr.w	r3, r2, r3
 8004f16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x58>)
 8004f30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f32:	4a07      	ldr	r2, [pc, #28]	; (8004f50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x58>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	58024400 	.word	0x58024400
 8004f48:	08009e5c 	.word	0x08009e5c
 8004f4c:	24000008 	.word	0x24000008
 8004f50:	24000004 	.word	0x24000004

08004f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f58:	f7ff ffcc 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	58024400 	.word	0x58024400
 8004f7c:	08009e5c 	.word	0x08009e5c

08004f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f84:	f7ff ffb6 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4904      	ldr	r1, [pc, #16]	; (8004fa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	08009e5c 	.word	0x08009e5c

08004fac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb8:	2300      	movs	r3, #0
 8004fba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d03f      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fd0:	d02a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fd6:	d824      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fdc:	d018      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe2:	d81e      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fec:	d007      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fee:	e018      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff0:	4ba4      	ldr	r3, [pc, #656]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4aa3      	ldr	r2, [pc, #652]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ffc:	e015      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3304      	adds	r3, #4
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f001 f989 	bl	800631c <RCCEx_PLL2_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800500e:	e00c      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3324      	adds	r3, #36	; 0x24
 8005014:	2102      	movs	r1, #2
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fa32 	bl	8006480 <RCCEx_PLL3_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005020:	e003      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
      break;
 8005026:	e000      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005030:	4b94      	ldr	r3, [pc, #592]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	4991      	ldr	r1, [pc, #580]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800503e:	4313      	orrs	r3, r2
 8005040:	650b      	str	r3, [r1, #80]	; 0x50
 8005042:	e001      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03d      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	2b04      	cmp	r3, #4
 800505a:	d826      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005079 	.word	0x08005079
 8005068:	08005087 	.word	0x08005087
 800506c:	08005099 	.word	0x08005099
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050b1 	.word	0x080050b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005078:	4b82      	ldr	r3, [pc, #520]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	4a81      	ldr	r2, [pc, #516]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800507e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005084:	e015      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f001 f945 	bl	800631c <RCCEx_PLL2_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005096:	e00c      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3324      	adds	r3, #36	; 0x24
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f9ee 	bl	8006480 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050a8:	e003      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
      break;
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80050b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b8:	4b72      	ldr	r3, [pc, #456]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80050ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050bc:	f023 0207 	bic.w	r2, r3, #7
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	496f      	ldr	r1, [pc, #444]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	650b      	str	r3, [r1, #80]	; 0x50
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d051      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050e2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80050e6:	d036      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80050ec:	d830      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80050ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f2:	d032      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80050f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f8:	d82a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80050fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050fe:	d02e      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005100:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005104:	d824      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510a:	d018      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800510c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005110:	d81e      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800511a:	d007      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800511c:	e018      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511e:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800512a:	e019      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f001 f8f2 	bl	800631c <RCCEx_PLL2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800513c:	e010      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f99b 	bl	8006480 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800514e:	e007      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	e004      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005156:	bf00      	nop
 8005158:	e002      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800515a:	bf00      	nop
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800515e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005174:	4943      	ldr	r1, [pc, #268]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	658b      	str	r3, [r1, #88]	; 0x58
 800517a:	e001      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005188:	2b00      	cmp	r3, #0
 800518a:	d051      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005192:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005196:	d036      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005198:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800519c:	d830      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800519e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a2:	d032      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80051a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a8:	d82a      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80051aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051ae:	d02e      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80051b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051b4:	d824      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80051b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ba:	d018      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x242>
 80051bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c0:	d81e      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x222>
 80051c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ca:	d007      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 80051cc:	e018      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ce:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051da:	e019      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f89a 	bl	800631c <RCCEx_PLL2_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051ec:	e010      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3324      	adds	r3, #36	; 0x24
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 f943 	bl	8006480 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051fe:	e007      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
      break;
 8005204:	e004      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005206:	bf00      	nop
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800520e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005224:	4917      	ldr	r1, [pc, #92]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005226:	4313      	orrs	r3, r2
 8005228:	658b      	str	r3, [r1, #88]	; 0x58
 800522a:	e001      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d035      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	2b30      	cmp	r3, #48	; 0x30
 8005242:	d01c      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d817      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005248:	2b20      	cmp	r3, #32
 800524a:	d00c      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d813      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005254:	2b10      	cmp	r3, #16
 8005256:	d10f      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4a09      	ldr	r2, [pc, #36]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005264:	e011      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	2102      	movs	r1, #2
 800526c:	4618      	mov	r0, r3
 800526e:	f001 f855 	bl	800631c <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005276:	e008      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	e005      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800527e:	bf00      	nop
 8005280:	e003      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
      break;
 8005288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005290:	4ba3      	ldr	r3, [pc, #652]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529c:	49a0      	ldr	r1, [pc, #640]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052a2:	e001      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d047      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052bc:	d030      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80052be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c2:	d82a      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80052c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052c8:	d02c      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80052ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052ce:	d824      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80052d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d4:	d018      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	d81e      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e4:	d007      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052e6:	e018      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e8:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a8c      	ldr	r2, [pc, #560]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052f4:	e017      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f80d 	bl	800631c <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005306:	e00e      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 f8b6 	bl	8006480 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005318:	e005      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
      break;
 800531e:	e002      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d109      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800532c:	4b7c      	ldr	r3, [pc, #496]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800532e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005330:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	4979      	ldr	r1, [pc, #484]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800533a:	4313      	orrs	r3, r2
 800533c:	650b      	str	r3, [r1, #80]	; 0x50
 800533e:	e001      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d049      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005358:	d02e      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800535a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800535e:	d828      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005364:	d02a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005366:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800536a:	d822      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800536c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005370:	d026      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005376:	d81c      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800537c:	d010      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800537e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005382:	d816      	bhi.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01d      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d111      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
 8005392:	2101      	movs	r1, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f000 ffc1 	bl	800631c <RCCEx_PLL2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800539e:	e012      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3324      	adds	r3, #36	; 0x24
 80053a4:	2101      	movs	r1, #1
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 f86a 	bl	8006480 <RCCEx_PLL3_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80053b0:	e009      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
      break;
 80053b6:	e006      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80053b8:	bf00      	nop
 80053ba:	e004      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80053c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053cc:	4b54      	ldr	r3, [pc, #336]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d8:	4951      	ldr	r1, [pc, #324]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	650b      	str	r3, [r1, #80]	; 0x50
 80053de:	e001      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d04b      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053fa:	d02e      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80053fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005400:	d828      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d02a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d822      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800540e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005412:	d026      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005414:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005418:	d81c      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800541a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541e:	d010      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005424:	d816      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01d      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d111      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f000 ff70 	bl	800631c <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005440:	e012      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2101      	movs	r1, #1
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f819 	bl	8006480 <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005452:	e009      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	e006      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800545a:	bf00      	nop
 800545c:	e004      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800547c:	4928      	ldr	r1, [pc, #160]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800547e:	4313      	orrs	r3, r2
 8005480:	658b      	str	r3, [r1, #88]	; 0x58
 8005482:	e001      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02f      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549c:	d00e      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x510>
 800549e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a2:	d814      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x522>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d015      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80054a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ac:	d10f      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ae:	4b1c      	ldr	r3, [pc, #112]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80054b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 ff2a 	bl	800631c <RCCEx_PLL2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80054de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e8:	490d      	ldr	r1, [pc, #52]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	650b      	str	r3, [r1, #80]	; 0x50
 80054ee:	e001      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d034      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	2b03      	cmp	r3, #3
 8005506:	d81d      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	0800554b 	.word	0x0800554b
 8005514:	08005525 	.word	0x08005525
 8005518:	08005533 	.word	0x08005533
 800551c:	0800554b 	.word	0x0800554b
 8005520:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005524:	4bb1      	ldr	r3, [pc, #708]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4ab0      	ldr	r2, [pc, #704]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800552a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005530:	e00c      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	2102      	movs	r1, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f000 feef 	bl	800631c <RCCEx_PLL2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005542:	e003      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
      break;
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800554a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005552:	4ba6      	ldr	r3, [pc, #664]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005556:	f023 0203 	bic.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	49a3      	ldr	r1, [pc, #652]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005560:	4313      	orrs	r3, r2
 8005562:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005564:	e001      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8086 	beq.w	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005578:	4b9d      	ldr	r3, [pc, #628]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a9c      	ldr	r2, [pc, #624]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800557e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005582:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005584:	f7fc f85e 	bl	8001644 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800558a:	e009      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558c:	f7fc f85a 	bl	8001644 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d902      	bls.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	75fb      	strb	r3, [r7, #23]
        break;
 800559e:	e005      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a0:	4b93      	ldr	r3, [pc, #588]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ef      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d166      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055b2:	4b8e      	ldr	r3, [pc, #568]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055bc:	4053      	eors	r3, r2
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c6:	4b89      	ldr	r3, [pc, #548]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055d0:	4b86      	ldr	r3, [pc, #536]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	4a85      	ldr	r2, [pc, #532]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055dc:	4b83      	ldr	r3, [pc, #524]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a82      	ldr	r2, [pc, #520]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055e8:	4a80      	ldr	r2, [pc, #512]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f8:	d115      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fc f823 	bl	8001644 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005600:	e00b      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f7fc f81f 	bl	8001644 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d902      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	75fb      	strb	r3, [r7, #23]
            break;
 8005618:	e005      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800561a:	4b74      	ldr	r3, [pc, #464]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ed      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d126      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563a:	d10d      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800563c:	4b6b      	ldr	r3, [pc, #428]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800564a:	0919      	lsrs	r1, r3, #4
 800564c:	4b69      	ldr	r3, [pc, #420]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800564e:	400b      	ands	r3, r1
 8005650:	4966      	ldr	r1, [pc, #408]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005652:	4313      	orrs	r3, r2
 8005654:	610b      	str	r3, [r1, #16]
 8005656:	e005      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005658:	4b64      	ldr	r3, [pc, #400]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	4a63      	ldr	r2, [pc, #396]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800565e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005662:	6113      	str	r3, [r2, #16]
 8005664:	4b61      	ldr	r3, [pc, #388]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005666:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800566e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005672:	495e      	ldr	r1, [pc, #376]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005674:	4313      	orrs	r3, r2
 8005676:	670b      	str	r3, [r1, #112]	; 0x70
 8005678:	e004      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	75bb      	strb	r3, [r7, #22]
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d07e      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005694:	2b28      	cmp	r3, #40	; 0x28
 8005696:	d867      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	0800576f 	.word	0x0800576f
 80056a4:	08005769 	.word	0x08005769
 80056a8:	08005769 	.word	0x08005769
 80056ac:	08005769 	.word	0x08005769
 80056b0:	08005769 	.word	0x08005769
 80056b4:	08005769 	.word	0x08005769
 80056b8:	08005769 	.word	0x08005769
 80056bc:	08005769 	.word	0x08005769
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005769 	.word	0x08005769
 80056c8:	08005769 	.word	0x08005769
 80056cc:	08005769 	.word	0x08005769
 80056d0:	08005769 	.word	0x08005769
 80056d4:	08005769 	.word	0x08005769
 80056d8:	08005769 	.word	0x08005769
 80056dc:	08005769 	.word	0x08005769
 80056e0:	08005757 	.word	0x08005757
 80056e4:	08005769 	.word	0x08005769
 80056e8:	08005769 	.word	0x08005769
 80056ec:	08005769 	.word	0x08005769
 80056f0:	08005769 	.word	0x08005769
 80056f4:	08005769 	.word	0x08005769
 80056f8:	08005769 	.word	0x08005769
 80056fc:	08005769 	.word	0x08005769
 8005700:	0800576f 	.word	0x0800576f
 8005704:	08005769 	.word	0x08005769
 8005708:	08005769 	.word	0x08005769
 800570c:	08005769 	.word	0x08005769
 8005710:	08005769 	.word	0x08005769
 8005714:	08005769 	.word	0x08005769
 8005718:	08005769 	.word	0x08005769
 800571c:	08005769 	.word	0x08005769
 8005720:	0800576f 	.word	0x0800576f
 8005724:	08005769 	.word	0x08005769
 8005728:	08005769 	.word	0x08005769
 800572c:	08005769 	.word	0x08005769
 8005730:	08005769 	.word	0x08005769
 8005734:	08005769 	.word	0x08005769
 8005738:	08005769 	.word	0x08005769
 800573c:	08005769 	.word	0x08005769
 8005740:	0800576f 	.word	0x0800576f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fde6 	bl	800631c <RCCEx_PLL2_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005754:	e00c      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3324      	adds	r3, #36	; 0x24
 800575a:	2101      	movs	r1, #1
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fe8f 	bl	8006480 <RCCEx_PLL3_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005766:	e003      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
      break;
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800576e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005776:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005782:	491a      	ldr	r1, [pc, #104]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005784:	4313      	orrs	r3, r2
 8005786:	654b      	str	r3, [r1, #84]	; 0x54
 8005788:	e001      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d03e      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d820      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057f9 	.word	0x080057f9
 80057ac:	080057c1 	.word	0x080057c1
 80057b0:	080057d3 	.word	0x080057d3
 80057b4:	080057f9 	.word	0x080057f9
 80057b8:	080057f9 	.word	0x080057f9
 80057bc:	080057f9 	.word	0x080057f9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	2101      	movs	r1, #1
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fda8 	bl	800631c <RCCEx_PLL2_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057d0:	e013      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3324      	adds	r3, #36	; 0x24
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fe51 	bl	8006480 <RCCEx_PLL3_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057e2:	e00a      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
      break;
 80057e8:	e007      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80057ea:	bf00      	nop
 80057ec:	58024400 	.word	0x58024400
 80057f0:	58024800 	.word	0x58024800
 80057f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80057f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005800:	4b9f      	ldr	r3, [pc, #636]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	f023 0207 	bic.w	r2, r3, #7
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580c:	499c      	ldr	r1, [pc, #624]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800580e:	4313      	orrs	r3, r2
 8005810:	654b      	str	r3, [r1, #84]	; 0x54
 8005812:	e001      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d039      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582a:	2b05      	cmp	r3, #5
 800582c:	d820      	bhi.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005877 	.word	0x08005877
 8005838:	0800584d 	.word	0x0800584d
 800583c:	0800585f 	.word	0x0800585f
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fd62 	bl	800631c <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800585c:	e00c      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3324      	adds	r3, #36	; 0x24
 8005862:	2101      	movs	r1, #1
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fe0b 	bl	8006480 <RCCEx_PLL3_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800586e:	e003      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
      break;
 8005874:	e000      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800587e:	4b80      	ldr	r3, [pc, #512]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	f023 0207 	bic.w	r2, r3, #7
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588c:	497c      	ldr	r1, [pc, #496]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	658b      	str	r3, [r1, #88]	; 0x58
 8005892:	e001      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d04b      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058ae:	d02e      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80058b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058b4:	d828      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d02a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d822      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80058c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058c6:	d026      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80058c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058cc:	d81c      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80058ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d2:	d010      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80058d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d8:	d816      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01d      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e2:	d111      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fd16 	bl	800631c <RCCEx_PLL2_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058f4:	e012      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3324      	adds	r3, #36	; 0x24
 80058fa:	2102      	movs	r1, #2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fdbf 	bl	8006480 <RCCEx_PLL3_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005906:	e009      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
      break;
 800590c:	e006      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800590e:	bf00      	nop
 8005910:	e004      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005912:	bf00      	nop
 8005914:	e002      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005916:	bf00      	nop
 8005918:	e000      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800591a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005922:	4b57      	ldr	r3, [pc, #348]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	4953      	ldr	r1, [pc, #332]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	654b      	str	r3, [r1, #84]	; 0x54
 8005936:	e001      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d04b      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005952:	d02e      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005954:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005958:	d828      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	d02a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005964:	d822      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800596a:	d026      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800596c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005970:	d81c      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d010      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597c:	d816      	bhi.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01d      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d111      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fcc4 	bl	800631c <RCCEx_PLL2_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005998:	e012      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3324      	adds	r3, #36	; 0x24
 800599e:	2102      	movs	r1, #2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fd6d 	bl	8006480 <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80059aa:	e009      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
      break;
 80059b0:	e006      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80059b2:	bf00      	nop
 80059b4:	e004      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80059b6:	bf00      	nop
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80059be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c6:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d4:	492a      	ldr	r1, [pc, #168]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	658b      	str	r3, [r1, #88]	; 0x58
 80059da:	e001      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d04d      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059f6:	d02e      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80059f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059fc:	d828      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a02:	d02a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a08:	d822      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005a0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a0e:	d026      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005a10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a14:	d81c      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a1a:	d010      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a20:	d816      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01d      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2a:	d111      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fc72 	bl	800631c <RCCEx_PLL2_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a3c:	e012      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3324      	adds	r3, #36	; 0x24
 8005a42:	2102      	movs	r1, #2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fd1b 	bl	8006480 <RCCEx_PLL3_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a4e:	e009      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
      break;
 8005a54:	e006      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005a56:	bf00      	nop
 8005a58:	e004      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e002      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a78:	4901      	ldr	r1, [pc, #4]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a7e:	e003      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d018      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3324      	adds	r3, #36	; 0x24
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fceb 	bl	8006480 <RCCEx_PLL3_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005ab4:	4b8a      	ldr	r3, [pc, #552]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac0:	4987      	ldr	r1, [pc, #540]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005adc:	d10a      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3324      	adds	r3, #36	; 0x24
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fccb 	bl	8006480 <RCCEx_PLL3_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005af4:	4b7a      	ldr	r3, [pc, #488]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	4977      	ldr	r1, [pc, #476]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d034      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b1e:	d01d      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b24:	d817      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b30:	e011      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3304      	adds	r3, #4
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fbef 	bl	800631c <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b42:	e00c      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3324      	adds	r3, #36	; 0x24
 8005b48:	2102      	movs	r1, #2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fc98 	bl	8006480 <RCCEx_PLL3_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b54:	e003      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5a:	e000      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b64:	4b5e      	ldr	r3, [pc, #376]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b72:	495b      	ldr	r1, [pc, #364]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	658b      	str	r3, [r1, #88]	; 0x58
 8005b78:	e001      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d033      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b94:	d01c      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005b96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b9a:	d816      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba6:	d007      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005ba8:	e00f      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005baa:	4b4d      	ldr	r3, [pc, #308]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a4c      	ldr	r2, [pc, #304]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005bb6:	e00c      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3324      	adds	r3, #36	; 0x24
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fc5e 	bl	8006480 <RCCEx_PLL3_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bce:	e000      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bd8:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be6:	493e      	ldr	r1, [pc, #248]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	654b      	str	r3, [r1, #84]	; 0x54
 8005bec:	e001      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d029      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0a:	d007      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005c0c:	e00f      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0e:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	4a33      	ldr	r2, [pc, #204]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c1a:	e00b      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	2102      	movs	r1, #2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fb7a 	bl	800631c <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c2c:	e002      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
      break;
 8005c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c3a:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c46:	4926      	ldr	r1, [pc, #152]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c4c:	e001      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	; 0x24
 8005c62:	2102      	movs	r1, #2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fc0b 	bl	8006480 <RCCEx_PLL3_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d033      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c88:	d017      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c8e:	d811      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c94:	d013      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8005c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9a:	d80b      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d106      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005cb2:	e007      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb8:	e004      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd6:	4902      	ldr	r1, [pc, #8]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	654b      	str	r3, [r1, #84]	; 0x54
 8005cdc:	e004      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cf4:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	4926      	ldr	r1, [pc, #152]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d12:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1e:	491f      	ldr	r1, [pc, #124]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d30:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d3a:	6113      	str	r3, [r2, #16]
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d46:	4915      	ldr	r1, [pc, #84]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da08      	bge.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d54:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	490e      	ldr	r1, [pc, #56]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d80:	4906      	ldr	r1, [pc, #24]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005d86:	7dbb      	ldrb	r3, [r7, #22]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	58024400 	.word	0x58024400

08005da0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005da4:	f7ff f8a6 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	091b      	lsrs	r3, r3, #4
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	08009e5c 	.word	0x08009e5c

08005dcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b089      	sub	sp, #36	; 0x24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dd4:	4ba1      	ldr	r3, [pc, #644]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005dde:	4b9f      	ldr	r3, [pc, #636]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	0b1b      	lsrs	r3, r3, #12
 8005de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dea:	4b9c      	ldr	r3, [pc, #624]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	091b      	lsrs	r3, r3, #4
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005df6:	4b99      	ldr	r3, [pc, #612]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	08db      	lsrs	r3, r3, #3
 8005dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8111 	beq.w	800603c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	f000 8083 	beq.w	8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	f200 80a1 	bhi.w	8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d056      	beq.n	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e36:	e099      	b.n	8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e38:	4b88      	ldr	r3, [pc, #544]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02d      	beq.n	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e44:	4b85      	ldr	r3, [pc, #532]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	08db      	lsrs	r3, r3, #3
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	4a84      	ldr	r2, [pc, #528]	; (8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e9e:	e087      	b.n	8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ee2:	e065      	b.n	8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef6:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f26:	e043      	b.n	8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3a:	4b48      	ldr	r3, [pc, #288]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f6a:	e021      	b.n	8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	0a5b      	lsrs	r3, r3, #9
 8005fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd6:	ee17 2a90 	vmov	r2, s15
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006004:	ee17 2a90 	vmov	r2, s15
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	0e1b      	lsrs	r3, r3, #24
 8006012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006026:	edd7 6a07 	vldr	s13, [r7, #28]
 800602a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006032:	ee17 2a90 	vmov	r2, s15
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800603a:	e008      	b.n	800604e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
}
 800604e:	bf00      	nop
 8006050:	3724      	adds	r7, #36	; 0x24
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	58024400 	.word	0x58024400
 8006060:	03d09000 	.word	0x03d09000
 8006064:	46000000 	.word	0x46000000
 8006068:	4c742400 	.word	0x4c742400
 800606c:	4a742400 	.word	0x4a742400
 8006070:	4bbebc20 	.word	0x4bbebc20

08006074 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	; 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800607c:	4ba1      	ldr	r3, [pc, #644]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006086:	4b9f      	ldr	r3, [pc, #636]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	0d1b      	lsrs	r3, r3, #20
 800608c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006090:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006092:	4b9c      	ldr	r3, [pc, #624]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800609e:	4b99      	ldr	r3, [pc, #612]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	08db      	lsrs	r3, r3, #3
 80060a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8111 	beq.w	80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	f000 8083 	beq.w	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	f200 80a1 	bhi.w	8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d056      	beq.n	800618c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060de:	e099      	b.n	8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e0:	4b88      	ldr	r3, [pc, #544]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02d      	beq.n	8006148 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060ec:	4b85      	ldr	r3, [pc, #532]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	08db      	lsrs	r3, r3, #3
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	4a84      	ldr	r2, [pc, #528]	; (8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
 80060fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006116:	4b7b      	ldr	r3, [pc, #492]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006126:	ed97 6a03 	vldr	s12, [r7, #12]
 800612a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800612e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800613a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006142:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006146:	e087      	b.n	8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615a:	4b6a      	ldr	r3, [pc, #424]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616a:	ed97 6a03 	vldr	s12, [r7, #12]
 800616e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800617e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800618a:	e065      	b.n	8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006196:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800619a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619e:	4b59      	ldr	r3, [pc, #356]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ce:	e043      	b.n	8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e2:	4b48      	ldr	r3, [pc, #288]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006212:	e021      	b.n	8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006226:	4b37      	ldr	r3, [pc, #220]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006236:	ed97 6a03 	vldr	s12, [r7, #12]
 800623a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800623e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006256:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006258:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	0a5b      	lsrs	r3, r3, #9
 800625e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800626e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006272:	edd7 6a07 	vldr	s13, [r7, #28]
 8006276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627e:	ee17 2a90 	vmov	r2, s15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	0c1b      	lsrs	r3, r3, #16
 800628c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ac:	ee17 2a90 	vmov	r2, s15
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80062b4:	4b13      	ldr	r3, [pc, #76]	; (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	0e1b      	lsrs	r3, r3, #24
 80062ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062da:	ee17 2a90 	vmov	r2, s15
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062e2:	e008      	b.n	80062f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
}
 80062f6:	bf00      	nop
 80062f8:	3724      	adds	r7, #36	; 0x24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	58024400 	.word	0x58024400
 8006308:	03d09000 	.word	0x03d09000
 800630c:	46000000 	.word	0x46000000
 8006310:	4c742400 	.word	0x4c742400
 8006314:	4a742400 	.word	0x4a742400
 8006318:	4bbebc20 	.word	0x4bbebc20

0800631c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800632a:	4b53      	ldr	r3, [pc, #332]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b03      	cmp	r3, #3
 8006334:	d101      	bne.n	800633a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e099      	b.n	800646e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800633a:	4b4f      	ldr	r3, [pc, #316]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a4e      	ldr	r2, [pc, #312]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006340:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006346:	f7fb f97d 	bl	8001644 <HAL_GetTick>
 800634a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800634c:	e008      	b.n	8006360 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800634e:	f7fb f979 	bl	8001644 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e086      	b.n	800646e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006360:	4b45      	ldr	r3, [pc, #276]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800636c:	4b42      	ldr	r3, [pc, #264]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	031b      	lsls	r3, r3, #12
 800637a:	493f      	ldr	r1, [pc, #252]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 800637c:	4313      	orrs	r3, r2
 800637e:	628b      	str	r3, [r1, #40]	; 0x28
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	3b01      	subs	r3, #1
 8006386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	3b01      	subs	r3, #1
 8006390:	025b      	lsls	r3, r3, #9
 8006392:	b29b      	uxth	r3, r3
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	041b      	lsls	r3, r3, #16
 800639e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	061b      	lsls	r3, r3, #24
 80063ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063b0:	4931      	ldr	r1, [pc, #196]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063b6:	4b30      	ldr	r3, [pc, #192]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	492d      	ldr	r1, [pc, #180]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063c8:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f023 0220 	bic.w	r2, r3, #32
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	4928      	ldr	r1, [pc, #160]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063da:	4b27      	ldr	r3, [pc, #156]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	4a26      	ldr	r2, [pc, #152]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063e0:	f023 0310 	bic.w	r3, r3, #16
 80063e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <RCCEx_PLL2_Config+0x160>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	69d2      	ldr	r2, [r2, #28]
 80063f2:	00d2      	lsls	r2, r2, #3
 80063f4:	4920      	ldr	r1, [pc, #128]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063fa:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006400:	f043 0310 	orr.w	r3, r3, #16
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	4a19      	ldr	r2, [pc, #100]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006412:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006418:	e00f      	b.n	800643a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d106      	bne.n	800642e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006420:	4b15      	ldr	r3, [pc, #84]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	4a14      	ldr	r2, [pc, #80]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800642c:	e005      	b.n	800643a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a11      	ldr	r2, [pc, #68]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006438:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800643a:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a0e      	ldr	r2, [pc, #56]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006440:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006446:	f7fb f8fd 	bl	8001644 <HAL_GetTick>
 800644a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800644c:	e008      	b.n	8006460 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800644e:	f7fb f8f9 	bl	8001644 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d901      	bls.n	8006460 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e006      	b.n	800646e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <RCCEx_PLL2_Config+0x15c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f0      	beq.n	800644e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
 800647c:	ffff0007 	.word	0xffff0007

08006480 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800648e:	4b53      	ldr	r3, [pc, #332]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d101      	bne.n	800649e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e099      	b.n	80065d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800649e:	4b4f      	ldr	r3, [pc, #316]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a4e      	ldr	r2, [pc, #312]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80064a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064aa:	f7fb f8cb 	bl	8001644 <HAL_GetTick>
 80064ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064b0:	e008      	b.n	80064c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064b2:	f7fb f8c7 	bl	8001644 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e086      	b.n	80065d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c4:	4b45      	ldr	r3, [pc, #276]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1f0      	bne.n	80064b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064d0:	4b42      	ldr	r3, [pc, #264]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	051b      	lsls	r3, r3, #20
 80064de:	493f      	ldr	r1, [pc, #252]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	628b      	str	r3, [r1, #40]	; 0x28
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	025b      	lsls	r3, r3, #9
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	3b01      	subs	r3, #1
 8006500:	041b      	lsls	r3, r3, #16
 8006502:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	3b01      	subs	r3, #1
 800650e:	061b      	lsls	r3, r3, #24
 8006510:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006514:	4931      	ldr	r1, [pc, #196]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006516:	4313      	orrs	r3, r2
 8006518:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800651a:	4b30      	ldr	r3, [pc, #192]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	492d      	ldr	r1, [pc, #180]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006528:	4313      	orrs	r3, r2
 800652a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800652c:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	4928      	ldr	r1, [pc, #160]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 800653a:	4313      	orrs	r3, r2
 800653c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800653e:	4b27      	ldr	r3, [pc, #156]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	4a26      	ldr	r2, [pc, #152]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006548:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800654a:	4b24      	ldr	r3, [pc, #144]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 800654c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <RCCEx_PLL3_Config+0x160>)
 8006550:	4013      	ands	r3, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	69d2      	ldr	r2, [r2, #28]
 8006556:	00d2      	lsls	r2, r2, #3
 8006558:	4920      	ldr	r1, [pc, #128]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 800655a:	4313      	orrs	r3, r2
 800655c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	4a1e      	ldr	r2, [pc, #120]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4a19      	ldr	r2, [pc, #100]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006576:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800657a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800657c:	e00f      	b.n	800659e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d106      	bne.n	8006592 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006584:	4b15      	ldr	r3, [pc, #84]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	4a14      	ldr	r2, [pc, #80]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 800658a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800658e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006590:	e005      	b.n	800659e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	4a11      	ldr	r2, [pc, #68]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 8006598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800659c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80065a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065aa:	f7fb f84b 	bl	8001644 <HAL_GetTick>
 80065ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065b0:	e008      	b.n	80065c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065b2:	f7fb f847 	bl	8001644 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e006      	b.n	80065d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <RCCEx_PLL3_Config+0x15c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
 80065e0:	ffff0007 	.word	0xffff0007

080065e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e049      	b.n	800668a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fa fc9c 	bl	8000f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 fa66 	bl	8006af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <HAL_TIM_PWM_Start+0x24>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	bf14      	ite	ne
 80066b0:	2301      	movne	r3, #1
 80066b2:	2300      	moveq	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	e03c      	b.n	8006732 <HAL_TIM_PWM_Start+0x9e>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d109      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x3e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	bf14      	ite	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	2300      	moveq	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	e02f      	b.n	8006732 <HAL_TIM_PWM_Start+0x9e>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d109      	bne.n	80066ec <HAL_TIM_PWM_Start+0x58>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e022      	b.n	8006732 <HAL_TIM_PWM_Start+0x9e>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b0c      	cmp	r3, #12
 80066f0:	d109      	bne.n	8006706 <HAL_TIM_PWM_Start+0x72>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e015      	b.n	8006732 <HAL_TIM_PWM_Start+0x9e>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b10      	cmp	r3, #16
 800670a:	d109      	bne.n	8006720 <HAL_TIM_PWM_Start+0x8c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e008      	b.n	8006732 <HAL_TIM_PWM_Start+0x9e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0ab      	b.n	8006892 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_TIM_PWM_Start+0xb6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006748:	e023      	b.n	8006792 <HAL_TIM_PWM_Start+0xfe>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d104      	bne.n	800675a <HAL_TIM_PWM_Start+0xc6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	e01b      	b.n	8006792 <HAL_TIM_PWM_Start+0xfe>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d104      	bne.n	800676a <HAL_TIM_PWM_Start+0xd6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006768:	e013      	b.n	8006792 <HAL_TIM_PWM_Start+0xfe>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b0c      	cmp	r3, #12
 800676e:	d104      	bne.n	800677a <HAL_TIM_PWM_Start+0xe6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006778:	e00b      	b.n	8006792 <HAL_TIM_PWM_Start+0xfe>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b10      	cmp	r3, #16
 800677e:	d104      	bne.n	800678a <HAL_TIM_PWM_Start+0xf6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	e003      	b.n	8006792 <HAL_TIM_PWM_Start+0xfe>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2201      	movs	r2, #1
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fd26 	bl	80071ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a3d      	ldr	r2, [pc, #244]	; (800689c <HAL_TIM_PWM_Start+0x208>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_TIM_PWM_Start+0x13e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a3c      	ldr	r2, [pc, #240]	; (80068a0 <HAL_TIM_PWM_Start+0x20c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_TIM_PWM_Start+0x13e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a3a      	ldr	r2, [pc, #232]	; (80068a4 <HAL_TIM_PWM_Start+0x210>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_TIM_PWM_Start+0x13e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a39      	ldr	r2, [pc, #228]	; (80068a8 <HAL_TIM_PWM_Start+0x214>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_TIM_PWM_Start+0x13e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a37      	ldr	r2, [pc, #220]	; (80068ac <HAL_TIM_PWM_Start+0x218>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_TIM_PWM_Start+0x142>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <HAL_TIM_PWM_Start+0x144>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a2a      	ldr	r2, [pc, #168]	; (800689c <HAL_TIM_PWM_Start+0x208>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d02c      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d027      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <HAL_TIM_PWM_Start+0x21c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d022      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <HAL_TIM_PWM_Start+0x220>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d01d      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a27      	ldr	r2, [pc, #156]	; (80068b8 <HAL_TIM_PWM_Start+0x224>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <HAL_TIM_PWM_Start+0x20c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a23      	ldr	r2, [pc, #140]	; (80068bc <HAL_TIM_PWM_Start+0x228>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1b      	ldr	r2, [pc, #108]	; (80068a4 <HAL_TIM_PWM_Start+0x210>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <HAL_TIM_PWM_Start+0x22c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIM_PWM_Start+0x1bc>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <HAL_TIM_PWM_Start+0x230>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d115      	bne.n	800687c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <HAL_TIM_PWM_Start+0x234>)
 8006858:	4013      	ands	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b06      	cmp	r3, #6
 8006860:	d015      	beq.n	800688e <HAL_TIM_PWM_Start+0x1fa>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006868:	d011      	beq.n	800688e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	e008      	b.n	800688e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e000      	b.n	8006890 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	40010400 	.word	0x40010400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40001800 	.word	0x40001800
 80068c0:	4000e000 	.word	0x4000e000
 80068c4:	4000e400 	.word	0x4000e400
 80068c8:	00010007 	.word	0x00010007

080068cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0ff      	b.n	8006aea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b14      	cmp	r3, #20
 80068f6:	f200 80f0 	bhi.w	8006ada <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068fa:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	08006955 	.word	0x08006955
 8006904:	08006adb 	.word	0x08006adb
 8006908:	08006adb 	.word	0x08006adb
 800690c:	08006adb 	.word	0x08006adb
 8006910:	08006995 	.word	0x08006995
 8006914:	08006adb 	.word	0x08006adb
 8006918:	08006adb 	.word	0x08006adb
 800691c:	08006adb 	.word	0x08006adb
 8006920:	080069d7 	.word	0x080069d7
 8006924:	08006adb 	.word	0x08006adb
 8006928:	08006adb 	.word	0x08006adb
 800692c:	08006adb 	.word	0x08006adb
 8006930:	08006a17 	.word	0x08006a17
 8006934:	08006adb 	.word	0x08006adb
 8006938:	08006adb 	.word	0x08006adb
 800693c:	08006adb 	.word	0x08006adb
 8006940:	08006a59 	.word	0x08006a59
 8006944:	08006adb 	.word	0x08006adb
 8006948:	08006adb 	.word	0x08006adb
 800694c:	08006adb 	.word	0x08006adb
 8006950:	08006a99 	.word	0x08006a99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f970 	bl	8006c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0208 	orr.w	r2, r2, #8
 800696e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0204 	bic.w	r2, r2, #4
 800697e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6999      	ldr	r1, [r3, #24]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	619a      	str	r2, [r3, #24]
      break;
 8006992:	e0a5      	b.n	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f9e0 	bl	8006d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6999      	ldr	r1, [r3, #24]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	021a      	lsls	r2, r3, #8
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	619a      	str	r2, [r3, #24]
      break;
 80069d4:	e084      	b.n	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fa49 	bl	8006e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0208 	orr.w	r2, r2, #8
 80069f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0204 	bic.w	r2, r2, #4
 8006a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69d9      	ldr	r1, [r3, #28]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	61da      	str	r2, [r3, #28]
      break;
 8006a14:	e064      	b.n	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fab1 	bl	8006f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69da      	ldr	r2, [r3, #28]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69d9      	ldr	r1, [r3, #28]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	021a      	lsls	r2, r3, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	61da      	str	r2, [r3, #28]
      break;
 8006a56:	e043      	b.n	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fafa 	bl	8007058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0208 	orr.w	r2, r2, #8
 8006a72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0204 	bic.w	r2, r2, #4
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a96:	e023      	b.n	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fb3e 	bl	8007120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ad8:	e002      	b.n	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ade:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop

08006af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a44      	ldr	r2, [pc, #272]	; (8006c18 <TIM_Base_SetConfig+0x124>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b12:	d00f      	beq.n	8006b34 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a41      	ldr	r2, [pc, #260]	; (8006c1c <TIM_Base_SetConfig+0x128>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a40      	ldr	r2, [pc, #256]	; (8006c20 <TIM_Base_SetConfig+0x12c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_Base_SetConfig+0x40>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <TIM_Base_SetConfig+0x130>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_Base_SetConfig+0x40>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a3e      	ldr	r2, [pc, #248]	; (8006c28 <TIM_Base_SetConfig+0x134>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d108      	bne.n	8006b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a33      	ldr	r2, [pc, #204]	; (8006c18 <TIM_Base_SetConfig+0x124>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d027      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d023      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a30      	ldr	r2, [pc, #192]	; (8006c1c <TIM_Base_SetConfig+0x128>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01f      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2f      	ldr	r2, [pc, #188]	; (8006c20 <TIM_Base_SetConfig+0x12c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01b      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2e      	ldr	r2, [pc, #184]	; (8006c24 <TIM_Base_SetConfig+0x130>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d017      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <TIM_Base_SetConfig+0x134>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <TIM_Base_SetConfig+0x138>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00f      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2b      	ldr	r2, [pc, #172]	; (8006c30 <TIM_Base_SetConfig+0x13c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <TIM_Base_SetConfig+0x140>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a29      	ldr	r2, [pc, #164]	; (8006c38 <TIM_Base_SetConfig+0x144>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_Base_SetConfig+0xaa>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a28      	ldr	r2, [pc, #160]	; (8006c3c <TIM_Base_SetConfig+0x148>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a10      	ldr	r2, [pc, #64]	; (8006c18 <TIM_Base_SetConfig+0x124>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00f      	beq.n	8006bfc <TIM_Base_SetConfig+0x108>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a12      	ldr	r2, [pc, #72]	; (8006c28 <TIM_Base_SetConfig+0x134>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_Base_SetConfig+0x108>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <TIM_Base_SetConfig+0x138>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_Base_SetConfig+0x108>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <TIM_Base_SetConfig+0x13c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_Base_SetConfig+0x108>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a0f      	ldr	r2, [pc, #60]	; (8006c34 <TIM_Base_SetConfig+0x140>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d103      	bne.n	8006c04 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	615a      	str	r2, [r3, #20]
}
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	40000c00 	.word	0x40000c00
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800
 8006c38:	4000e000 	.word	0x4000e000
 8006c3c:	4000e400 	.word	0x4000e400

08006c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4b37      	ldr	r3, [pc, #220]	; (8006d48 <TIM_OC1_SetConfig+0x108>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f023 0302 	bic.w	r3, r3, #2
 8006c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a2d      	ldr	r2, [pc, #180]	; (8006d4c <TIM_OC1_SetConfig+0x10c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00f      	beq.n	8006cbc <TIM_OC1_SetConfig+0x7c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a2c      	ldr	r2, [pc, #176]	; (8006d50 <TIM_OC1_SetConfig+0x110>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_OC1_SetConfig+0x7c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a2b      	ldr	r2, [pc, #172]	; (8006d54 <TIM_OC1_SetConfig+0x114>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_OC1_SetConfig+0x7c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <TIM_OC1_SetConfig+0x118>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC1_SetConfig+0x7c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a29      	ldr	r2, [pc, #164]	; (8006d5c <TIM_OC1_SetConfig+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d10c      	bne.n	8006cd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0308 	bic.w	r3, r3, #8
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0304 	bic.w	r3, r3, #4
 8006cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <TIM_OC1_SetConfig+0x10c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <TIM_OC1_SetConfig+0xbe>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <TIM_OC1_SetConfig+0x110>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_OC1_SetConfig+0xbe>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a1a      	ldr	r2, [pc, #104]	; (8006d54 <TIM_OC1_SetConfig+0x114>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_OC1_SetConfig+0xbe>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a19      	ldr	r2, [pc, #100]	; (8006d58 <TIM_OC1_SetConfig+0x118>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_OC1_SetConfig+0xbe>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a18      	ldr	r2, [pc, #96]	; (8006d5c <TIM_OC1_SetConfig+0x11c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d111      	bne.n	8006d22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	621a      	str	r2, [r3, #32]
}
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	fffeff8f 	.word	0xfffeff8f
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40010400 	.word	0x40010400
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40014400 	.word	0x40014400
 8006d5c:	40014800 	.word	0x40014800

08006d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f023 0210 	bic.w	r2, r3, #16
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <TIM_OC2_SetConfig+0xfc>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0320 	bic.w	r3, r3, #32
 8006daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a29      	ldr	r2, [pc, #164]	; (8006e60 <TIM_OC2_SetConfig+0x100>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC2_SetConfig+0x68>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <TIM_OC2_SetConfig+0x104>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d10d      	bne.n	8006de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <TIM_OC2_SetConfig+0x100>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00f      	beq.n	8006e0c <TIM_OC2_SetConfig+0xac>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <TIM_OC2_SetConfig+0x104>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00b      	beq.n	8006e0c <TIM_OC2_SetConfig+0xac>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <TIM_OC2_SetConfig+0x108>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <TIM_OC2_SetConfig+0xac>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <TIM_OC2_SetConfig+0x10c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC2_SetConfig+0xac>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a1a      	ldr	r2, [pc, #104]	; (8006e70 <TIM_OC2_SetConfig+0x110>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d113      	bne.n	8006e34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	feff8fff 	.word	0xfeff8fff
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010400 	.word	0x40010400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800

08006e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4b33      	ldr	r3, [pc, #204]	; (8006f6c <TIM_OC3_SetConfig+0xf8>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <TIM_OC3_SetConfig+0xfc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_OC3_SetConfig+0x66>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <TIM_OC3_SetConfig+0x100>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10d      	bne.n	8006ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <TIM_OC3_SetConfig+0xfc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00f      	beq.n	8006f1e <TIM_OC3_SetConfig+0xaa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1c      	ldr	r2, [pc, #112]	; (8006f74 <TIM_OC3_SetConfig+0x100>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <TIM_OC3_SetConfig+0xaa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1b      	ldr	r2, [pc, #108]	; (8006f78 <TIM_OC3_SetConfig+0x104>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <TIM_OC3_SetConfig+0xaa>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1a      	ldr	r2, [pc, #104]	; (8006f7c <TIM_OC3_SetConfig+0x108>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC3_SetConfig+0xaa>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a19      	ldr	r2, [pc, #100]	; (8006f80 <TIM_OC3_SetConfig+0x10c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d113      	bne.n	8006f46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	fffeff8f 	.word	0xfffeff8f
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800

08006f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4b24      	ldr	r3, [pc, #144]	; (8007040 <TIM_OC4_SetConfig+0xbc>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	031b      	lsls	r3, r3, #12
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a19      	ldr	r2, [pc, #100]	; (8007044 <TIM_OC4_SetConfig+0xc0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00f      	beq.n	8007004 <TIM_OC4_SetConfig+0x80>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a18      	ldr	r2, [pc, #96]	; (8007048 <TIM_OC4_SetConfig+0xc4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00b      	beq.n	8007004 <TIM_OC4_SetConfig+0x80>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a17      	ldr	r2, [pc, #92]	; (800704c <TIM_OC4_SetConfig+0xc8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_OC4_SetConfig+0x80>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a16      	ldr	r2, [pc, #88]	; (8007050 <TIM_OC4_SetConfig+0xcc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC4_SetConfig+0x80>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a15      	ldr	r2, [pc, #84]	; (8007054 <TIM_OC4_SetConfig+0xd0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d109      	bne.n	8007018 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	019b      	lsls	r3, r3, #6
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	feff8fff 	.word	0xfeff8fff
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400
 800704c:	40014000 	.word	0x40014000
 8007050:	40014400 	.word	0x40014400
 8007054:	40014800 	.word	0x40014800

08007058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4b21      	ldr	r3, [pc, #132]	; (8007108 <TIM_OC5_SetConfig+0xb0>)
 8007084:	4013      	ands	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a18      	ldr	r2, [pc, #96]	; (800710c <TIM_OC5_SetConfig+0xb4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00f      	beq.n	80070ce <TIM_OC5_SetConfig+0x76>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a17      	ldr	r2, [pc, #92]	; (8007110 <TIM_OC5_SetConfig+0xb8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00b      	beq.n	80070ce <TIM_OC5_SetConfig+0x76>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a16      	ldr	r2, [pc, #88]	; (8007114 <TIM_OC5_SetConfig+0xbc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d007      	beq.n	80070ce <TIM_OC5_SetConfig+0x76>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a15      	ldr	r2, [pc, #84]	; (8007118 <TIM_OC5_SetConfig+0xc0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_OC5_SetConfig+0x76>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a14      	ldr	r2, [pc, #80]	; (800711c <TIM_OC5_SetConfig+0xc4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d109      	bne.n	80070e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	621a      	str	r2, [r3, #32]
}
 80070fc:	bf00      	nop
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	fffeff8f 	.word	0xfffeff8f
 800710c:	40010000 	.word	0x40010000
 8007110:	40010400 	.word	0x40010400
 8007114:	40014000 	.word	0x40014000
 8007118:	40014400 	.word	0x40014400
 800711c:	40014800 	.word	0x40014800

08007120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <TIM_OC6_SetConfig+0xb4>)
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	051b      	lsls	r3, r3, #20
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <TIM_OC6_SetConfig+0xb8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00f      	beq.n	8007198 <TIM_OC6_SetConfig+0x78>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a18      	ldr	r2, [pc, #96]	; (80071dc <TIM_OC6_SetConfig+0xbc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00b      	beq.n	8007198 <TIM_OC6_SetConfig+0x78>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <TIM_OC6_SetConfig+0xc0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_OC6_SetConfig+0x78>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <TIM_OC6_SetConfig+0xc4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_OC6_SetConfig+0x78>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <TIM_OC6_SetConfig+0xc8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d109      	bne.n	80071ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800719e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	feff8fff 	.word	0xfeff8fff
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800

080071ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2201      	movs	r2, #1
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	43db      	mvns	r3, r3
 800720e:	401a      	ands	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	431a      	orrs	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800724c:	2302      	movs	r3, #2
 800724e:	e077      	b.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a35      	ldr	r2, [pc, #212]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a34      	ldr	r2, [pc, #208]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d108      	bne.n	8007296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800728a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a25      	ldr	r2, [pc, #148]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d02c      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c2:	d027      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a22      	ldr	r2, [pc, #136]	; (8007354 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01d      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1f      	ldr	r2, [pc, #124]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1a      	ldr	r2, [pc, #104]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a18      	ldr	r2, [pc, #96]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a17      	ldr	r2, [pc, #92]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d10c      	bne.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	4313      	orrs	r3, r2
 8007324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40010000 	.word	0x40010000
 8007350:	40010400 	.word	0x40010400
 8007354:	40000400 	.word	0x40000400
 8007358:	40000800 	.word	0x40000800
 800735c:	40000c00 	.word	0x40000c00
 8007360:	40001800 	.word	0x40001800
 8007364:	40014000 	.word	0x40014000
 8007368:	4000e000 	.word	0x4000e000
 800736c:	4000e400 	.word	0x4000e400

08007370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007388:	2302      	movs	r3, #2
 800738a:	e087      	b.n	800749c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a25      	ldr	r2, [pc, #148]	; (80074ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d106      	bne.n	8007428 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d126      	bne.n	800748a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007446:	051b      	lsls	r3, r3, #20
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a0e      	ldr	r2, [pc, #56]	; (80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d106      	bne.n	800748a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40010400 	.word	0x40010400

080074b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e042      	b.n	8007548 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d106      	bne.n	80074da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7f9 fd95 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2224      	movs	r2, #36	; 0x24
 80074de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fcd6 	bl	8007ea4 <UART_SetConfig>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e022      	b.n	8007548 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fb36 	bl	8008b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800751e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800752e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fbbd 	bl	8008cc0 <UART_CheckIdleState>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007566:	2b20      	cmp	r3, #32
 8007568:	f040 8083 	bne.w	8007672 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_UART_Transmit+0x28>
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e07b      	b.n	8007674 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_UART_Transmit+0x3a>
 8007586:	2302      	movs	r3, #2
 8007588:	e074      	b.n	8007674 <HAL_UART_Transmit+0x124>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2221      	movs	r2, #33	; 0x21
 800759e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075a2:	f7fa f84f 	bl	8001644 <HAL_GetTick>
 80075a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c0:	d108      	bne.n	80075d4 <HAL_UART_Transmit+0x84>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	e003      	b.n	80075dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80075e4:	e02c      	b.n	8007640 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f001 fbb0 	bl	8008d56 <UART_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e039      	b.n	8007674 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	3302      	adds	r3, #2
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	e007      	b.n	800762e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	3301      	adds	r3, #1
 800762c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1cc      	bne.n	80075e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2200      	movs	r2, #0
 8007654:	2140      	movs	r1, #64	; 0x40
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f001 fb7d 	bl	8008d56 <UART_WaitOnFlagUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e006      	b.n	8007674 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e000      	b.n	8007674 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
  }
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007690:	2b20      	cmp	r3, #32
 8007692:	d142      	bne.n	800771a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_UART_Receive_IT+0x24>
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e03b      	b.n	800771c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Receive_IT+0x36>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e034      	b.n	800771c <HAL_UART_Receive_IT+0xa0>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_UART_Receive_IT+0xa8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d01f      	beq.n	800770a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d018      	beq.n	800770a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	613b      	str	r3, [r7, #16]
   return(result);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	69f9      	ldr	r1, [r7, #28]
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	61bb      	str	r3, [r7, #24]
   return(result);
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e6      	bne.n	80076d8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	461a      	mov	r2, r3
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f001 fbe9 	bl	8008ee8 <UART_Start_Receive_IT>
 8007716:	4603      	mov	r3, r0
 8007718:	e000      	b.n	800771c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800771a:	2302      	movs	r3, #2
  }
}
 800771c:	4618      	mov	r0, r3
 800771e:	3728      	adds	r7, #40	; 0x28
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	58000c00 	.word	0x58000c00

08007728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b0ba      	sub	sp, #232	; 0xe8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800774e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007752:	f640 030f 	movw	r3, #2063	; 0x80f
 8007756:	4013      	ands	r3, r2
 8007758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800775c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11b      	bne.n	800779c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d015      	beq.n	800779c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d105      	bne.n	8007788 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800777c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 835a 	beq.w	8007e46 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
      }
      return;
 800779a:	e354      	b.n	8007e46 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800779c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 811f 	beq.w	80079e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80077aa:	4b8b      	ldr	r3, [pc, #556]	; (80079d8 <HAL_UART_IRQHandler+0x2b0>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077b6:	4b89      	ldr	r3, [pc, #548]	; (80079dc <HAL_UART_IRQHandler+0x2b4>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8112 	beq.w	80079e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d011      	beq.n	80077f0 <HAL_UART_IRQHandler+0xc8>
 80077cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2201      	movs	r2, #1
 80077de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d011      	beq.n	8007820 <HAL_UART_IRQHandler+0xf8>
 80077fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2202      	movs	r2, #2
 800780e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007816:	f043 0204 	orr.w	r2, r3, #4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d011      	beq.n	8007850 <HAL_UART_IRQHandler+0x128>
 800782c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2204      	movs	r2, #4
 800783e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007846:	f043 0202 	orr.w	r2, r3, #2
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f003 0308 	and.w	r3, r3, #8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d017      	beq.n	800788c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007868:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800786c:	4b5a      	ldr	r3, [pc, #360]	; (80079d8 <HAL_UART_IRQHandler+0x2b0>)
 800786e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2208      	movs	r2, #8
 800787a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007882:	f043 0208 	orr.w	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <HAL_UART_IRQHandler+0x196>
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00c      	beq.n	80078be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 82c0 	beq.w	8007e4a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d013      	beq.n	80078fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d005      	beq.n	8007922 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800791a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04f      	beq.n	80079c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 fc0a 	bl	800913c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007932:	2b40      	cmp	r3, #64	; 0x40
 8007934:	d141      	bne.n	80079ba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800794c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800796e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800797a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1d9      	bne.n	8007936 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d013      	beq.n	80079b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800798e:	4a14      	ldr	r2, [pc, #80]	; (80079e0 <HAL_UART_IRQHandler+0x2b8>)
 8007990:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007996:	4618      	mov	r0, r3
 8007998:	f7fa fe0c 	bl	80025b4 <HAL_DMA_Abort_IT>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d017      	beq.n	80079d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	e00f      	b.n	80079d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa60 	bl	8007e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	e00b      	b.n	80079d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa5c 	bl	8007e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	e007      	b.n	80079d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa58 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80079d0:	e23b      	b.n	8007e4a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d2:	bf00      	nop
    return;
 80079d4:	e239      	b.n	8007e4a <HAL_UART_IRQHandler+0x722>
 80079d6:	bf00      	nop
 80079d8:	10000001 	.word	0x10000001
 80079dc:	04000120 	.word	0x04000120
 80079e0:	08009209 	.word	0x08009209

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	f040 81ce 	bne.w	8007d8a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 81c7 	beq.w	8007d8a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 81c0 	beq.w	8007d8a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	f040 813b 	bne.w	8007c98 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a8b      	ldr	r2, [pc, #556]	; (8007c58 <HAL_UART_IRQHandler+0x530>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d059      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a89      	ldr	r2, [pc, #548]	; (8007c5c <HAL_UART_IRQHandler+0x534>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d053      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a87      	ldr	r2, [pc, #540]	; (8007c60 <HAL_UART_IRQHandler+0x538>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d04d      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a85      	ldr	r2, [pc, #532]	; (8007c64 <HAL_UART_IRQHandler+0x53c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d047      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a83      	ldr	r2, [pc, #524]	; (8007c68 <HAL_UART_IRQHandler+0x540>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d041      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a81      	ldr	r2, [pc, #516]	; (8007c6c <HAL_UART_IRQHandler+0x544>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d03b      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a7f      	ldr	r2, [pc, #508]	; (8007c70 <HAL_UART_IRQHandler+0x548>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d035      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a7d      	ldr	r2, [pc, #500]	; (8007c74 <HAL_UART_IRQHandler+0x54c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d02f      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a7b      	ldr	r2, [pc, #492]	; (8007c78 <HAL_UART_IRQHandler+0x550>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d029      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a79      	ldr	r2, [pc, #484]	; (8007c7c <HAL_UART_IRQHandler+0x554>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d023      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a77      	ldr	r2, [pc, #476]	; (8007c80 <HAL_UART_IRQHandler+0x558>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01d      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a75      	ldr	r2, [pc, #468]	; (8007c84 <HAL_UART_IRQHandler+0x55c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d017      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a73      	ldr	r2, [pc, #460]	; (8007c88 <HAL_UART_IRQHandler+0x560>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d011      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a71      	ldr	r2, [pc, #452]	; (8007c8c <HAL_UART_IRQHandler+0x564>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a6f      	ldr	r2, [pc, #444]	; (8007c90 <HAL_UART_IRQHandler+0x568>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d005      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x3ba>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6d      	ldr	r2, [pc, #436]	; (8007c94 <HAL_UART_IRQHandler+0x56c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d105      	bne.n	8007aee <HAL_UART_IRQHandler+0x3c6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	e004      	b.n	8007af8 <HAL_UART_IRQHandler+0x3d0>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 81a4 	beq.w	8007e4e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b10:	429a      	cmp	r2, r3
 8007b12:	f080 819c 	bcs.w	8007e4e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2a:	f000 8086 	beq.w	8007c3a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1da      	bne.n	8007b2e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ba4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e1      	bne.n	8007b78 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e3      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0a:	f023 0310 	bic.w	r3, r3, #16
 8007c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e4      	bne.n	8007bfa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fa f99f 	bl	8001f78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f91c 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c54:	e0fb      	b.n	8007e4e <HAL_UART_IRQHandler+0x726>
 8007c56:	bf00      	nop
 8007c58:	40020010 	.word	0x40020010
 8007c5c:	40020028 	.word	0x40020028
 8007c60:	40020040 	.word	0x40020040
 8007c64:	40020058 	.word	0x40020058
 8007c68:	40020070 	.word	0x40020070
 8007c6c:	40020088 	.word	0x40020088
 8007c70:	400200a0 	.word	0x400200a0
 8007c74:	400200b8 	.word	0x400200b8
 8007c78:	40020410 	.word	0x40020410
 8007c7c:	40020428 	.word	0x40020428
 8007c80:	40020440 	.word	0x40020440
 8007c84:	40020458 	.word	0x40020458
 8007c88:	40020470 	.word	0x40020470
 8007c8c:	40020488 	.word	0x40020488
 8007c90:	400204a0 	.word	0x400204a0
 8007c94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80cc 	beq.w	8007e52 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80c7 	beq.w	8007e52 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e4      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	623b      	str	r3, [r7, #32]
   return(result);
 8007d0a:	6a3a      	ldr	r2, [r7, #32]
 8007d0c:	4b54      	ldr	r3, [pc, #336]	; (8007e60 <HAL_UART_IRQHandler+0x738>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8007d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e3      	bne.n	8007cfa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0310 	bic.w	r3, r3, #16
 8007d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	69b9      	ldr	r1, [r7, #24]
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	617b      	str	r3, [r7, #20]
   return(result);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e4      	bne.n	8007d46 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f882 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d88:	e063      	b.n	8007e52 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00e      	beq.n	8007db4 <HAL_UART_IRQHandler+0x68c>
 8007d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fec9 	bl	8009b44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db2:	e051      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d014      	beq.n	8007dea <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d008      	beq.n	8007dea <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d03a      	beq.n	8007e56 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	4798      	blx	r3
    }
    return;
 8007de8:	e035      	b.n	8007e56 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <HAL_UART_IRQHandler+0x6e2>
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fa16 	bl	8009234 <UART_EndTransmit_IT>
    return;
 8007e08:	e026      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <HAL_UART_IRQHandler+0x702>
 8007e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fea2 	bl	8009b6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e28:	e016      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d010      	beq.n	8007e58 <HAL_UART_IRQHandler+0x730>
 8007e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da0c      	bge.n	8007e58 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 fe8a 	bl	8009b58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e44:	e008      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
      return;
 8007e46:	bf00      	nop
 8007e48:	e006      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
    return;
 8007e4a:	bf00      	nop
 8007e4c:	e004      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
      return;
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
      return;
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <HAL_UART_IRQHandler+0x730>
    return;
 8007e56:	bf00      	nop
  }
}
 8007e58:	37e8      	adds	r7, #232	; 0xe8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	effffffe 	.word	0xeffffffe

08007e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ea8:	b092      	sub	sp, #72	; 0x48
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4bbe      	ldr	r3, [pc, #760]	; (80081cc <UART_SetConfig+0x328>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4ab3      	ldr	r2, [pc, #716]	; (80081d0 <UART_SetConfig+0x32c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	4baf      	ldr	r3, [pc, #700]	; (80081d4 <UART_SetConfig+0x330>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f20:	430b      	orrs	r3, r1
 8007f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	f023 010f 	bic.w	r1, r3, #15
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4aa6      	ldr	r2, [pc, #664]	; (80081d8 <UART_SetConfig+0x334>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d177      	bne.n	8008034 <UART_SetConfig+0x190>
 8007f44:	4ba5      	ldr	r3, [pc, #660]	; (80081dc <UART_SetConfig+0x338>)
 8007f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f4c:	2b28      	cmp	r3, #40	; 0x28
 8007f4e:	d86d      	bhi.n	800802c <UART_SetConfig+0x188>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0xb4>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007ffd 	.word	0x08007ffd
 8007f5c:	0800802d 	.word	0x0800802d
 8007f60:	0800802d 	.word	0x0800802d
 8007f64:	0800802d 	.word	0x0800802d
 8007f68:	0800802d 	.word	0x0800802d
 8007f6c:	0800802d 	.word	0x0800802d
 8007f70:	0800802d 	.word	0x0800802d
 8007f74:	0800802d 	.word	0x0800802d
 8007f78:	08008005 	.word	0x08008005
 8007f7c:	0800802d 	.word	0x0800802d
 8007f80:	0800802d 	.word	0x0800802d
 8007f84:	0800802d 	.word	0x0800802d
 8007f88:	0800802d 	.word	0x0800802d
 8007f8c:	0800802d 	.word	0x0800802d
 8007f90:	0800802d 	.word	0x0800802d
 8007f94:	0800802d 	.word	0x0800802d
 8007f98:	0800800d 	.word	0x0800800d
 8007f9c:	0800802d 	.word	0x0800802d
 8007fa0:	0800802d 	.word	0x0800802d
 8007fa4:	0800802d 	.word	0x0800802d
 8007fa8:	0800802d 	.word	0x0800802d
 8007fac:	0800802d 	.word	0x0800802d
 8007fb0:	0800802d 	.word	0x0800802d
 8007fb4:	0800802d 	.word	0x0800802d
 8007fb8:	08008015 	.word	0x08008015
 8007fbc:	0800802d 	.word	0x0800802d
 8007fc0:	0800802d 	.word	0x0800802d
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	0800802d 	.word	0x0800802d
 8007fcc:	0800802d 	.word	0x0800802d
 8007fd0:	0800802d 	.word	0x0800802d
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	0800801d 	.word	0x0800801d
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	0800802d 	.word	0x0800802d
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	0800802d 	.word	0x0800802d
 8007fec:	0800802d 	.word	0x0800802d
 8007ff0:	0800802d 	.word	0x0800802d
 8007ff4:	0800802d 	.word	0x0800802d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e326      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008004:	2304      	movs	r3, #4
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e322      	b.n	8008652 <UART_SetConfig+0x7ae>
 800800c:	2308      	movs	r3, #8
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e31e      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008014:	2310      	movs	r3, #16
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e31a      	b.n	8008652 <UART_SetConfig+0x7ae>
 800801c:	2320      	movs	r3, #32
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e316      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008024:	2340      	movs	r3, #64	; 0x40
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e312      	b.n	8008652 <UART_SetConfig+0x7ae>
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e30e      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a69      	ldr	r2, [pc, #420]	; (80081e0 <UART_SetConfig+0x33c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d130      	bne.n	80080a0 <UART_SetConfig+0x1fc>
 800803e:	4b67      	ldr	r3, [pc, #412]	; (80081dc <UART_SetConfig+0x338>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b05      	cmp	r3, #5
 8008048:	d826      	bhi.n	8008098 <UART_SetConfig+0x1f4>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x1ac>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008069 	.word	0x08008069
 8008054:	08008071 	.word	0x08008071
 8008058:	08008079 	.word	0x08008079
 800805c:	08008081 	.word	0x08008081
 8008060:	08008089 	.word	0x08008089
 8008064:	08008091 	.word	0x08008091
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e2f0      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008070:	2304      	movs	r3, #4
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e2ec      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008078:	2308      	movs	r3, #8
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e2e8      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e2e4      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008088:	2320      	movs	r3, #32
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e2e0      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e2dc      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008098:	2380      	movs	r3, #128	; 0x80
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809e:	e2d8      	b.n	8008652 <UART_SetConfig+0x7ae>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a4f      	ldr	r2, [pc, #316]	; (80081e4 <UART_SetConfig+0x340>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d130      	bne.n	800810c <UART_SetConfig+0x268>
 80080aa:	4b4c      	ldr	r3, [pc, #304]	; (80081dc <UART_SetConfig+0x338>)
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d826      	bhi.n	8008104 <UART_SetConfig+0x260>
 80080b6:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <UART_SetConfig+0x218>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e2ba      	b.n	8008652 <UART_SetConfig+0x7ae>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e2b6      	b.n	8008652 <UART_SetConfig+0x7ae>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e2b2      	b.n	8008652 <UART_SetConfig+0x7ae>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e2ae      	b.n	8008652 <UART_SetConfig+0x7ae>
 80080f4:	2320      	movs	r3, #32
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fa:	e2aa      	b.n	8008652 <UART_SetConfig+0x7ae>
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008102:	e2a6      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008104:	2380      	movs	r3, #128	; 0x80
 8008106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810a:	e2a2      	b.n	8008652 <UART_SetConfig+0x7ae>
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a35      	ldr	r2, [pc, #212]	; (80081e8 <UART_SetConfig+0x344>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d130      	bne.n	8008178 <UART_SetConfig+0x2d4>
 8008116:	4b31      	ldr	r3, [pc, #196]	; (80081dc <UART_SetConfig+0x338>)
 8008118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b05      	cmp	r3, #5
 8008120:	d826      	bhi.n	8008170 <UART_SetConfig+0x2cc>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <UART_SetConfig+0x284>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	08008141 	.word	0x08008141
 800812c:	08008149 	.word	0x08008149
 8008130:	08008151 	.word	0x08008151
 8008134:	08008159 	.word	0x08008159
 8008138:	08008161 	.word	0x08008161
 800813c:	08008169 	.word	0x08008169
 8008140:	2300      	movs	r3, #0
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e284      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e280      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e27c      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e278      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008160:	2320      	movs	r3, #32
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008166:	e274      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816e:	e270      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008176:	e26c      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1b      	ldr	r2, [pc, #108]	; (80081ec <UART_SetConfig+0x348>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d142      	bne.n	8008208 <UART_SetConfig+0x364>
 8008182:	4b16      	ldr	r3, [pc, #88]	; (80081dc <UART_SetConfig+0x338>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b05      	cmp	r3, #5
 800818c:	d838      	bhi.n	8008200 <UART_SetConfig+0x35c>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0x2f0>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081b5 	.word	0x080081b5
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081f1 	.word	0x080081f1
 80081a8:	080081f9 	.word	0x080081f9
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e24e      	b.n	8008652 <UART_SetConfig+0x7ae>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ba:	e24a      	b.n	8008652 <UART_SetConfig+0x7ae>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c2:	e246      	b.n	8008652 <UART_SetConfig+0x7ae>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e242      	b.n	8008652 <UART_SetConfig+0x7ae>
 80081cc:	cfff69f3 	.word	0xcfff69f3
 80081d0:	58000c00 	.word	0x58000c00
 80081d4:	11fff4ff 	.word	0x11fff4ff
 80081d8:	40011000 	.word	0x40011000
 80081dc:	58024400 	.word	0x58024400
 80081e0:	40004400 	.word	0x40004400
 80081e4:	40004800 	.word	0x40004800
 80081e8:	40004c00 	.word	0x40004c00
 80081ec:	40005000 	.word	0x40005000
 80081f0:	2320      	movs	r3, #32
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f6:	e22c      	b.n	8008652 <UART_SetConfig+0x7ae>
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fe:	e228      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e224      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4ab1      	ldr	r2, [pc, #708]	; (80084d4 <UART_SetConfig+0x630>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d176      	bne.n	8008300 <UART_SetConfig+0x45c>
 8008212:	4bb1      	ldr	r3, [pc, #708]	; (80084d8 <UART_SetConfig+0x634>)
 8008214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800821a:	2b28      	cmp	r3, #40	; 0x28
 800821c:	d86c      	bhi.n	80082f8 <UART_SetConfig+0x454>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <UART_SetConfig+0x380>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	080082c9 	.word	0x080082c9
 8008228:	080082f9 	.word	0x080082f9
 800822c:	080082f9 	.word	0x080082f9
 8008230:	080082f9 	.word	0x080082f9
 8008234:	080082f9 	.word	0x080082f9
 8008238:	080082f9 	.word	0x080082f9
 800823c:	080082f9 	.word	0x080082f9
 8008240:	080082f9 	.word	0x080082f9
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082f9 	.word	0x080082f9
 800824c:	080082f9 	.word	0x080082f9
 8008250:	080082f9 	.word	0x080082f9
 8008254:	080082f9 	.word	0x080082f9
 8008258:	080082f9 	.word	0x080082f9
 800825c:	080082f9 	.word	0x080082f9
 8008260:	080082f9 	.word	0x080082f9
 8008264:	080082d9 	.word	0x080082d9
 8008268:	080082f9 	.word	0x080082f9
 800826c:	080082f9 	.word	0x080082f9
 8008270:	080082f9 	.word	0x080082f9
 8008274:	080082f9 	.word	0x080082f9
 8008278:	080082f9 	.word	0x080082f9
 800827c:	080082f9 	.word	0x080082f9
 8008280:	080082f9 	.word	0x080082f9
 8008284:	080082e1 	.word	0x080082e1
 8008288:	080082f9 	.word	0x080082f9
 800828c:	080082f9 	.word	0x080082f9
 8008290:	080082f9 	.word	0x080082f9
 8008294:	080082f9 	.word	0x080082f9
 8008298:	080082f9 	.word	0x080082f9
 800829c:	080082f9 	.word	0x080082f9
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	080082e9 	.word	0x080082e9
 80082a8:	080082f9 	.word	0x080082f9
 80082ac:	080082f9 	.word	0x080082f9
 80082b0:	080082f9 	.word	0x080082f9
 80082b4:	080082f9 	.word	0x080082f9
 80082b8:	080082f9 	.word	0x080082f9
 80082bc:	080082f9 	.word	0x080082f9
 80082c0:	080082f9 	.word	0x080082f9
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e1c0      	b.n	8008652 <UART_SetConfig+0x7ae>
 80082d0:	2304      	movs	r3, #4
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e1bc      	b.n	8008652 <UART_SetConfig+0x7ae>
 80082d8:	2308      	movs	r3, #8
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e1b8      	b.n	8008652 <UART_SetConfig+0x7ae>
 80082e0:	2310      	movs	r3, #16
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e1b4      	b.n	8008652 <UART_SetConfig+0x7ae>
 80082e8:	2320      	movs	r3, #32
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ee:	e1b0      	b.n	8008652 <UART_SetConfig+0x7ae>
 80082f0:	2340      	movs	r3, #64	; 0x40
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e1ac      	b.n	8008652 <UART_SetConfig+0x7ae>
 80082f8:	2380      	movs	r3, #128	; 0x80
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e1a8      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a75      	ldr	r2, [pc, #468]	; (80084dc <UART_SetConfig+0x638>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d130      	bne.n	800836c <UART_SetConfig+0x4c8>
 800830a:	4b73      	ldr	r3, [pc, #460]	; (80084d8 <UART_SetConfig+0x634>)
 800830c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	2b05      	cmp	r3, #5
 8008314:	d826      	bhi.n	8008364 <UART_SetConfig+0x4c0>
 8008316:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x478>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008335 	.word	0x08008335
 8008320:	0800833d 	.word	0x0800833d
 8008324:	08008345 	.word	0x08008345
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008355 	.word	0x08008355
 8008330:	0800835d 	.word	0x0800835d
 8008334:	2300      	movs	r3, #0
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e18a      	b.n	8008652 <UART_SetConfig+0x7ae>
 800833c:	2304      	movs	r3, #4
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e186      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008344:	2308      	movs	r3, #8
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e182      	b.n	8008652 <UART_SetConfig+0x7ae>
 800834c:	2310      	movs	r3, #16
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e17e      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008354:	2320      	movs	r3, #32
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e17a      	b.n	8008652 <UART_SetConfig+0x7ae>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008362:	e176      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e172      	b.n	8008652 <UART_SetConfig+0x7ae>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a5b      	ldr	r2, [pc, #364]	; (80084e0 <UART_SetConfig+0x63c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d130      	bne.n	80083d8 <UART_SetConfig+0x534>
 8008376:	4b58      	ldr	r3, [pc, #352]	; (80084d8 <UART_SetConfig+0x634>)
 8008378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	2b05      	cmp	r3, #5
 8008380:	d826      	bhi.n	80083d0 <UART_SetConfig+0x52c>
 8008382:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <UART_SetConfig+0x4e4>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083b1 	.word	0x080083b1
 8008394:	080083b9 	.word	0x080083b9
 8008398:	080083c1 	.word	0x080083c1
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	2300      	movs	r3, #0
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e154      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083a8:	2304      	movs	r3, #4
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ae:	e150      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083b0:	2308      	movs	r3, #8
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e14c      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083b8:	2310      	movs	r3, #16
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e148      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083c0:	2320      	movs	r3, #32
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c6:	e144      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ce:	e140      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083d0:	2380      	movs	r3, #128	; 0x80
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d6:	e13c      	b.n	8008652 <UART_SetConfig+0x7ae>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a41      	ldr	r2, [pc, #260]	; (80084e4 <UART_SetConfig+0x640>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	f040 8082 	bne.w	80084e8 <UART_SetConfig+0x644>
 80083e4:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <UART_SetConfig+0x634>)
 80083e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ec:	2b28      	cmp	r3, #40	; 0x28
 80083ee:	d86d      	bhi.n	80084cc <UART_SetConfig+0x628>
 80083f0:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x554>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	080084cd 	.word	0x080084cd
 8008400:	080084cd 	.word	0x080084cd
 8008404:	080084cd 	.word	0x080084cd
 8008408:	080084cd 	.word	0x080084cd
 800840c:	080084cd 	.word	0x080084cd
 8008410:	080084cd 	.word	0x080084cd
 8008414:	080084cd 	.word	0x080084cd
 8008418:	080084a5 	.word	0x080084a5
 800841c:	080084cd 	.word	0x080084cd
 8008420:	080084cd 	.word	0x080084cd
 8008424:	080084cd 	.word	0x080084cd
 8008428:	080084cd 	.word	0x080084cd
 800842c:	080084cd 	.word	0x080084cd
 8008430:	080084cd 	.word	0x080084cd
 8008434:	080084cd 	.word	0x080084cd
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084cd 	.word	0x080084cd
 8008440:	080084cd 	.word	0x080084cd
 8008444:	080084cd 	.word	0x080084cd
 8008448:	080084cd 	.word	0x080084cd
 800844c:	080084cd 	.word	0x080084cd
 8008450:	080084cd 	.word	0x080084cd
 8008454:	080084cd 	.word	0x080084cd
 8008458:	080084b5 	.word	0x080084b5
 800845c:	080084cd 	.word	0x080084cd
 8008460:	080084cd 	.word	0x080084cd
 8008464:	080084cd 	.word	0x080084cd
 8008468:	080084cd 	.word	0x080084cd
 800846c:	080084cd 	.word	0x080084cd
 8008470:	080084cd 	.word	0x080084cd
 8008474:	080084cd 	.word	0x080084cd
 8008478:	080084bd 	.word	0x080084bd
 800847c:	080084cd 	.word	0x080084cd
 8008480:	080084cd 	.word	0x080084cd
 8008484:	080084cd 	.word	0x080084cd
 8008488:	080084cd 	.word	0x080084cd
 800848c:	080084cd 	.word	0x080084cd
 8008490:	080084cd 	.word	0x080084cd
 8008494:	080084cd 	.word	0x080084cd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	2301      	movs	r3, #1
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e0d6      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e0d2      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e0ce      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e0ca      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084bc:	2320      	movs	r3, #32
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e0c6      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e0c2      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e0be      	b.n	8008652 <UART_SetConfig+0x7ae>
 80084d4:	40011400 	.word	0x40011400
 80084d8:	58024400 	.word	0x58024400
 80084dc:	40007800 	.word	0x40007800
 80084e0:	40007c00 	.word	0x40007c00
 80084e4:	40011800 	.word	0x40011800
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4aad      	ldr	r2, [pc, #692]	; (80087a4 <UART_SetConfig+0x900>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d176      	bne.n	80085e0 <UART_SetConfig+0x73c>
 80084f2:	4bad      	ldr	r3, [pc, #692]	; (80087a8 <UART_SetConfig+0x904>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084fa:	2b28      	cmp	r3, #40	; 0x28
 80084fc:	d86c      	bhi.n	80085d8 <UART_SetConfig+0x734>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0x660>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	080085a9 	.word	0x080085a9
 8008508:	080085d9 	.word	0x080085d9
 800850c:	080085d9 	.word	0x080085d9
 8008510:	080085d9 	.word	0x080085d9
 8008514:	080085d9 	.word	0x080085d9
 8008518:	080085d9 	.word	0x080085d9
 800851c:	080085d9 	.word	0x080085d9
 8008520:	080085d9 	.word	0x080085d9
 8008524:	080085b1 	.word	0x080085b1
 8008528:	080085d9 	.word	0x080085d9
 800852c:	080085d9 	.word	0x080085d9
 8008530:	080085d9 	.word	0x080085d9
 8008534:	080085d9 	.word	0x080085d9
 8008538:	080085d9 	.word	0x080085d9
 800853c:	080085d9 	.word	0x080085d9
 8008540:	080085d9 	.word	0x080085d9
 8008544:	080085b9 	.word	0x080085b9
 8008548:	080085d9 	.word	0x080085d9
 800854c:	080085d9 	.word	0x080085d9
 8008550:	080085d9 	.word	0x080085d9
 8008554:	080085d9 	.word	0x080085d9
 8008558:	080085d9 	.word	0x080085d9
 800855c:	080085d9 	.word	0x080085d9
 8008560:	080085d9 	.word	0x080085d9
 8008564:	080085c1 	.word	0x080085c1
 8008568:	080085d9 	.word	0x080085d9
 800856c:	080085d9 	.word	0x080085d9
 8008570:	080085d9 	.word	0x080085d9
 8008574:	080085d9 	.word	0x080085d9
 8008578:	080085d9 	.word	0x080085d9
 800857c:	080085d9 	.word	0x080085d9
 8008580:	080085d9 	.word	0x080085d9
 8008584:	080085c9 	.word	0x080085c9
 8008588:	080085d9 	.word	0x080085d9
 800858c:	080085d9 	.word	0x080085d9
 8008590:	080085d9 	.word	0x080085d9
 8008594:	080085d9 	.word	0x080085d9
 8008598:	080085d9 	.word	0x080085d9
 800859c:	080085d9 	.word	0x080085d9
 80085a0:	080085d9 	.word	0x080085d9
 80085a4:	080085d1 	.word	0x080085d1
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e050      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085b0:	2304      	movs	r3, #4
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e04c      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085b8:	2308      	movs	r3, #8
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e048      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085c0:	2310      	movs	r3, #16
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e044      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085c8:	2320      	movs	r3, #32
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e040      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e03c      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085d8:	2380      	movs	r3, #128	; 0x80
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e038      	b.n	8008652 <UART_SetConfig+0x7ae>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a71      	ldr	r2, [pc, #452]	; (80087ac <UART_SetConfig+0x908>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d130      	bne.n	800864c <UART_SetConfig+0x7a8>
 80085ea:	4b6f      	ldr	r3, [pc, #444]	; (80087a8 <UART_SetConfig+0x904>)
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d826      	bhi.n	8008644 <UART_SetConfig+0x7a0>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x758>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008615 	.word	0x08008615
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008625 	.word	0x08008625
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008635 	.word	0x08008635
 8008610:	0800863d 	.word	0x0800863d
 8008614:	2302      	movs	r3, #2
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e01a      	b.n	8008652 <UART_SetConfig+0x7ae>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e016      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e012      	b.n	8008652 <UART_SetConfig+0x7ae>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e00e      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008634:	2320      	movs	r3, #32
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e00a      	b.n	8008652 <UART_SetConfig+0x7ae>
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e006      	b.n	8008652 <UART_SetConfig+0x7ae>
 8008644:	2380      	movs	r3, #128	; 0x80
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864a:	e002      	b.n	8008652 <UART_SetConfig+0x7ae>
 800864c:	2380      	movs	r3, #128	; 0x80
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a55      	ldr	r2, [pc, #340]	; (80087ac <UART_SetConfig+0x908>)
 8008658:	4293      	cmp	r3, r2
 800865a:	f040 80f8 	bne.w	800884e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800865e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008662:	2b20      	cmp	r3, #32
 8008664:	dc46      	bgt.n	80086f4 <UART_SetConfig+0x850>
 8008666:	2b02      	cmp	r3, #2
 8008668:	db75      	blt.n	8008756 <UART_SetConfig+0x8b2>
 800866a:	3b02      	subs	r3, #2
 800866c:	2b1e      	cmp	r3, #30
 800866e:	d872      	bhi.n	8008756 <UART_SetConfig+0x8b2>
 8008670:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <UART_SetConfig+0x7d4>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	080086fb 	.word	0x080086fb
 800867c:	08008757 	.word	0x08008757
 8008680:	08008703 	.word	0x08008703
 8008684:	08008757 	.word	0x08008757
 8008688:	08008757 	.word	0x08008757
 800868c:	08008757 	.word	0x08008757
 8008690:	08008713 	.word	0x08008713
 8008694:	08008757 	.word	0x08008757
 8008698:	08008757 	.word	0x08008757
 800869c:	08008757 	.word	0x08008757
 80086a0:	08008757 	.word	0x08008757
 80086a4:	08008757 	.word	0x08008757
 80086a8:	08008757 	.word	0x08008757
 80086ac:	08008757 	.word	0x08008757
 80086b0:	08008723 	.word	0x08008723
 80086b4:	08008757 	.word	0x08008757
 80086b8:	08008757 	.word	0x08008757
 80086bc:	08008757 	.word	0x08008757
 80086c0:	08008757 	.word	0x08008757
 80086c4:	08008757 	.word	0x08008757
 80086c8:	08008757 	.word	0x08008757
 80086cc:	08008757 	.word	0x08008757
 80086d0:	08008757 	.word	0x08008757
 80086d4:	08008757 	.word	0x08008757
 80086d8:	08008757 	.word	0x08008757
 80086dc:	08008757 	.word	0x08008757
 80086e0:	08008757 	.word	0x08008757
 80086e4:	08008757 	.word	0x08008757
 80086e8:	08008757 	.word	0x08008757
 80086ec:	08008757 	.word	0x08008757
 80086f0:	08008749 	.word	0x08008749
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d02a      	beq.n	800874e <UART_SetConfig+0x8aa>
 80086f8:	e02d      	b.n	8008756 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80086fa:	f7fd fb51 	bl	8005da0 <HAL_RCCEx_GetD3PCLK1Freq>
 80086fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008700:	e02f      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd fb60 	bl	8005dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008710:	e027      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4618      	mov	r0, r3
 8008718:	f7fd fcac 	bl	8006074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008720:	e01f      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008722:	4b21      	ldr	r3, [pc, #132]	; (80087a8 <UART_SetConfig+0x904>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800872e:	4b1e      	ldr	r3, [pc, #120]	; (80087a8 <UART_SetConfig+0x904>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	4a1d      	ldr	r2, [pc, #116]	; (80087b0 <UART_SetConfig+0x90c>)
 800873a:	fa22 f303 	lsr.w	r3, r2, r3
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008740:	e00f      	b.n	8008762 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <UART_SetConfig+0x90c>)
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008746:	e00c      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008748:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <UART_SetConfig+0x910>)
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800874c:	e009      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	e005      	b.n	8008762 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 81ee 	beq.w	8008b46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	4a12      	ldr	r2, [pc, #72]	; (80087b8 <UART_SetConfig+0x914>)
 8008770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008774:	461a      	mov	r2, r3
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	fbb3 f3f2 	udiv	r3, r3, r2
 800877c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	4413      	add	r3, r2
 8008788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878a:	429a      	cmp	r2, r3
 800878c:	d305      	bcc.n	800879a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008796:	429a      	cmp	r2, r3
 8008798:	d910      	bls.n	80087bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087a0:	e1d1      	b.n	8008b46 <UART_SetConfig+0xca2>
 80087a2:	bf00      	nop
 80087a4:	40011c00 	.word	0x40011c00
 80087a8:	58024400 	.word	0x58024400
 80087ac:	58000c00 	.word	0x58000c00
 80087b0:	03d09000 	.word	0x03d09000
 80087b4:	003d0900 	.word	0x003d0900
 80087b8:	08009e74 	.word	0x08009e74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	2200      	movs	r2, #0
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	60fa      	str	r2, [r7, #12]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	4ac0      	ldr	r2, [pc, #768]	; (8008acc <UART_SetConfig+0xc28>)
 80087ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2200      	movs	r2, #0
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087de:	f7f7 fd9f 	bl	8000320 <__aeabi_uldivmod>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4610      	mov	r0, r2
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	020b      	lsls	r3, r1, #8
 80087f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087f8:	0202      	lsls	r2, r0, #8
 80087fa:	6979      	ldr	r1, [r7, #20]
 80087fc:	6849      	ldr	r1, [r1, #4]
 80087fe:	0849      	lsrs	r1, r1, #1
 8008800:	2000      	movs	r0, #0
 8008802:	460c      	mov	r4, r1
 8008804:	4605      	mov	r5, r0
 8008806:	eb12 0804 	adds.w	r8, r2, r4
 800880a:	eb43 0905 	adc.w	r9, r3, r5
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	469a      	mov	sl, r3
 8008816:	4693      	mov	fp, r2
 8008818:	4652      	mov	r2, sl
 800881a:	465b      	mov	r3, fp
 800881c:	4640      	mov	r0, r8
 800881e:	4649      	mov	r1, r9
 8008820:	f7f7 fd7e 	bl	8000320 <__aeabi_uldivmod>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4613      	mov	r3, r2
 800882a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008832:	d308      	bcc.n	8008846 <UART_SetConfig+0x9a2>
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883a:	d204      	bcs.n	8008846 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008842:	60da      	str	r2, [r3, #12]
 8008844:	e17f      	b.n	8008b46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800884c:	e17b      	b.n	8008b46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008856:	f040 80bd 	bne.w	80089d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800885a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800885e:	2b20      	cmp	r3, #32
 8008860:	dc48      	bgt.n	80088f4 <UART_SetConfig+0xa50>
 8008862:	2b00      	cmp	r3, #0
 8008864:	db7b      	blt.n	800895e <UART_SetConfig+0xaba>
 8008866:	2b20      	cmp	r3, #32
 8008868:	d879      	bhi.n	800895e <UART_SetConfig+0xaba>
 800886a:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x9cc>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	080088fb 	.word	0x080088fb
 8008874:	08008903 	.word	0x08008903
 8008878:	0800895f 	.word	0x0800895f
 800887c:	0800895f 	.word	0x0800895f
 8008880:	0800890b 	.word	0x0800890b
 8008884:	0800895f 	.word	0x0800895f
 8008888:	0800895f 	.word	0x0800895f
 800888c:	0800895f 	.word	0x0800895f
 8008890:	0800891b 	.word	0x0800891b
 8008894:	0800895f 	.word	0x0800895f
 8008898:	0800895f 	.word	0x0800895f
 800889c:	0800895f 	.word	0x0800895f
 80088a0:	0800895f 	.word	0x0800895f
 80088a4:	0800895f 	.word	0x0800895f
 80088a8:	0800895f 	.word	0x0800895f
 80088ac:	0800895f 	.word	0x0800895f
 80088b0:	0800892b 	.word	0x0800892b
 80088b4:	0800895f 	.word	0x0800895f
 80088b8:	0800895f 	.word	0x0800895f
 80088bc:	0800895f 	.word	0x0800895f
 80088c0:	0800895f 	.word	0x0800895f
 80088c4:	0800895f 	.word	0x0800895f
 80088c8:	0800895f 	.word	0x0800895f
 80088cc:	0800895f 	.word	0x0800895f
 80088d0:	0800895f 	.word	0x0800895f
 80088d4:	0800895f 	.word	0x0800895f
 80088d8:	0800895f 	.word	0x0800895f
 80088dc:	0800895f 	.word	0x0800895f
 80088e0:	0800895f 	.word	0x0800895f
 80088e4:	0800895f 	.word	0x0800895f
 80088e8:	0800895f 	.word	0x0800895f
 80088ec:	0800895f 	.word	0x0800895f
 80088f0:	08008951 	.word	0x08008951
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d02e      	beq.n	8008956 <UART_SetConfig+0xab2>
 80088f8:	e031      	b.n	800895e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088fa:	f7fc fb2b 	bl	8004f54 <HAL_RCC_GetPCLK1Freq>
 80088fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008900:	e033      	b.n	800896a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008902:	f7fc fb3d 	bl	8004f80 <HAL_RCC_GetPCLK2Freq>
 8008906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008908:	e02f      	b.n	800896a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800890e:	4618      	mov	r0, r3
 8008910:	f7fd fa5c 	bl	8005dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008918:	e027      	b.n	800896a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fba8 	bl	8006074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008928:	e01f      	b.n	800896a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892a:	4b69      	ldr	r3, [pc, #420]	; (8008ad0 <UART_SetConfig+0xc2c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0320 	and.w	r3, r3, #32
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008936:	4b66      	ldr	r3, [pc, #408]	; (8008ad0 <UART_SetConfig+0xc2c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	08db      	lsrs	r3, r3, #3
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	4a64      	ldr	r2, [pc, #400]	; (8008ad4 <UART_SetConfig+0xc30>)
 8008942:	fa22 f303 	lsr.w	r3, r2, r3
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008948:	e00f      	b.n	800896a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800894a:	4b62      	ldr	r3, [pc, #392]	; (8008ad4 <UART_SetConfig+0xc30>)
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800894e:	e00c      	b.n	800896a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008950:	4b61      	ldr	r3, [pc, #388]	; (8008ad8 <UART_SetConfig+0xc34>)
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008954:	e009      	b.n	800896a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800895c:	e005      	b.n	800896a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800896a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80ea 	beq.w	8008b46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	4a55      	ldr	r2, [pc, #340]	; (8008acc <UART_SetConfig+0xc28>)
 8008978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800897c:	461a      	mov	r2, r3
 800897e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008980:	fbb3 f3f2 	udiv	r3, r3, r2
 8008984:	005a      	lsls	r2, r3, #1
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	441a      	add	r2, r3
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	fbb2 f3f3 	udiv	r3, r2, r3
 8008996:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	2b0f      	cmp	r3, #15
 800899c:	d916      	bls.n	80089cc <UART_SetConfig+0xb28>
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a4:	d212      	bcs.n	80089cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f023 030f 	bic.w	r3, r3, #15
 80089ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	085b      	lsrs	r3, r3, #1
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089be:	4313      	orrs	r3, r2
 80089c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80089c8:	60da      	str	r2, [r3, #12]
 80089ca:	e0bc      	b.n	8008b46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80089d2:	e0b8      	b.n	8008b46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089d8:	2b20      	cmp	r3, #32
 80089da:	dc4b      	bgt.n	8008a74 <UART_SetConfig+0xbd0>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f2c0 8087 	blt.w	8008af0 <UART_SetConfig+0xc4c>
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	f200 8084 	bhi.w	8008af0 <UART_SetConfig+0xc4c>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <UART_SetConfig+0xb4c>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a7b 	.word	0x08008a7b
 80089f4:	08008a83 	.word	0x08008a83
 80089f8:	08008af1 	.word	0x08008af1
 80089fc:	08008af1 	.word	0x08008af1
 8008a00:	08008a8b 	.word	0x08008a8b
 8008a04:	08008af1 	.word	0x08008af1
 8008a08:	08008af1 	.word	0x08008af1
 8008a0c:	08008af1 	.word	0x08008af1
 8008a10:	08008a9b 	.word	0x08008a9b
 8008a14:	08008af1 	.word	0x08008af1
 8008a18:	08008af1 	.word	0x08008af1
 8008a1c:	08008af1 	.word	0x08008af1
 8008a20:	08008af1 	.word	0x08008af1
 8008a24:	08008af1 	.word	0x08008af1
 8008a28:	08008af1 	.word	0x08008af1
 8008a2c:	08008af1 	.word	0x08008af1
 8008a30:	08008aab 	.word	0x08008aab
 8008a34:	08008af1 	.word	0x08008af1
 8008a38:	08008af1 	.word	0x08008af1
 8008a3c:	08008af1 	.word	0x08008af1
 8008a40:	08008af1 	.word	0x08008af1
 8008a44:	08008af1 	.word	0x08008af1
 8008a48:	08008af1 	.word	0x08008af1
 8008a4c:	08008af1 	.word	0x08008af1
 8008a50:	08008af1 	.word	0x08008af1
 8008a54:	08008af1 	.word	0x08008af1
 8008a58:	08008af1 	.word	0x08008af1
 8008a5c:	08008af1 	.word	0x08008af1
 8008a60:	08008af1 	.word	0x08008af1
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008af1 	.word	0x08008af1
 8008a6c:	08008af1 	.word	0x08008af1
 8008a70:	08008ae3 	.word	0x08008ae3
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d037      	beq.n	8008ae8 <UART_SetConfig+0xc44>
 8008a78:	e03a      	b.n	8008af0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a7a:	f7fc fa6b 	bl	8004f54 <HAL_RCC_GetPCLK1Freq>
 8008a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a80:	e03c      	b.n	8008afc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a82:	f7fc fa7d 	bl	8004f80 <HAL_RCC_GetPCLK2Freq>
 8008a86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a88:	e038      	b.n	8008afc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fd f99c 	bl	8005dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a98:	e030      	b.n	8008afc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9a:	f107 0318 	add.w	r3, r7, #24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fd fae8 	bl	8006074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa8:	e028      	b.n	8008afc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <UART_SetConfig+0xc2c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d012      	beq.n	8008adc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <UART_SetConfig+0xc2c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	08db      	lsrs	r3, r3, #3
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <UART_SetConfig+0xc30>)
 8008ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac8:	e018      	b.n	8008afc <UART_SetConfig+0xc58>
 8008aca:	bf00      	nop
 8008acc:	08009e74 	.word	0x08009e74
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	03d09000 	.word	0x03d09000
 8008ad8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008adc:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <UART_SetConfig+0xccc>)
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae0:	e00c      	b.n	8008afc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ae2:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <UART_SetConfig+0xcd0>)
 8008ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae6:	e009      	b.n	8008afc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aee:	e005      	b.n	8008afc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008afa:	bf00      	nop
    }

    if (pclk != 0U)
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d021      	beq.n	8008b46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	4a1c      	ldr	r2, [pc, #112]	; (8008b78 <UART_SetConfig+0xcd4>)
 8008b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	441a      	add	r2, r3
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b24:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	2b0f      	cmp	r3, #15
 8008b2a:	d909      	bls.n	8008b40 <UART_SetConfig+0xc9c>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b32:	d205      	bcs.n	8008b40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	e002      	b.n	8008b46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b62:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3748      	adds	r7, #72	; 0x48
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b70:	03d09000 	.word	0x03d09000
 8008b74:	003d0900 	.word	0x003d0900
 8008b78:	08009e74 	.word	0x08009e74

08008b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01a      	beq.n	8008c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c7a:	d10a      	bne.n	8008c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	605a      	str	r2, [r3, #4]
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cd0:	f7f8 fcb8 	bl	8001644 <HAL_GetTick>
 8008cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d10e      	bne.n	8008d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f82f 	bl	8008d56 <UART_WaitOnFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e025      	b.n	8008d4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d10e      	bne.n	8008d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f819 	bl	8008d56 <UART_WaitOnFlagUntilTimeout>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e00f      	b.n	8008d4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b09c      	sub	sp, #112	; 0x70
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	4613      	mov	r3, r2
 8008d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d66:	e0a9      	b.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	f000 80a5 	beq.w	8008ebc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d72:	f7f8 fc67 	bl	8001644 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d302      	bcc.n	8008d88 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d140      	bne.n	8008e0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e6      	bne.n	8008d88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e5      	bne.n	8008dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e069      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d051      	beq.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e26:	d149      	bne.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34
 8008e52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e6      	bne.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	613b      	str	r3, [r7, #16]
   return(result);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f023 0301 	bic.w	r3, r3, #1
 8008e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e84:	623a      	str	r2, [r7, #32]
 8008e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	69f9      	ldr	r1, [r7, #28]
 8008e8a:	6a3a      	ldr	r2, [r7, #32]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e5      	bne.n	8008e64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e010      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69da      	ldr	r2, [r3, #28]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	f43f af46 	beq.w	8008d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3770      	adds	r7, #112	; 0x70
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b0a3      	sub	sp, #140	; 0x8c
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f1a:	d10e      	bne.n	8008f3a <UART_Start_Receive_IT+0x52>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d105      	bne.n	8008f30 <UART_Start_Receive_IT+0x48>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f2e:	e02d      	b.n	8008f8c <UART_Start_Receive_IT+0xa4>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	22ff      	movs	r2, #255	; 0xff
 8008f34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f38:	e028      	b.n	8008f8c <UART_Start_Receive_IT+0xa4>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10d      	bne.n	8008f5e <UART_Start_Receive_IT+0x76>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <UART_Start_Receive_IT+0x6c>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	22ff      	movs	r2, #255	; 0xff
 8008f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f52:	e01b      	b.n	8008f8c <UART_Start_Receive_IT+0xa4>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	227f      	movs	r2, #127	; 0x7f
 8008f58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f5c:	e016      	b.n	8008f8c <UART_Start_Receive_IT+0xa4>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f66:	d10d      	bne.n	8008f84 <UART_Start_Receive_IT+0x9c>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d104      	bne.n	8008f7a <UART_Start_Receive_IT+0x92>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	227f      	movs	r2, #127	; 0x7f
 8008f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f78:	e008      	b.n	8008f8c <UART_Start_Receive_IT+0xa4>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	223f      	movs	r2, #63	; 0x3f
 8008f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f82:	e003      	b.n	8008f8c <UART_Start_Receive_IT+0xa4>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2222      	movs	r2, #34	; 0x22
 8008f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fc0:	673a      	str	r2, [r7, #112]	; 0x70
 8008fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e3      	bne.n	8008f9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fdc:	d153      	bne.n	8009086 <UART_Start_Receive_IT+0x19e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fe4:	88fa      	ldrh	r2, [r7, #6]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d34d      	bcc.n	8009086 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff2:	d107      	bne.n	8009004 <UART_Start_Receive_IT+0x11c>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a4b      	ldr	r2, [pc, #300]	; (800912c <UART_Start_Receive_IT+0x244>)
 8009000:	671a      	str	r2, [r3, #112]	; 0x70
 8009002:	e002      	b.n	800900a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a4a      	ldr	r2, [pc, #296]	; (8009130 <UART_Start_Receive_IT+0x248>)
 8009008:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d01a      	beq.n	8009050 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800903c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800903e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009042:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800904a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e4      	bne.n	800901a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3308      	adds	r3, #8
 8009056:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009066:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009070:	64ba      	str	r2, [r7, #72]	; 0x48
 8009072:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800907e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e5      	bne.n	8009050 <UART_Start_Receive_IT+0x168>
 8009084:	e04a      	b.n	800911c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908e:	d107      	bne.n	80090a0 <UART_Start_Receive_IT+0x1b8>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d103      	bne.n	80090a0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4a26      	ldr	r2, [pc, #152]	; (8009134 <UART_Start_Receive_IT+0x24c>)
 800909c:	671a      	str	r2, [r3, #112]	; 0x70
 800909e:	e002      	b.n	80090a6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4a25      	ldr	r2, [pc, #148]	; (8009138 <UART_Start_Receive_IT+0x250>)
 80090a4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d019      	beq.n	80090ea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090ca:	677b      	str	r3, [r7, #116]	; 0x74
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	461a      	mov	r2, r3
 80090d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090d4:	637b      	str	r3, [r7, #52]	; 0x34
 80090d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e6      	bne.n	80090b6 <UART_Start_Receive_IT+0x1ce>
 80090e8:	e018      	b.n	800911c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	e853 3f00 	ldrex	r3, [r3]
 80090f6:	613b      	str	r3, [r7, #16]
   return(result);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f043 0320 	orr.w	r3, r3, #32
 80090fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009108:	623b      	str	r3, [r7, #32]
 800910a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	69f9      	ldr	r1, [r7, #28]
 800910e:	6a3a      	ldr	r2, [r7, #32]
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	61bb      	str	r3, [r7, #24]
   return(result);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e6      	bne.n	80090ea <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	378c      	adds	r7, #140	; 0x8c
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	08009845 	.word	0x08009845
 8009130:	0800954d 	.word	0x0800954d
 8009134:	080093eb 	.word	0x080093eb
 8009138:	0800928b 	.word	0x0800928b

0800913c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800913c:	b480      	push	{r7}
 800913e:	b095      	sub	sp, #84	; 0x54
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009162:	643b      	str	r3, [r7, #64]	; 0x40
 8009164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3308      	adds	r3, #8
 800917c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	61fb      	str	r3, [r7, #28]
   return(result);
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <UART_EndRxTransfer+0xc8>)
 800918a:	4013      	ands	r3, r2
 800918c:	64bb      	str	r3, [r7, #72]	; 0x48
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800919c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d118      	bne.n	80091e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	60bb      	str	r3, [r7, #8]
   return(result);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f023 0310 	bic.w	r3, r3, #16
 80091c6:	647b      	str	r3, [r7, #68]	; 0x44
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6979      	ldr	r1, [r7, #20]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	613b      	str	r3, [r7, #16]
   return(result);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e6      	bne.n	80091b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2220      	movs	r2, #32
 80091e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80091f8:	bf00      	nop
 80091fa:	3754      	adds	r7, #84	; 0x54
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	effffffe 	.word	0xeffffffe

08009208 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7fe fe26 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	60bb      	str	r3, [r7, #8]
   return(result);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009250:	61fb      	str	r3, [r7, #28]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6979      	ldr	r1, [r7, #20]
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	613b      	str	r3, [r7, #16]
   return(result);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e6      	bne.n	800923c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7fe fdf1 	bl	8007e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009282:	bf00      	nop
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b096      	sub	sp, #88	; 0x58
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009298:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	2b22      	cmp	r3, #34	; 0x22
 80092a4:	f040 8095 	bne.w	80093d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80092b6:	b2d9      	uxtb	r1, r3
 80092b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c2:	400a      	ands	r2, r1
 80092c4:	b2d2      	uxtb	r2, r2
 80092c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d178      	bne.n	80093e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009304:	653b      	str	r3, [r7, #80]	; 0x50
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
 8009310:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800931c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e6      	bne.n	80092f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	623b      	str	r3, [r7, #32]
   return(result);
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009342:	633a      	str	r2, [r7, #48]	; 0x30
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e5      	bne.n	8009322 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d12e      	bne.n	80093ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	64bb      	str	r3, [r7, #72]	; 0x48
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	69b9      	ldr	r1, [r7, #24]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	617b      	str	r3, [r7, #20]
   return(result);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e6      	bne.n	8009372 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	f003 0310 	and.w	r3, r3, #16
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d103      	bne.n	80093ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2210      	movs	r2, #16
 80093b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fe fd62 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093c8:	e00b      	b.n	80093e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7f7 fc50 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 80093d0:	e007      	b.n	80093e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699a      	ldr	r2, [r3, #24]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f042 0208 	orr.w	r2, r2, #8
 80093e0:	619a      	str	r2, [r3, #24]
}
 80093e2:	bf00      	nop
 80093e4:	3758      	adds	r7, #88	; 0x58
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b096      	sub	sp, #88	; 0x58
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009402:	2b22      	cmp	r3, #34	; 0x22
 8009404:	f040 8095 	bne.w	8009532 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009416:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009418:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800941c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009420:	4013      	ands	r3, r2
 8009422:	b29a      	uxth	r2, r3
 8009424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009426:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d178      	bne.n	8009542 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800946e:	643b      	str	r3, [r7, #64]	; 0x40
 8009470:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e6      	bne.n	8009450 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	61fb      	str	r3, [r7, #28]
   return(result);
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	64bb      	str	r3, [r7, #72]	; 0x48
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e5      	bne.n	8009482 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d12e      	bne.n	800952a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	647b      	str	r3, [r7, #68]	; 0x44
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6979      	ldr	r1, [r7, #20]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	613b      	str	r3, [r7, #16]
   return(result);
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e6      	bne.n	80094d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b10      	cmp	r3, #16
 8009510:	d103      	bne.n	800951a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2210      	movs	r2, #16
 8009518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fe fcb2 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009528:	e00b      	b.n	8009542 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7f7 fba0 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0208 	orr.w	r2, r2, #8
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	bf00      	nop
 8009544:	3758      	adds	r7, #88	; 0x58
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b0a6      	sub	sp, #152	; 0x98
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800955a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009582:	2b22      	cmp	r3, #34	; 0x22
 8009584:	f040 814d 	bne.w	8009822 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800958e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009592:	e0f4      	b.n	800977e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800959e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80095a2:	b2d9      	uxtb	r1, r3
 80095a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ae:	400a      	ands	r2, r1
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d053      	beq.n	800968e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d011      	beq.n	8009616 <UART_RxISR_8BIT_FIFOEN+0xca>
 80095f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2201      	movs	r2, #1
 8009604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800960c:	f043 0201 	orr.w	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d011      	beq.n	8009646 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2202      	movs	r2, #2
 8009634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800963c:	f043 0204 	orr.w	r2, r3, #4
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800964a:	f003 0304 	and.w	r3, r3, #4
 800964e:	2b00      	cmp	r3, #0
 8009650:	d011      	beq.n	8009676 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2204      	movs	r2, #4
 8009664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966c:	f043 0202 	orr.w	r2, r3, #2
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d006      	beq.n	800968e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe fbf9 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d171      	bne.n	800977e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80096a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80096be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80096c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80096ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e4      	bne.n	800969a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3308      	adds	r3, #8
 80096d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096e2:	4b56      	ldr	r3, [pc, #344]	; (800983c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3308      	adds	r3, #8
 80096ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096f0:	657a      	str	r2, [r7, #84]	; 0x54
 80096f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e5      	bne.n	80096d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2220      	movs	r2, #32
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009716:	2b01      	cmp	r3, #1
 8009718:	d12e      	bne.n	8009778 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	f023 0310 	bic.w	r3, r3, #16
 8009734:	67bb      	str	r3, [r7, #120]	; 0x78
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800973e:	643b      	str	r3, [r7, #64]	; 0x40
 8009740:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e6      	bne.n	8009720 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b10      	cmp	r3, #16
 800975e:	d103      	bne.n	8009768 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2210      	movs	r2, #16
 8009766:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7fe fb8b 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8009776:	e002      	b.n	800977e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7f7 fa79 	bl	8000c70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800977e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009782:	2b00      	cmp	r3, #0
 8009784:	d006      	beq.n	8009794 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	f47f af00 	bne.w	8009594 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800979a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800979e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d045      	beq.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d23e      	bcs.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097ca:	673b      	str	r3, [r7, #112]	; 0x70
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3308      	adds	r3, #8
 80097d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e5      	bne.n	80097b4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a15      	ldr	r2, [pc, #84]	; (8009840 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80097ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f043 0320 	orr.w	r3, r3, #32
 8009802:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6979      	ldr	r1, [r7, #20]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	613b      	str	r3, [r7, #16]
   return(result);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009820:	e007      	b.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	619a      	str	r2, [r3, #24]
}
 8009832:	bf00      	nop
 8009834:	3798      	adds	r7, #152	; 0x98
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	effffffe 	.word	0xeffffffe
 8009840:	0800928b 	.word	0x0800928b

08009844 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b0a8      	sub	sp, #160	; 0xa0
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009852:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987a:	2b22      	cmp	r3, #34	; 0x22
 800987c:	f040 8151 	bne.w	8009b22 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009886:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800988a:	e0f8      	b.n	8009a7e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800989e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80098a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80098a6:	4013      	ands	r3, r2
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b4:	1c9a      	adds	r2, r3, #2
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d053      	beq.n	800998a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d011      	beq.n	8009912 <UART_RxISR_16BIT_FIFOEN+0xce>
 80098ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00b      	beq.n	8009912 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2201      	movs	r2, #1
 8009900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009908:	f043 0201 	orr.w	r2, r3, #1
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d011      	beq.n	8009942 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800991e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2202      	movs	r2, #2
 8009930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	f043 0204 	orr.w	r2, r3, #4
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b00      	cmp	r3, #0
 800994c:	d011      	beq.n	8009972 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800994e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2204      	movs	r2, #4
 8009960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009968:	f043 0202 	orr.w	r2, r3, #2
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d006      	beq.n	800998a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fe fa7b 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009990:	b29b      	uxth	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d173      	bne.n	8009a7e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099ba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099c0:	e841 2300 	strex	r3, r2, [r1]
 80099c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e4      	bne.n	8009996 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3308      	adds	r3, #8
 80099d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099de:	4b57      	ldr	r3, [pc, #348]	; (8009b3c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80099e0:	4013      	ands	r3, r2
 80099e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80099f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e3      	bne.n	80099cc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d12e      	bne.n	8009a78 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a30:	f023 0310 	bic.w	r3, r3, #16
 8009a34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e6      	bne.n	8009a20 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	f003 0310 	and.w	r3, r3, #16
 8009a5c:	2b10      	cmp	r3, #16
 8009a5e:	d103      	bne.n	8009a68 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2210      	movs	r2, #16
 8009a66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe fa0b 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
 8009a76:	e002      	b.n	8009a7e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7f7 f8f9 	bl	8000c70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d006      	beq.n	8009a94 <UART_RxISR_16BIT_FIFOEN+0x250>
 8009a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f47f aefc 	bne.w	800988c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a9a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a9e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d045      	beq.n	8009b32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009aac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d23e      	bcs.n	8009b32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aca:	677b      	str	r3, [r7, #116]	; 0x74
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8009ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e5      	bne.n	8009ab4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a15      	ldr	r2, [pc, #84]	; (8009b40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009aec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f043 0320 	orr.w	r3, r3, #32
 8009b02:	673b      	str	r3, [r7, #112]	; 0x70
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b0c:	61fb      	str	r3, [r7, #28]
 8009b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	69b9      	ldr	r1, [r7, #24]
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	617b      	str	r3, [r7, #20]
   return(result);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e6      	bne.n	8009aee <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b20:	e007      	b.n	8009b32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699a      	ldr	r2, [r3, #24]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f042 0208 	orr.w	r2, r2, #8
 8009b30:	619a      	str	r2, [r3, #24]
}
 8009b32:	bf00      	nop
 8009b34:	37a0      	adds	r7, #160	; 0xa0
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	effffffe 	.word	0xeffffffe
 8009b40:	080093eb 	.word	0x080093eb

08009b44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e027      	b.n	8009be6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2224      	movs	r2, #36	; 0x24
 8009ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f022 0201 	bic.w	r2, r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b084      	sub	sp, #16
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d101      	bne.n	8009c0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c06:	2302      	movs	r3, #2
 8009c08:	e02d      	b.n	8009c66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2224      	movs	r2, #36	; 0x24
 8009c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0201 	bic.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f850 	bl	8009cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d101      	bne.n	8009c86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c82:	2302      	movs	r3, #2
 8009c84:	e02d      	b.n	8009ce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2224      	movs	r2, #36	; 0x24
 8009c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0201 	bic.w	r2, r2, #1
 8009cac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f812 	bl	8009cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d108      	bne.n	8009d0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d0c:	e031      	b.n	8009d72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d0e:	2310      	movs	r3, #16
 8009d10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d12:	2310      	movs	r3, #16
 8009d14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	0e5b      	lsrs	r3, r3, #25
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	f003 0307 	and.w	r3, r3, #7
 8009d24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	0f5b      	lsrs	r3, r3, #29
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	7b3a      	ldrb	r2, [r7, #12]
 8009d3a:	4911      	ldr	r1, [pc, #68]	; (8009d80 <UARTEx_SetNbDataToProcess+0x94>)
 8009d3c:	5c8a      	ldrb	r2, [r1, r2]
 8009d3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d42:	7b3a      	ldrb	r2, [r7, #12]
 8009d44:	490f      	ldr	r1, [pc, #60]	; (8009d84 <UARTEx_SetNbDataToProcess+0x98>)
 8009d46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	7b7a      	ldrb	r2, [r7, #13]
 8009d58:	4909      	ldr	r1, [pc, #36]	; (8009d80 <UARTEx_SetNbDataToProcess+0x94>)
 8009d5a:	5c8a      	ldrb	r2, [r1, r2]
 8009d5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d60:	7b7a      	ldrb	r2, [r7, #13]
 8009d62:	4908      	ldr	r1, [pc, #32]	; (8009d84 <UARTEx_SetNbDataToProcess+0x98>)
 8009d64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d72:	bf00      	nop
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	08009e8c 	.word	0x08009e8c
 8009d84:	08009e94 	.word	0x08009e94

08009d88 <__libc_init_array>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	4d0d      	ldr	r5, [pc, #52]	; (8009dc0 <__libc_init_array+0x38>)
 8009d8c:	4c0d      	ldr	r4, [pc, #52]	; (8009dc4 <__libc_init_array+0x3c>)
 8009d8e:	1b64      	subs	r4, r4, r5
 8009d90:	10a4      	asrs	r4, r4, #2
 8009d92:	2600      	movs	r6, #0
 8009d94:	42a6      	cmp	r6, r4
 8009d96:	d109      	bne.n	8009dac <__libc_init_array+0x24>
 8009d98:	4d0b      	ldr	r5, [pc, #44]	; (8009dc8 <__libc_init_array+0x40>)
 8009d9a:	4c0c      	ldr	r4, [pc, #48]	; (8009dcc <__libc_init_array+0x44>)
 8009d9c:	f000 f848 	bl	8009e30 <_init>
 8009da0:	1b64      	subs	r4, r4, r5
 8009da2:	10a4      	asrs	r4, r4, #2
 8009da4:	2600      	movs	r6, #0
 8009da6:	42a6      	cmp	r6, r4
 8009da8:	d105      	bne.n	8009db6 <__libc_init_array+0x2e>
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db0:	4798      	blx	r3
 8009db2:	3601      	adds	r6, #1
 8009db4:	e7ee      	b.n	8009d94 <__libc_init_array+0xc>
 8009db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dba:	4798      	blx	r3
 8009dbc:	3601      	adds	r6, #1
 8009dbe:	e7f2      	b.n	8009da6 <__libc_init_array+0x1e>
 8009dc0:	08009ea4 	.word	0x08009ea4
 8009dc4:	08009ea4 	.word	0x08009ea4
 8009dc8:	08009ea4 	.word	0x08009ea4
 8009dcc:	08009ea8 	.word	0x08009ea8

08009dd0 <memset>:
 8009dd0:	4402      	add	r2, r0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d100      	bne.n	8009dda <memset+0xa>
 8009dd8:	4770      	bx	lr
 8009dda:	f803 1b01 	strb.w	r1, [r3], #1
 8009dde:	e7f9      	b.n	8009dd4 <memset+0x4>

08009de0 <strchr>:
 8009de0:	b2c9      	uxtb	r1, r1
 8009de2:	4603      	mov	r3, r0
 8009de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de8:	b11a      	cbz	r2, 8009df2 <strchr+0x12>
 8009dea:	428a      	cmp	r2, r1
 8009dec:	d1f9      	bne.n	8009de2 <strchr+0x2>
 8009dee:	4618      	mov	r0, r3
 8009df0:	4770      	bx	lr
 8009df2:	2900      	cmp	r1, #0
 8009df4:	bf18      	it	ne
 8009df6:	2300      	movne	r3, #0
 8009df8:	e7f9      	b.n	8009dee <strchr+0xe>

08009dfa <strcpy>:
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e00:	f803 2b01 	strb.w	r2, [r3], #1
 8009e04:	2a00      	cmp	r2, #0
 8009e06:	d1f9      	bne.n	8009dfc <strcpy+0x2>
 8009e08:	4770      	bx	lr

08009e0a <strncpy>:
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	3901      	subs	r1, #1
 8009e0e:	4603      	mov	r3, r0
 8009e10:	b132      	cbz	r2, 8009e20 <strncpy+0x16>
 8009e12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e16:	f803 4b01 	strb.w	r4, [r3], #1
 8009e1a:	3a01      	subs	r2, #1
 8009e1c:	2c00      	cmp	r4, #0
 8009e1e:	d1f7      	bne.n	8009e10 <strncpy+0x6>
 8009e20:	441a      	add	r2, r3
 8009e22:	2100      	movs	r1, #0
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d100      	bne.n	8009e2a <strncpy+0x20>
 8009e28:	bd10      	pop	{r4, pc}
 8009e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e2e:	e7f9      	b.n	8009e24 <strncpy+0x1a>

08009e30 <_init>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	bf00      	nop
 8009e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e36:	bc08      	pop	{r3}
 8009e38:	469e      	mov	lr, r3
 8009e3a:	4770      	bx	lr

08009e3c <_fini>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	bf00      	nop
 8009e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e42:	bc08      	pop	{r3}
 8009e44:	469e      	mov	lr, r3
 8009e46:	4770      	bx	lr
