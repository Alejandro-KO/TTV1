
TTV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d040  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800d310  0800d310  0001d310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d78c  0800d78c  0001d78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d794  0800d794  0001d794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d798  0800d798  0001d798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0800d79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  240001e8  0800d984  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000588  0800d984  00020588  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016cec  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002755  00000000  00000000  00036f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00039658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010c8  00000000  00000000  0003a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033750  00000000  00000000  0003b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017222  00000000  00000000  0006f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014db78  00000000  00000000  00086242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3dba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b6c  00000000  00000000  001d3e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d2f8 	.word	0x0800d2f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0800d2f8 	.word	0x0800d2f8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <radianes_a_valor>:
uint8_t tx2_buffer[20]="Welcome \n\r";

uint8_t rx1_buffer;
uint8_t received_data;

uint32_t radianes_a_valor(float radianes) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes < 0) radianes = 0;
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d502      	bpl.n	8000ace <radianes_a_valor+0x1e>
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
    if (radianes > M_PI) radianes = M_PI;
 8000ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000b18 <radianes_a_valor+0x68>
 8000ada:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	dd01      	ble.n	8000ae8 <radianes_a_valor+0x38>
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <radianes_a_valor+0x78>)
 8000ae6:	607b      	str	r3, [r7, #4]

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000af0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000b18 <radianes_a_valor+0x68>
 8000af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000af8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000b20 <radianes_a_valor+0x70>
 8000afc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b04:	ee17 3a90 	vmov	r3, s15
 8000b08:	3341      	adds	r3, #65	; 0x41
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	54442d18 	.word	0x54442d18
 8000b1c:	400921fb 	.word	0x400921fb
 8000b20:	00000000 	.word	0x00000000
 8000b24:	406d6000 	.word	0x406d6000
 8000b28:	40490fdb 	.word	0x40490fdb

08000b2c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <milimetros_a_pasos+0x3c>)
 8000b38:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b3e:	eef0 7ae7 	vabs.f32	s15, s15
 8000b42:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b56:	ee17 3a90 	vmov	r3, s15
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	41c80000 	.word	0x41c80000

08000b6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint8_t motor_running = 1;// Variable to control motor state
volatile uint8_t motor_running1 = 1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b7c:	d102      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x18>
        motor_running = 0; // Stop the motor when the interrupt occurs
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_13) {
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8a:	d102      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x26>
    	motor_running1 = 0; // Stop the motor when the interrupt occurs
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	24000000 	.word	0x24000000
 8000ba4:	24000001 	.word	0x24000001

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char q1[]="1.5707";
 8000bae:	4a4b      	ldr	r2, [pc, #300]	; (8000cdc <main+0x134>)
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb8:	6018      	str	r0, [r3, #0]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	8019      	strh	r1, [r3, #0]
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	0c0a      	lsrs	r2, r1, #16
 8000bc2:	701a      	strb	r2, [r3, #0]
	char q2[]="150";
 8000bc4:	4b46      	ldr	r3, [pc, #280]	; (8000ce0 <main+0x138>)
 8000bc6:	60fb      	str	r3, [r7, #12]
	char q3[]="0";
 8000bc8:	2330      	movs	r3, #48	; 0x30
 8000bca:	813b      	strh	r3, [r7, #8]
	char q4[]="1.4062";
 8000bcc:	4a45      	ldr	r2, [pc, #276]	; (8000ce4 <main+0x13c>)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd4:	6018      	str	r0, [r3, #0]
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	8019      	strh	r1, [r3, #0]
 8000bda:	3302      	adds	r3, #2
 8000bdc:	0c0a      	lsrs	r2, r1, #16
 8000bde:	701a      	strb	r2, [r3, #0]

	// Conversión de q1 y q4 a float
	q1_float = atof(q1);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4618      	mov	r0, r3
 8000be6:	f009 fceb 	bl	800a5c0 <atof>
 8000bea:	eeb0 7b40 	vmov.f64	d7, d0
 8000bee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <main+0x140>)
 8000bf4:	edc3 7a00 	vstr	s15, [r3]
	q4_float = atof(q4);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f009 fce0 	bl	800a5c0 <atof>
 8000c00:	eeb0 7b40 	vmov.f64	d7, d0
 8000c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <main+0x144>)
 8000c0a:	edc3 7a00 	vstr	s15, [r3]

	// Conversión de q2 y q3 a int (truncando los valores decimales)
	q2_int = (int)atof(q2);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4618      	mov	r0, r3
 8000c14:	f009 fcd4 	bl	800a5c0 <atof>
 8000c18:	eeb0 7b40 	vmov.f64	d7, d0
 8000c1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c20:	ee17 2a90 	vmov	r2, s15
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <main+0x148>)
 8000c26:	601a      	str	r2, [r3, #0]
	q3_int = (int)atof(q3);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f009 fcc7 	bl	800a5c0 <atof>
 8000c32:	eeb0 7b40 	vmov.f64	d7, d0
 8000c36:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c3a:	ee17 2a90 	vmov	r2, s15
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <main+0x14c>)
 8000c40:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f001 f92b 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f863 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f000 fa2d 	bl	80010a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c4e:	f000 f95b 	bl	8000f08 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000c52:	f000 f9f1 	bl	8001038 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c56:	f000 f8bb 	bl	8000dd0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000c5a:	f000 f9a1 	bl	8000fa0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c5e:	210c      	movs	r1, #12
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <main+0x150>)
 8000c62:	f006 f9c9 	bl	8006ff8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c66:	2104      	movs	r1, #4
 8000c68:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <main+0x150>)
 8000c6a:	f006 f9c5 	bl	8006ff8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx1_buffer, sizeof(rx1_buffer));
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4922      	ldr	r1, [pc, #136]	; (8000cfc <main+0x154>)
 8000c72:	4823      	ldr	r0, [pc, #140]	; (8000d00 <main+0x158>)
 8000c74:	f007 f91e 	bl	8007eb4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,&byte,bufersize);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4922      	ldr	r1, [pc, #136]	; (8000d04 <main+0x15c>)
 8000c7c:	4822      	ldr	r0, [pc, #136]	; (8000d08 <main+0x160>)
 8000c7e:	f007 f919 	bl	8007eb4 <HAL_UART_Receive_IT>

  A4988_Setup();
 8000c82:	f000 fae3 	bl	800124c <A4988_Setup>
  Home();
 8000c86:	f000 fafd 	bl	8001284 <Home>
  {
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
//	              HAL_Delay(100);
//	              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
//	              HAL_Delay(100);
	  mover_motorq1(q1_float);
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <main+0x140>)
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	f000 fb10 	bl	80012b8 <mover_motorq1>
	  mover_motorq2_mm(q2_int);
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <main+0x148>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca8:	f000 fc10 	bl	80014cc <mover_motorq2_mm>
	  mover_motorq3_mm(q3_int);
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <main+0x14c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbc:	f000 fc88 	bl	80015d0 <mover_motorq3_mm>
	  TIM1->CCR2 = radianes_a_valor(q4_float);
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <main+0x144>)
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	4c11      	ldr	r4, [pc, #68]	; (8000d0c <main+0x164>)
 8000cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ccc:	f7ff fef0 	bl	8000ab0 <radianes_a_valor>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM1->CCR4 = 183;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <main+0x164>)
 8000cd6:	22b7      	movs	r2, #183	; 0xb7
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
	  mover_motorq1(q1_float);
 8000cda:	e7d6      	b.n	8000c8a <main+0xe2>
 8000cdc:	0800d310 	.word	0x0800d310
 8000ce0:	00303531 	.word	0x00303531
 8000ce4:	0800d318 	.word	0x0800d318
 8000ce8:	24000560 	.word	0x24000560
 8000cec:	24000564 	.word	0x24000564
 8000cf0:	24000568 	.word	0x24000568
 8000cf4:	2400056c 	.word	0x2400056c
 8000cf8:	24000204 	.word	0x24000204
 8000cfc:	24000551 	.word	0x24000551
 8000d00:	240002e0 	.word	0x240002e0
 8000d04:	24000550 	.word	0x24000550
 8000d08:	24000250 	.word	0x24000250
 8000d0c:	40010000 	.word	0x40010000

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b09c      	sub	sp, #112	; 0x70
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	224c      	movs	r2, #76	; 0x4c
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f009 fc7c 	bl	800a61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2220      	movs	r2, #32
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f009 fc76 	bl	800a61c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d30:	2002      	movs	r0, #2
 8000d32:	f003 fe79 	bl	8004a28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d42:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d56:	bf00      	nop
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <SystemClock_Config+0xbc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d64:	d1f8      	bne.n	8000d58 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6e:	2340      	movs	r3, #64	; 0x40
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fe8e 	bl	8004a9c <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d86:	f000 fcab 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	233f      	movs	r3, #63	; 0x3f
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8000d92:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000da0:	2340      	movs	r3, #64	; 0x40
 8000da2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fa20 	bl	80051f8 <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000dbe:	f000 fc8f 	bl	80016e0 <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3770      	adds	r7, #112	; 0x70
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	58024800 	.word	0x58024800

08000dd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b098      	sub	sp, #96	; 0x60
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2234      	movs	r2, #52	; 0x34
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f009 fc0d 	bl	800a61c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e02:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e04:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <MX_TIM1_Init+0x134>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e16:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e2e:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e30:	f006 f88a 	bl	8006f48 <HAL_TIM_PWM_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fc51 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482b      	ldr	r0, [pc, #172]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e52:	f006 fea3 	bl	8007b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e5c:	f000 fc40 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e80:	2204      	movs	r2, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	481e      	ldr	r0, [pc, #120]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e86:	f006 f9d3 	bl	8007230 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e90:	f000 fc26 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000e9e:	f006 f9c7 	bl	8007230 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000ea8:	f000 fc1a 	bl	80016e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000ee2:	f006 fef7 	bl	8007cd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000eec:	f000 fbf8 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM1_Init+0x130>)
 8000ef2:	f000 fc37 	bl	8001764 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3760      	adds	r7, #96	; 0x60
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	24000204 	.word	0x24000204
 8000f04:	40010000 	.word	0x40010000

08000f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <MX_USART1_UART_Init+0x94>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f52:	f006 ff5f 	bl	8007e14 <HAL_UART_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 fbc0 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f64:	f009 fa61 	bl	800a42a <HAL_UARTEx_SetTxFifoThreshold>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6e:	f000 fbb7 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f76:	f009 fa96 	bl	800a4a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 fbae 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_USART1_UART_Init+0x90>)
 8000f86:	f009 fa17 	bl	800a3b8 <HAL_UARTEx_DisableFifoMode>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f90:	f000 fba6 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	24000250 	.word	0x24000250
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <MX_USART3_UART_Init+0x94>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fea:	f006 ff13 	bl	8007e14 <HAL_UART_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f000 fb74 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000ffc:	f009 fa15 	bl	800a42a <HAL_UARTEx_SetTxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001006:	f000 fb6b 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <MX_USART3_UART_Init+0x90>)
 800100e:	f009 fa4a 	bl	800a4a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001018:	f000 fb62 	bl	80016e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_USART3_UART_Init+0x90>)
 800101e:	f009 f9cb 	bl	800a3b8 <HAL_UARTEx_DisableFifoMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001028:	f000 fb5a 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	240002e0 	.word	0x240002e0
 8001034:	40004800 	.word	0x40004800

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_DMA_Init+0x6c>)
 8001040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <MX_DMA_Init+0x6c>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_DMA_Init+0x6c>)
 8001050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	200b      	movs	r0, #11
 8001062:	f001 f8ac 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001066:	200b      	movs	r0, #11
 8001068:	f001 f8c3 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	200c      	movs	r0, #12
 8001072:	f001 f8a4 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001076:	200c      	movs	r0, #12
 8001078:	f001 f8bb 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	200d      	movs	r0, #13
 8001082:	f001 f89c 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001086:	200d      	movs	r0, #13
 8001088:	f001 f8b3 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	200e      	movs	r0, #14
 8001092:	f001 f894 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001096:	200e      	movs	r0, #14
 8001098:	f001 f8ab 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a57      	ldr	r2, [pc, #348]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010dc:	4b51      	ldr	r3, [pc, #324]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a50      	ldr	r2, [pc, #320]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <MX_GPIO_Init+0x17c>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <MX_GPIO_Init+0x17c>)
 8001102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <MX_GPIO_Init+0x17c>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b42      	ldr	r3, [pc, #264]	; (8001224 <MX_GPIO_Init+0x17c>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	4a41      	ldr	r2, [pc, #260]	; (8001224 <MX_GPIO_Init+0x17c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001128:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <MX_GPIO_Init+0x17c>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_GPIO_Init+0x17c>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	4a39      	ldr	r2, [pc, #228]	; (8001224 <MX_GPIO_Init+0x17c>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_GPIO_Init+0x17c>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f640 2128 	movw	r1, #2600	; 0xa28
 800115a:	4833      	ldr	r0, [pc, #204]	; (8001228 <MX_GPIO_Init+0x180>)
 800115c:	f003 fc30 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	210a      	movs	r1, #10
 8001164:	4831      	ldr	r0, [pc, #196]	; (800122c <MX_GPIO_Init+0x184>)
 8001166:	f003 fc2b 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 800116a:	2200      	movs	r2, #0
 800116c:	21ae      	movs	r1, #174	; 0xae
 800116e:	4830      	ldr	r0, [pc, #192]	; (8001230 <MX_GPIO_Init+0x188>)
 8001170:	f003 fc26 	bl	80049c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2120      	movs	r1, #32
 8001178:	482e      	ldr	r0, [pc, #184]	; (8001234 <MX_GPIO_Init+0x18c>)
 800117a:	f003 fc21 	bl	80049c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE5 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11;
 800117e:	f640 2328 	movw	r3, #2600	; 0xa28
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4824      	ldr	r0, [pc, #144]	; (8001228 <MX_GPIO_Init+0x180>)
 8001198:	f003 fa6a 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800119c:	230a      	movs	r3, #10
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	481e      	ldr	r0, [pc, #120]	; (800122c <MX_GPIO_Init+0x184>)
 80011b4:	f003 fa5c 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80011b8:	23ae      	movs	r3, #174	; 0xae
 80011ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_GPIO_Init+0x188>)
 80011d0:	f003 fa4e 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <MX_GPIO_Init+0x18c>)
 80011ec:	f003 fa40 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f0:	2320      	movs	r3, #32
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <MX_GPIO_Init+0x18c>)
 8001208:	f003 fa32 	bl	8004670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2028      	movs	r0, #40	; 0x28
 8001212:	f000 ffd4 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f000 ffeb 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58024400 	.word	0x58024400
 8001228:	58021000 	.word	0x58021000
 800122c:	58020800 	.word	0x58020800
 8001230:	58020000 	.word	0x58020000
 8001234:	58020400 	.word	0x58020400

08001238 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
//        }
//
//        // Vuelve a habilitar la recepción por interrupción
//        HAL_UART_Receive_IT(&huart1, &byte, 1);
//    }
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <A4988_Setup>:
//    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); 5 puntos desfazados
//    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); 2 puntos malos
//    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100);
//}

void A4988_Setup() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    // Configurar pines de modo (MS0, MS1, MS2) para medio paso
    HAL_GPIO_WritePin(GPIOE, MS0_PIN, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2120      	movs	r1, #32
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <A4988_Setup+0x30>)
 8001256:	f003 fbb3 	bl	80049c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS1_PIN, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <A4988_Setup+0x34>)
 8001260:	f003 fbae 	bl	80049c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, MS2_PIN, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2108      	movs	r1, #8
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <A4988_Setup+0x34>)
 800126a:	f003 fba9 	bl	80049c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, ENABLE_PIN, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <A4988_Setup+0x30>)
 8001274:	f003 fba4 	bl	80049c0 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58021000 	.word	0x58021000
 8001280:	58020800 	.word	0x58020800

08001284 <Home>:

void Home (void){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	TIM1->CCR4 = 183;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <Home+0x28>)
 800128a:	22b7      	movs	r2, #183	; 0xb7
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR2 =300;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <Home+0x28>)
 8001290:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
	mover_motorq1(0);
 8001296:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80012b0 <Home+0x2c>
 800129a:	f000 f80d 	bl	80012b8 <mover_motorq1>
	motor_control();
 800129e:	f000 f887 	bl	80013b0 <motor_control>
	motor_control1();
 80012a2:	f000 f8c9 	bl	8001438 <motor_control1>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40010000 	.word	0x40010000
	...

080012b8 <mover_motorq1>:


void mover_motorq1(float radianes) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	ed87 0a01 	vstr	s0, [r7, #4]
    // Convertir radianes a pasos
    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 80012c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012ca:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001398 <mover_motorq1+0xe0>
 80012ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012d2:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80013a0 <mover_motorq1+0xe8>
 80012d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012de:	ee17 3a90 	vmov	r3, s15
 80012e2:	617b      	str	r3, [r7, #20]

    // Calcular el nuevo paso deseado
    int nuevo_paso = pasos;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <mover_motorq1+0xf0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd1f      	ble.n	8001338 <mover_motorq1+0x80>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2108      	movs	r1, #8
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <mover_motorq1+0xf4>)
 80012fe:	f003 fb5f 	bl	80049c0 <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e012      	b.n	800132e <mover_motorq1+0x76>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2102      	movs	r1, #2
 800130c:	4827      	ldr	r0, [pc, #156]	; (80013ac <mover_motorq1+0xf4>)
 800130e:	f003 fb57 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fe54 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	4823      	ldr	r0, [pc, #140]	; (80013ac <mover_motorq1+0xf4>)
 800131e:	f003 fb4f 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 fe4c 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	3301      	adds	r3, #1
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbe8      	blt.n	8001308 <mover_motorq1+0x50>
 8001336:	e024      	b.n	8001382 <mover_motorq1+0xca>
        }
    } else if (diferencia_pasos < 0) {
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da21      	bge.n	8001382 <mover_motorq1+0xca>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2108      	movs	r1, #8
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <mover_motorq1+0xf4>)
 8001344:	f003 fb3c 	bl	80049c0 <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	425b      	negs	r3, r3
 800134c:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e012      	b.n	800137a <mover_motorq1+0xc2>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2102      	movs	r1, #2
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <mover_motorq1+0xf4>)
 800135a:	f003 fb31 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 fe2e 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2102      	movs	r1, #2
 8001368:	4810      	ldr	r0, [pc, #64]	; (80013ac <mover_motorq1+0xf4>)
 800136a:	f003 fb29 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fe26 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3301      	adds	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	dbe8      	blt.n	8001354 <mover_motorq1+0x9c>
        }
    }

    // Actualizar el paso actual
    paso_actual_q1 = nuevo_paso;
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <mover_motorq1+0xf0>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f000 fe18 	bl	8001fc0 <HAL_Delay>
}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	54442d18 	.word	0x54442d18
 800139c:	401921fb 	.word	0x401921fb
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40790000 	.word	0x40790000
 80013a8:	24000554 	.word	0x24000554
 80013ac:	58020000 	.word	0x58020000

080013b0 <motor_control>:

void motor_control(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
    while (motor_running) {
 80013b6:	e02c      	b.n	8001412 <motor_control+0x62>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	481c      	ldr	r0, [pc, #112]	; (8001430 <motor_control+0x80>)
 80013be:	f003 faff 	bl	80049c0 <HAL_GPIO_WritePin>
        for (int i = 0; i < 1000 && motor_running; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	e012      	b.n	80013ee <motor_control+0x3e>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2120      	movs	r1, #32
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <motor_control+0x80>)
 80013ce:	f003 faf7 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fdf4 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2120      	movs	r1, #32
 80013dc:	4814      	ldr	r0, [pc, #80]	; (8001430 <motor_control+0x80>)
 80013de:	f003 faef 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fdec 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < 1000 && motor_running; i++) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f4:	da04      	bge.n	8001400 <motor_control+0x50>
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <motor_control+0x84>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e3      	bne.n	80013c8 <motor_control+0x18>
        }
        if (!motor_running) break; // Check if motor_running is false
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <motor_control+0x84>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <motor_control+0x6e>

        HAL_Delay(500);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f000 fdd7 	bl	8001fc0 <HAL_Delay>
    while (motor_running) {
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <motor_control+0x84>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1cd      	bne.n	80013b8 <motor_control+0x8>
 800141c:	e000      	b.n	8001420 <motor_control+0x70>
        if (!motor_running) break; // Check if motor_running is false
 800141e:	bf00      	nop
//    	HAL_Delay(1);
//    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//    	HAL_Delay(1);
//    }
//    HAL_Delay(500);
    motor_running = 1;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <motor_control+0x84>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	58020000 	.word	0x58020000
 8001434:	24000000 	.word	0x24000000

08001438 <motor_control1>:

void motor_control1(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
    while (motor_running1) {
 800143e:	e032      	b.n	80014a6 <motor_control1+0x6e>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <motor_control1+0x8c>)
 8001448:	f003 faba 	bl	80049c0 <HAL_GPIO_WritePin>
        for (int i = 0; i < 1000 && motor_running1; i++) {
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	e014      	b.n	800147c <motor_control1+0x44>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001458:	481a      	ldr	r0, [pc, #104]	; (80014c4 <motor_control1+0x8c>)
 800145a:	f003 fab1 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 fdae 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <motor_control1+0x8c>)
 800146c:	f003 faa8 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 fda5 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < 1000 && motor_running1; i++) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3301      	adds	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001482:	da04      	bge.n	800148e <motor_control1+0x56>
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <motor_control1+0x90>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e1      	bne.n	8001452 <motor_control1+0x1a>
        }
        HAL_Delay(10);
 800148e:	200a      	movs	r0, #10
 8001490:	f000 fd96 	bl	8001fc0 <HAL_Delay>
        if (!motor_running1) break; // Check if motor_running is false
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <motor_control1+0x90>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <motor_control1+0x7a>
        HAL_Delay(500);
 800149e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a2:	f000 fd8d 	bl	8001fc0 <HAL_Delay>
    while (motor_running1) {
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <motor_control1+0x90>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1c7      	bne.n	8001440 <motor_control1+0x8>
 80014b0:	e000      	b.n	80014b4 <motor_control1+0x7c>
        if (!motor_running1) break; // Check if motor_running is false
 80014b2:	bf00      	nop
//    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
//    	HAL_Delay(1);
//    }
//    HAL_Delay(500);

    motor_running1 = 1;
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <motor_control1+0x90>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	58021000 	.word	0x58021000
 80014c8:	24000001 	.word	0x24000001

080014cc <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limitar el rango de movimiento entre 0 y 200 mm
    if (milimetros < 0) milimetros = 0;
 80014d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d502      	bpl.n	80014ea <mover_motorq2_mm+0x1e>
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
    if (milimetros > 200) milimetros = 200;
 80014ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c0 <mover_motorq2_mm+0xf4>
 80014f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	dd01      	ble.n	8001500 <mover_motorq2_mm+0x34>
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <mover_motorq2_mm+0xf8>)
 80014fe:	607b      	str	r3, [r7, #4]

    // Convertir milímetros a pasos
    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001500:	ed97 0a01 	vldr	s0, [r7, #4]
 8001504:	f7ff fb12 	bl	8000b2c <milimetros_a_pasos>
 8001508:	6178      	str	r0, [r7, #20]

    // Calcular la nueva posición deseada
    int nuevo_paso = pasos;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q2;
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <mover_motorq2_mm+0xfc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	dd1f      	ble.n	800155e <mover_motorq2_mm+0x92>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); // Dirección positiva
 800151e:	2201      	movs	r2, #1
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	482a      	ldr	r0, [pc, #168]	; (80015cc <mover_motorq2_mm+0x100>)
 8001524:	f003 fa4c 	bl	80049c0 <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e012      	b.n	8001554 <mover_motorq2_mm+0x88>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2120      	movs	r1, #32
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <mover_motorq2_mm+0x100>)
 8001534:	f003 fa44 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f000 fd41 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2120      	movs	r1, #32
 8001542:	4822      	ldr	r0, [pc, #136]	; (80015cc <mover_motorq2_mm+0x100>)
 8001544:	f003 fa3c 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001548:	2001      	movs	r0, #1
 800154a:	f000 fd39 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3301      	adds	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbe8      	blt.n	800152e <mover_motorq2_mm+0x62>
 800155c:	e024      	b.n	80015a8 <mover_motorq2_mm+0xdc>
        }
    } else if (diferencia_pasos < 0) {
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da21      	bge.n	80015a8 <mover_motorq2_mm+0xdc>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Dirección negativa
 8001564:	2200      	movs	r2, #0
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	4818      	ldr	r0, [pc, #96]	; (80015cc <mover_motorq2_mm+0x100>)
 800156a:	f003 fa29 	bl	80049c0 <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	425b      	negs	r3, r3
 8001572:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	e012      	b.n	80015a0 <mover_motorq2_mm+0xd4>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2120      	movs	r1, #32
 800157e:	4813      	ldr	r0, [pc, #76]	; (80015cc <mover_motorq2_mm+0x100>)
 8001580:	f003 fa1e 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001584:	2001      	movs	r0, #1
 8001586:	f000 fd1b 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	480f      	ldr	r0, [pc, #60]	; (80015cc <mover_motorq2_mm+0x100>)
 8001590:	f003 fa16 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f000 fd13 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbe8      	blt.n	800157a <mover_motorq2_mm+0xae>
        }
    }

    // Actualizar el paso actual
    paso_actual_q2 = nuevo_paso;
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <mover_motorq2_mm+0xfc>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 80015ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b2:	f000 fd05 	bl	8001fc0 <HAL_Delay>
}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	43480000 	.word	0x43480000
 80015c4:	43480000 	.word	0x43480000
 80015c8:	24000558 	.word	0x24000558
 80015cc:	58020000 	.word	0x58020000

080015d0 <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limitar el rango de movimiento entre 0 y 200 mm
	if (milimetros < 0) milimetros = 0;
 80015da:	edd7 7a01 	vldr	s15, [r7, #4]
 80015de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d502      	bpl.n	80015ee <mover_motorq3_mm+0x1e>
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
	if (milimetros > 400) milimetros = 400;
 80015ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80016d0 <mover_motorq3_mm+0x100>
 80015f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	dd01      	ble.n	8001604 <mover_motorq3_mm+0x34>
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <mover_motorq3_mm+0x104>)
 8001602:	607b      	str	r3, [r7, #4]

	// Convertir el punto de referencia de 100 mm a 0 mm para los cálculos
	//milimetros -= 100;

	// Convertir milímetros a pasos
    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001604:	ed97 0a01 	vldr	s0, [r7, #4]
 8001608:	f7ff fa90 	bl	8000b2c <milimetros_a_pasos>
 800160c:	6178      	str	r0, [r7, #20]

    // Calcular la nueva posición deseada
    int nuevo_paso = pasos;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	613b      	str	r3, [r7, #16]

    // Calcular la diferencia de pasos
    int diferencia_pasos = nuevo_paso - paso_actual_q3;
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <mover_motorq3_mm+0x108>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dd22      	ble.n	8001668 <mover_motorq3_mm+0x98>
        // Movimiento hacia adelante
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // Dirección positiva
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001628:	482c      	ldr	r0, [pc, #176]	; (80016dc <mover_motorq3_mm+0x10c>)
 800162a:	f003 f9c9 	bl	80049c0 <HAL_GPIO_WritePin>
        for (int i = 0; i < diferencia_pasos; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e014      	b.n	800165e <mover_motorq3_mm+0x8e>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163a:	4828      	ldr	r0, [pc, #160]	; (80016dc <mover_motorq3_mm+0x10c>)
 800163c:	f003 f9c0 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fcbd 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164c:	4823      	ldr	r0, [pc, #140]	; (80016dc <mover_motorq3_mm+0x10c>)
 800164e:	f003 f9b7 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fcb4 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbe6      	blt.n	8001634 <mover_motorq3_mm+0x64>
 8001666:	e027      	b.n	80016b8 <mover_motorq3_mm+0xe8>
        }
    } else if (diferencia_pasos < 0) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da24      	bge.n	80016b8 <mover_motorq3_mm+0xe8>
        // Movimiento hacia atrás
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET); // Dirección negativa
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001674:	4819      	ldr	r0, [pc, #100]	; (80016dc <mover_motorq3_mm+0x10c>)
 8001676:	f003 f9a3 	bl	80049c0 <HAL_GPIO_WritePin>
        diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	425b      	negs	r3, r3
 800167e:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < diferencia_pasos; i++) {
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	e014      	b.n	80016b0 <mover_motorq3_mm+0xe0>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <mover_motorq3_mm+0x10c>)
 800168e:	f003 f997 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fc94 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169e:	480f      	ldr	r0, [pc, #60]	; (80016dc <mover_motorq3_mm+0x10c>)
 80016a0:	f003 f98e 	bl	80049c0 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f000 fc8b 	bl	8001fc0 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbe6      	blt.n	8001686 <mover_motorq3_mm+0xb6>
        }
    }

    // Actualizar el paso actual
    paso_actual_q3 = nuevo_paso;
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <mover_motorq3_mm+0x108>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	6013      	str	r3, [r2, #0]

    HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c2:	f000 fc7d 	bl	8001fc0 <HAL_Delay>
}
 80016c6:	bf00      	nop
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	43c80000 	.word	0x43c80000
 80016d4:	43c80000 	.word	0x43c80000
 80016d8:	2400055c 	.word	0x2400055c
 80016dc:	58021000 	.word	0x58021000

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_MspInit+0x30>)
 80016f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f8:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x30>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x30>)
 8001704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58024400 	.word	0x58024400

08001720 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_TIM_PWM_MspInit+0x3c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_TIM_PWM_MspInit+0x40>)
 8001734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001738:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_TIM_PWM_MspInit+0x40>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_TIM_PWM_MspInit+0x40>)
 8001744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40010000 	.word	0x40010000
 8001760:	58024400 	.word	0x58024400

08001764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d11f      	bne.n	80017c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_TIM_MspPostInit+0x70>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_TIM_MspPostInit+0x70>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_TIM_MspPostInit+0x70>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80017a4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80017a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_TIM_MspPostInit+0x74>)
 80017c2:	f002 ff55 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020000 	.word	0x58020000

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0b8      	sub	sp, #224	; 0xe0
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	22b4      	movs	r2, #180	; 0xb4
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f008 ff0d 	bl	800a61c <memset>
  if(huart->Instance==USART1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4aac      	ldr	r2, [pc, #688]	; (8001ab8 <HAL_UART_MspInit+0x2dc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	f040 80a6 	bne.w	800195a <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800180e:	2301      	movs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4618      	mov	r0, r3
 800181e:	f004 f877 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001828:	f7ff ff5a 	bl	80016e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800182c:	4ba3      	ldr	r3, [pc, #652]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 800182e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001832:	4aa2      	ldr	r2, [pc, #648]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800183c:	4b9f      	ldr	r3, [pc, #636]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 800183e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	4a9a      	ldr	r2, [pc, #616]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185a:	4b98      	ldr	r3, [pc, #608]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001868:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800186c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001882:	2304      	movs	r3, #4
 8001884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800188c:	4619      	mov	r1, r3
 800188e:	488c      	ldr	r0, [pc, #560]	; (8001ac0 <HAL_UART_MspInit+0x2e4>)
 8001890:	f002 feee 	bl	8004670 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001894:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 8001896:	4a8c      	ldr	r2, [pc, #560]	; (8001ac8 <HAL_UART_MspInit+0x2ec>)
 8001898:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800189a:	4b8a      	ldr	r3, [pc, #552]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 800189c:	2229      	movs	r2, #41	; 0x29
 800189e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a0:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a6:	4b87      	ldr	r3, [pc, #540]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ac:	4b85      	ldr	r3, [pc, #532]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b4:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	4b82      	ldr	r3, [pc, #520]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018cc:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018d2:	487c      	ldr	r0, [pc, #496]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018d4:	f000 fca8 	bl	8002228 <HAL_DMA_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80018de:	f7ff feff 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80018e8:	4a76      	ldr	r2, [pc, #472]	; (8001ac4 <HAL_UART_MspInit+0x2e8>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80018ee:	4b77      	ldr	r3, [pc, #476]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 80018f0:	4a77      	ldr	r2, [pc, #476]	; (8001ad0 <HAL_UART_MspInit+0x2f4>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018f4:	4b75      	ldr	r3, [pc, #468]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 80018f6:	222a      	movs	r2, #42	; 0x2a
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fa:	4b74      	ldr	r3, [pc, #464]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190e:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001914:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800191a:	4b6c      	ldr	r3, [pc, #432]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001920:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b69      	ldr	r3, [pc, #420]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800192c:	4867      	ldr	r0, [pc, #412]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 800192e:	f000 fc7b 	bl	8002228 <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001938:	f7ff fed2 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a63      	ldr	r2, [pc, #396]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001940:	679a      	str	r2, [r3, #120]	; 0x78
 8001942:	4a62      	ldr	r2, [pc, #392]	; (8001acc <HAL_UART_MspInit+0x2f0>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2025      	movs	r0, #37	; 0x25
 800194e:	f000 fc36 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001952:	2025      	movs	r0, #37	; 0x25
 8001954:	f000 fc4d 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001958:	e0aa      	b.n	8001ab0 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a5d      	ldr	r2, [pc, #372]	; (8001ad4 <HAL_UART_MspInit+0x2f8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	f040 80a5 	bne.w	8001ab0 <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	4618      	mov	r0, r3
 8001976:	f003 ffcb 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001980:	f7ff feae 	bl	80016e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 8001986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198a:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 8001996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a44      	ldr	r2, [pc, #272]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_UART_MspInit+0x2e0>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019da:	2307      	movs	r3, #7
 80019dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019e4:	4619      	mov	r1, r3
 80019e6:	4836      	ldr	r0, [pc, #216]	; (8001ac0 <HAL_UART_MspInit+0x2e4>)
 80019e8:	f002 fe42 	bl	8004670 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 80019ec:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 80019ee:	4a3b      	ldr	r2, [pc, #236]	; (8001adc <HAL_UART_MspInit+0x300>)
 80019f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 80019f4:	222d      	movs	r2, #45	; 0x2d
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a2a:	482b      	ldr	r0, [pc, #172]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a2c:	f000 fbfc 	bl	8002228 <HAL_DMA_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8001a36:	f7ff fe53 	bl	80016e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a3e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <HAL_UART_MspInit+0x2fc>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_UART_MspInit+0x308>)
 8001a4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001a4c:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a4e:	222e      	movs	r2, #46	; 0x2e
 8001a50:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a64:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a84:	4816      	ldr	r0, [pc, #88]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a86:	f000 fbcf 	bl	8002228 <HAL_DMA_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8001a90:	f7ff fe26 	bl	80016e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a98:	679a      	str	r2, [r3, #120]	; 0x78
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0x304>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2027      	movs	r0, #39	; 0x27
 8001aa6:	f000 fb8a 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001aaa:	2027      	movs	r0, #39	; 0x27
 8001aac:	f000 fba1 	bl	80021f2 <HAL_NVIC_EnableIRQ>
}
 8001ab0:	bf00      	nop
 8001ab2:	37e0      	adds	r7, #224	; 0xe0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58020400 	.word	0x58020400
 8001ac4:	24000370 	.word	0x24000370
 8001ac8:	40020010 	.word	0x40020010
 8001acc:	240003e8 	.word	0x240003e8
 8001ad0:	40020028 	.word	0x40020028
 8001ad4:	40004800 	.word	0x40004800
 8001ad8:	24000460 	.word	0x24000460
 8001adc:	40020040 	.word	0x40020040
 8001ae0:	240004d8 	.word	0x240004d8
 8001ae4:	40020058 	.word	0x40020058

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 fa24 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA1_Stream0_IRQHandler+0x10>)
 8001b42:	f001 fc2f 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24000370 	.word	0x24000370

08001b50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA1_Stream1_IRQHandler+0x10>)
 8001b56:	f001 fc25 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	240003e8 	.word	0x240003e8

08001b64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Stream2_IRQHandler+0x10>)
 8001b6a:	f001 fc1b 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	24000460 	.word	0x24000460

08001b78 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA1_Stream3_IRQHandler+0x10>)
 8001b7e:	f001 fc11 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	240004d8 	.word	0x240004d8

08001b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <USART1_IRQHandler+0x10>)
 8001b92:	f006 f9e5 	bl	8007f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000250 	.word	0x24000250

08001ba0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <USART3_IRQHandler+0x10>)
 8001ba6:	f006 f9db 	bl	8007f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	240002e0 	.word	0x240002e0

08001bb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001bb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bbc:	f002 ff19 	bl	80049f2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bc4:	f002 ff15 	bl	80049f2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_kill>:

int _kill(int pid, int sig)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001be6:	f008 fcef 	bl	800a5c8 <__errno>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2216      	movs	r2, #22
 8001bee:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_exit>:

void _exit (int status)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffe7 	bl	8001bdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c0e:	e7fe      	b.n	8001c0e <_exit+0x12>

08001c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e00a      	b.n	8001c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c22:	f3af 8000 	nop.w
 8001c26:	4601      	mov	r1, r0
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	60ba      	str	r2, [r7, #8]
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbf0      	blt.n	8001c22 <_read+0x12>
	}

return len;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e009      	b.n	8001c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf1      	blt.n	8001c5c <_write+0x12>
	}
	return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_close>:

int _close(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001caa:	605a      	str	r2, [r3, #4]
	return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_isatty>:

int _isatty(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
	return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f008 fc54 	bl	800a5c8 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24050000 	.word	0x24050000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	24000570 	.word	0x24000570
 8001d54:	24000588 	.word	0x24000588

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <SystemInit+0xd0>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <SystemInit+0xd0>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <SystemInit+0xd4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d807      	bhi.n	8001d88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <SystemInit+0xd4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 030f 	bic.w	r3, r3, #15
 8001d80:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <SystemInit+0xd4>)
 8001d82:	f043 0307 	orr.w	r3, r3, #7
 8001d86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <SystemInit+0xd8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a28      	ldr	r2, [pc, #160]	; (8001e30 <SystemInit+0xd8>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <SystemInit+0xd8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <SystemInit+0xd8>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4924      	ldr	r1, [pc, #144]	; (8001e30 <SystemInit+0xd8>)
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <SystemInit+0xdc>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <SystemInit+0xd4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <SystemInit+0xd4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 030f 	bic.w	r3, r3, #15
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <SystemInit+0xd4>)
 8001dbc:	f043 0307 	orr.w	r3, r3, #7
 8001dc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <SystemInit+0xd8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <SystemInit+0xd8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <SystemInit+0xd8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <SystemInit+0xd8>)
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <SystemInit+0xe0>)
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <SystemInit+0xd8>)
 8001ddc:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <SystemInit+0xe4>)
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <SystemInit+0xd8>)
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <SystemInit+0xe8>)
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <SystemInit+0xd8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <SystemInit+0xd8>)
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <SystemInit+0xe8>)
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <SystemInit+0xd8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <SystemInit+0xd8>)
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <SystemInit+0xe8>)
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <SystemInit+0xd8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <SystemInit+0xd8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <SystemInit+0xd8>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <SystemInit+0xd8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <SystemInit+0xec>)
 8001e18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	52002000 	.word	0x52002000
 8001e30:	58024400 	.word	0x58024400
 8001e34:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e38:	02020200 	.word	0x02020200
 8001e3c:	01ff0000 	.word	0x01ff0000
 8001e40:	01010280 	.word	0x01010280
 8001e44:	52004000 	.word	0x52004000

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e4c:	f7ff ff84 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e52:	490d      	ldr	r1, [pc, #52]	; (8001e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e68:	4c0a      	ldr	r4, [pc, #40]	; (8001e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e76:	f008 fbad 	bl	800a5d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7fe fe95 	bl	8000ba8 <main>
  bx  lr
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e80:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001e84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e88:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001e8c:	0800d79c 	.word	0x0800d79c
  ldr r2, =_sbss
 8001e90:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001e94:	24000588 	.word	0x24000588

08001e98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC3_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	f000 f980 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ea8:	f003 fb5c 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_Init+0x68>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	4913      	ldr	r1, [pc, #76]	; (8001f08 <HAL_Init+0x6c>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_Init+0x68>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_Init+0x6c>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_Init+0x70>)
 8001ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_Init+0x74>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f000 f814 	bl	8001f14 <HAL_InitTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e002      	b.n	8001efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef6:	f7ff fbf9 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	58024400 	.word	0x58024400
 8001f08:	0800d320 	.word	0x0800d320
 8001f0c:	24000008 	.word	0x24000008
 8001f10:	24000004 	.word	0x24000004

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_InitTick+0x60>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e021      	b.n	8001f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_InitTick+0x64>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_InitTick+0x60>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f965 	bl	800220e <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f92f 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x68>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	24000010 	.word	0x24000010
 8001f78:	24000004 	.word	0x24000004
 8001f7c:	2400000c 	.word	0x2400000c

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	24000010 	.word	0x24000010
 8001fa4:	24000574 	.word	0x24000574

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	24000574 	.word	0x24000574

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	24000010 	.word	0x24000010

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	4313      	orrs	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	05fa0000 	.word	0x05fa0000

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff40 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff90 	bl	80020fc <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5f 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff33 	bl	800206c <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa4 	bl	8002164 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff feba 	bl	8001fa8 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e314      	b.n	800286a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a66      	ldr	r2, [pc, #408]	; (80023e0 <HAL_DMA_Init+0x1b8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04a      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_DMA_Init+0x1bc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d045      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_DMA_Init+0x1c0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d040      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a62      	ldr	r2, [pc, #392]	; (80023ec <HAL_DMA_Init+0x1c4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d03b      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_DMA_Init+0x1c8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d036      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5f      	ldr	r2, [pc, #380]	; (80023f4 <HAL_DMA_Init+0x1cc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d031      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5d      	ldr	r2, [pc, #372]	; (80023f8 <HAL_DMA_Init+0x1d0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02c      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5c      	ldr	r2, [pc, #368]	; (80023fc <HAL_DMA_Init+0x1d4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d027      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a5a      	ldr	r2, [pc, #360]	; (8002400 <HAL_DMA_Init+0x1d8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d022      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_DMA_Init+0x1dc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d01d      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a57      	ldr	r2, [pc, #348]	; (8002408 <HAL_DMA_Init+0x1e0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d018      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a56      	ldr	r2, [pc, #344]	; (800240c <HAL_DMA_Init+0x1e4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a54      	ldr	r2, [pc, #336]	; (8002410 <HAL_DMA_Init+0x1e8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a53      	ldr	r2, [pc, #332]	; (8002414 <HAL_DMA_Init+0x1ec>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a51      	ldr	r2, [pc, #324]	; (8002418 <HAL_DMA_Init+0x1f0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Init+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_DMA_Init+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Init+0xbc>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_DMA_Init+0xbe>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 813c 	beq.w	8002564 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_DMA_Init+0x1b8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a36      	ldr	r2, [pc, #216]	; (80023e4 <HAL_DMA_Init+0x1bc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <HAL_DMA_Init+0x1c0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_Init+0x174>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_DMA_Init+0x1c4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_DMA_Init+0x1c8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_Init+0x174>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_DMA_Init+0x1cc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_DMA_Init+0x1d0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_DMA_Init+0x1d4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_Init+0x174>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_DMA_Init+0x1d8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_DMA_Init+0x1dc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_DMA_Init+0x1e0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_Init+0x174>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_DMA_Init+0x1e4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_DMA_Init+0x1e8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_Init+0x174>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_DMA_Init+0x1ec>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Init+0x1f0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Init+0x174>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_DMA_Init+0x1f4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <HAL_DMA_Init+0x186>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e007      	b.n	80023be <HAL_DMA_Init+0x196>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023be:	e02f      	b.n	8002420 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c0:	f7ff fdf2 	bl	8001fa8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d928      	bls.n	8002420 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2203      	movs	r2, #3
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e244      	b.n	800286a <HAL_DMA_Init+0x642>
 80023e0:	40020010 	.word	0x40020010
 80023e4:	40020028 	.word	0x40020028
 80023e8:	40020040 	.word	0x40020040
 80023ec:	40020058 	.word	0x40020058
 80023f0:	40020070 	.word	0x40020070
 80023f4:	40020088 	.word	0x40020088
 80023f8:	400200a0 	.word	0x400200a0
 80023fc:	400200b8 	.word	0x400200b8
 8002400:	40020410 	.word	0x40020410
 8002404:	40020428 	.word	0x40020428
 8002408:	40020440 	.word	0x40020440
 800240c:	40020458 	.word	0x40020458
 8002410:	40020470 	.word	0x40020470
 8002414:	40020488 	.word	0x40020488
 8002418:	400204a0 	.word	0x400204a0
 800241c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1c8      	bne.n	80023c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4b84      	ldr	r3, [pc, #528]	; (800264c <HAL_DMA_Init+0x424>)
 800243a:	4013      	ands	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002446:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b04      	cmp	r3, #4
 8002472:	d107      	bne.n	8002484 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4313      	orrs	r3, r2
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b28      	cmp	r3, #40	; 0x28
 800248a:	d903      	bls.n	8002494 <HAL_DMA_Init+0x26c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b2e      	cmp	r3, #46	; 0x2e
 8002492:	d91f      	bls.n	80024d4 <HAL_DMA_Init+0x2ac>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b3e      	cmp	r3, #62	; 0x3e
 800249a:	d903      	bls.n	80024a4 <HAL_DMA_Init+0x27c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b42      	cmp	r3, #66	; 0x42
 80024a2:	d917      	bls.n	80024d4 <HAL_DMA_Init+0x2ac>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b46      	cmp	r3, #70	; 0x46
 80024aa:	d903      	bls.n	80024b4 <HAL_DMA_Init+0x28c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b48      	cmp	r3, #72	; 0x48
 80024b2:	d90f      	bls.n	80024d4 <HAL_DMA_Init+0x2ac>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b4e      	cmp	r3, #78	; 0x4e
 80024ba:	d903      	bls.n	80024c4 <HAL_DMA_Init+0x29c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b52      	cmp	r3, #82	; 0x52
 80024c2:	d907      	bls.n	80024d4 <HAL_DMA_Init+0x2ac>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b73      	cmp	r3, #115	; 0x73
 80024ca:	d905      	bls.n	80024d8 <HAL_DMA_Init+0x2b0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b77      	cmp	r3, #119	; 0x77
 80024d2:	d801      	bhi.n	80024d8 <HAL_DMA_Init+0x2b0>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <HAL_DMA_Init+0x2b2>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f023 0307 	bic.w	r3, r3, #7
 80024fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2b04      	cmp	r3, #4
 800250e:	d117      	bne.n	8002540 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00e      	beq.n	8002540 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f001 ff1a 	bl	800435c <DMA_CheckFifoParam>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e194      	b.n	800286a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 fe55 	bl	80041f8 <DMA_CalcBaseAndBitshift>
 800254e:	4603      	mov	r3, r0
 8002550:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	223f      	movs	r2, #63	; 0x3f
 800255c:	409a      	lsls	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	e0ca      	b.n	80026fa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a39      	ldr	r2, [pc, #228]	; (8002650 <HAL_DMA_Init+0x428>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d022      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a38      	ldr	r2, [pc, #224]	; (8002654 <HAL_DMA_Init+0x42c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d01d      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_DMA_Init+0x430>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d018      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a35      	ldr	r2, [pc, #212]	; (800265c <HAL_DMA_Init+0x434>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a33      	ldr	r2, [pc, #204]	; (8002660 <HAL_DMA_Init+0x438>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_DMA_Init+0x43c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a30      	ldr	r2, [pc, #192]	; (8002668 <HAL_DMA_Init+0x440>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_DMA_Init+0x38c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2f      	ldr	r2, [pc, #188]	; (800266c <HAL_DMA_Init+0x444>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_DMA_Init+0x390>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_DMA_Init+0x392>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8094 	beq.w	80026e8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_DMA_Init+0x428>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d021      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_DMA_Init+0x42c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01c      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_DMA_Init+0x430>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d017      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_DMA_Init+0x434>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d012      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_DMA_Init+0x438>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_DMA_Init+0x43c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d008      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_DMA_Init+0x440>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <HAL_DMA_Init+0x3e6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_DMA_Init+0x444>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_DMA_Init+0x448>)
 800262c:	4013      	ands	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d01d      	beq.n	8002674 <HAL_DMA_Init+0x44c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d102      	bne.n	8002646 <HAL_DMA_Init+0x41e>
 8002640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002644:	e017      	b.n	8002676 <HAL_DMA_Init+0x44e>
 8002646:	2300      	movs	r3, #0
 8002648:	e015      	b.n	8002676 <HAL_DMA_Init+0x44e>
 800264a:	bf00      	nop
 800264c:	fe10803f 	.word	0xfe10803f
 8002650:	58025408 	.word	0x58025408
 8002654:	5802541c 	.word	0x5802541c
 8002658:	58025430 	.word	0x58025430
 800265c:	58025444 	.word	0x58025444
 8002660:	58025458 	.word	0x58025458
 8002664:	5802546c 	.word	0x5802546c
 8002668:	58025480 	.word	0x58025480
 800266c:	58025494 	.word	0x58025494
 8002670:	fffe000f 	.word	0xfffe000f
 8002674:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800267c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002684:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800268c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800269c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b6e      	ldr	r3, [pc, #440]	; (8002874 <HAL_DMA_Init+0x64c>)
 80026bc:	4413      	add	r3, r2
 80026be:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <HAL_DMA_Init+0x650>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	009a      	lsls	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f001 fd93 	bl	80041f8 <DMA_CalcBaseAndBitshift>
 80026d2:	4603      	mov	r3, r0
 80026d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2201      	movs	r2, #1
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e008      	b.n	80026fa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2240      	movs	r2, #64	; 0x40
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0b7      	b.n	800286a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5f      	ldr	r2, [pc, #380]	; (800287c <HAL_DMA_Init+0x654>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d072      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <HAL_DMA_Init+0x658>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d06d      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5c      	ldr	r2, [pc, #368]	; (8002884 <HAL_DMA_Init+0x65c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d068      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_DMA_Init+0x660>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d063      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a59      	ldr	r2, [pc, #356]	; (800288c <HAL_DMA_Init+0x664>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d05e      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_DMA_Init+0x668>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d059      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_DMA_Init+0x66c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d054      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_DMA_Init+0x670>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d04f      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_DMA_Init+0x674>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d04a      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a51      	ldr	r2, [pc, #324]	; (80028a0 <HAL_DMA_Init+0x678>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d045      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <HAL_DMA_Init+0x67c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d040      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4e      	ldr	r2, [pc, #312]	; (80028a8 <HAL_DMA_Init+0x680>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d03b      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a4d      	ldr	r2, [pc, #308]	; (80028ac <HAL_DMA_Init+0x684>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d036      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4b      	ldr	r2, [pc, #300]	; (80028b0 <HAL_DMA_Init+0x688>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d031      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4a      	ldr	r2, [pc, #296]	; (80028b4 <HAL_DMA_Init+0x68c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d02c      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_DMA_Init+0x690>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d027      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a47      	ldr	r2, [pc, #284]	; (80028bc <HAL_DMA_Init+0x694>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a45      	ldr	r2, [pc, #276]	; (80028c0 <HAL_DMA_Init+0x698>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01d      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a44      	ldr	r2, [pc, #272]	; (80028c4 <HAL_DMA_Init+0x69c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d018      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <HAL_DMA_Init+0x6a0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_DMA_Init+0x6a4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00e      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <HAL_DMA_Init+0x6a8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3e      	ldr	r2, [pc, #248]	; (80028d4 <HAL_DMA_Init+0x6ac>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_DMA_Init+0x5c2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3c      	ldr	r2, [pc, #240]	; (80028d8 <HAL_DMA_Init+0x6b0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_DMA_Init+0x5c6>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_Init+0x5c8>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d032      	beq.n	800285a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 fe2d 	bl	8004454 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b80      	cmp	r3, #128	; 0x80
 8002800:	d102      	bne.n	8002808 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800281c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_DMA_Init+0x620>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d80c      	bhi.n	8002848 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f001 feaa 	bl	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e008      	b.n	800285a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	a7fdabf8 	.word	0xa7fdabf8
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	40020010 	.word	0x40020010
 8002880:	40020028 	.word	0x40020028
 8002884:	40020040 	.word	0x40020040
 8002888:	40020058 	.word	0x40020058
 800288c:	40020070 	.word	0x40020070
 8002890:	40020088 	.word	0x40020088
 8002894:	400200a0 	.word	0x400200a0
 8002898:	400200b8 	.word	0x400200b8
 800289c:	40020410 	.word	0x40020410
 80028a0:	40020428 	.word	0x40020428
 80028a4:	40020440 	.word	0x40020440
 80028a8:	40020458 	.word	0x40020458
 80028ac:	40020470 	.word	0x40020470
 80028b0:	40020488 	.word	0x40020488
 80028b4:	400204a0 	.word	0x400204a0
 80028b8:	400204b8 	.word	0x400204b8
 80028bc:	58025408 	.word	0x58025408
 80028c0:	5802541c 	.word	0x5802541c
 80028c4:	58025430 	.word	0x58025430
 80028c8:	58025444 	.word	0x58025444
 80028cc:	58025458 	.word	0x58025458
 80028d0:	5802546c 	.word	0x5802546c
 80028d4:	58025480 	.word	0x58025480
 80028d8:	58025494 	.word	0x58025494

080028dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fb60 	bl	8001fa8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e2dc      	b.n	8002eae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e2cd      	b.n	8002eae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a76      	ldr	r2, [pc, #472]	; (8002af0 <HAL_DMA_Abort+0x214>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04a      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a74      	ldr	r2, [pc, #464]	; (8002af4 <HAL_DMA_Abort+0x218>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d045      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a73      	ldr	r2, [pc, #460]	; (8002af8 <HAL_DMA_Abort+0x21c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a71      	ldr	r2, [pc, #452]	; (8002afc <HAL_DMA_Abort+0x220>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d03b      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <HAL_DMA_Abort+0x224>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d036      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_DMA_Abort+0x228>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6d      	ldr	r2, [pc, #436]	; (8002b08 <HAL_DMA_Abort+0x22c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d02c      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6b      	ldr	r2, [pc, #428]	; (8002b0c <HAL_DMA_Abort+0x230>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6a      	ldr	r2, [pc, #424]	; (8002b10 <HAL_DMA_Abort+0x234>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a68      	ldr	r2, [pc, #416]	; (8002b14 <HAL_DMA_Abort+0x238>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a67      	ldr	r2, [pc, #412]	; (8002b18 <HAL_DMA_Abort+0x23c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_DMA_Abort+0x240>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a64      	ldr	r2, [pc, #400]	; (8002b20 <HAL_DMA_Abort+0x244>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a62      	ldr	r2, [pc, #392]	; (8002b24 <HAL_DMA_Abort+0x248>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a61      	ldr	r2, [pc, #388]	; (8002b28 <HAL_DMA_Abort+0x24c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_DMA_Abort+0xd6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_DMA_Abort+0x250>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Abort+0xda>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_Abort+0xdc>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 021e 	bic.w	r2, r2, #30
 80029ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e00a      	b.n	80029fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020e 	bic.w	r2, r2, #14
 80029f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <HAL_DMA_Abort+0x214>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d072      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3a      	ldr	r2, [pc, #232]	; (8002af4 <HAL_DMA_Abort+0x218>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d06d      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <HAL_DMA_Abort+0x21c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d068      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_DMA_Abort+0x220>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d063      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <HAL_DMA_Abort+0x224>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d05e      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_DMA_Abort+0x228>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d059      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a33      	ldr	r2, [pc, #204]	; (8002b08 <HAL_DMA_Abort+0x22c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d054      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_DMA_Abort+0x230>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04f      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_DMA_Abort+0x234>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <HAL_DMA_Abort+0x238>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <HAL_DMA_Abort+0x23c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <HAL_DMA_Abort+0x240>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_DMA_Abort+0x244>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_DMA_Abort+0x248>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_DMA_Abort+0x24c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <HAL_DMA_Abort+0x250>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_DMA_Abort+0x254>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_DMA_Abort+0x258>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_DMA_Abort+0x25c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_DMA_Abort+0x260>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_DMA_Abort+0x264>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_DMA_Abort+0x268>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_DMA_Abort+0x26c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Abort+0x20e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_DMA_Abort+0x270>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d132      	bne.n	8002b50 <HAL_DMA_Abort+0x274>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e031      	b.n	8002b52 <HAL_DMA_Abort+0x276>
 8002aee:	bf00      	nop
 8002af0:	40020010 	.word	0x40020010
 8002af4:	40020028 	.word	0x40020028
 8002af8:	40020040 	.word	0x40020040
 8002afc:	40020058 	.word	0x40020058
 8002b00:	40020070 	.word	0x40020070
 8002b04:	40020088 	.word	0x40020088
 8002b08:	400200a0 	.word	0x400200a0
 8002b0c:	400200b8 	.word	0x400200b8
 8002b10:	40020410 	.word	0x40020410
 8002b14:	40020428 	.word	0x40020428
 8002b18:	40020440 	.word	0x40020440
 8002b1c:	40020458 	.word	0x40020458
 8002b20:	40020470 	.word	0x40020470
 8002b24:	40020488 	.word	0x40020488
 8002b28:	400204a0 	.word	0x400204a0
 8002b2c:	400204b8 	.word	0x400204b8
 8002b30:	58025408 	.word	0x58025408
 8002b34:	5802541c 	.word	0x5802541c
 8002b38:	58025430 	.word	0x58025430
 8002b3c:	58025444 	.word	0x58025444
 8002b40:	58025458 	.word	0x58025458
 8002b44:	5802546c 	.word	0x5802546c
 8002b48:	58025480 	.word	0x58025480
 8002b4c:	58025494 	.word	0x58025494
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6d      	ldr	r2, [pc, #436]	; (8002d20 <HAL_DMA_Abort+0x444>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04a      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6b      	ldr	r2, [pc, #428]	; (8002d24 <HAL_DMA_Abort+0x448>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d045      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_DMA_Abort+0x44c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d040      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a68      	ldr	r2, [pc, #416]	; (8002d2c <HAL_DMA_Abort+0x450>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d03b      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a67      	ldr	r2, [pc, #412]	; (8002d30 <HAL_DMA_Abort+0x454>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d036      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_DMA_Abort+0x458>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a64      	ldr	r2, [pc, #400]	; (8002d38 <HAL_DMA_Abort+0x45c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a62      	ldr	r2, [pc, #392]	; (8002d3c <HAL_DMA_Abort+0x460>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d027      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a61      	ldr	r2, [pc, #388]	; (8002d40 <HAL_DMA_Abort+0x464>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5f      	ldr	r2, [pc, #380]	; (8002d44 <HAL_DMA_Abort+0x468>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5e      	ldr	r2, [pc, #376]	; (8002d48 <HAL_DMA_Abort+0x46c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a5c      	ldr	r2, [pc, #368]	; (8002d4c <HAL_DMA_Abort+0x470>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <HAL_DMA_Abort+0x474>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a59      	ldr	r2, [pc, #356]	; (8002d54 <HAL_DMA_Abort+0x478>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <HAL_DMA_Abort+0x47c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_DMA_Abort+0x32a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a56      	ldr	r2, [pc, #344]	; (8002d5c <HAL_DMA_Abort+0x480>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <HAL_DMA_Abort+0x33c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e007      	b.n	8002c28 <HAL_DMA_Abort+0x34c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c28:	e013      	b.n	8002c52 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c2a:	f7ff f9bd 	bl	8001fa8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d90c      	bls.n	8002c52 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2203      	movs	r2, #3
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e12d      	b.n	8002eae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e5      	bne.n	8002c2a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2f      	ldr	r2, [pc, #188]	; (8002d20 <HAL_DMA_Abort+0x444>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d04a      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2d      	ldr	r2, [pc, #180]	; (8002d24 <HAL_DMA_Abort+0x448>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d045      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <HAL_DMA_Abort+0x44c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d040      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <HAL_DMA_Abort+0x450>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d03b      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_DMA_Abort+0x454>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d036      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_DMA_Abort+0x458>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d031      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <HAL_DMA_Abort+0x45c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d02c      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_DMA_Abort+0x460>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d027      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <HAL_DMA_Abort+0x464>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_DMA_Abort+0x468>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01d      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_DMA_Abort+0x46c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d018      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_DMA_Abort+0x470>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_DMA_Abort+0x474>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_DMA_Abort+0x478>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_DMA_Abort+0x47c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort+0x422>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_DMA_Abort+0x480>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Abort+0x426>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_DMA_Abort+0x428>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d02b      	beq.n	8002d60 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	e02a      	b.n	8002d76 <HAL_DMA_Abort+0x49a>
 8002d20:	40020010 	.word	0x40020010
 8002d24:	40020028 	.word	0x40020028
 8002d28:	40020040 	.word	0x40020040
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	40020070 	.word	0x40020070
 8002d34:	40020088 	.word	0x40020088
 8002d38:	400200a0 	.word	0x400200a0
 8002d3c:	400200b8 	.word	0x400200b8
 8002d40:	40020410 	.word	0x40020410
 8002d44:	40020428 	.word	0x40020428
 8002d48:	40020440 	.word	0x40020440
 8002d4c:	40020458 	.word	0x40020458
 8002d50:	40020470 	.word	0x40020470
 8002d54:	40020488 	.word	0x40020488
 8002d58:	400204a0 	.word	0x400204a0
 8002d5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2201      	movs	r2, #1
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a4f      	ldr	r2, [pc, #316]	; (8002eb8 <HAL_DMA_Abort+0x5dc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d072      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	; (8002ebc <HAL_DMA_Abort+0x5e0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d06d      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <HAL_DMA_Abort+0x5e4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d068      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	; (8002ec4 <HAL_DMA_Abort+0x5e8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d063      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a49      	ldr	r2, [pc, #292]	; (8002ec8 <HAL_DMA_Abort+0x5ec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d05e      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_DMA_Abort+0x5f0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d059      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a46      	ldr	r2, [pc, #280]	; (8002ed0 <HAL_DMA_Abort+0x5f4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d054      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a44      	ldr	r2, [pc, #272]	; (8002ed4 <HAL_DMA_Abort+0x5f8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d04f      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a43      	ldr	r2, [pc, #268]	; (8002ed8 <HAL_DMA_Abort+0x5fc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d04a      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a41      	ldr	r2, [pc, #260]	; (8002edc <HAL_DMA_Abort+0x600>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d045      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <HAL_DMA_Abort+0x604>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d040      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a3e      	ldr	r2, [pc, #248]	; (8002ee4 <HAL_DMA_Abort+0x608>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d03b      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a3d      	ldr	r2, [pc, #244]	; (8002ee8 <HAL_DMA_Abort+0x60c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d036      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_DMA_Abort+0x610>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <HAL_DMA_Abort+0x614>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d02c      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_DMA_Abort+0x618>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d027      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <HAL_DMA_Abort+0x61c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a35      	ldr	r2, [pc, #212]	; (8002efc <HAL_DMA_Abort+0x620>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01d      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_DMA_Abort+0x624>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <HAL_DMA_Abort+0x628>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a31      	ldr	r2, [pc, #196]	; (8002f08 <HAL_DMA_Abort+0x62c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <HAL_DMA_Abort+0x630>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d009      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <HAL_DMA_Abort+0x634>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_DMA_Abort+0x58a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_DMA_Abort+0x638>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Abort+0x58e>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_Abort+0x590>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e78:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e90:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e9a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40020010 	.word	0x40020010
 8002ebc:	40020028 	.word	0x40020028
 8002ec0:	40020040 	.word	0x40020040
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	40020070 	.word	0x40020070
 8002ecc:	40020088 	.word	0x40020088
 8002ed0:	400200a0 	.word	0x400200a0
 8002ed4:	400200b8 	.word	0x400200b8
 8002ed8:	40020410 	.word	0x40020410
 8002edc:	40020428 	.word	0x40020428
 8002ee0:	40020440 	.word	0x40020440
 8002ee4:	40020458 	.word	0x40020458
 8002ee8:	40020470 	.word	0x40020470
 8002eec:	40020488 	.word	0x40020488
 8002ef0:	400204a0 	.word	0x400204a0
 8002ef4:	400204b8 	.word	0x400204b8
 8002ef8:	58025408 	.word	0x58025408
 8002efc:	5802541c 	.word	0x5802541c
 8002f00:	58025430 	.word	0x58025430
 8002f04:	58025444 	.word	0x58025444
 8002f08:	58025458 	.word	0x58025458
 8002f0c:	5802546c 	.word	0x5802546c
 8002f10:	58025480 	.word	0x58025480
 8002f14:	58025494 	.word	0x58025494

08002f18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e237      	b.n	800339a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d004      	beq.n	8002f40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e22c      	b.n	800339a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <HAL_DMA_Abort_IT+0x1a0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d04a      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	; (80030bc <HAL_DMA_Abort_IT+0x1a4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d045      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a59      	ldr	r2, [pc, #356]	; (80030c0 <HAL_DMA_Abort_IT+0x1a8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d040      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_DMA_Abort_IT+0x1ac>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d03b      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a56      	ldr	r2, [pc, #344]	; (80030c8 <HAL_DMA_Abort_IT+0x1b0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d036      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a55      	ldr	r2, [pc, #340]	; (80030cc <HAL_DMA_Abort_IT+0x1b4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d031      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a53      	ldr	r2, [pc, #332]	; (80030d0 <HAL_DMA_Abort_IT+0x1b8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02c      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_DMA_Abort_IT+0x1bc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d027      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a50      	ldr	r2, [pc, #320]	; (80030d8 <HAL_DMA_Abort_IT+0x1c0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d022      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a4f      	ldr	r2, [pc, #316]	; (80030dc <HAL_DMA_Abort_IT+0x1c4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d01d      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_DMA_Abort_IT+0x1c8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_DMA_Abort_IT+0x1cc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_DMA_Abort_IT+0x1d0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a49      	ldr	r2, [pc, #292]	; (80030ec <HAL_DMA_Abort_IT+0x1d4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a47      	ldr	r2, [pc, #284]	; (80030f0 <HAL_DMA_Abort_IT+0x1d8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a46      	ldr	r2, [pc, #280]	; (80030f4 <HAL_DMA_Abort_IT+0x1dc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_DMA_Abort_IT+0xcc>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_DMA_Abort_IT+0xce>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8086 	beq.w	80030f8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <HAL_DMA_Abort_IT+0x1a0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d04a      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2e      	ldr	r2, [pc, #184]	; (80030bc <HAL_DMA_Abort_IT+0x1a4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d045      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2c      	ldr	r2, [pc, #176]	; (80030c0 <HAL_DMA_Abort_IT+0x1a8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d040      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <HAL_DMA_Abort_IT+0x1ac>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d03b      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_DMA_Abort_IT+0x1b0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d036      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a28      	ldr	r2, [pc, #160]	; (80030cc <HAL_DMA_Abort_IT+0x1b4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d031      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a26      	ldr	r2, [pc, #152]	; (80030d0 <HAL_DMA_Abort_IT+0x1b8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d02c      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a25      	ldr	r2, [pc, #148]	; (80030d4 <HAL_DMA_Abort_IT+0x1bc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d027      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <HAL_DMA_Abort_IT+0x1c0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d022      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a22      	ldr	r2, [pc, #136]	; (80030dc <HAL_DMA_Abort_IT+0x1c4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d01d      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_DMA_Abort_IT+0x1c8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d018      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_DMA_Abort_IT+0x1cc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d013      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_DMA_Abort_IT+0x1d0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00e      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_DMA_Abort_IT+0x1d4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <HAL_DMA_Abort_IT+0x1d8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_DMA_Abort_IT+0x17c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_DMA_Abort_IT+0x1dc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d108      	bne.n	80030a6 <HAL_DMA_Abort_IT+0x18e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e178      	b.n	8003398 <HAL_DMA_Abort_IT+0x480>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e16f      	b.n	8003398 <HAL_DMA_Abort_IT+0x480>
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 020e 	bic.w	r2, r2, #14
 8003106:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6c      	ldr	r2, [pc, #432]	; (80032c0 <HAL_DMA_Abort_IT+0x3a8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04a      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6b      	ldr	r2, [pc, #428]	; (80032c4 <HAL_DMA_Abort_IT+0x3ac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d045      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a69      	ldr	r2, [pc, #420]	; (80032c8 <HAL_DMA_Abort_IT+0x3b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d040      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a68      	ldr	r2, [pc, #416]	; (80032cc <HAL_DMA_Abort_IT+0x3b4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d03b      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_DMA_Abort_IT+0x3b8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d036      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a65      	ldr	r2, [pc, #404]	; (80032d4 <HAL_DMA_Abort_IT+0x3bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_DMA_Abort_IT+0x3c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02c      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a62      	ldr	r2, [pc, #392]	; (80032dc <HAL_DMA_Abort_IT+0x3c4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d027      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a60      	ldr	r2, [pc, #384]	; (80032e0 <HAL_DMA_Abort_IT+0x3c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5f      	ldr	r2, [pc, #380]	; (80032e4 <HAL_DMA_Abort_IT+0x3cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d01d      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5d      	ldr	r2, [pc, #372]	; (80032e8 <HAL_DMA_Abort_IT+0x3d0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5c      	ldr	r2, [pc, #368]	; (80032ec <HAL_DMA_Abort_IT+0x3d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_DMA_Abort_IT+0x3d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a59      	ldr	r2, [pc, #356]	; (80032f4 <HAL_DMA_Abort_IT+0x3dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_DMA_Abort_IT+0x3e0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x290>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_DMA_Abort_IT+0x3e4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <HAL_DMA_Abort_IT+0x2a2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e007      	b.n	80031ca <HAL_DMA_Abort_IT+0x2b2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <HAL_DMA_Abort_IT+0x3a8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d072      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_DMA_Abort_IT+0x3ac>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d06d      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a39      	ldr	r2, [pc, #228]	; (80032c8 <HAL_DMA_Abort_IT+0x3b0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d068      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_DMA_Abort_IT+0x3b4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d063      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <HAL_DMA_Abort_IT+0x3b8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d05e      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_DMA_Abort_IT+0x3bc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d059      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_DMA_Abort_IT+0x3c0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d054      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_DMA_Abort_IT+0x3c4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04f      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <HAL_DMA_Abort_IT+0x3c8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d04a      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_DMA_Abort_IT+0x3cc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d045      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <HAL_DMA_Abort_IT+0x3d0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_DMA_Abort_IT+0x3d4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03b      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2a      	ldr	r2, [pc, #168]	; (80032f0 <HAL_DMA_Abort_IT+0x3d8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d036      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_DMA_Abort_IT+0x3dc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_DMA_Abort_IT+0x3e0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_DMA_Abort_IT+0x3e4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d027      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_DMA_Abort_IT+0x3e8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_DMA_Abort_IT+0x3ec>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a21      	ldr	r2, [pc, #132]	; (8003308 <HAL_DMA_Abort_IT+0x3f0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_DMA_Abort_IT+0x3f4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_DMA_Abort_IT+0x3f8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_DMA_Abort_IT+0x3fc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_DMA_Abort_IT+0x400>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_Abort_IT+0x3a2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_DMA_Abort_IT+0x404>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d132      	bne.n	8003320 <HAL_DMA_Abort_IT+0x408>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e031      	b.n	8003322 <HAL_DMA_Abort_IT+0x40a>
 80032be:	bf00      	nop
 80032c0:	40020010 	.word	0x40020010
 80032c4:	40020028 	.word	0x40020028
 80032c8:	40020040 	.word	0x40020040
 80032cc:	40020058 	.word	0x40020058
 80032d0:	40020070 	.word	0x40020070
 80032d4:	40020088 	.word	0x40020088
 80032d8:	400200a0 	.word	0x400200a0
 80032dc:	400200b8 	.word	0x400200b8
 80032e0:	40020410 	.word	0x40020410
 80032e4:	40020428 	.word	0x40020428
 80032e8:	40020440 	.word	0x40020440
 80032ec:	40020458 	.word	0x40020458
 80032f0:	40020470 	.word	0x40020470
 80032f4:	40020488 	.word	0x40020488
 80032f8:	400204a0 	.word	0x400204a0
 80032fc:	400204b8 	.word	0x400204b8
 8003300:	58025408 	.word	0x58025408
 8003304:	5802541c 	.word	0x5802541c
 8003308:	58025430 	.word	0x58025430
 800330c:	58025444 	.word	0x58025444
 8003310:	58025458 	.word	0x58025458
 8003314:	5802546c 	.word	0x5802546c
 8003318:	58025480 	.word	0x58025480
 800331c:	58025494 	.word	0x58025494
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003334:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003354:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003376:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop

080033a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033b0:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_DMA_IRQHandler+0x1ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a67      	ldr	r2, [pc, #412]	; (8003554 <HAL_DMA_IRQHandler+0x1b0>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5f      	ldr	r2, [pc, #380]	; (8003558 <HAL_DMA_IRQHandler+0x1b4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04a      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_DMA_IRQHandler+0x1b8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d045      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5c      	ldr	r2, [pc, #368]	; (8003560 <HAL_DMA_IRQHandler+0x1bc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d040      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5a      	ldr	r2, [pc, #360]	; (8003564 <HAL_DMA_IRQHandler+0x1c0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d03b      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a59      	ldr	r2, [pc, #356]	; (8003568 <HAL_DMA_IRQHandler+0x1c4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d036      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_DMA_IRQHandler+0x1c8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d031      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a56      	ldr	r2, [pc, #344]	; (8003570 <HAL_DMA_IRQHandler+0x1cc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d02c      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a54      	ldr	r2, [pc, #336]	; (8003574 <HAL_DMA_IRQHandler+0x1d0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d027      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a53      	ldr	r2, [pc, #332]	; (8003578 <HAL_DMA_IRQHandler+0x1d4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d022      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a51      	ldr	r2, [pc, #324]	; (800357c <HAL_DMA_IRQHandler+0x1d8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a50      	ldr	r2, [pc, #320]	; (8003580 <HAL_DMA_IRQHandler+0x1dc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_DMA_IRQHandler+0x1e0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_DMA_IRQHandler+0x1e4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_DMA_IRQHandler+0x1e8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a4a      	ldr	r2, [pc, #296]	; (8003590 <HAL_DMA_IRQHandler+0x1ec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_DMA_IRQHandler+0xd2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_DMA_IRQHandler+0x1f0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_DMA_IRQHandler+0xd6>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_DMA_IRQHandler+0xd8>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 842b 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2208      	movs	r2, #8
 800348c:	409a      	lsls	r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80a2 	beq.w	80035dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <HAL_DMA_IRQHandler+0x1b4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_DMA_IRQHandler+0x1b8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d045      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_DMA_IRQHandler+0x1bc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d040      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <HAL_DMA_IRQHandler+0x1c0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d03b      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_DMA_IRQHandler+0x1c4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d036      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_DMA_IRQHandler+0x1c8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d031      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_DMA_IRQHandler+0x1cc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a24      	ldr	r2, [pc, #144]	; (8003574 <HAL_DMA_IRQHandler+0x1d0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <HAL_DMA_IRQHandler+0x1d4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_DMA_IRQHandler+0x1d8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_DMA_IRQHandler+0x1dc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_DMA_IRQHandler+0x1e0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_DMA_IRQHandler+0x1e4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_DMA_IRQHandler+0x1e8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_DMA_IRQHandler+0x1ec>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_IRQHandler+0x194>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_DMA_IRQHandler+0x1f0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d12f      	bne.n	8003598 <HAL_DMA_IRQHandler+0x1f4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e02e      	b.n	80035ac <HAL_DMA_IRQHandler+0x208>
 800354e:	bf00      	nop
 8003550:	24000004 	.word	0x24000004
 8003554:	1b4e81b5 	.word	0x1b4e81b5
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2208      	movs	r2, #8
 80035ca:	409a      	lsls	r2, r3
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06e      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a69      	ldr	r2, [pc, #420]	; (800379c <HAL_DMA_IRQHandler+0x3f8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <HAL_DMA_IRQHandler+0x3fc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a66      	ldr	r2, [pc, #408]	; (80037a4 <HAL_DMA_IRQHandler+0x400>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <HAL_DMA_IRQHandler+0x404>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a63      	ldr	r2, [pc, #396]	; (80037ac <HAL_DMA_IRQHandler+0x408>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a61      	ldr	r2, [pc, #388]	; (80037b0 <HAL_DMA_IRQHandler+0x40c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a60      	ldr	r2, [pc, #384]	; (80037b4 <HAL_DMA_IRQHandler+0x410>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5e      	ldr	r2, [pc, #376]	; (80037b8 <HAL_DMA_IRQHandler+0x414>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5d      	ldr	r2, [pc, #372]	; (80037bc <HAL_DMA_IRQHandler+0x418>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_DMA_IRQHandler+0x41c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5a      	ldr	r2, [pc, #360]	; (80037c4 <HAL_DMA_IRQHandler+0x420>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_DMA_IRQHandler+0x424>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a57      	ldr	r2, [pc, #348]	; (80037cc <HAL_DMA_IRQHandler+0x428>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a55      	ldr	r2, [pc, #340]	; (80037d0 <HAL_DMA_IRQHandler+0x42c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a54      	ldr	r2, [pc, #336]	; (80037d4 <HAL_DMA_IRQHandler+0x430>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_IRQHandler+0x2ee>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_DMA_IRQHandler+0x434>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10a      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x304>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e003      	b.n	80036b0 <HAL_DMA_IRQHandler+0x30c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2201      	movs	r2, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0202 	orr.w	r2, r3, #2
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2204      	movs	r2, #4
 80036da:	409a      	lsls	r2, r3
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 808f 	beq.w	8003804 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2c      	ldr	r2, [pc, #176]	; (800379c <HAL_DMA_IRQHandler+0x3f8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d04a      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <HAL_DMA_IRQHandler+0x3fc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d045      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <HAL_DMA_IRQHandler+0x400>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d040      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <HAL_DMA_IRQHandler+0x404>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d03b      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <HAL_DMA_IRQHandler+0x408>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d036      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <HAL_DMA_IRQHandler+0x40c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d031      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_DMA_IRQHandler+0x410>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d02c      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_DMA_IRQHandler+0x414>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d027      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a20      	ldr	r2, [pc, #128]	; (80037bc <HAL_DMA_IRQHandler+0x418>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_DMA_IRQHandler+0x41c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01d      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_DMA_IRQHandler+0x420>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_DMA_IRQHandler+0x424>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <HAL_DMA_IRQHandler+0x428>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00e      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_DMA_IRQHandler+0x42c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_DMA_IRQHandler+0x430>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_DMA_IRQHandler+0x3e2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <HAL_DMA_IRQHandler+0x434>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12a      	bne.n	80037dc <HAL_DMA_IRQHandler+0x438>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e023      	b.n	80037e4 <HAL_DMA_IRQHandler+0x440>
 800379c:	40020010 	.word	0x40020010
 80037a0:	40020028 	.word	0x40020028
 80037a4:	40020040 	.word	0x40020040
 80037a8:	40020058 	.word	0x40020058
 80037ac:	40020070 	.word	0x40020070
 80037b0:	40020088 	.word	0x40020088
 80037b4:	400200a0 	.word	0x400200a0
 80037b8:	400200b8 	.word	0x400200b8
 80037bc:	40020410 	.word	0x40020410
 80037c0:	40020428 	.word	0x40020428
 80037c4:	40020440 	.word	0x40020440
 80037c8:	40020458 	.word	0x40020458
 80037cc:	40020470 	.word	0x40020470
 80037d0:	40020488 	.word	0x40020488
 80037d4:	400204a0 	.word	0x400204a0
 80037d8:	400204b8 	.word	0x400204b8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2210      	movs	r2, #16
 800380e:	409a      	lsls	r2, r3
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a6 	beq.w	8003966 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a85      	ldr	r2, [pc, #532]	; (8003a34 <HAL_DMA_IRQHandler+0x690>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d04a      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a83      	ldr	r2, [pc, #524]	; (8003a38 <HAL_DMA_IRQHandler+0x694>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d045      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a82      	ldr	r2, [pc, #520]	; (8003a3c <HAL_DMA_IRQHandler+0x698>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d040      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a80      	ldr	r2, [pc, #512]	; (8003a40 <HAL_DMA_IRQHandler+0x69c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d03b      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7f      	ldr	r2, [pc, #508]	; (8003a44 <HAL_DMA_IRQHandler+0x6a0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d036      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a7d      	ldr	r2, [pc, #500]	; (8003a48 <HAL_DMA_IRQHandler+0x6a4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d031      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7c      	ldr	r2, [pc, #496]	; (8003a4c <HAL_DMA_IRQHandler+0x6a8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d02c      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_DMA_IRQHandler+0x6ac>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d027      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a79      	ldr	r2, [pc, #484]	; (8003a54 <HAL_DMA_IRQHandler+0x6b0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a77      	ldr	r2, [pc, #476]	; (8003a58 <HAL_DMA_IRQHandler+0x6b4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01d      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a76      	ldr	r2, [pc, #472]	; (8003a5c <HAL_DMA_IRQHandler+0x6b8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a74      	ldr	r2, [pc, #464]	; (8003a60 <HAL_DMA_IRQHandler+0x6bc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a73      	ldr	r2, [pc, #460]	; (8003a64 <HAL_DMA_IRQHandler+0x6c0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <HAL_DMA_IRQHandler+0x6c4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a70      	ldr	r2, [pc, #448]	; (8003a6c <HAL_DMA_IRQHandler+0x6c8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_DMA_IRQHandler+0x516>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6e      	ldr	r2, [pc, #440]	; (8003a70 <HAL_DMA_IRQHandler+0x6cc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10a      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x52c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e009      	b.n	80038e4 <HAL_DMA_IRQHandler+0x540>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03e      	beq.n	8003966 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2210      	movs	r2, #16
 80038f2:	409a      	lsls	r2, r3
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d108      	bne.n	8003926 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d024      	beq.n	8003966 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
 8003924:	e01f      	b.n	8003966 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01b      	beq.n	8003966 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
 8003936:	e016      	b.n	8003966 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0208 	bic.w	r2, r2, #8
 8003954:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2220      	movs	r2, #32
 8003970:	409a      	lsls	r2, r3
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8110 	beq.w	8003b9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <HAL_DMA_IRQHandler+0x690>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <HAL_DMA_IRQHandler+0x694>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_DMA_IRQHandler+0x698>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <HAL_DMA_IRQHandler+0x69c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <HAL_DMA_IRQHandler+0x6a0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <HAL_DMA_IRQHandler+0x6a4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <HAL_DMA_IRQHandler+0x6a8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_DMA_IRQHandler+0x6ac>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_DMA_IRQHandler+0x6b0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <HAL_DMA_IRQHandler+0x6b4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <HAL_DMA_IRQHandler+0x6b8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <HAL_DMA_IRQHandler+0x6bc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_DMA_IRQHandler+0x6c0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_DMA_IRQHandler+0x6c4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_DMA_IRQHandler+0x6c8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x678>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <HAL_DMA_IRQHandler+0x6cc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d12b      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x6d0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e02a      	b.n	8003a88 <HAL_DMA_IRQHandler+0x6e4>
 8003a32:	bf00      	nop
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8087 	beq.w	8003b9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2220      	movs	r2, #32
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d139      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0216 	bic.w	r2, r2, #22
 8003ab8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_DMA_IRQHandler+0x736>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0208 	bic.w	r2, r2, #8
 8003ae8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	223f      	movs	r2, #63	; 0x3f
 8003af4:	409a      	lsls	r2, r3
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 834a 	beq.w	80041a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
          }
          return;
 8003b1c:	e344      	b.n	80041a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02c      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
 8003b4a:	e027      	b.n	8003b9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d023      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
 8003b5c:	e01e      	b.n	8003b9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0210 	bic.w	r2, r2, #16
 8003b7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8306 	beq.w	80041b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8088 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a7a      	ldr	r2, [pc, #488]	; (8003dac <HAL_DMA_IRQHandler+0xa08>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a79      	ldr	r2, [pc, #484]	; (8003db0 <HAL_DMA_IRQHandler+0xa0c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a77      	ldr	r2, [pc, #476]	; (8003db4 <HAL_DMA_IRQHandler+0xa10>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a76      	ldr	r2, [pc, #472]	; (8003db8 <HAL_DMA_IRQHandler+0xa14>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a74      	ldr	r2, [pc, #464]	; (8003dbc <HAL_DMA_IRQHandler+0xa18>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a73      	ldr	r2, [pc, #460]	; (8003dc0 <HAL_DMA_IRQHandler+0xa1c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a71      	ldr	r2, [pc, #452]	; (8003dc4 <HAL_DMA_IRQHandler+0xa20>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a70      	ldr	r2, [pc, #448]	; (8003dc8 <HAL_DMA_IRQHandler+0xa24>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6e      	ldr	r2, [pc, #440]	; (8003dcc <HAL_DMA_IRQHandler+0xa28>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6d      	ldr	r2, [pc, #436]	; (8003dd0 <HAL_DMA_IRQHandler+0xa2c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6b      	ldr	r2, [pc, #428]	; (8003dd4 <HAL_DMA_IRQHandler+0xa30>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_DMA_IRQHandler+0xa34>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a68      	ldr	r2, [pc, #416]	; (8003ddc <HAL_DMA_IRQHandler+0xa38>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a67      	ldr	r2, [pc, #412]	; (8003de0 <HAL_DMA_IRQHandler+0xa3c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a65      	ldr	r2, [pc, #404]	; (8003de4 <HAL_DMA_IRQHandler+0xa40>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x8b8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a64      	ldr	r2, [pc, #400]	; (8003de8 <HAL_DMA_IRQHandler+0xa44>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x8ca>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e007      	b.n	8003c7e <HAL_DMA_IRQHandler+0x8da>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d307      	bcc.n	8003c9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f2      	bne.n	8003c7e <HAL_DMA_IRQHandler+0x8da>
 8003c98:	e000      	b.n	8003c9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c9a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003cb2:	e003      	b.n	8003cbc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8272 	beq.w	80041b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e26c      	b.n	80041b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a43      	ldr	r2, [pc, #268]	; (8003dec <HAL_DMA_IRQHandler+0xa48>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a42      	ldr	r2, [pc, #264]	; (8003df0 <HAL_DMA_IRQHandler+0xa4c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01d      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <HAL_DMA_IRQHandler+0xa50>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a3f      	ldr	r2, [pc, #252]	; (8003df8 <HAL_DMA_IRQHandler+0xa54>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3d      	ldr	r2, [pc, #244]	; (8003dfc <HAL_DMA_IRQHandler+0xa58>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <HAL_DMA_IRQHandler+0xa5c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3a      	ldr	r2, [pc, #232]	; (8003e04 <HAL_DMA_IRQHandler+0xa60>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x984>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <HAL_DMA_IRQHandler+0xa64>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_DMA_IRQHandler+0x988>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_DMA_IRQHandler+0x98a>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 823f 	beq.w	80041b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2204      	movs	r2, #4
 8003d46:	409a      	lsls	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80cd 	beq.w	8003eec <HAL_DMA_IRQHandler+0xb48>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80c7 	beq.w	8003eec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2204      	movs	r2, #4
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d049      	beq.n	8003e0c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8210 	beq.w	80041ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d94:	e20a      	b.n	80041ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8206 	beq.w	80041ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da8:	e200      	b.n	80041ac <HAL_DMA_IRQHandler+0xe08>
 8003daa:	bf00      	nop
 8003dac:	40020010 	.word	0x40020010
 8003db0:	40020028 	.word	0x40020028
 8003db4:	40020040 	.word	0x40020040
 8003db8:	40020058 	.word	0x40020058
 8003dbc:	40020070 	.word	0x40020070
 8003dc0:	40020088 	.word	0x40020088
 8003dc4:	400200a0 	.word	0x400200a0
 8003dc8:	400200b8 	.word	0x400200b8
 8003dcc:	40020410 	.word	0x40020410
 8003dd0:	40020428 	.word	0x40020428
 8003dd4:	40020440 	.word	0x40020440
 8003dd8:	40020458 	.word	0x40020458
 8003ddc:	40020470 	.word	0x40020470
 8003de0:	40020488 	.word	0x40020488
 8003de4:	400204a0 	.word	0x400204a0
 8003de8:	400204b8 	.word	0x400204b8
 8003dec:	58025408 	.word	0x58025408
 8003df0:	5802541c 	.word	0x5802541c
 8003df4:	58025430 	.word	0x58025430
 8003df8:	58025444 	.word	0x58025444
 8003dfc:	58025458 	.word	0x58025458
 8003e00:	5802546c 	.word	0x5802546c
 8003e04:	58025480 	.word	0x58025480
 8003e08:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d160      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a7f      	ldr	r2, [pc, #508]	; (8004018 <HAL_DMA_IRQHandler+0xc74>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d04a      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7d      	ldr	r2, [pc, #500]	; (800401c <HAL_DMA_IRQHandler+0xc78>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d045      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7c      	ldr	r2, [pc, #496]	; (8004020 <HAL_DMA_IRQHandler+0xc7c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d040      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a7a      	ldr	r2, [pc, #488]	; (8004024 <HAL_DMA_IRQHandler+0xc80>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a79      	ldr	r2, [pc, #484]	; (8004028 <HAL_DMA_IRQHandler+0xc84>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d036      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a77      	ldr	r2, [pc, #476]	; (800402c <HAL_DMA_IRQHandler+0xc88>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d031      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a76      	ldr	r2, [pc, #472]	; (8004030 <HAL_DMA_IRQHandler+0xc8c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a74      	ldr	r2, [pc, #464]	; (8004034 <HAL_DMA_IRQHandler+0xc90>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a73      	ldr	r2, [pc, #460]	; (8004038 <HAL_DMA_IRQHandler+0xc94>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a71      	ldr	r2, [pc, #452]	; (800403c <HAL_DMA_IRQHandler+0xc98>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01d      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a70      	ldr	r2, [pc, #448]	; (8004040 <HAL_DMA_IRQHandler+0xc9c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a6e      	ldr	r2, [pc, #440]	; (8004044 <HAL_DMA_IRQHandler+0xca0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6d      	ldr	r2, [pc, #436]	; (8004048 <HAL_DMA_IRQHandler+0xca4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6b      	ldr	r2, [pc, #428]	; (800404c <HAL_DMA_IRQHandler+0xca8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6a      	ldr	r2, [pc, #424]	; (8004050 <HAL_DMA_IRQHandler+0xcac>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0xb12>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a68      	ldr	r2, [pc, #416]	; (8004054 <HAL_DMA_IRQHandler+0xcb0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0xb24>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0208 	bic.w	r2, r2, #8
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e007      	b.n	8003ed8 <HAL_DMA_IRQHandler+0xb34>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8165 	beq.w	80041ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eea:	e15f      	b.n	80041ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80c5 	beq.w	800408c <HAL_DMA_IRQHandler+0xce8>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80bf 	beq.w	800408c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2202      	movs	r2, #2
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 813a 	beq.w	80041b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f44:	e134      	b.n	80041b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8130 	beq.w	80041b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f58:	e12a      	b.n	80041b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8089 	bne.w	8004078 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_DMA_IRQHandler+0xc74>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d04a      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <HAL_DMA_IRQHandler+0xc78>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d045      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a28      	ldr	r2, [pc, #160]	; (8004020 <HAL_DMA_IRQHandler+0xc7c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d040      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <HAL_DMA_IRQHandler+0xc80>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d03b      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a25      	ldr	r2, [pc, #148]	; (8004028 <HAL_DMA_IRQHandler+0xc84>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d036      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <HAL_DMA_IRQHandler+0xc88>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d031      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_DMA_IRQHandler+0xc8c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d02c      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a20      	ldr	r2, [pc, #128]	; (8004034 <HAL_DMA_IRQHandler+0xc90>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d027      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_DMA_IRQHandler+0xc94>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_DMA_IRQHandler+0xc98>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_DMA_IRQHandler+0xc9c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_DMA_IRQHandler+0xca0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_DMA_IRQHandler+0xca4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_DMA_IRQHandler+0xca8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_DMA_IRQHandler+0xcac>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_DMA_IRQHandler+0xc62>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <HAL_DMA_IRQHandler+0xcb0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d128      	bne.n	8004058 <HAL_DMA_IRQHandler+0xcb4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0214 	bic.w	r2, r2, #20
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e027      	b.n	8004068 <HAL_DMA_IRQHandler+0xcc4>
 8004018:	40020010 	.word	0x40020010
 800401c:	40020028 	.word	0x40020028
 8004020:	40020040 	.word	0x40020040
 8004024:	40020058 	.word	0x40020058
 8004028:	40020070 	.word	0x40020070
 800402c:	40020088 	.word	0x40020088
 8004030:	400200a0 	.word	0x400200a0
 8004034:	400200b8 	.word	0x400200b8
 8004038:	40020410 	.word	0x40020410
 800403c:	40020428 	.word	0x40020428
 8004040:	40020440 	.word	0x40020440
 8004044:	40020458 	.word	0x40020458
 8004048:	40020470 	.word	0x40020470
 800404c:	40020488 	.word	0x40020488
 8004050:	400204a0 	.word	0x400204a0
 8004054:	400204b8 	.word	0x400204b8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 020a 	bic.w	r2, r2, #10
 8004066:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8097 	beq.w	80041b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800408a:	e091      	b.n	80041b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2208      	movs	r2, #8
 8004096:	409a      	lsls	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8088 	beq.w	80041b2 <HAL_DMA_IRQHandler+0xe0e>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8082 	beq.w	80041b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a41      	ldr	r2, [pc, #260]	; (80041b8 <HAL_DMA_IRQHandler+0xe14>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a3f      	ldr	r2, [pc, #252]	; (80041bc <HAL_DMA_IRQHandler+0xe18>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3e      	ldr	r2, [pc, #248]	; (80041c0 <HAL_DMA_IRQHandler+0xe1c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3c      	ldr	r2, [pc, #240]	; (80041c4 <HAL_DMA_IRQHandler+0xe20>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3b      	ldr	r2, [pc, #236]	; (80041c8 <HAL_DMA_IRQHandler+0xe24>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a39      	ldr	r2, [pc, #228]	; (80041cc <HAL_DMA_IRQHandler+0xe28>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a38      	ldr	r2, [pc, #224]	; (80041d0 <HAL_DMA_IRQHandler+0xe2c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a36      	ldr	r2, [pc, #216]	; (80041d4 <HAL_DMA_IRQHandler+0xe30>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a35      	ldr	r2, [pc, #212]	; (80041d8 <HAL_DMA_IRQHandler+0xe34>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a33      	ldr	r2, [pc, #204]	; (80041dc <HAL_DMA_IRQHandler+0xe38>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <HAL_DMA_IRQHandler+0xe3c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <HAL_DMA_IRQHandler+0xe40>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <HAL_DMA_IRQHandler+0xe44>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <HAL_DMA_IRQHandler+0xe48>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <HAL_DMA_IRQHandler+0xe4c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_IRQHandler+0xdaa>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <HAL_DMA_IRQHandler+0xe50>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d108      	bne.n	8004160 <HAL_DMA_IRQHandler+0xdbc>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 021c 	bic.w	r2, r2, #28
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e007      	b.n	8004170 <HAL_DMA_IRQHandler+0xdcc>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020e 	bic.w	r2, r2, #14
 800416e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
 80041a6:	e004      	b.n	80041b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40020010 	.word	0x40020010
 80041bc:	40020028 	.word	0x40020028
 80041c0:	40020040 	.word	0x40020040
 80041c4:	40020058 	.word	0x40020058
 80041c8:	40020070 	.word	0x40020070
 80041cc:	40020088 	.word	0x40020088
 80041d0:	400200a0 	.word	0x400200a0
 80041d4:	400200b8 	.word	0x400200b8
 80041d8:	40020410 	.word	0x40020410
 80041dc:	40020428 	.word	0x40020428
 80041e0:	40020440 	.word	0x40020440
 80041e4:	40020458 	.word	0x40020458
 80041e8:	40020470 	.word	0x40020470
 80041ec:	40020488 	.word	0x40020488
 80041f0:	400204a0 	.word	0x400204a0
 80041f4:	400204b8 	.word	0x400204b8

080041f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a42      	ldr	r2, [pc, #264]	; (8004310 <DMA_CalcBaseAndBitshift+0x118>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a41      	ldr	r2, [pc, #260]	; (8004314 <DMA_CalcBaseAndBitshift+0x11c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <DMA_CalcBaseAndBitshift+0x120>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3e      	ldr	r2, [pc, #248]	; (800431c <DMA_CalcBaseAndBitshift+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <DMA_CalcBaseAndBitshift+0x128>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <DMA_CalcBaseAndBitshift+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a39      	ldr	r2, [pc, #228]	; (8004328 <DMA_CalcBaseAndBitshift+0x130>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a38      	ldr	r2, [pc, #224]	; (800432c <DMA_CalcBaseAndBitshift+0x134>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a36      	ldr	r2, [pc, #216]	; (8004330 <DMA_CalcBaseAndBitshift+0x138>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a35      	ldr	r2, [pc, #212]	; (8004334 <DMA_CalcBaseAndBitshift+0x13c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a33      	ldr	r2, [pc, #204]	; (8004338 <DMA_CalcBaseAndBitshift+0x140>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a32      	ldr	r2, [pc, #200]	; (800433c <DMA_CalcBaseAndBitshift+0x144>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	; (8004340 <DMA_CalcBaseAndBitshift+0x148>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <DMA_CalcBaseAndBitshift+0x14c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2d      	ldr	r2, [pc, #180]	; (8004348 <DMA_CalcBaseAndBitshift+0x150>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	; (800434c <DMA_CalcBaseAndBitshift+0x154>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <DMA_CalcBaseAndBitshift+0xac>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <DMA_CalcBaseAndBitshift+0xae>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d024      	beq.n	80042f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3b10      	subs	r3, #16
 80042b2:	4a27      	ldr	r2, [pc, #156]	; (8004350 <DMA_CalcBaseAndBitshift+0x158>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	4a24      	ldr	r2, [pc, #144]	; (8004354 <DMA_CalcBaseAndBitshift+0x15c>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d908      	bls.n	80042e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <DMA_CalcBaseAndBitshift+0x160>)
 80042da:	4013      	ands	r3, r2
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	659a      	str	r2, [r3, #88]	; 0x58
 80042e2:	e00d      	b.n	8004300 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <DMA_CalcBaseAndBitshift+0x160>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
 80042f2:	e005      	b.n	8004300 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
 8004350:	aaaaaaab 	.word	0xaaaaaaab
 8004354:	0800d330 	.word	0x0800d330
 8004358:	fffffc00 	.word	0xfffffc00

0800435c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d120      	bne.n	80043b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b03      	cmp	r3, #3
 8004376:	d858      	bhi.n	800442a <DMA_CheckFifoParam+0xce>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <DMA_CheckFifoParam+0x24>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a3 	.word	0x080043a3
 8004388:	08004391 	.word	0x08004391
 800438c:	0800442b 	.word	0x0800442b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d048      	beq.n	800442e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a0:	e045      	b.n	800442e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043aa:	d142      	bne.n	8004432 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b0:	e03f      	b.n	8004432 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ba:	d123      	bne.n	8004404 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d838      	bhi.n	8004436 <DMA_CheckFifoParam+0xda>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <DMA_CheckFifoParam+0x70>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043e3 	.word	0x080043e3
 80043d4:	080043dd 	.word	0x080043dd
 80043d8:	080043f5 	.word	0x080043f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
        break;
 80043e0:	e030      	b.n	8004444 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d025      	beq.n	800443a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043f2:	e022      	b.n	800443a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043fc:	d11f      	bne.n	800443e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004402:	e01c      	b.n	800443e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	2b02      	cmp	r3, #2
 800440a:	d902      	bls.n	8004412 <DMA_CheckFifoParam+0xb6>
 800440c:	2b03      	cmp	r3, #3
 800440e:	d003      	beq.n	8004418 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004410:	e018      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
        break;
 8004416:	e015      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
    break;
 8004428:	e00b      	b.n	8004442 <DMA_CheckFifoParam+0xe6>
        break;
 800442a:	bf00      	nop
 800442c:	e00a      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 800442e:	bf00      	nop
 8004430:	e008      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 8004432:	bf00      	nop
 8004434:	e006      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 8004436:	bf00      	nop
 8004438:	e004      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 800443a:	bf00      	nop
 800443c:	e002      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 800443e:	bf00      	nop
 8004440:	e000      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
    break;
 8004442:	bf00      	nop
    }
  }

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a38      	ldr	r2, [pc, #224]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a36      	ldr	r2, [pc, #216]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01d      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a35      	ldr	r2, [pc, #212]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a33      	ldr	r2, [pc, #204]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a32      	ldr	r2, [pc, #200]	; (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a30      	ldr	r2, [pc, #192]	; (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01a      	beq.n	80044f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3b08      	subs	r3, #8
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4b26      	ldr	r3, [pc, #152]	; (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a24      	ldr	r2, [pc, #144]	; (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044f0:	e024      	b.n	800453c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	3b10      	subs	r3, #16
 80044fa:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d806      	bhi.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a1b      	ldr	r2, [pc, #108]	; (800457c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d902      	bls.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3308      	adds	r3, #8
 8004518:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800452c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2201      	movs	r2, #1
 8004536:	409a      	lsls	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	58025408 	.word	0x58025408
 800454c:	5802541c 	.word	0x5802541c
 8004550:	58025430 	.word	0x58025430
 8004554:	58025444 	.word	0x58025444
 8004558:	58025458 	.word	0x58025458
 800455c:	5802546c 	.word	0x5802546c
 8004560:	58025480 	.word	0x58025480
 8004564:	58025494 	.word	0x58025494
 8004568:	cccccccd 	.word	0xcccccccd
 800456c:	16009600 	.word	0x16009600
 8004570:	58025880 	.word	0x58025880
 8004574:	aaaaaaab 	.word	0xaaaaaaab
 8004578:	400204b8 	.word	0x400204b8
 800457c:	4002040f 	.word	0x4002040f
 8004580:	10008200 	.word	0x10008200
 8004584:	40020880 	.word	0x40020880

08004588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d04a      	beq.n	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d847      	bhi.n	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d022      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a24      	ldr	r2, [pc, #144]	; (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d01d      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a22      	ldr	r2, [pc, #136]	; (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d018      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a21      	ldr	r2, [pc, #132]	; (800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00e      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d009      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1b      	ldr	r2, [pc, #108]	; (800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d101      	bne.n	80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045f8:	2300      	movs	r3, #0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4b17      	ldr	r3, [pc, #92]	; (8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004610:	671a      	str	r2, [r3, #112]	; 0x70
 8004612:	e009      	b.n	8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004626:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b01      	subs	r3, #1
 800462c:	2201      	movs	r2, #1
 800462e:	409a      	lsls	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	58025444 	.word	0x58025444
 8004650:	58025458 	.word	0x58025458
 8004654:	5802546c 	.word	0x5802546c
 8004658:	58025480 	.word	0x58025480
 800465c:	58025494 	.word	0x58025494
 8004660:	1600963f 	.word	0x1600963f
 8004664:	58025940 	.word	0x58025940
 8004668:	1000823f 	.word	0x1000823f
 800466c:	40020940 	.word	0x40020940

08004670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800467e:	4b86      	ldr	r3, [pc, #536]	; (8004898 <HAL_GPIO_Init+0x228>)
 8004680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004682:	e18c      	b.n	800499e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2101      	movs	r1, #1
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 817e 	beq.w	8004998 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d005      	beq.n	80046b4 <HAL_GPIO_Init+0x44>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d130      	bne.n	8004716 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2203      	movs	r2, #3
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ea:	2201      	movs	r2, #1
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0201 	and.w	r2, r3, #1
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b03      	cmp	r3, #3
 8004720:	d017      	beq.n	8004752 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d123      	bne.n	80047a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	08da      	lsrs	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3208      	adds	r2, #8
 8004766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	220f      	movs	r2, #15
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	08da      	lsrs	r2, r3, #3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3208      	adds	r2, #8
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	2203      	movs	r2, #3
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0203 	and.w	r2, r3, #3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80d8 	beq.w	8004998 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e8:	4b2c      	ldr	r3, [pc, #176]	; (800489c <HAL_GPIO_Init+0x22c>)
 80047ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ee:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_GPIO_Init+0x22c>)
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_GPIO_Init+0x22c>)
 80047fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004806:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_GPIO_Init+0x230>)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	3302      	adds	r3, #2
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	220f      	movs	r2, #15
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_GPIO_Init+0x234>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d04a      	beq.n	80048c8 <HAL_GPIO_Init+0x258>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <HAL_GPIO_Init+0x238>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02b      	beq.n	8004892 <HAL_GPIO_Init+0x222>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_GPIO_Init+0x23c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d025      	beq.n	800488e <HAL_GPIO_Init+0x21e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_GPIO_Init+0x240>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01f      	beq.n	800488a <HAL_GPIO_Init+0x21a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_GPIO_Init+0x244>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d019      	beq.n	8004886 <HAL_GPIO_Init+0x216>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_GPIO_Init+0x248>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_GPIO_Init+0x212>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_GPIO_Init+0x24c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00d      	beq.n	800487e <HAL_GPIO_Init+0x20e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_GPIO_Init+0x250>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <HAL_GPIO_Init+0x20a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <HAL_GPIO_Init+0x254>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_GPIO_Init+0x206>
 8004872:	2309      	movs	r3, #9
 8004874:	e029      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 8004876:	230a      	movs	r3, #10
 8004878:	e027      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 800487a:	2307      	movs	r3, #7
 800487c:	e025      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 800487e:	2306      	movs	r3, #6
 8004880:	e023      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 8004882:	2305      	movs	r3, #5
 8004884:	e021      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 8004886:	2304      	movs	r3, #4
 8004888:	e01f      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 800488a:	2303      	movs	r3, #3
 800488c:	e01d      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 800488e:	2302      	movs	r3, #2
 8004890:	e01b      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 8004892:	2301      	movs	r3, #1
 8004894:	e019      	b.n	80048ca <HAL_GPIO_Init+0x25a>
 8004896:	bf00      	nop
 8004898:	58000080 	.word	0x58000080
 800489c:	58024400 	.word	0x58024400
 80048a0:	58000400 	.word	0x58000400
 80048a4:	58020000 	.word	0x58020000
 80048a8:	58020400 	.word	0x58020400
 80048ac:	58020800 	.word	0x58020800
 80048b0:	58020c00 	.word	0x58020c00
 80048b4:	58021000 	.word	0x58021000
 80048b8:	58021400 	.word	0x58021400
 80048bc:	58021800 	.word	0x58021800
 80048c0:	58021c00 	.word	0x58021c00
 80048c4:	58022400 	.word	0x58022400
 80048c8:	2300      	movs	r3, #0
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	f002 0203 	and.w	r2, r2, #3
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	4093      	lsls	r3, r2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048da:	4938      	ldr	r1, [pc, #224]	; (80049bc <HAL_GPIO_Init+0x34c>)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800493c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f ae6b 	bne.w	8004684 <HAL_GPIO_Init+0x14>
  }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	58000400 	.word	0x58000400

080049c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
 80049cc:	4613      	mov	r3, r2
 80049ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049d0:	787b      	ldrb	r3, [r7, #1]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049dc:	e003      	b.n	80049e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049de:	887b      	ldrh	r3, [r7, #2]
 80049e0:	041a      	lsls	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	619a      	str	r2, [r3, #24]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fc f8a7 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d00a      	beq.n	8004a52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a3c:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d001      	beq.n	8004a4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e01f      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e01d      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 0207 	bic.w	r2, r3, #7
 8004a5a:	490f      	ldr	r1, [pc, #60]	; (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a62:	f7fd faa1 	bl	8001fa8 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a68:	e009      	b.n	8004a7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a6a:	f7fd fa9d 	bl	8001fa8 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a78:	d901      	bls.n	8004a7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e007      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	58024800 	.word	0x58024800

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	; 0x30
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e39d      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8087 	beq.w	8004bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004abc:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ac6:	4b86      	ldr	r3, [pc, #536]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d007      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x46>
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	2b18      	cmp	r3, #24
 8004ad6:	d110      	bne.n	8004afa <HAL_RCC_OscConfig+0x5e>
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae2:	4b7f      	ldr	r3, [pc, #508]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d06c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x12c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d168      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e377      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x76>
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	e02e      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b71      	ldr	r3, [pc, #452]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a70      	ldr	r2, [pc, #448]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b6e      	ldr	r3, [pc, #440]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6d      	ldr	r2, [pc, #436]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e01d      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCC_OscConfig+0xbc>
 8004b3e:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a67      	ldr	r2, [pc, #412]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b65      	ldr	r3, [pc, #404]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a64      	ldr	r2, [pc, #400]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e00b      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a60      	ldr	r2, [pc, #384]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fa16 	bl	8001fa8 <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd fa12 	bl	8001fa8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e32b      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0xe4>
 8004b9e:	e014      	b.n	8004bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd fa02 	bl	8001fa8 <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd f9fe 	bl	8001fa8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e317      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bba:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x10c>
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 808c 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd8:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be2:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_RCC_OscConfig+0x162>
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	2b18      	cmp	r3, #24
 8004bf2:	d137      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1c8>
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d132      	bne.n	8004c64 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfe:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e2e9      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c16:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 0219 	bic.w	r2, r3, #25
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	492f      	ldr	r1, [pc, #188]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c28:	f7fd f9be 	bl	8001fa8 <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c30:	f7fd f9ba 	bl	8001fa8 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e2d3      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c42:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	061b      	lsls	r3, r3, #24
 8004c5c:	4920      	ldr	r1, [pc, #128]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c62:	e045      	b.n	8004cf0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d026      	beq.n	8004cba <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 0219 	bic.w	r2, r3, #25
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4919      	ldr	r1, [pc, #100]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fd f993 	bl	8001fa8 <HAL_GetTick>
 8004c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fd f98f 	bl	8001fa8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e2a8      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
 8004cb8:	e01a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fd f96f 	bl	8001fa8 <HAL_GetTick>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fd f96b 	bl	8001fa8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d903      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e284      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
 8004ce0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ce4:	4b96      	ldr	r3, [pc, #600]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ee      	bne.n	8004cce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d06a      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfc:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d04:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d06:	4b8e      	ldr	r3, [pc, #568]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d007      	beq.n	8004d22 <HAL_RCC_OscConfig+0x286>
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b18      	cmp	r3, #24
 8004d16:	d11b      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2b4>
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d22:	4b87      	ldr	r3, [pc, #540]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x29e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e257      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d3a:	4b81      	ldr	r3, [pc, #516]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	497d      	ldr	r1, [pc, #500]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d4e:	e040      	b.n	8004dd2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d023      	beq.n	8004da0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d58:	4b79      	ldr	r3, [pc, #484]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a78      	ldr	r2, [pc, #480]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd f920 	bl	8001fa8 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d6c:	f7fd f91c 	bl	8001fa8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e235      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d7e:	4b70      	ldr	r3, [pc, #448]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d8a:	4b6d      	ldr	r3, [pc, #436]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	4969      	ldr	r1, [pc, #420]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60cb      	str	r3, [r1, #12]
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004da0:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a66      	ldr	r2, [pc, #408]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd f8fc 	bl	8001fa8 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004db4:	f7fd f8f8 	bl	8001fa8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e211      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dc6:	4b5e      	ldr	r3, [pc, #376]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d036      	beq.n	8004e4c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d019      	beq.n	8004e1a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de6:	4b56      	ldr	r3, [pc, #344]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dea:	4a55      	ldr	r2, [pc, #340]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fd f8d9 	bl	8001fa8 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dfa:	f7fd f8d5 	bl	8001fa8 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1ee      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e0c:	4b4c      	ldr	r3, [pc, #304]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x35e>
 8004e18:	e018      	b.n	8004e4c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1a:	4b49      	ldr	r3, [pc, #292]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	4a48      	ldr	r2, [pc, #288]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e26:	f7fd f8bf 	bl	8001fa8 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2e:	f7fd f8bb 	bl	8001fa8 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e1d4      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f0      	bne.n	8004e2e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d036      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d019      	beq.n	8004e94 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e60:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a36      	ldr	r2, [pc, #216]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e6c:	f7fd f89c 	bl	8001fa8 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e74:	f7fd f898 	bl	8001fa8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e1b1      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e86:	4b2e      	ldr	r3, [pc, #184]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x3d8>
 8004e92:	e018      	b.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e94:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ea0:	f7fd f882 	bl	8001fa8 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ea8:	f7fd f87e 	bl	8001fa8 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e197      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eba:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8086 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <HAL_RCC_OscConfig+0x4a8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <HAL_RCC_OscConfig+0x4a8>)
 8004eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ee0:	f7fd f862 	bl	8001fa8 <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ee8:	f7fd f85e 	bl	8001fa8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e177      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_RCC_OscConfig+0x4a8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x480>
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	e032      	b.n	8004f82 <HAL_RCC_OscConfig+0x4e6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d111      	bne.n	8004f48 <HAL_RCC_OscConfig+0x4ac>
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4a05      	ldr	r2, [pc, #20]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a02      	ldr	r2, [pc, #8]	; (8004f40 <HAL_RCC_OscConfig+0x4a4>)
 8004f36:	f023 0304 	bic.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	e021      	b.n	8004f82 <HAL_RCC_OscConfig+0x4e6>
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
 8004f44:	58024800 	.word	0x58024800
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d10c      	bne.n	8004f6a <HAL_RCC_OscConfig+0x4ce>
 8004f50:	4b83      	ldr	r3, [pc, #524]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	4a82      	ldr	r2, [pc, #520]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5c:	4b80      	ldr	r3, [pc, #512]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a7f      	ldr	r2, [pc, #508]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
 8004f68:	e00b      	b.n	8004f82 <HAL_RCC_OscConfig+0x4e6>
 8004f6a:	4b7d      	ldr	r3, [pc, #500]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a7c      	ldr	r2, [pc, #496]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	4b7a      	ldr	r3, [pc, #488]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	4a79      	ldr	r2, [pc, #484]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004f7c:	f023 0304 	bic.w	r3, r3, #4
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d015      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8a:	f7fd f80d 	bl	8001fa8 <HAL_GetTick>
 8004f8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f92:	f7fd f809 	bl	8001fa8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e120      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fa8:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ee      	beq.n	8004f92 <HAL_RCC_OscConfig+0x4f6>
 8004fb4:	e014      	b.n	8004fe0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fc fff7 	bl	8001fa8 <HAL_GetTick>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fc fff3 	bl	8001fa8 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e10a      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fd4:	4b62      	ldr	r3, [pc, #392]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ee      	bne.n	8004fbe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80ff 	beq.w	80051e8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fea:	4b5d      	ldr	r3, [pc, #372]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ff2:	2b18      	cmp	r3, #24
 8004ff4:	f000 80ba 	beq.w	800516c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f040 8095 	bne.w	800512c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b57      	ldr	r3, [pc, #348]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a56      	ldr	r2, [pc, #344]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fc ffcb 	bl	8001fa8 <HAL_GetTick>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005016:	f7fc ffc7 	bl	8001fa8 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0e0      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005028:	4b4d      	ldr	r3, [pc, #308]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005034:	4b4a      	ldr	r3, [pc, #296]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005038:	4b4a      	ldr	r3, [pc, #296]	; (8005164 <HAL_RCC_OscConfig+0x6c8>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005044:	0112      	lsls	r2, r2, #4
 8005046:	430a      	orrs	r2, r1
 8005048:	4945      	ldr	r1, [pc, #276]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	628b      	str	r3, [r1, #40]	; 0x28
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	3b01      	subs	r3, #1
 8005054:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	3b01      	subs	r3, #1
 800505e:	025b      	lsls	r3, r3, #9
 8005060:	b29b      	uxth	r3, r3
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	3b01      	subs	r3, #1
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	3b01      	subs	r3, #1
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800507e:	4938      	ldr	r1, [pc, #224]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005080:	4313      	orrs	r3, r2
 8005082:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a35      	ldr	r2, [pc, #212]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005090:	4b33      	ldr	r3, [pc, #204]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005094:	4b34      	ldr	r3, [pc, #208]	; (8005168 <HAL_RCC_OscConfig+0x6cc>)
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800509c:	00d2      	lsls	r2, r2, #3
 800509e:	4930      	ldr	r1, [pc, #192]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050a4:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f023 020c 	bic.w	r2, r3, #12
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	492b      	ldr	r1, [pc, #172]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050b6:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	f023 0202 	bic.w	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	4927      	ldr	r1, [pc, #156]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050c8:	4b25      	ldr	r3, [pc, #148]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d4:	4b22      	ldr	r3, [pc, #136]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 80050fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc ff50 	bl	8001fa8 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7fc ff4c 	bl	8001fa8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e065      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x670>
 800512a:	e05d      	b.n	80051e8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fc ff36 	bl	8001fa8 <HAL_GetTick>
 800513c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005140:	f7fc ff32 	bl	8001fa8 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e04b      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCC_OscConfig+0x6c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x6a4>
 800515e:	e043      	b.n	80051e8 <HAL_RCC_OscConfig+0x74c>
 8005160:	58024400 	.word	0x58024400
 8005164:	fffffc0c 	.word	0xfffffc0c
 8005168:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_RCC_OscConfig+0x758>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_RCC_OscConfig+0x758>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b01      	cmp	r3, #1
 800517e:	d031      	beq.n	80051e4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0203 	and.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518a:	429a      	cmp	r2, r3
 800518c:	d12a      	bne.n	80051e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d122      	bne.n	80051e4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d11a      	bne.n	80051e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0a5b      	lsrs	r3, r3, #9
 80051b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d111      	bne.n	80051e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d108      	bne.n	80051e4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	0e1b      	lsrs	r3, r3, #24
 80051d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3730      	adds	r7, #48	; 0x30
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400

080051f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e19c      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b8a      	ldr	r3, [pc, #552]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d910      	bls.n	800523c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b87      	ldr	r3, [pc, #540]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 020f 	bic.w	r2, r3, #15
 8005222:	4985      	ldr	r1, [pc, #532]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b83      	ldr	r3, [pc, #524]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e184      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	4b7b      	ldr	r3, [pc, #492]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005258:	4b78      	ldr	r3, [pc, #480]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4975      	ldr	r1, [pc, #468]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005266:	4313      	orrs	r3, r2
 8005268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	4b70      	ldr	r3, [pc, #448]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005282:	429a      	cmp	r2, r3
 8005284:	d908      	bls.n	8005298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005286:	4b6d      	ldr	r3, [pc, #436]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	496a      	ldr	r1, [pc, #424]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005294:	4313      	orrs	r3, r2
 8005296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d010      	beq.n	80052c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b64      	ldr	r3, [pc, #400]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d908      	bls.n	80052c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	495e      	ldr	r1, [pc, #376]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	4b59      	ldr	r3, [pc, #356]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052de:	429a      	cmp	r2, r3
 80052e0:	d908      	bls.n	80052f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052e2:	4b56      	ldr	r3, [pc, #344]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	4953      	ldr	r1, [pc, #332]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d010      	beq.n	8005322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	4b4d      	ldr	r3, [pc, #308]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	429a      	cmp	r2, r3
 800530e:	d908      	bls.n	8005322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005310:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f023 020f 	bic.w	r2, r3, #15
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4947      	ldr	r1, [pc, #284]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800531e:	4313      	orrs	r3, r2
 8005320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d055      	beq.n	80053da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4940      	ldr	r1, [pc, #256]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800533c:	4313      	orrs	r3, r2
 800533e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d107      	bne.n	8005358 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005348:	4b3c      	ldr	r3, [pc, #240]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d121      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0f6      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d107      	bne.n	8005370 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0ea      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0de      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005388:	4b2c      	ldr	r3, [pc, #176]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0d6      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f023 0207 	bic.w	r2, r3, #7
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4925      	ldr	r1, [pc, #148]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fc fdfd 	bl	8001fa8 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b2:	f7fc fdf9 	bl	8001fa8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0be      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d1eb      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d208      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f023 020f 	bic.w	r2, r3, #15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	490e      	ldr	r1, [pc, #56]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005404:	4313      	orrs	r3, r2
 8005406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d214      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 020f 	bic.w	r2, r3, #15
 800541e:	4906      	ldr	r1, [pc, #24]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d005      	beq.n	8005440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e086      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
 8005438:	52002000 	.word	0x52002000
 800543c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005458:	429a      	cmp	r2, r3
 800545a:	d208      	bcs.n	800546e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800545c:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4939      	ldr	r1, [pc, #228]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 800546a:	4313      	orrs	r3, r2
 800546c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	4b34      	ldr	r3, [pc, #208]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005486:	429a      	cmp	r2, r3
 8005488:	d208      	bcs.n	800549c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	492e      	ldr	r1, [pc, #184]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005498:	4313      	orrs	r3, r2
 800549a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d208      	bcs.n	80054ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	4922      	ldr	r1, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d208      	bcs.n	80054f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4917      	ldr	r1, [pc, #92]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054f8:	f000 f834 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	4912      	ldr	r1, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x35c>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a0d      	ldr	r2, [pc, #52]	; (8005554 <HAL_RCC_ClockConfig+0x35c>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x360>)
 800552e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <HAL_RCC_ClockConfig+0x364>)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_RCC_ClockConfig+0x368>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fc fcea 	bl	8001f14 <HAL_InitTick>
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
 8005554:	0800d320 	.word	0x0800d320
 8005558:	24000008 	.word	0x24000008
 800555c:	24000004 	.word	0x24000004
 8005560:	2400000c 	.word	0x2400000c

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556a:	4bb3      	ldr	r3, [pc, #716]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005572:	2b18      	cmp	r3, #24
 8005574:	f200 8155 	bhi.w	8005822 <HAL_RCC_GetSysClockFreq+0x2be>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055e5 	.word	0x080055e5
 8005584:	08005823 	.word	0x08005823
 8005588:	08005823 	.word	0x08005823
 800558c:	08005823 	.word	0x08005823
 8005590:	08005823 	.word	0x08005823
 8005594:	08005823 	.word	0x08005823
 8005598:	08005823 	.word	0x08005823
 800559c:	08005823 	.word	0x08005823
 80055a0:	0800560b 	.word	0x0800560b
 80055a4:	08005823 	.word	0x08005823
 80055a8:	08005823 	.word	0x08005823
 80055ac:	08005823 	.word	0x08005823
 80055b0:	08005823 	.word	0x08005823
 80055b4:	08005823 	.word	0x08005823
 80055b8:	08005823 	.word	0x08005823
 80055bc:	08005823 	.word	0x08005823
 80055c0:	08005611 	.word	0x08005611
 80055c4:	08005823 	.word	0x08005823
 80055c8:	08005823 	.word	0x08005823
 80055cc:	08005823 	.word	0x08005823
 80055d0:	08005823 	.word	0x08005823
 80055d4:	08005823 	.word	0x08005823
 80055d8:	08005823 	.word	0x08005823
 80055dc:	08005823 	.word	0x08005823
 80055e0:	08005617 	.word	0x08005617
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e4:	4b94      	ldr	r3, [pc, #592]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055f0:	4b91      	ldr	r3, [pc, #580]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	4a90      	ldr	r2, [pc, #576]	; (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005602:	e111      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005604:	4b8d      	ldr	r3, [pc, #564]	; (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005606:	61bb      	str	r3, [r7, #24]
    break;
 8005608:	e10e      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800560a:	4b8d      	ldr	r3, [pc, #564]	; (8005840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800560c:	61bb      	str	r3, [r7, #24]
    break;
 800560e:	e10b      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005610:	4b8c      	ldr	r3, [pc, #560]	; (8005844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005612:	61bb      	str	r3, [r7, #24]
    break;
 8005614:	e108      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005616:	4b88      	ldr	r3, [pc, #544]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005620:	4b85      	ldr	r3, [pc, #532]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800562a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800562c:	4b82      	ldr	r3, [pc, #520]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005636:	4b80      	ldr	r3, [pc, #512]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80e1 	beq.w	800581c <HAL_RCC_GetSysClockFreq+0x2b8>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b02      	cmp	r3, #2
 800565e:	f000 8083 	beq.w	8005768 <HAL_RCC_GetSysClockFreq+0x204>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f200 80a1 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x248>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x114>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d056      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005676:	e099      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005678:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02d      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005684:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	4a6b      	ldr	r2, [pc, #428]	; (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b62      	ldr	r3, [pc, #392]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80056de:	e087      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800584c <HAL_RCC_GetSysClockFreq+0x2e8>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b51      	ldr	r3, [pc, #324]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005722:	e065      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005850 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b40      	ldr	r3, [pc, #256]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005766:	e043      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005854 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b2f      	ldr	r3, [pc, #188]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a02 	vldr	s12, [r7, #8]
 800578e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057aa:	e021      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005850 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	0a5b      	lsrs	r3, r3, #9
 80057f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fa:	3301      	adds	r3, #1
 80057fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005808:	edd7 6a07 	vldr	s13, [r7, #28]
 800580c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005814:	ee17 3a90 	vmov	r3, s15
 8005818:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800581a:	e005      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
    break;
 8005820:	e002      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005824:	61bb      	str	r3, [r7, #24]
    break;
 8005826:	bf00      	nop
  }

  return sysclockfreq;
 8005828:	69bb      	ldr	r3, [r7, #24]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	017d7840 	.word	0x017d7840
 8005848:	46000000 	.word	0x46000000
 800584c:	4c742400 	.word	0x4c742400
 8005850:	4a742400 	.word	0x4a742400
 8005854:	4bbebc20 	.word	0x4bbebc20

08005858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800585e:	f7ff fe81 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005862:	4602      	mov	r2, r0
 8005864:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	490f      	ldr	r1, [pc, #60]	; (80058ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005870:	5ccb      	ldrb	r3, [r1, r3]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	4a09      	ldr	r2, [pc, #36]	; (80058ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005886:	5cd3      	ldrb	r3, [r2, r3]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005894:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005896:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	58024400 	.word	0x58024400
 80058ac:	0800d320 	.word	0x0800d320
 80058b0:	24000008 	.word	0x24000008
 80058b4:	24000004 	.word	0x24000004

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058bc:	f7ff ffcc 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4904      	ldr	r1, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	58024400 	.word	0x58024400
 80058e0:	0800d320 	.word	0x0800d320

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058e8:	f7ff ffb6 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	0800d320 	.word	0x0800d320

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005918:	2300      	movs	r3, #0
 800591a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800591c:	2300      	movs	r3, #0
 800591e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d03f      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005934:	d02a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800593a:	d824      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800593c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005940:	d018      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005946:	d81e      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800594c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005950:	d007      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005952:	e018      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4ba4      	ldr	r3, [pc, #656]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4aa3      	ldr	r2, [pc, #652]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005960:	e015      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	2102      	movs	r1, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f989 	bl	8006c80 <RCCEx_PLL2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005972:	e00c      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3324      	adds	r3, #36	; 0x24
 8005978:	2102      	movs	r1, #2
 800597a:	4618      	mov	r0, r3
 800597c:	f001 fa32 	bl	8006de4 <RCCEx_PLL3_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005984:	e003      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
      break;
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800598c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005994:	4b94      	ldr	r3, [pc, #592]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a0:	4991      	ldr	r1, [pc, #580]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	650b      	str	r3, [r1, #80]	; 0x50
 80059a6:	e001      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d03d      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d826      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80059c0:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059dd 	.word	0x080059dd
 80059cc:	080059eb 	.word	0x080059eb
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4b82      	ldr	r3, [pc, #520]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a81      	ldr	r2, [pc, #516]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059e8:	e015      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3304      	adds	r3, #4
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f945 	bl	8006c80 <RCCEx_PLL2_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059fa:	e00c      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3324      	adds	r3, #36	; 0x24
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 f9ee 	bl	8006de4 <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
      break;
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a1c:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a20:	f023 0207 	bic.w	r2, r3, #7
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	496f      	ldr	r1, [pc, #444]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a2e:	e001      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d051      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a46:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a4a:	d036      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a4c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a50:	d830      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a56:	d032      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a5c:	d82a      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a62:	d02e      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005a64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a68:	d824      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d018      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d81e      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a7e:	d007      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005a80:	e018      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a82:	4b59      	ldr	r3, [pc, #356]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	4a58      	ldr	r2, [pc, #352]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a8e:	e019      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f8f2 	bl	8006c80 <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005aa0:	e010      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3324      	adds	r3, #36	; 0x24
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 f99b 	bl	8006de4 <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ab2:	e007      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab8:	e004      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005aba:	bf00      	nop
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005aca:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ace:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ad8:	4943      	ldr	r1, [pc, #268]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	658b      	str	r3, [r1, #88]	; 0x58
 8005ade:	e001      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d051      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005af6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005afa:	d036      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005afc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b00:	d830      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b06:	d032      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b0c:	d82a      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b12:	d02e      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b18:	d824      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1e:	d018      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b24:	d81e      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b2e:	d007      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b30:	e018      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b32:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	4a2c      	ldr	r2, [pc, #176]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b3e:	e019      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 f89a 	bl	8006c80 <RCCEx_PLL2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b50:	e010      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 f943 	bl	8006de4 <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b62:	e007      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
      break;
 8005b68:	e004      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b88:	4917      	ldr	r1, [pc, #92]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8005b8e:	e001      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d035      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba4:	2b30      	cmp	r3, #48	; 0x30
 8005ba6:	d01c      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ba8:	2b30      	cmp	r3, #48	; 0x30
 8005baa:	d817      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d00c      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d813      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d019      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d10f      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005bc8:	e011      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	2102      	movs	r1, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f855 	bl	8006c80 <RCCEx_PLL2_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005bda:	e008      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
      break;
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005be2:	bf00      	nop
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400
      break;
 8005bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bf4:	4ba3      	ldr	r3, [pc, #652]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c00:	49a0      	ldr	r1, [pc, #640]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d047      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c20:	d030      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c26:	d82a      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c2c:	d02c      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005c2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c32:	d824      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c38:	d018      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	d81e      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d007      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c4a:	e018      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4b8d      	ldr	r3, [pc, #564]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4a8c      	ldr	r2, [pc, #560]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c58:	e017      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 f80d 	bl	8006c80 <RCCEx_PLL2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c6a:	e00e      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	2100      	movs	r1, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 f8b6 	bl	8006de4 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c7c:	e005      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
      break;
 8005c82:	e002      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005c84:	bf00      	nop
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c90:	4b7c      	ldr	r3, [pc, #496]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9c:	4979      	ldr	r1, [pc, #484]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ca2:	e001      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d049      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cbc:	d02e      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc2:	d828      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc8:	d02a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005cca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cce:	d822      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cd4:	d026      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005cd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cda:	d81c      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce0:	d010      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce6:	d816      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01d      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf0:	d111      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 ffc1 	bl	8006c80 <RCCEx_PLL2_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d02:	e012      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 f86a 	bl	8006de4 <RCCEx_PLL3_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d14:	e009      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1a:	e006      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d1c:	bf00      	nop
 8005d1e:	e004      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d20:	bf00      	nop
 8005d22:	e002      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d24:	bf00      	nop
 8005d26:	e000      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d30:	4b54      	ldr	r3, [pc, #336]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3c:	4951      	ldr	r1, [pc, #324]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	650b      	str	r3, [r1, #80]	; 0x50
 8005d42:	e001      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d04b      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d5e:	d02e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d64:	d828      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6a:	d02a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d822      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d76:	d026      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d7c:	d81c      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d82:	d010      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d88:	d816      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01d      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d92:	d111      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 ff70 	bl	8006c80 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005da4:	e012      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 f819 	bl	8006de4 <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005db6:	e009      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e006      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e004      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005de0:	4928      	ldr	r1, [pc, #160]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	658b      	str	r3, [r1, #88]	; 0x58
 8005de6:	e001      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02f      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e00:	d00e      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e06:	d814      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d015      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e10:	d10f      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e1e:	e00c      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	2101      	movs	r1, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 ff2a 	bl	8006c80 <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e30:	e003      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
      break;
 8005e36:	e000      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e40:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4c:	490d      	ldr	r1, [pc, #52]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	650b      	str	r3, [r1, #80]	; 0x50
 8005e52:	e001      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d034      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d81d      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005eaf 	.word	0x08005eaf
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08005e97 	.word	0x08005e97
 8005e80:	08005eaf 	.word	0x08005eaf
 8005e84:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e88:	4bb1      	ldr	r3, [pc, #708]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4ab0      	ldr	r2, [pc, #704]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e94:	e00c      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 feef 	bl	8006c80 <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ea6:	e003      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005eac:	e000      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8005eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d109      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005eb6:	4ba6      	ldr	r3, [pc, #664]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eba:	f023 0203 	bic.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	49a3      	ldr	r1, [pc, #652]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ec8:	e001      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8086 	beq.w	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005edc:	4b9d      	ldr	r3, [pc, #628]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a9c      	ldr	r2, [pc, #624]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ee8:	f7fc f85e 	bl	8001fa8 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eee:	e009      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef0:	f7fc f85a 	bl	8001fa8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d902      	bls.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	75fb      	strb	r3, [r7, #23]
        break;
 8005f02:	e005      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f04:	4b93      	ldr	r3, [pc, #588]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0ef      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d166      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f16:	4b8e      	ldr	r3, [pc, #568]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f20:	4053      	eors	r3, r2
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d013      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f2a:	4b89      	ldr	r3, [pc, #548]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f34:	4b86      	ldr	r3, [pc, #536]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	4a85      	ldr	r2, [pc, #532]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f40:	4b83      	ldr	r3, [pc, #524]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a82      	ldr	r2, [pc, #520]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f4c:	4a80      	ldr	r2, [pc, #512]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	d115      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fc f823 	bl	8001fa8 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f64:	e00b      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f66:	f7fc f81f 	bl	8001fa8 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d902      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8005f7c:	e005      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f7e:	4b74      	ldr	r3, [pc, #464]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0ed      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d126      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9e:	d10d      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fae:	0919      	lsrs	r1, r3, #4
 8005fb0:	4b69      	ldr	r3, [pc, #420]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fb2:	400b      	ands	r3, r1
 8005fb4:	4966      	ldr	r1, [pc, #408]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]
 8005fba:	e005      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005fbc:	4b64      	ldr	r3, [pc, #400]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	4a63      	ldr	r2, [pc, #396]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fc6:	6113      	str	r3, [r2, #16]
 8005fc8:	4b61      	ldr	r3, [pc, #388]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd6:	495e      	ldr	r1, [pc, #376]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	670b      	str	r3, [r1, #112]	; 0x70
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	75bb      	strb	r3, [r7, #22]
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d07e      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff8:	2b28      	cmp	r3, #40	; 0x28
 8005ffa:	d867      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	080060d3 	.word	0x080060d3
 8006008:	080060cd 	.word	0x080060cd
 800600c:	080060cd 	.word	0x080060cd
 8006010:	080060cd 	.word	0x080060cd
 8006014:	080060cd 	.word	0x080060cd
 8006018:	080060cd 	.word	0x080060cd
 800601c:	080060cd 	.word	0x080060cd
 8006020:	080060cd 	.word	0x080060cd
 8006024:	080060a9 	.word	0x080060a9
 8006028:	080060cd 	.word	0x080060cd
 800602c:	080060cd 	.word	0x080060cd
 8006030:	080060cd 	.word	0x080060cd
 8006034:	080060cd 	.word	0x080060cd
 8006038:	080060cd 	.word	0x080060cd
 800603c:	080060cd 	.word	0x080060cd
 8006040:	080060cd 	.word	0x080060cd
 8006044:	080060bb 	.word	0x080060bb
 8006048:	080060cd 	.word	0x080060cd
 800604c:	080060cd 	.word	0x080060cd
 8006050:	080060cd 	.word	0x080060cd
 8006054:	080060cd 	.word	0x080060cd
 8006058:	080060cd 	.word	0x080060cd
 800605c:	080060cd 	.word	0x080060cd
 8006060:	080060cd 	.word	0x080060cd
 8006064:	080060d3 	.word	0x080060d3
 8006068:	080060cd 	.word	0x080060cd
 800606c:	080060cd 	.word	0x080060cd
 8006070:	080060cd 	.word	0x080060cd
 8006074:	080060cd 	.word	0x080060cd
 8006078:	080060cd 	.word	0x080060cd
 800607c:	080060cd 	.word	0x080060cd
 8006080:	080060cd 	.word	0x080060cd
 8006084:	080060d3 	.word	0x080060d3
 8006088:	080060cd 	.word	0x080060cd
 800608c:	080060cd 	.word	0x080060cd
 8006090:	080060cd 	.word	0x080060cd
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060d3 	.word	0x080060d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2101      	movs	r1, #1
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fde6 	bl	8006c80 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3324      	adds	r3, #36	; 0x24
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fe8f 	bl	8006de4 <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	491a      	ldr	r1, [pc, #104]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	654b      	str	r3, [r1, #84]	; 0x54
 80060ec:	e001      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d03e      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	2b05      	cmp	r3, #5
 8006104:	d820      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	0800615d 	.word	0x0800615d
 8006110:	08006125 	.word	0x08006125
 8006114:	08006137 	.word	0x08006137
 8006118:	0800615d 	.word	0x0800615d
 800611c:	0800615d 	.word	0x0800615d
 8006120:	0800615d 	.word	0x0800615d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fda8 	bl	8006c80 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006134:	e013      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fe51 	bl	8006de4 <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006146:	e00a      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	75fb      	strb	r3, [r7, #23]
      break;
 800614c:	e007      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800614e:	bf00      	nop
 8006150:	58024400 	.word	0x58024400
 8006154:	58024800 	.word	0x58024800
 8006158:	00ffffcf 	.word	0x00ffffcf
      break;
 800615c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006164:	4b9f      	ldr	r3, [pc, #636]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f023 0207 	bic.w	r2, r3, #7
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	499c      	ldr	r1, [pc, #624]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	654b      	str	r3, [r1, #84]	; 0x54
 8006176:	e001      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d039      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618e:	2b05      	cmp	r3, #5
 8006190:	d820      	bhi.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061db 	.word	0x080061db
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061c3 	.word	0x080061c3
 80061a4:	080061db 	.word	0x080061db
 80061a8:	080061db 	.word	0x080061db
 80061ac:	080061db 	.word	0x080061db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	2101      	movs	r1, #1
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fd62 	bl	8006c80 <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061c0:	e00c      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	2101      	movs	r1, #1
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fe0b 	bl	8006de4 <RCCEx_PLL3_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061d2:	e003      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]
      break;
 80061d8:	e000      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80061da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061e2:	4b80      	ldr	r3, [pc, #512]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	f023 0207 	bic.w	r2, r3, #7
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f0:	497c      	ldr	r1, [pc, #496]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	658b      	str	r3, [r1, #88]	; 0x58
 80061f6:	e001      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d04b      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006212:	d02e      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006218:	d828      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d02a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d822      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800622a:	d026      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800622c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006230:	d81c      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006236:	d010      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800623c:	d816      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01d      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006246:	d111      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fd16 	bl	8006c80 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006258:	e012      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3324      	adds	r3, #36	; 0x24
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fdbf 	bl	8006de4 <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800626a:	e009      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
      break;
 8006270:	e006      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006272:	bf00      	nop
 8006274:	e004      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800627e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006286:	4b57      	ldr	r3, [pc, #348]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	4953      	ldr	r1, [pc, #332]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	654b      	str	r3, [r1, #84]	; 0x54
 800629a:	e001      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d04b      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062b6:	d02e      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80062b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062bc:	d828      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c2:	d02a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c8:	d822      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ce:	d026      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80062d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062d4:	d81c      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062da:	d010      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80062dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e0:	d816      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01d      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80062e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ea:	d111      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fcc4 	bl	8006c80 <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062fc:	e012      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3324      	adds	r3, #36	; 0x24
 8006302:	2102      	movs	r1, #2
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fd6d 	bl	8006de4 <RCCEx_PLL3_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800630e:	e009      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
      break;
 8006314:	e006      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006316:	bf00      	nop
 8006318:	e004      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800632a:	4b2e      	ldr	r3, [pc, #184]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006338:	492a      	ldr	r1, [pc, #168]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800633a:	4313      	orrs	r3, r2
 800633c:	658b      	str	r3, [r1, #88]	; 0x58
 800633e:	e001      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d04d      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006356:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800635a:	d02e      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800635c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006360:	d828      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006366:	d02a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636c:	d822      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800636e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006372:	d026      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006374:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006378:	d81c      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800637a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800637e:	d010      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006384:	d816      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01d      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	d111      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc72 	bl	8006c80 <RCCEx_PLL2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063a0:	e012      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	2102      	movs	r1, #2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fd1b 	bl	8006de4 <RCCEx_PLL3_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063b2:	e009      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	e006      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80063ba:	bf00      	nop
 80063bc:	e004      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80063c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063dc:	4901      	ldr	r1, [pc, #4]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	658b      	str	r3, [r1, #88]	; 0x58
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80063e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d018      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006400:	d10a      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3324      	adds	r3, #36	; 0x24
 8006406:	2102      	movs	r1, #2
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fceb 	bl	8006de4 <RCCEx_PLL3_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006418:	4b8a      	ldr	r3, [pc, #552]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006424:	4987      	ldr	r1, [pc, #540]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006426:	4313      	orrs	r3, r2
 8006428:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d10a      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3324      	adds	r3, #36	; 0x24
 8006446:	2102      	movs	r1, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fccb 	bl	8006de4 <RCCEx_PLL3_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006458:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	4977      	ldr	r1, [pc, #476]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006468:	4313      	orrs	r3, r2
 800646a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d034      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800647e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006482:	d01d      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006488:	d817      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d009      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006494:	e011      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fbef 	bl	8006c80 <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064a6:	e00c      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	2102      	movs	r1, #2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fc98 	bl	8006de4 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064b8:	e003      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
      break;
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80064c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064c8:	4b5e      	ldr	r3, [pc, #376]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d6:	495b      	ldr	r1, [pc, #364]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	658b      	str	r3, [r1, #88]	; 0x58
 80064dc:	e001      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d033      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064f8:	d01c      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80064fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064fe:	d816      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800650a:	d007      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4b4d      	ldr	r3, [pc, #308]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a4c      	ldr	r2, [pc, #304]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800651a:	e00c      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fc5e 	bl	8006de4 <RCCEx_PLL3_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800653c:	4b41      	ldr	r3, [pc, #260]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654a:	493e      	ldr	r1, [pc, #248]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800654c:	4313      	orrs	r3, r2
 800654e:	654b      	str	r3, [r1, #84]	; 0x54
 8006550:	e001      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d029      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656e:	d007      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006570:	e00f      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006572:	4b34      	ldr	r3, [pc, #208]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	4a33      	ldr	r2, [pc, #204]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800657e:	e00b      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	2102      	movs	r1, #2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fb7a 	bl	8006c80 <RCCEx_PLL2_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006590:	e002      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	4926      	ldr	r1, [pc, #152]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065b0:	e001      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3324      	adds	r3, #36	; 0x24
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fc0b 	bl	8006de4 <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d033      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ec:	d017      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80065ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f2:	d811      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f8:	d013      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fe:	d80b      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8006604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006608:	d106      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006616:	e007      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8006626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800663a:	4902      	ldr	r1, [pc, #8]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800663c:	4313      	orrs	r3, r2
 800663e:	654b      	str	r3, [r1, #84]	; 0x54
 8006640:	e004      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8006642:	bf00      	nop
 8006644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006658:	4b29      	ldr	r3, [pc, #164]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800665a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006664:	4926      	ldr	r1, [pc, #152]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006666:	4313      	orrs	r3, r2
 8006668:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006676:	4b22      	ldr	r3, [pc, #136]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006682:	491f      	ldr	r1, [pc, #124]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006684:	4313      	orrs	r3, r2
 8006686:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006694:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800669a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800669e:	6113      	str	r3, [r2, #16]
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066aa:	4915      	ldr	r1, [pc, #84]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da08      	bge.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c4:	490e      	ldr	r1, [pc, #56]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e4:	4906      	ldr	r1, [pc, #24]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80066ea:	7dbb      	ldrb	r3, [r7, #22]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	58024400 	.word	0x58024400

08006704 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006708:	f7ff f8a6 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	091b      	lsrs	r3, r3, #4
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	4904      	ldr	r1, [pc, #16]	; (800672c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006724:	4618      	mov	r0, r3
 8006726:	bd80      	pop	{r7, pc}
 8006728:	58024400 	.word	0x58024400
 800672c:	0800d320 	.word	0x0800d320

08006730 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006730:	b480      	push	{r7}
 8006732:	b089      	sub	sp, #36	; 0x24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006738:	4ba1      	ldr	r3, [pc, #644]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006742:	4b9f      	ldr	r3, [pc, #636]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	0b1b      	lsrs	r3, r3, #12
 8006748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800674c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800674e:	4b9c      	ldr	r3, [pc, #624]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800675a:	4b99      	ldr	r3, [pc, #612]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	08db      	lsrs	r3, r3, #3
 8006760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006772:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8111 	beq.w	80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b02      	cmp	r3, #2
 8006782:	f000 8083 	beq.w	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b02      	cmp	r3, #2
 800678a:	f200 80a1 	bhi.w	80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d056      	beq.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800679a:	e099      	b.n	80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800679c:	4b88      	ldr	r3, [pc, #544]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d02d      	beq.n	8006804 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067a8:	4b85      	ldr	r3, [pc, #532]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	08db      	lsrs	r3, r3, #3
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	4a84      	ldr	r2, [pc, #528]	; (80069c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
 80067b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d2:	4b7b      	ldr	r3, [pc, #492]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006802:	e087      	b.n	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006816:	4b6a      	ldr	r3, [pc, #424]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006826:	ed97 6a03 	vldr	s12, [r7, #12]
 800682a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800682e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006846:	e065      	b.n	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685a:	4b59      	ldr	r3, [pc, #356]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686a:	ed97 6a03 	vldr	s12, [r7, #12]
 800686e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800688a:	e043      	b.n	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006896:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80069d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800689a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689e:	4b48      	ldr	r3, [pc, #288]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ce:	e021      	b.n	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80069d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e2:	4b37      	ldr	r3, [pc, #220]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006912:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006914:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	0a5b      	lsrs	r3, r3, #9
 800691a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800692a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800692e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800693a:	ee17 2a90 	vmov	r2, s15
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006942:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800695c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006968:	ee17 2a90 	vmov	r2, s15
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006970:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800698a:	edd7 6a07 	vldr	s13, [r7, #28]
 800698e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006996:	ee17 2a90 	vmov	r2, s15
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800699e:	e008      	b.n	80069b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
}
 80069b2:	bf00      	nop
 80069b4:	3724      	adds	r7, #36	; 0x24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	58024400 	.word	0x58024400
 80069c4:	03d09000 	.word	0x03d09000
 80069c8:	46000000 	.word	0x46000000
 80069cc:	4c742400 	.word	0x4c742400
 80069d0:	4a742400 	.word	0x4a742400
 80069d4:	4bbebc20 	.word	0x4bbebc20

080069d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80069d8:	b480      	push	{r7}
 80069da:	b089      	sub	sp, #36	; 0x24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069e0:	4ba1      	ldr	r3, [pc, #644]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80069ea:	4b9f      	ldr	r3, [pc, #636]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	0d1b      	lsrs	r3, r3, #20
 80069f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069f6:	4b9c      	ldr	r3, [pc, #624]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a02:	4b99      	ldr	r3, [pc, #612]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	08db      	lsrs	r3, r3, #3
 8006a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	fb02 f303 	mul.w	r3, r2, r3
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 8111 	beq.w	8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	f000 8083 	beq.w	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	f200 80a1 	bhi.w	8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d056      	beq.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a42:	e099      	b.n	8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a44:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02d      	beq.n	8006aac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a50:	4b85      	ldr	r3, [pc, #532]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	08db      	lsrs	r3, r3, #3
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	4a84      	ldr	r2, [pc, #528]	; (8006c6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006aaa:	e087      	b.n	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aee:	e065      	b.n	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b59      	ldr	r3, [pc, #356]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b32:	e043      	b.n	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b48      	ldr	r3, [pc, #288]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b76:	e021      	b.n	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b37      	ldr	r3, [pc, #220]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006bbc:	4b2a      	ldr	r3, [pc, #168]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	0a5b      	lsrs	r3, r3, #9
 8006bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be2:	ee17 2a90 	vmov	r2, s15
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006bea:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c10:	ee17 2a90 	vmov	r2, s15
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c18:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3e:	ee17 2a90 	vmov	r2, s15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c46:	e008      	b.n	8006c5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
}
 8006c5a:	bf00      	nop
 8006c5c:	3724      	adds	r7, #36	; 0x24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	03d09000 	.word	0x03d09000
 8006c70:	46000000 	.word	0x46000000
 8006c74:	4c742400 	.word	0x4c742400
 8006c78:	4a742400 	.word	0x4a742400
 8006c7c:	4bbebc20 	.word	0x4bbebc20

08006c80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c8e:	4b53      	ldr	r3, [pc, #332]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d101      	bne.n	8006c9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e099      	b.n	8006dd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c9e:	4b4f      	ldr	r3, [pc, #316]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a4e      	ldr	r2, [pc, #312]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006caa:	f7fb f97d 	bl	8001fa8 <HAL_GetTick>
 8006cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cb0:	e008      	b.n	8006cc4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cb2:	f7fb f979 	bl	8001fa8 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e086      	b.n	8006dd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cc4:	4b45      	ldr	r3, [pc, #276]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f0      	bne.n	8006cb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cd0:	4b42      	ldr	r3, [pc, #264]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	031b      	lsls	r3, r3, #12
 8006cde:	493f      	ldr	r1, [pc, #252]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	628b      	str	r3, [r1, #40]	; 0x28
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	025b      	lsls	r3, r3, #9
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	061b      	lsls	r3, r3, #24
 8006d10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d14:	4931      	ldr	r1, [pc, #196]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d1a:	4b30      	ldr	r3, [pc, #192]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	492d      	ldr	r1, [pc, #180]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	f023 0220 	bic.w	r2, r3, #32
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	4928      	ldr	r1, [pc, #160]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d3e:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	4a26      	ldr	r2, [pc, #152]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d44:	f023 0310 	bic.w	r3, r3, #16
 8006d48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <RCCEx_PLL2_Config+0x160>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	69d2      	ldr	r2, [r2, #28]
 8006d56:	00d2      	lsls	r2, r2, #3
 8006d58:	4920      	ldr	r1, [pc, #128]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d5e:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d64:	f043 0310 	orr.w	r3, r3, #16
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d106      	bne.n	8006d7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d70:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d7c:	e00f      	b.n	8006d9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d84:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d90:	e005      	b.n	8006d9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006da4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006daa:	f7fb f8fd 	bl	8001fa8 <HAL_GetTick>
 8006dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006db0:	e008      	b.n	8006dc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006db2:	f7fb f8f9 	bl	8001fa8 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e006      	b.n	8006dd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dc4:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	ffff0007 	.word	0xffff0007

08006de4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006df2:	4b53      	ldr	r3, [pc, #332]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d101      	bne.n	8006e02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e099      	b.n	8006f36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e02:	4b4f      	ldr	r3, [pc, #316]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a4e      	ldr	r2, [pc, #312]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0e:	f7fb f8cb 	bl	8001fa8 <HAL_GetTick>
 8006e12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e14:	e008      	b.n	8006e28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e16:	f7fb f8c7 	bl	8001fa8 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e086      	b.n	8006f36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e28:	4b45      	ldr	r3, [pc, #276]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e34:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	051b      	lsls	r3, r3, #20
 8006e42:	493f      	ldr	r1, [pc, #252]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	628b      	str	r3, [r1, #40]	; 0x28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	025b      	lsls	r3, r3, #9
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	061b      	lsls	r3, r3, #24
 8006e74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e78:	4931      	ldr	r1, [pc, #196]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e7e:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	492d      	ldr	r1, [pc, #180]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e90:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	4928      	ldr	r1, [pc, #160]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ea2:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eae:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb2:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <RCCEx_PLL3_Config+0x160>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	69d2      	ldr	r2, [r2, #28]
 8006eba:	00d2      	lsls	r2, r2, #3
 8006ebc:	4920      	ldr	r1, [pc, #128]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	4a19      	ldr	r2, [pc, #100]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ee0:	e00f      	b.n	8006f02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d106      	bne.n	8006ef6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ef4:	e005      	b.n	8006f02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f02:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a0e      	ldr	r2, [pc, #56]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0e:	f7fb f84b 	bl	8001fa8 <HAL_GetTick>
 8006f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f14:	e008      	b.n	8006f28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f16:	f7fb f847 	bl	8001fa8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e006      	b.n	8006f36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	ffff0007 	.word	0xffff0007

08006f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e049      	b.n	8006fee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fa fbd6 	bl	8001720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f000 fa66 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d109      	bne.n	800701c <HAL_TIM_PWM_Start+0x24>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	bf14      	ite	ne
 8007014:	2301      	movne	r3, #1
 8007016:	2300      	moveq	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	e03c      	b.n	8007096 <HAL_TIM_PWM_Start+0x9e>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d109      	bne.n	8007036 <HAL_TIM_PWM_Start+0x3e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b01      	cmp	r3, #1
 800702c:	bf14      	ite	ne
 800702e:	2301      	movne	r3, #1
 8007030:	2300      	moveq	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	e02f      	b.n	8007096 <HAL_TIM_PWM_Start+0x9e>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b08      	cmp	r3, #8
 800703a:	d109      	bne.n	8007050 <HAL_TIM_PWM_Start+0x58>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	bf14      	ite	ne
 8007048:	2301      	movne	r3, #1
 800704a:	2300      	moveq	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	e022      	b.n	8007096 <HAL_TIM_PWM_Start+0x9e>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b0c      	cmp	r3, #12
 8007054:	d109      	bne.n	800706a <HAL_TIM_PWM_Start+0x72>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	e015      	b.n	8007096 <HAL_TIM_PWM_Start+0x9e>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b10      	cmp	r3, #16
 800706e:	d109      	bne.n	8007084 <HAL_TIM_PWM_Start+0x8c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b01      	cmp	r3, #1
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	e008      	b.n	8007096 <HAL_TIM_PWM_Start+0x9e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	bf14      	ite	ne
 8007090:	2301      	movne	r3, #1
 8007092:	2300      	moveq	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e0ab      	b.n	80071f6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_PWM_Start+0xb6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ac:	e023      	b.n	80070f6 <HAL_TIM_PWM_Start+0xfe>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d104      	bne.n	80070be <HAL_TIM_PWM_Start+0xc6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070bc:	e01b      	b.n	80070f6 <HAL_TIM_PWM_Start+0xfe>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_PWM_Start+0xd6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070cc:	e013      	b.n	80070f6 <HAL_TIM_PWM_Start+0xfe>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	d104      	bne.n	80070de <HAL_TIM_PWM_Start+0xe6>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070dc:	e00b      	b.n	80070f6 <HAL_TIM_PWM_Start+0xfe>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_PWM_Start+0xf6>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ec:	e003      	b.n	80070f6 <HAL_TIM_PWM_Start+0xfe>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2201      	movs	r2, #1
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fd26 	bl	8007b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a3d      	ldr	r2, [pc, #244]	; (8007200 <HAL_TIM_PWM_Start+0x208>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_TIM_PWM_Start+0x13e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3c      	ldr	r2, [pc, #240]	; (8007204 <HAL_TIM_PWM_Start+0x20c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_TIM_PWM_Start+0x13e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a3a      	ldr	r2, [pc, #232]	; (8007208 <HAL_TIM_PWM_Start+0x210>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_TIM_PWM_Start+0x13e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a39      	ldr	r2, [pc, #228]	; (800720c <HAL_TIM_PWM_Start+0x214>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_TIM_PWM_Start+0x13e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a37      	ldr	r2, [pc, #220]	; (8007210 <HAL_TIM_PWM_Start+0x218>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d101      	bne.n	800713a <HAL_TIM_PWM_Start+0x142>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <HAL_TIM_PWM_Start+0x144>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800714e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <HAL_TIM_PWM_Start+0x208>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d02c      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007162:	d027      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_TIM_PWM_Start+0x21c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a29      	ldr	r2, [pc, #164]	; (8007218 <HAL_TIM_PWM_Start+0x220>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d01d      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <HAL_TIM_PWM_Start+0x224>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1f      	ldr	r2, [pc, #124]	; (8007204 <HAL_TIM_PWM_Start+0x20c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a23      	ldr	r2, [pc, #140]	; (8007220 <HAL_TIM_PWM_Start+0x228>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1b      	ldr	r2, [pc, #108]	; (8007208 <HAL_TIM_PWM_Start+0x210>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <HAL_TIM_PWM_Start+0x22c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIM_PWM_Start+0x1bc>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <HAL_TIM_PWM_Start+0x230>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d115      	bne.n	80071e0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	4b1c      	ldr	r3, [pc, #112]	; (800722c <HAL_TIM_PWM_Start+0x234>)
 80071bc:	4013      	ands	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b06      	cmp	r3, #6
 80071c4:	d015      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x1fa>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071cc:	d011      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	e008      	b.n	80071f2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e000      	b.n	80071f4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40001800 	.word	0x40001800
 8007224:	4000e000 	.word	0x4000e000
 8007228:	4000e400 	.word	0x4000e400
 800722c:	00010007 	.word	0x00010007

08007230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800724a:	2302      	movs	r3, #2
 800724c:	e0ff      	b.n	800744e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b14      	cmp	r3, #20
 800725a:	f200 80f0 	bhi.w	800743e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	080072b9 	.word	0x080072b9
 8007268:	0800743f 	.word	0x0800743f
 800726c:	0800743f 	.word	0x0800743f
 8007270:	0800743f 	.word	0x0800743f
 8007274:	080072f9 	.word	0x080072f9
 8007278:	0800743f 	.word	0x0800743f
 800727c:	0800743f 	.word	0x0800743f
 8007280:	0800743f 	.word	0x0800743f
 8007284:	0800733b 	.word	0x0800733b
 8007288:	0800743f 	.word	0x0800743f
 800728c:	0800743f 	.word	0x0800743f
 8007290:	0800743f 	.word	0x0800743f
 8007294:	0800737b 	.word	0x0800737b
 8007298:	0800743f 	.word	0x0800743f
 800729c:	0800743f 	.word	0x0800743f
 80072a0:	0800743f 	.word	0x0800743f
 80072a4:	080073bd 	.word	0x080073bd
 80072a8:	0800743f 	.word	0x0800743f
 80072ac:	0800743f 	.word	0x0800743f
 80072b0:	0800743f 	.word	0x0800743f
 80072b4:	080073fd 	.word	0x080073fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f970 	bl	80075a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0208 	orr.w	r2, r2, #8
 80072d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0204 	bic.w	r2, r2, #4
 80072e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6999      	ldr	r1, [r3, #24]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	619a      	str	r2, [r3, #24]
      break;
 80072f6:	e0a5      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 f9e0 	bl	80076c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6999      	ldr	r1, [r3, #24]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	021a      	lsls	r2, r3, #8
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	619a      	str	r2, [r3, #24]
      break;
 8007338:	e084      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fa49 	bl	80077d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0208 	orr.w	r2, r2, #8
 8007354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0204 	bic.w	r2, r2, #4
 8007364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69d9      	ldr	r1, [r3, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	61da      	str	r2, [r3, #28]
      break;
 8007378:	e064      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fab1 	bl	80078e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69d9      	ldr	r1, [r3, #28]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	021a      	lsls	r2, r3, #8
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	61da      	str	r2, [r3, #28]
      break;
 80073ba:	e043      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fafa 	bl	80079bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073fa:	e023      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fb3e 	bl	8007a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007416:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800743c:	e002      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
      break;
 8007442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop

08007458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a44      	ldr	r2, [pc, #272]	; (800757c <TIM_Base_SetConfig+0x124>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d00f      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a41      	ldr	r2, [pc, #260]	; (8007580 <TIM_Base_SetConfig+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a40      	ldr	r2, [pc, #256]	; (8007584 <TIM_Base_SetConfig+0x12c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a3f      	ldr	r2, [pc, #252]	; (8007588 <TIM_Base_SetConfig+0x130>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a3e      	ldr	r2, [pc, #248]	; (800758c <TIM_Base_SetConfig+0x134>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d108      	bne.n	80074aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a33      	ldr	r2, [pc, #204]	; (800757c <TIM_Base_SetConfig+0x124>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d027      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d023      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a30      	ldr	r2, [pc, #192]	; (8007580 <TIM_Base_SetConfig+0x128>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01f      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2f      	ldr	r2, [pc, #188]	; (8007584 <TIM_Base_SetConfig+0x12c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01b      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2e      	ldr	r2, [pc, #184]	; (8007588 <TIM_Base_SetConfig+0x130>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d017      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2d      	ldr	r2, [pc, #180]	; (800758c <TIM_Base_SetConfig+0x134>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2c      	ldr	r2, [pc, #176]	; (8007590 <TIM_Base_SetConfig+0x138>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00f      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2b      	ldr	r2, [pc, #172]	; (8007594 <TIM_Base_SetConfig+0x13c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00b      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2a      	ldr	r2, [pc, #168]	; (8007598 <TIM_Base_SetConfig+0x140>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d007      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a29      	ldr	r2, [pc, #164]	; (800759c <TIM_Base_SetConfig+0x144>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d003      	beq.n	8007502 <TIM_Base_SetConfig+0xaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a28      	ldr	r2, [pc, #160]	; (80075a0 <TIM_Base_SetConfig+0x148>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <TIM_Base_SetConfig+0x124>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_Base_SetConfig+0x108>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <TIM_Base_SetConfig+0x134>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_Base_SetConfig+0x108>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a11      	ldr	r2, [pc, #68]	; (8007590 <TIM_Base_SetConfig+0x138>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_Base_SetConfig+0x108>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a10      	ldr	r2, [pc, #64]	; (8007594 <TIM_Base_SetConfig+0x13c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_Base_SetConfig+0x108>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a0f      	ldr	r2, [pc, #60]	; (8007598 <TIM_Base_SetConfig+0x140>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d103      	bne.n	8007568 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	615a      	str	r2, [r3, #20]
}
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40010400 	.word	0x40010400
 8007590:	40014000 	.word	0x40014000
 8007594:	40014400 	.word	0x40014400
 8007598:	40014800 	.word	0x40014800
 800759c:	4000e000 	.word	0x4000e000
 80075a0:	4000e400 	.word	0x4000e400

080075a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	f023 0201 	bic.w	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4b37      	ldr	r3, [pc, #220]	; (80076ac <TIM_OC1_SetConfig+0x108>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f023 0302 	bic.w	r3, r3, #2
 80075ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2d      	ldr	r2, [pc, #180]	; (80076b0 <TIM_OC1_SetConfig+0x10c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00f      	beq.n	8007620 <TIM_OC1_SetConfig+0x7c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a2c      	ldr	r2, [pc, #176]	; (80076b4 <TIM_OC1_SetConfig+0x110>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00b      	beq.n	8007620 <TIM_OC1_SetConfig+0x7c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <TIM_OC1_SetConfig+0x114>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d007      	beq.n	8007620 <TIM_OC1_SetConfig+0x7c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <TIM_OC1_SetConfig+0x118>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_OC1_SetConfig+0x7c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <TIM_OC1_SetConfig+0x11c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10c      	bne.n	800763a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f023 0308 	bic.w	r3, r3, #8
 8007626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f023 0304 	bic.w	r3, r3, #4
 8007638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <TIM_OC1_SetConfig+0x10c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00f      	beq.n	8007662 <TIM_OC1_SetConfig+0xbe>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <TIM_OC1_SetConfig+0x110>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <TIM_OC1_SetConfig+0xbe>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <TIM_OC1_SetConfig+0x114>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d007      	beq.n	8007662 <TIM_OC1_SetConfig+0xbe>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a19      	ldr	r2, [pc, #100]	; (80076bc <TIM_OC1_SetConfig+0x118>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC1_SetConfig+0xbe>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <TIM_OC1_SetConfig+0x11c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d111      	bne.n	8007686 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	621a      	str	r2, [r3, #32]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	fffeff8f 	.word	0xfffeff8f
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800

080076c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0210 	bic.w	r2, r3, #16
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4b34      	ldr	r3, [pc, #208]	; (80077c0 <TIM_OC2_SetConfig+0xfc>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 0320 	bic.w	r3, r3, #32
 800770e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <TIM_OC2_SetConfig+0x100>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC2_SetConfig+0x68>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a28      	ldr	r2, [pc, #160]	; (80077c8 <TIM_OC2_SetConfig+0x104>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10d      	bne.n	8007748 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1e      	ldr	r2, [pc, #120]	; (80077c4 <TIM_OC2_SetConfig+0x100>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00f      	beq.n	8007770 <TIM_OC2_SetConfig+0xac>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <TIM_OC2_SetConfig+0x104>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00b      	beq.n	8007770 <TIM_OC2_SetConfig+0xac>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <TIM_OC2_SetConfig+0x108>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d007      	beq.n	8007770 <TIM_OC2_SetConfig+0xac>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <TIM_OC2_SetConfig+0x10c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_OC2_SetConfig+0xac>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <TIM_OC2_SetConfig+0x110>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d113      	bne.n	8007798 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800777e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	feff8fff 	.word	0xfeff8fff
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40014000 	.word	0x40014000
 80077d0:	40014400 	.word	0x40014400
 80077d4:	40014800 	.word	0x40014800

080077d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <TIM_OC3_SetConfig+0xf8>)
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a28      	ldr	r2, [pc, #160]	; (80078d4 <TIM_OC3_SetConfig+0xfc>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_OC3_SetConfig+0x66>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a27      	ldr	r2, [pc, #156]	; (80078d8 <TIM_OC3_SetConfig+0x100>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d10d      	bne.n	800785a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <TIM_OC3_SetConfig+0xfc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <TIM_OC3_SetConfig+0xaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <TIM_OC3_SetConfig+0x100>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00b      	beq.n	8007882 <TIM_OC3_SetConfig+0xaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <TIM_OC3_SetConfig+0x104>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d007      	beq.n	8007882 <TIM_OC3_SetConfig+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a1a      	ldr	r2, [pc, #104]	; (80078e0 <TIM_OC3_SetConfig+0x108>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_OC3_SetConfig+0xaa>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a19      	ldr	r2, [pc, #100]	; (80078e4 <TIM_OC3_SetConfig+0x10c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d113      	bne.n	80078aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	621a      	str	r2, [r3, #32]
}
 80078c4:	bf00      	nop
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	fffeff8f 	.word	0xfffeff8f
 80078d4:	40010000 	.word	0x40010000
 80078d8:	40010400 	.word	0x40010400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800

080078e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <TIM_OC4_SetConfig+0xbc>)
 8007914:	4013      	ands	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	031b      	lsls	r3, r3, #12
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <TIM_OC4_SetConfig+0xc0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_OC4_SetConfig+0x80>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a18      	ldr	r2, [pc, #96]	; (80079ac <TIM_OC4_SetConfig+0xc4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_OC4_SetConfig+0x80>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a17      	ldr	r2, [pc, #92]	; (80079b0 <TIM_OC4_SetConfig+0xc8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_OC4_SetConfig+0x80>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a16      	ldr	r2, [pc, #88]	; (80079b4 <TIM_OC4_SetConfig+0xcc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC4_SetConfig+0x80>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <TIM_OC4_SetConfig+0xd0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d109      	bne.n	800797c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800796e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	019b      	lsls	r3, r3, #6
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	feff8fff 	.word	0xfeff8fff
 80079a8:	40010000 	.word	0x40010000
 80079ac:	40010400 	.word	0x40010400
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800

080079bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <TIM_OC5_SetConfig+0xb0>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a18      	ldr	r2, [pc, #96]	; (8007a70 <TIM_OC5_SetConfig+0xb4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00f      	beq.n	8007a32 <TIM_OC5_SetConfig+0x76>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a17      	ldr	r2, [pc, #92]	; (8007a74 <TIM_OC5_SetConfig+0xb8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00b      	beq.n	8007a32 <TIM_OC5_SetConfig+0x76>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <TIM_OC5_SetConfig+0xbc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d007      	beq.n	8007a32 <TIM_OC5_SetConfig+0x76>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <TIM_OC5_SetConfig+0xc0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_OC5_SetConfig+0x76>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a14      	ldr	r2, [pc, #80]	; (8007a80 <TIM_OC5_SetConfig+0xc4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d109      	bne.n	8007a46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	fffeff8f 	.word	0xfffeff8f
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40010400 	.word	0x40010400
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	40014400 	.word	0x40014400
 8007a80:	40014800 	.word	0x40014800

08007a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <TIM_OC6_SetConfig+0xb4>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	051b      	lsls	r3, r3, #20
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <TIM_OC6_SetConfig+0xb8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00f      	beq.n	8007afc <TIM_OC6_SetConfig+0x78>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <TIM_OC6_SetConfig+0xbc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <TIM_OC6_SetConfig+0x78>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <TIM_OC6_SetConfig+0xc0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d007      	beq.n	8007afc <TIM_OC6_SetConfig+0x78>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a16      	ldr	r2, [pc, #88]	; (8007b48 <TIM_OC6_SetConfig+0xc4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_OC6_SetConfig+0x78>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a15      	ldr	r2, [pc, #84]	; (8007b4c <TIM_OC6_SetConfig+0xc8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d109      	bne.n	8007b10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	029b      	lsls	r3, r3, #10
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	feff8fff 	.word	0xfeff8fff
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f003 031f 	and.w	r3, r3, #31
 8007b62:	2201      	movs	r2, #1
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1a      	ldr	r2, [r3, #32]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	43db      	mvns	r3, r3
 8007b72:	401a      	ands	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1a      	ldr	r2, [r3, #32]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 031f 	and.w	r3, r3, #31
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	fa01 f303 	lsl.w	r3, r1, r3
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e077      	b.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a35      	ldr	r2, [pc, #212]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a34      	ldr	r2, [pc, #208]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d108      	bne.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a25      	ldr	r2, [pc, #148]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d02c      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c26:	d027      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a22      	ldr	r2, [pc, #136]	; (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d022      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a21      	ldr	r2, [pc, #132]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d01d      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d018      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d013      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1b      	ldr	r2, [pc, #108]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00e      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d009      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d10c      	bne.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40010400 	.word	0x40010400
 8007cb8:	40000400 	.word	0x40000400
 8007cbc:	40000800 	.word	0x40000800
 8007cc0:	40000c00 	.word	0x40000c00
 8007cc4:	40001800 	.word	0x40001800
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	4000e000 	.word	0x4000e000
 8007cd0:	4000e400 	.word	0x4000e400

08007cd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e087      	b.n	8007e00 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a27      	ldr	r2, [pc, #156]	; (8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a25      	ldr	r2, [pc, #148]	; (8007e10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d106      	bne.n	8007d8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1e      	ldr	r2, [pc, #120]	; (8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d004      	beq.n	8007da0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d126      	bne.n	8007dee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	051b      	lsls	r3, r3, #20
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0e      	ldr	r2, [pc, #56]	; (8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d004      	beq.n	8007de0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a0d      	ldr	r2, [pc, #52]	; (8007e10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d106      	bne.n	8007dee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	40010000 	.word	0x40010000
 8007e10:	40010400 	.word	0x40010400

08007e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e042      	b.n	8007eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7f9 fccf 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2224      	movs	r2, #36	; 0x24
 8007e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0201 	bic.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc40 	bl	80086dc <UART_SetConfig>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e022      	b.n	8007eac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 faa0 	bl	80093b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fb27 	bl	80094f8 <UART_CheckIdleState>
 8007eaa:	4603      	mov	r3, r0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	; 0x28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d142      	bne.n	8007f52 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_UART_Receive_IT+0x24>
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e03b      	b.n	8007f54 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_UART_Receive_IT+0x36>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e034      	b.n	8007f54 <HAL_UART_Receive_IT+0xa0>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a17      	ldr	r2, [pc, #92]	; (8007f5c <HAL_UART_Receive_IT+0xa8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d01f      	beq.n	8007f42 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d018      	beq.n	8007f42 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	69f9      	ldr	r1, [r7, #28]
 8007f34:	6a3a      	ldr	r2, [r7, #32]
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e6      	bne.n	8007f10 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fbe9 	bl	8009720 <UART_Start_Receive_IT>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	e000      	b.n	8007f54 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f52:	2302      	movs	r3, #2
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	; 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	58000c00 	.word	0x58000c00

08007f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b0ba      	sub	sp, #232	; 0xe8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f8e:	4013      	ands	r3, r2
 8007f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11b      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d015      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 835a 	beq.w	800867e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
      }
      return;
 8007fd2:	e354      	b.n	800867e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 811f 	beq.w	800821c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007fde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fe2:	4b8b      	ldr	r3, [pc, #556]	; (8008210 <HAL_UART_IRQHandler+0x2b0>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007fea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007fee:	4b89      	ldr	r3, [pc, #548]	; (8008214 <HAL_UART_IRQHandler+0x2b4>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8112 	beq.w	800821c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d011      	beq.n	8008028 <HAL_UART_IRQHandler+0xc8>
 8008004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d011      	beq.n	8008058 <HAL_UART_IRQHandler+0xf8>
 8008034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2202      	movs	r2, #2
 8008046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d011      	beq.n	8008088 <HAL_UART_IRQHandler+0x128>
 8008064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2204      	movs	r2, #4
 8008076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800807e:	f043 0202 	orr.w	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d017      	beq.n	80080c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80080a4:	4b5a      	ldr	r3, [pc, #360]	; (8008210 <HAL_UART_IRQHandler+0x2b0>)
 80080a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2208      	movs	r2, #8
 80080b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ba:	f043 0208 	orr.w	r2, r3, #8
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d012      	beq.n	80080f6 <HAL_UART_IRQHandler+0x196>
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 82c0 	beq.w	8008682 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d013      	beq.n	8008136 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800810e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800811a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d005      	beq.n	800815a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800814e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008152:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008156:	2b00      	cmp	r3, #0
 8008158:	d04f      	beq.n	80081fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fc0a 	bl	8009974 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b40      	cmp	r3, #64	; 0x40
 800816c:	d141      	bne.n	80081f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3308      	adds	r3, #8
 8008174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3308      	adds	r3, #8
 8008196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800819a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800819e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1d9      	bne.n	800816e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d013      	beq.n	80081ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c6:	4a14      	ldr	r2, [pc, #80]	; (8008218 <HAL_UART_IRQHandler+0x2b8>)
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fa fea2 	bl	8002f18 <HAL_DMA_Abort_IT>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d017      	beq.n	800820a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	e00f      	b.n	800820a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa60 	bl	80086b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f0:	e00b      	b.n	800820a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa5c 	bl	80086b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	e007      	b.n	800820a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa58 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008208:	e23b      	b.n	8008682 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820a:	bf00      	nop
    return;
 800820c:	e239      	b.n	8008682 <HAL_UART_IRQHandler+0x722>
 800820e:	bf00      	nop
 8008210:	10000001 	.word	0x10000001
 8008214:	04000120 	.word	0x04000120
 8008218:	08009a41 	.word	0x08009a41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	2b01      	cmp	r3, #1
 8008222:	f040 81ce 	bne.w	80085c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822a:	f003 0310 	and.w	r3, r3, #16
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 81c7 	beq.w	80085c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 81c0 	beq.w	80085c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2210      	movs	r2, #16
 8008248:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008254:	2b40      	cmp	r3, #64	; 0x40
 8008256:	f040 813b 	bne.w	80084d0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a8b      	ldr	r2, [pc, #556]	; (8008490 <HAL_UART_IRQHandler+0x530>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d059      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a89      	ldr	r2, [pc, #548]	; (8008494 <HAL_UART_IRQHandler+0x534>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d053      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a87      	ldr	r2, [pc, #540]	; (8008498 <HAL_UART_IRQHandler+0x538>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d04d      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a85      	ldr	r2, [pc, #532]	; (800849c <HAL_UART_IRQHandler+0x53c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d047      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a83      	ldr	r2, [pc, #524]	; (80084a0 <HAL_UART_IRQHandler+0x540>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d041      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a81      	ldr	r2, [pc, #516]	; (80084a4 <HAL_UART_IRQHandler+0x544>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d03b      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a7f      	ldr	r2, [pc, #508]	; (80084a8 <HAL_UART_IRQHandler+0x548>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d035      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a7d      	ldr	r2, [pc, #500]	; (80084ac <HAL_UART_IRQHandler+0x54c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d02f      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a7b      	ldr	r2, [pc, #492]	; (80084b0 <HAL_UART_IRQHandler+0x550>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d029      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a79      	ldr	r2, [pc, #484]	; (80084b4 <HAL_UART_IRQHandler+0x554>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d023      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a77      	ldr	r2, [pc, #476]	; (80084b8 <HAL_UART_IRQHandler+0x558>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01d      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a75      	ldr	r2, [pc, #468]	; (80084bc <HAL_UART_IRQHandler+0x55c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d017      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a73      	ldr	r2, [pc, #460]	; (80084c0 <HAL_UART_IRQHandler+0x560>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d011      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a71      	ldr	r2, [pc, #452]	; (80084c4 <HAL_UART_IRQHandler+0x564>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00b      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a6f      	ldr	r2, [pc, #444]	; (80084c8 <HAL_UART_IRQHandler+0x568>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d005      	beq.n	800831a <HAL_UART_IRQHandler+0x3ba>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a6d      	ldr	r2, [pc, #436]	; (80084cc <HAL_UART_IRQHandler+0x56c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d105      	bne.n	8008326 <HAL_UART_IRQHandler+0x3c6>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b29b      	uxth	r3, r3
 8008324:	e004      	b.n	8008330 <HAL_UART_IRQHandler+0x3d0>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 81a4 	beq.w	8008686 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008344:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008348:	429a      	cmp	r2, r3
 800834a:	f080 819c 	bcs.w	8008686 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008362:	f000 8086 	beq.w	8008472 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800837a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800837e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008394:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800839c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1da      	bne.n	8008366 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e1      	bne.n	80083b0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008410:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008412:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008416:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800841e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e3      	bne.n	80083ec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2220      	movs	r2, #32
 8008428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008442:	f023 0310 	bic.w	r3, r3, #16
 8008446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008454:	65bb      	str	r3, [r7, #88]	; 0x58
 8008456:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800845a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846c:	4618      	mov	r0, r3
 800846e:	f7fa fa35 	bl	80028dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800847e:	b29b      	uxth	r3, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	b29b      	uxth	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f91c 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800848c:	e0fb      	b.n	8008686 <HAL_UART_IRQHandler+0x726>
 800848e:	bf00      	nop
 8008490:	40020010 	.word	0x40020010
 8008494:	40020028 	.word	0x40020028
 8008498:	40020040 	.word	0x40020040
 800849c:	40020058 	.word	0x40020058
 80084a0:	40020070 	.word	0x40020070
 80084a4:	40020088 	.word	0x40020088
 80084a8:	400200a0 	.word	0x400200a0
 80084ac:	400200b8 	.word	0x400200b8
 80084b0:	40020410 	.word	0x40020410
 80084b4:	40020428 	.word	0x40020428
 80084b8:	40020440 	.word	0x40020440
 80084bc:	40020458 	.word	0x40020458
 80084c0:	40020470 	.word	0x40020470
 80084c4:	40020488 	.word	0x40020488
 80084c8:	400204a0 	.word	0x400204a0
 80084cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80cc 	beq.w	800868a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80084f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 80c7 	beq.w	800868a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e4      	bne.n	80084fc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3308      	adds	r3, #8
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	623b      	str	r3, [r7, #32]
   return(result);
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	4b54      	ldr	r3, [pc, #336]	; (8008698 <HAL_UART_IRQHandler+0x738>)
 8008546:	4013      	ands	r3, r2
 8008548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008556:	633a      	str	r2, [r7, #48]	; 0x30
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800855c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e3      	bne.n	8008532 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	60fb      	str	r3, [r7, #12]
   return(result);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0310 	bic.w	r3, r3, #16
 8008592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085a0:	61fb      	str	r3, [r7, #28]
 80085a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	69b9      	ldr	r1, [r7, #24]
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	617b      	str	r3, [r7, #20]
   return(result);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e4      	bne.n	800857e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f882 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085c0:	e063      	b.n	800868a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00e      	beq.n	80085ec <HAL_UART_IRQHandler+0x68c>
 80085ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d008      	beq.n	80085ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 fec9 	bl	800a37c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085ea:	e051      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d014      	beq.n	8008622 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d008      	beq.n	8008622 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008614:	2b00      	cmp	r3, #0
 8008616:	d03a      	beq.n	800868e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
    }
    return;
 8008620:	e035      	b.n	800868e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <HAL_UART_IRQHandler+0x6e2>
 800862e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 fa16 	bl	8009a6c <UART_EndTransmit_IT>
    return;
 8008640:	e026      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d009      	beq.n	8008662 <HAL_UART_IRQHandler+0x702>
 800864e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008652:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fea2 	bl	800a3a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008660:	e016      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d010      	beq.n	8008690 <HAL_UART_IRQHandler+0x730>
 800866e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008672:	2b00      	cmp	r3, #0
 8008674:	da0c      	bge.n	8008690 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 fe8a 	bl	800a390 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800867c:	e008      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
      return;
 800867e:	bf00      	nop
 8008680:	e006      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
    return;
 8008682:	bf00      	nop
 8008684:	e004      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
      return;
 8008686:	bf00      	nop
 8008688:	e002      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
      return;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <HAL_UART_IRQHandler+0x730>
    return;
 800868e:	bf00      	nop
  }
}
 8008690:	37e8      	adds	r7, #232	; 0xe8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	effffffe 	.word	0xeffffffe

0800869c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086e0:	b092      	sub	sp, #72	; 0x48
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	4313      	orrs	r3, r2
 8008702:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	4bbe      	ldr	r3, [pc, #760]	; (8008a04 <UART_SetConfig+0x328>)
 800870c:	4013      	ands	r3, r2
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	6812      	ldr	r2, [r2, #0]
 8008712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008714:	430b      	orrs	r3, r1
 8008716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4ab3      	ldr	r2, [pc, #716]	; (8008a08 <UART_SetConfig+0x32c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008744:	4313      	orrs	r3, r2
 8008746:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	4baf      	ldr	r3, [pc, #700]	; (8008a0c <UART_SetConfig+0x330>)
 8008750:	4013      	ands	r3, r2
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008758:	430b      	orrs	r3, r1
 800875a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	f023 010f 	bic.w	r1, r3, #15
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4aa6      	ldr	r2, [pc, #664]	; (8008a10 <UART_SetConfig+0x334>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d177      	bne.n	800886c <UART_SetConfig+0x190>
 800877c:	4ba5      	ldr	r3, [pc, #660]	; (8008a14 <UART_SetConfig+0x338>)
 800877e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008784:	2b28      	cmp	r3, #40	; 0x28
 8008786:	d86d      	bhi.n	8008864 <UART_SetConfig+0x188>
 8008788:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <UART_SetConfig+0xb4>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	08008835 	.word	0x08008835
 8008794:	08008865 	.word	0x08008865
 8008798:	08008865 	.word	0x08008865
 800879c:	08008865 	.word	0x08008865
 80087a0:	08008865 	.word	0x08008865
 80087a4:	08008865 	.word	0x08008865
 80087a8:	08008865 	.word	0x08008865
 80087ac:	08008865 	.word	0x08008865
 80087b0:	0800883d 	.word	0x0800883d
 80087b4:	08008865 	.word	0x08008865
 80087b8:	08008865 	.word	0x08008865
 80087bc:	08008865 	.word	0x08008865
 80087c0:	08008865 	.word	0x08008865
 80087c4:	08008865 	.word	0x08008865
 80087c8:	08008865 	.word	0x08008865
 80087cc:	08008865 	.word	0x08008865
 80087d0:	08008845 	.word	0x08008845
 80087d4:	08008865 	.word	0x08008865
 80087d8:	08008865 	.word	0x08008865
 80087dc:	08008865 	.word	0x08008865
 80087e0:	08008865 	.word	0x08008865
 80087e4:	08008865 	.word	0x08008865
 80087e8:	08008865 	.word	0x08008865
 80087ec:	08008865 	.word	0x08008865
 80087f0:	0800884d 	.word	0x0800884d
 80087f4:	08008865 	.word	0x08008865
 80087f8:	08008865 	.word	0x08008865
 80087fc:	08008865 	.word	0x08008865
 8008800:	08008865 	.word	0x08008865
 8008804:	08008865 	.word	0x08008865
 8008808:	08008865 	.word	0x08008865
 800880c:	08008865 	.word	0x08008865
 8008810:	08008855 	.word	0x08008855
 8008814:	08008865 	.word	0x08008865
 8008818:	08008865 	.word	0x08008865
 800881c:	08008865 	.word	0x08008865
 8008820:	08008865 	.word	0x08008865
 8008824:	08008865 	.word	0x08008865
 8008828:	08008865 	.word	0x08008865
 800882c:	08008865 	.word	0x08008865
 8008830:	0800885d 	.word	0x0800885d
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883a:	e326      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e322      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e31e      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e31a      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008854:	2320      	movs	r3, #32
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e316      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800885c:	2340      	movs	r3, #64	; 0x40
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e312      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008864:	2380      	movs	r3, #128	; 0x80
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e30e      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a69      	ldr	r2, [pc, #420]	; (8008a18 <UART_SetConfig+0x33c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d130      	bne.n	80088d8 <UART_SetConfig+0x1fc>
 8008876:	4b67      	ldr	r3, [pc, #412]	; (8008a14 <UART_SetConfig+0x338>)
 8008878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	2b05      	cmp	r3, #5
 8008880:	d826      	bhi.n	80088d0 <UART_SetConfig+0x1f4>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0x1ac>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088a1 	.word	0x080088a1
 800888c:	080088a9 	.word	0x080088a9
 8008890:	080088b1 	.word	0x080088b1
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088c1 	.word	0x080088c1
 800889c:	080088c9 	.word	0x080088c9
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e2f0      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088a8:	2304      	movs	r3, #4
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e2ec      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088b0:	2308      	movs	r3, #8
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e2e8      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e2e4      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088c0:	2320      	movs	r3, #32
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e2e0      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088c8:	2340      	movs	r3, #64	; 0x40
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e2dc      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e2d8      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a4f      	ldr	r2, [pc, #316]	; (8008a1c <UART_SetConfig+0x340>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d130      	bne.n	8008944 <UART_SetConfig+0x268>
 80088e2:	4b4c      	ldr	r3, [pc, #304]	; (8008a14 <UART_SetConfig+0x338>)
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d826      	bhi.n	800893c <UART_SetConfig+0x260>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <UART_SetConfig+0x218>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008915 	.word	0x08008915
 80088fc:	0800891d 	.word	0x0800891d
 8008900:	08008925 	.word	0x08008925
 8008904:	0800892d 	.word	0x0800892d
 8008908:	08008935 	.word	0x08008935
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e2ba      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e2b6      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e2b2      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e2ae      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800892c:	2320      	movs	r3, #32
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008932:	e2aa      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008934:	2340      	movs	r3, #64	; 0x40
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e2a6      	b.n	8008e8a <UART_SetConfig+0x7ae>
 800893c:	2380      	movs	r3, #128	; 0x80
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e2a2      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a35      	ldr	r2, [pc, #212]	; (8008a20 <UART_SetConfig+0x344>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d130      	bne.n	80089b0 <UART_SetConfig+0x2d4>
 800894e:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <UART_SetConfig+0x338>)
 8008950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b05      	cmp	r3, #5
 8008958:	d826      	bhi.n	80089a8 <UART_SetConfig+0x2cc>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <UART_SetConfig+0x284>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008979 	.word	0x08008979
 8008964:	08008981 	.word	0x08008981
 8008968:	08008989 	.word	0x08008989
 800896c:	08008991 	.word	0x08008991
 8008970:	08008999 	.word	0x08008999
 8008974:	080089a1 	.word	0x080089a1
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e284      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008980:	2304      	movs	r3, #4
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e280      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008988:	2308      	movs	r3, #8
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e27c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008990:	2310      	movs	r3, #16
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e278      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008998:	2320      	movs	r3, #32
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e274      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80089a0:	2340      	movs	r3, #64	; 0x40
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e270      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80089a8:	2380      	movs	r3, #128	; 0x80
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e26c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <UART_SetConfig+0x348>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d142      	bne.n	8008a40 <UART_SetConfig+0x364>
 80089ba:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <UART_SetConfig+0x338>)
 80089bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089be:	f003 0307 	and.w	r3, r3, #7
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d838      	bhi.n	8008a38 <UART_SetConfig+0x35c>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <UART_SetConfig+0x2f0>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	080089e5 	.word	0x080089e5
 80089d0:	080089ed 	.word	0x080089ed
 80089d4:	080089f5 	.word	0x080089f5
 80089d8:	080089fd 	.word	0x080089fd
 80089dc:	08008a29 	.word	0x08008a29
 80089e0:	08008a31 	.word	0x08008a31
 80089e4:	2300      	movs	r3, #0
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e24e      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80089ec:	2304      	movs	r3, #4
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e24a      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80089f4:	2308      	movs	r3, #8
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e246      	b.n	8008e8a <UART_SetConfig+0x7ae>
 80089fc:	2310      	movs	r3, #16
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e242      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008a04:	cfff69f3 	.word	0xcfff69f3
 8008a08:	58000c00 	.word	0x58000c00
 8008a0c:	11fff4ff 	.word	0x11fff4ff
 8008a10:	40011000 	.word	0x40011000
 8008a14:	58024400 	.word	0x58024400
 8008a18:	40004400 	.word	0x40004400
 8008a1c:	40004800 	.word	0x40004800
 8008a20:	40004c00 	.word	0x40004c00
 8008a24:	40005000 	.word	0x40005000
 8008a28:	2320      	movs	r3, #32
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2e:	e22c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008a30:	2340      	movs	r3, #64	; 0x40
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a36:	e228      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008a38:	2380      	movs	r3, #128	; 0x80
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3e:	e224      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4ab1      	ldr	r2, [pc, #708]	; (8008d0c <UART_SetConfig+0x630>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d176      	bne.n	8008b38 <UART_SetConfig+0x45c>
 8008a4a:	4bb1      	ldr	r3, [pc, #708]	; (8008d10 <UART_SetConfig+0x634>)
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a52:	2b28      	cmp	r3, #40	; 0x28
 8008a54:	d86c      	bhi.n	8008b30 <UART_SetConfig+0x454>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <UART_SetConfig+0x380>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008b01 	.word	0x08008b01
 8008a60:	08008b31 	.word	0x08008b31
 8008a64:	08008b31 	.word	0x08008b31
 8008a68:	08008b31 	.word	0x08008b31
 8008a6c:	08008b31 	.word	0x08008b31
 8008a70:	08008b31 	.word	0x08008b31
 8008a74:	08008b31 	.word	0x08008b31
 8008a78:	08008b31 	.word	0x08008b31
 8008a7c:	08008b09 	.word	0x08008b09
 8008a80:	08008b31 	.word	0x08008b31
 8008a84:	08008b31 	.word	0x08008b31
 8008a88:	08008b31 	.word	0x08008b31
 8008a8c:	08008b31 	.word	0x08008b31
 8008a90:	08008b31 	.word	0x08008b31
 8008a94:	08008b31 	.word	0x08008b31
 8008a98:	08008b31 	.word	0x08008b31
 8008a9c:	08008b11 	.word	0x08008b11
 8008aa0:	08008b31 	.word	0x08008b31
 8008aa4:	08008b31 	.word	0x08008b31
 8008aa8:	08008b31 	.word	0x08008b31
 8008aac:	08008b31 	.word	0x08008b31
 8008ab0:	08008b31 	.word	0x08008b31
 8008ab4:	08008b31 	.word	0x08008b31
 8008ab8:	08008b31 	.word	0x08008b31
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008b31 	.word	0x08008b31
 8008ac4:	08008b31 	.word	0x08008b31
 8008ac8:	08008b31 	.word	0x08008b31
 8008acc:	08008b31 	.word	0x08008b31
 8008ad0:	08008b31 	.word	0x08008b31
 8008ad4:	08008b31 	.word	0x08008b31
 8008ad8:	08008b31 	.word	0x08008b31
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b31 	.word	0x08008b31
 8008ae4:	08008b31 	.word	0x08008b31
 8008ae8:	08008b31 	.word	0x08008b31
 8008aec:	08008b31 	.word	0x08008b31
 8008af0:	08008b31 	.word	0x08008b31
 8008af4:	08008b31 	.word	0x08008b31
 8008af8:	08008b31 	.word	0x08008b31
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b06:	e1c0      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b08:	2304      	movs	r3, #4
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0e:	e1bc      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b10:	2308      	movs	r3, #8
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b16:	e1b8      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1e:	e1b4      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b20:	2320      	movs	r3, #32
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b26:	e1b0      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2e:	e1ac      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b30:	2380      	movs	r3, #128	; 0x80
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e1a8      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a75      	ldr	r2, [pc, #468]	; (8008d14 <UART_SetConfig+0x638>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d130      	bne.n	8008ba4 <UART_SetConfig+0x4c8>
 8008b42:	4b73      	ldr	r3, [pc, #460]	; (8008d10 <UART_SetConfig+0x634>)
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d826      	bhi.n	8008b9c <UART_SetConfig+0x4c0>
 8008b4e:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <UART_SetConfig+0x478>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b6d 	.word	0x08008b6d
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e18a      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e186      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b82:	e182      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8a:	e17e      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b92:	e17a      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b94:	2340      	movs	r3, #64	; 0x40
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9a:	e176      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008b9c:	2380      	movs	r3, #128	; 0x80
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba2:	e172      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a5b      	ldr	r2, [pc, #364]	; (8008d18 <UART_SetConfig+0x63c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d130      	bne.n	8008c10 <UART_SetConfig+0x534>
 8008bae:	4b58      	ldr	r3, [pc, #352]	; (8008d10 <UART_SetConfig+0x634>)
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	d826      	bhi.n	8008c08 <UART_SetConfig+0x52c>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <UART_SetConfig+0x4e4>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bd9 	.word	0x08008bd9
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be9 	.word	0x08008be9
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e154      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e150      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e14c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf6:	e148      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfe:	e144      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c06:	e140      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e13c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a41      	ldr	r2, [pc, #260]	; (8008d1c <UART_SetConfig+0x640>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f040 8082 	bne.w	8008d20 <UART_SetConfig+0x644>
 8008c1c:	4b3c      	ldr	r3, [pc, #240]	; (8008d10 <UART_SetConfig+0x634>)
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c24:	2b28      	cmp	r3, #40	; 0x28
 8008c26:	d86d      	bhi.n	8008d04 <UART_SetConfig+0x628>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <UART_SetConfig+0x554>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008cd5 	.word	0x08008cd5
 8008c34:	08008d05 	.word	0x08008d05
 8008c38:	08008d05 	.word	0x08008d05
 8008c3c:	08008d05 	.word	0x08008d05
 8008c40:	08008d05 	.word	0x08008d05
 8008c44:	08008d05 	.word	0x08008d05
 8008c48:	08008d05 	.word	0x08008d05
 8008c4c:	08008d05 	.word	0x08008d05
 8008c50:	08008cdd 	.word	0x08008cdd
 8008c54:	08008d05 	.word	0x08008d05
 8008c58:	08008d05 	.word	0x08008d05
 8008c5c:	08008d05 	.word	0x08008d05
 8008c60:	08008d05 	.word	0x08008d05
 8008c64:	08008d05 	.word	0x08008d05
 8008c68:	08008d05 	.word	0x08008d05
 8008c6c:	08008d05 	.word	0x08008d05
 8008c70:	08008ce5 	.word	0x08008ce5
 8008c74:	08008d05 	.word	0x08008d05
 8008c78:	08008d05 	.word	0x08008d05
 8008c7c:	08008d05 	.word	0x08008d05
 8008c80:	08008d05 	.word	0x08008d05
 8008c84:	08008d05 	.word	0x08008d05
 8008c88:	08008d05 	.word	0x08008d05
 8008c8c:	08008d05 	.word	0x08008d05
 8008c90:	08008ced 	.word	0x08008ced
 8008c94:	08008d05 	.word	0x08008d05
 8008c98:	08008d05 	.word	0x08008d05
 8008c9c:	08008d05 	.word	0x08008d05
 8008ca0:	08008d05 	.word	0x08008d05
 8008ca4:	08008d05 	.word	0x08008d05
 8008ca8:	08008d05 	.word	0x08008d05
 8008cac:	08008d05 	.word	0x08008d05
 8008cb0:	08008cf5 	.word	0x08008cf5
 8008cb4:	08008d05 	.word	0x08008d05
 8008cb8:	08008d05 	.word	0x08008d05
 8008cbc:	08008d05 	.word	0x08008d05
 8008cc0:	08008d05 	.word	0x08008d05
 8008cc4:	08008d05 	.word	0x08008d05
 8008cc8:	08008d05 	.word	0x08008d05
 8008ccc:	08008d05 	.word	0x08008d05
 8008cd0:	08008cfd 	.word	0x08008cfd
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e0d6      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008cdc:	2304      	movs	r3, #4
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e0d2      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e0ce      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008cec:	2310      	movs	r3, #16
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf2:	e0ca      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfa:	e0c6      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d02:	e0c2      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008d04:	2380      	movs	r3, #128	; 0x80
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0a:	e0be      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008d0c:	40011400 	.word	0x40011400
 8008d10:	58024400 	.word	0x58024400
 8008d14:	40007800 	.word	0x40007800
 8008d18:	40007c00 	.word	0x40007c00
 8008d1c:	40011800 	.word	0x40011800
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4aad      	ldr	r2, [pc, #692]	; (8008fdc <UART_SetConfig+0x900>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d176      	bne.n	8008e18 <UART_SetConfig+0x73c>
 8008d2a:	4bad      	ldr	r3, [pc, #692]	; (8008fe0 <UART_SetConfig+0x904>)
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d32:	2b28      	cmp	r3, #40	; 0x28
 8008d34:	d86c      	bhi.n	8008e10 <UART_SetConfig+0x734>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <UART_SetConfig+0x660>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008de1 	.word	0x08008de1
 8008d40:	08008e11 	.word	0x08008e11
 8008d44:	08008e11 	.word	0x08008e11
 8008d48:	08008e11 	.word	0x08008e11
 8008d4c:	08008e11 	.word	0x08008e11
 8008d50:	08008e11 	.word	0x08008e11
 8008d54:	08008e11 	.word	0x08008e11
 8008d58:	08008e11 	.word	0x08008e11
 8008d5c:	08008de9 	.word	0x08008de9
 8008d60:	08008e11 	.word	0x08008e11
 8008d64:	08008e11 	.word	0x08008e11
 8008d68:	08008e11 	.word	0x08008e11
 8008d6c:	08008e11 	.word	0x08008e11
 8008d70:	08008e11 	.word	0x08008e11
 8008d74:	08008e11 	.word	0x08008e11
 8008d78:	08008e11 	.word	0x08008e11
 8008d7c:	08008df1 	.word	0x08008df1
 8008d80:	08008e11 	.word	0x08008e11
 8008d84:	08008e11 	.word	0x08008e11
 8008d88:	08008e11 	.word	0x08008e11
 8008d8c:	08008e11 	.word	0x08008e11
 8008d90:	08008e11 	.word	0x08008e11
 8008d94:	08008e11 	.word	0x08008e11
 8008d98:	08008e11 	.word	0x08008e11
 8008d9c:	08008df9 	.word	0x08008df9
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	08008e11 	.word	0x08008e11
 8008da8:	08008e11 	.word	0x08008e11
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	08008e11 	.word	0x08008e11
 8008db4:	08008e11 	.word	0x08008e11
 8008db8:	08008e11 	.word	0x08008e11
 8008dbc:	08008e01 	.word	0x08008e01
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	08008e11 	.word	0x08008e11
 8008dc8:	08008e11 	.word	0x08008e11
 8008dcc:	08008e11 	.word	0x08008e11
 8008dd0:	08008e11 	.word	0x08008e11
 8008dd4:	08008e11 	.word	0x08008e11
 8008dd8:	08008e11 	.word	0x08008e11
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de6:	e050      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e04c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e048      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e044      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e040      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e08:	2340      	movs	r3, #64	; 0x40
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e03c      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e038      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a71      	ldr	r2, [pc, #452]	; (8008fe4 <UART_SetConfig+0x908>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d130      	bne.n	8008e84 <UART_SetConfig+0x7a8>
 8008e22:	4b6f      	ldr	r3, [pc, #444]	; (8008fe0 <UART_SetConfig+0x904>)
 8008e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d826      	bhi.n	8008e7c <UART_SetConfig+0x7a0>
 8008e2e:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <UART_SetConfig+0x758>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e55 	.word	0x08008e55
 8008e3c:	08008e5d 	.word	0x08008e5d
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e52:	e01a      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e016      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e012      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e00e      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e00a      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e006      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e002      	b.n	8008e8a <UART_SetConfig+0x7ae>
 8008e84:	2380      	movs	r3, #128	; 0x80
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a55      	ldr	r2, [pc, #340]	; (8008fe4 <UART_SetConfig+0x908>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	f040 80f8 	bne.w	8009086 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	dc46      	bgt.n	8008f2c <UART_SetConfig+0x850>
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	db75      	blt.n	8008f8e <UART_SetConfig+0x8b2>
 8008ea2:	3b02      	subs	r3, #2
 8008ea4:	2b1e      	cmp	r3, #30
 8008ea6:	d872      	bhi.n	8008f8e <UART_SetConfig+0x8b2>
 8008ea8:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0x7d4>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008f33 	.word	0x08008f33
 8008eb4:	08008f8f 	.word	0x08008f8f
 8008eb8:	08008f3b 	.word	0x08008f3b
 8008ebc:	08008f8f 	.word	0x08008f8f
 8008ec0:	08008f8f 	.word	0x08008f8f
 8008ec4:	08008f8f 	.word	0x08008f8f
 8008ec8:	08008f4b 	.word	0x08008f4b
 8008ecc:	08008f8f 	.word	0x08008f8f
 8008ed0:	08008f8f 	.word	0x08008f8f
 8008ed4:	08008f8f 	.word	0x08008f8f
 8008ed8:	08008f8f 	.word	0x08008f8f
 8008edc:	08008f8f 	.word	0x08008f8f
 8008ee0:	08008f8f 	.word	0x08008f8f
 8008ee4:	08008f8f 	.word	0x08008f8f
 8008ee8:	08008f5b 	.word	0x08008f5b
 8008eec:	08008f8f 	.word	0x08008f8f
 8008ef0:	08008f8f 	.word	0x08008f8f
 8008ef4:	08008f8f 	.word	0x08008f8f
 8008ef8:	08008f8f 	.word	0x08008f8f
 8008efc:	08008f8f 	.word	0x08008f8f
 8008f00:	08008f8f 	.word	0x08008f8f
 8008f04:	08008f8f 	.word	0x08008f8f
 8008f08:	08008f8f 	.word	0x08008f8f
 8008f0c:	08008f8f 	.word	0x08008f8f
 8008f10:	08008f8f 	.word	0x08008f8f
 8008f14:	08008f8f 	.word	0x08008f8f
 8008f18:	08008f8f 	.word	0x08008f8f
 8008f1c:	08008f8f 	.word	0x08008f8f
 8008f20:	08008f8f 	.word	0x08008f8f
 8008f24:	08008f8f 	.word	0x08008f8f
 8008f28:	08008f81 	.word	0x08008f81
 8008f2c:	2b40      	cmp	r3, #64	; 0x40
 8008f2e:	d02a      	beq.n	8008f86 <UART_SetConfig+0x8aa>
 8008f30:	e02d      	b.n	8008f8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f32:	f7fd fbe7 	bl	8006704 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f38:	e02f      	b.n	8008f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fd fbf6 	bl	8006730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f48:	e027      	b.n	8008f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4a:	f107 0318 	add.w	r3, r7, #24
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fd fd42 	bl	80069d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f58:	e01f      	b.n	8008f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f5a:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <UART_SetConfig+0x904>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d009      	beq.n	8008f7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f66:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <UART_SetConfig+0x904>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	08db      	lsrs	r3, r3, #3
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	4a1d      	ldr	r2, [pc, #116]	; (8008fe8 <UART_SetConfig+0x90c>)
 8008f72:	fa22 f303 	lsr.w	r3, r2, r3
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f78:	e00f      	b.n	8008f9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <UART_SetConfig+0x90c>)
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f7e:	e00c      	b.n	8008f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f80:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <UART_SetConfig+0x910>)
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f84:	e009      	b.n	8008f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f8c:	e005      	b.n	8008f9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 81ee 	beq.w	800937e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	4a12      	ldr	r2, [pc, #72]	; (8008ff0 <UART_SetConfig+0x914>)
 8008fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fb4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	4413      	add	r3, r2
 8008fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d305      	bcc.n	8008fd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d910      	bls.n	8008ff4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fd8:	e1d1      	b.n	800937e <UART_SetConfig+0xca2>
 8008fda:	bf00      	nop
 8008fdc:	40011c00 	.word	0x40011c00
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	58000c00 	.word	0x58000c00
 8008fe8:	03d09000 	.word	0x03d09000
 8008fec:	003d0900 	.word	0x003d0900
 8008ff0:	0800d338 	.word	0x0800d338
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	60fa      	str	r2, [r7, #12]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	4ac0      	ldr	r2, [pc, #768]	; (8009304 <UART_SetConfig+0xc28>)
 8009002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009006:	b29b      	uxth	r3, r3
 8009008:	2200      	movs	r2, #0
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	607a      	str	r2, [r7, #4]
 800900e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009016:	f7f7 fb8f 	bl	8000738 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4610      	mov	r0, r2
 8009020:	4619      	mov	r1, r3
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	020b      	lsls	r3, r1, #8
 800902c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009030:	0202      	lsls	r2, r0, #8
 8009032:	6979      	ldr	r1, [r7, #20]
 8009034:	6849      	ldr	r1, [r1, #4]
 8009036:	0849      	lsrs	r1, r1, #1
 8009038:	2000      	movs	r0, #0
 800903a:	460c      	mov	r4, r1
 800903c:	4605      	mov	r5, r0
 800903e:	eb12 0804 	adds.w	r8, r2, r4
 8009042:	eb43 0905 	adc.w	r9, r3, r5
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	469a      	mov	sl, r3
 800904e:	4693      	mov	fp, r2
 8009050:	4652      	mov	r2, sl
 8009052:	465b      	mov	r3, fp
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fb6e 	bl	8000738 <__aeabi_uldivmod>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4613      	mov	r3, r2
 8009062:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800906a:	d308      	bcc.n	800907e <UART_SetConfig+0x9a2>
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009072:	d204      	bcs.n	800907e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800907a:	60da      	str	r2, [r3, #12]
 800907c:	e17f      	b.n	800937e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009084:	e17b      	b.n	800937e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800908e:	f040 80bd 	bne.w	800920c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009092:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009096:	2b20      	cmp	r3, #32
 8009098:	dc48      	bgt.n	800912c <UART_SetConfig+0xa50>
 800909a:	2b00      	cmp	r3, #0
 800909c:	db7b      	blt.n	8009196 <UART_SetConfig+0xaba>
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d879      	bhi.n	8009196 <UART_SetConfig+0xaba>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <UART_SetConfig+0x9cc>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	08009133 	.word	0x08009133
 80090ac:	0800913b 	.word	0x0800913b
 80090b0:	08009197 	.word	0x08009197
 80090b4:	08009197 	.word	0x08009197
 80090b8:	08009143 	.word	0x08009143
 80090bc:	08009197 	.word	0x08009197
 80090c0:	08009197 	.word	0x08009197
 80090c4:	08009197 	.word	0x08009197
 80090c8:	08009153 	.word	0x08009153
 80090cc:	08009197 	.word	0x08009197
 80090d0:	08009197 	.word	0x08009197
 80090d4:	08009197 	.word	0x08009197
 80090d8:	08009197 	.word	0x08009197
 80090dc:	08009197 	.word	0x08009197
 80090e0:	08009197 	.word	0x08009197
 80090e4:	08009197 	.word	0x08009197
 80090e8:	08009163 	.word	0x08009163
 80090ec:	08009197 	.word	0x08009197
 80090f0:	08009197 	.word	0x08009197
 80090f4:	08009197 	.word	0x08009197
 80090f8:	08009197 	.word	0x08009197
 80090fc:	08009197 	.word	0x08009197
 8009100:	08009197 	.word	0x08009197
 8009104:	08009197 	.word	0x08009197
 8009108:	08009197 	.word	0x08009197
 800910c:	08009197 	.word	0x08009197
 8009110:	08009197 	.word	0x08009197
 8009114:	08009197 	.word	0x08009197
 8009118:	08009197 	.word	0x08009197
 800911c:	08009197 	.word	0x08009197
 8009120:	08009197 	.word	0x08009197
 8009124:	08009197 	.word	0x08009197
 8009128:	08009189 	.word	0x08009189
 800912c:	2b40      	cmp	r3, #64	; 0x40
 800912e:	d02e      	beq.n	800918e <UART_SetConfig+0xab2>
 8009130:	e031      	b.n	8009196 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009132:	f7fc fbc1 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8009136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009138:	e033      	b.n	80091a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800913a:	f7fc fbd3 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 800913e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009140:	e02f      	b.n	80091a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd faf2 	bl	8006730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009150:	e027      	b.n	80091a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009152:	f107 0318 	add.w	r3, r7, #24
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fc3e 	bl	80069d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009160:	e01f      	b.n	80091a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009162:	4b69      	ldr	r3, [pc, #420]	; (8009308 <UART_SetConfig+0xc2c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800916e:	4b66      	ldr	r3, [pc, #408]	; (8009308 <UART_SetConfig+0xc2c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	08db      	lsrs	r3, r3, #3
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	4a64      	ldr	r2, [pc, #400]	; (800930c <UART_SetConfig+0xc30>)
 800917a:	fa22 f303 	lsr.w	r3, r2, r3
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009180:	e00f      	b.n	80091a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009182:	4b62      	ldr	r3, [pc, #392]	; (800930c <UART_SetConfig+0xc30>)
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009186:	e00c      	b.n	80091a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009188:	4b61      	ldr	r3, [pc, #388]	; (8009310 <UART_SetConfig+0xc34>)
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800918c:	e009      	b.n	80091a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800918e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009194:	e005      	b.n	80091a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80ea 	beq.w	800937e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	4a55      	ldr	r2, [pc, #340]	; (8009304 <UART_SetConfig+0xc28>)
 80091b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b4:	461a      	mov	r2, r3
 80091b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091bc:	005a      	lsls	r2, r3, #1
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	085b      	lsrs	r3, r3, #1
 80091c4:	441a      	add	r2, r3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	2b0f      	cmp	r3, #15
 80091d4:	d916      	bls.n	8009204 <UART_SetConfig+0xb28>
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091dc:	d212      	bcs.n	8009204 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f023 030f 	bic.w	r3, r3, #15
 80091e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091f6:	4313      	orrs	r3, r2
 80091f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009200:	60da      	str	r2, [r3, #12]
 8009202:	e0bc      	b.n	800937e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800920a:	e0b8      	b.n	800937e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800920c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009210:	2b20      	cmp	r3, #32
 8009212:	dc4b      	bgt.n	80092ac <UART_SetConfig+0xbd0>
 8009214:	2b00      	cmp	r3, #0
 8009216:	f2c0 8087 	blt.w	8009328 <UART_SetConfig+0xc4c>
 800921a:	2b20      	cmp	r3, #32
 800921c:	f200 8084 	bhi.w	8009328 <UART_SetConfig+0xc4c>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <UART_SetConfig+0xb4c>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	080092b3 	.word	0x080092b3
 800922c:	080092bb 	.word	0x080092bb
 8009230:	08009329 	.word	0x08009329
 8009234:	08009329 	.word	0x08009329
 8009238:	080092c3 	.word	0x080092c3
 800923c:	08009329 	.word	0x08009329
 8009240:	08009329 	.word	0x08009329
 8009244:	08009329 	.word	0x08009329
 8009248:	080092d3 	.word	0x080092d3
 800924c:	08009329 	.word	0x08009329
 8009250:	08009329 	.word	0x08009329
 8009254:	08009329 	.word	0x08009329
 8009258:	08009329 	.word	0x08009329
 800925c:	08009329 	.word	0x08009329
 8009260:	08009329 	.word	0x08009329
 8009264:	08009329 	.word	0x08009329
 8009268:	080092e3 	.word	0x080092e3
 800926c:	08009329 	.word	0x08009329
 8009270:	08009329 	.word	0x08009329
 8009274:	08009329 	.word	0x08009329
 8009278:	08009329 	.word	0x08009329
 800927c:	08009329 	.word	0x08009329
 8009280:	08009329 	.word	0x08009329
 8009284:	08009329 	.word	0x08009329
 8009288:	08009329 	.word	0x08009329
 800928c:	08009329 	.word	0x08009329
 8009290:	08009329 	.word	0x08009329
 8009294:	08009329 	.word	0x08009329
 8009298:	08009329 	.word	0x08009329
 800929c:	08009329 	.word	0x08009329
 80092a0:	08009329 	.word	0x08009329
 80092a4:	08009329 	.word	0x08009329
 80092a8:	0800931b 	.word	0x0800931b
 80092ac:	2b40      	cmp	r3, #64	; 0x40
 80092ae:	d037      	beq.n	8009320 <UART_SetConfig+0xc44>
 80092b0:	e03a      	b.n	8009328 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b2:	f7fc fb01 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 80092b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092b8:	e03c      	b.n	8009334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092ba:	f7fc fb13 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 80092be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092c0:	e038      	b.n	8009334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fd fa32 	bl	8006730 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d0:	e030      	b.n	8009334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d2:	f107 0318 	add.w	r3, r7, #24
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fd fb7e 	bl	80069d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e0:	e028      	b.n	8009334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <UART_SetConfig+0xc2c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d012      	beq.n	8009314 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <UART_SetConfig+0xc2c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	08db      	lsrs	r3, r3, #3
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	4a04      	ldr	r2, [pc, #16]	; (800930c <UART_SetConfig+0xc30>)
 80092fa:	fa22 f303 	lsr.w	r3, r2, r3
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009300:	e018      	b.n	8009334 <UART_SetConfig+0xc58>
 8009302:	bf00      	nop
 8009304:	0800d338 	.word	0x0800d338
 8009308:	58024400 	.word	0x58024400
 800930c:	03d09000 	.word	0x03d09000
 8009310:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009314:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <UART_SetConfig+0xccc>)
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009318:	e00c      	b.n	8009334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800931a:	4b24      	ldr	r3, [pc, #144]	; (80093ac <UART_SetConfig+0xcd0>)
 800931c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800931e:	e009      	b.n	8009334 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009326:	e005      	b.n	8009334 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009332:	bf00      	nop
    }

    if (pclk != 0U)
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d021      	beq.n	800937e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	4a1c      	ldr	r2, [pc, #112]	; (80093b0 <UART_SetConfig+0xcd4>)
 8009340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009344:	461a      	mov	r2, r3
 8009346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009348:	fbb3 f2f2 	udiv	r2, r3, r2
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	085b      	lsrs	r3, r3, #1
 8009352:	441a      	add	r2, r3
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	fbb2 f3f3 	udiv	r3, r2, r3
 800935c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	2b0f      	cmp	r3, #15
 8009362:	d909      	bls.n	8009378 <UART_SetConfig+0xc9c>
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800936a:	d205      	bcs.n	8009378 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	b29a      	uxth	r2, r3
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60da      	str	r2, [r3, #12]
 8009376:	e002      	b.n	800937e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2201      	movs	r2, #1
 8009382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2201      	movs	r2, #1
 800938a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2200      	movs	r2, #0
 8009392:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2200      	movs	r2, #0
 8009398:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800939a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3748      	adds	r7, #72	; 0x48
 80093a2:	46bd      	mov	sp, r7
 80093a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093a8:	03d09000 	.word	0x03d09000
 80093ac:	003d0900 	.word	0x003d0900
 80093b0:	0800d338 	.word	0x0800d338

080093b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01a      	beq.n	80094ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b2:	d10a      	bne.n	80094ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009508:	f7f8 fd4e 	bl	8001fa8 <HAL_GetTick>
 800950c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b08      	cmp	r3, #8
 800951a:	d10e      	bne.n	800953a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800951c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f82f 	bl	800958e <UART_WaitOnFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e025      	b.n	8009586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b04      	cmp	r3, #4
 8009546:	d10e      	bne.n	8009566 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f819 	bl	800958e <UART_WaitOnFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e00f      	b.n	8009586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b09c      	sub	sp, #112	; 0x70
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959e:	e0a9      	b.n	80096f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a6:	f000 80a5 	beq.w	80096f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095aa:	f7f8 fcfd 	bl	8001fa8 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d302      	bcc.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80095ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d140      	bne.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095d4:	667b      	str	r3, [r7, #100]	; 0x64
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	663b      	str	r3, [r7, #96]	; 0x60
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009612:	64ba      	str	r2, [r7, #72]	; 0x48
 8009614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2220      	movs	r2, #32
 8009632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e069      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d051      	beq.n	80096f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800965a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965e:	d149      	bne.n	80096f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009668:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800967e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009688:	637b      	str	r3, [r7, #52]	; 0x34
 800968a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800968e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e6      	bne.n	800966a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3308      	adds	r3, #8
 80096a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	613b      	str	r3, [r7, #16]
   return(result);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f023 0301 	bic.w	r3, r3, #1
 80096b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3308      	adds	r3, #8
 80096ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096bc:	623a      	str	r2, [r7, #32]
 80096be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	69f9      	ldr	r1, [r7, #28]
 80096c2:	6a3a      	ldr	r2, [r7, #32]
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e5      	bne.n	800969c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e010      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69da      	ldr	r2, [r3, #28]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4013      	ands	r3, r2
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	429a      	cmp	r2, r3
 8009702:	bf0c      	ite	eq
 8009704:	2301      	moveq	r3, #1
 8009706:	2300      	movne	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	461a      	mov	r2, r3
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	429a      	cmp	r2, r3
 8009710:	f43f af46 	beq.w	80095a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3770      	adds	r7, #112	; 0x70
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009720:	b480      	push	{r7}
 8009722:	b0a3      	sub	sp, #140	; 0x8c
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	88fa      	ldrh	r2, [r7, #6]
 8009738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	88fa      	ldrh	r2, [r7, #6]
 8009740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009752:	d10e      	bne.n	8009772 <UART_Start_Receive_IT+0x52>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d105      	bne.n	8009768 <UART_Start_Receive_IT+0x48>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009762:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009766:	e02d      	b.n	80097c4 <UART_Start_Receive_IT+0xa4>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	22ff      	movs	r2, #255	; 0xff
 800976c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009770:	e028      	b.n	80097c4 <UART_Start_Receive_IT+0xa4>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10d      	bne.n	8009796 <UART_Start_Receive_IT+0x76>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d104      	bne.n	800978c <UART_Start_Receive_IT+0x6c>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	22ff      	movs	r2, #255	; 0xff
 8009786:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800978a:	e01b      	b.n	80097c4 <UART_Start_Receive_IT+0xa4>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	227f      	movs	r2, #127	; 0x7f
 8009790:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009794:	e016      	b.n	80097c4 <UART_Start_Receive_IT+0xa4>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800979e:	d10d      	bne.n	80097bc <UART_Start_Receive_IT+0x9c>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <UART_Start_Receive_IT+0x92>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	227f      	movs	r2, #127	; 0x7f
 80097ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097b0:	e008      	b.n	80097c4 <UART_Start_Receive_IT+0xa4>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	223f      	movs	r2, #63	; 0x3f
 80097b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097ba:	e003      	b.n	80097c4 <UART_Start_Receive_IT+0xa4>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2222      	movs	r2, #34	; 0x22
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3308      	adds	r3, #8
 80097da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80097e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80097f8:	673a      	str	r2, [r7, #112]	; 0x70
 80097fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80097fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e3      	bne.n	80097d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009814:	d153      	bne.n	80098be <UART_Start_Receive_IT+0x19e>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800981c:	88fa      	ldrh	r2, [r7, #6]
 800981e:	429a      	cmp	r2, r3
 8009820:	d34d      	bcc.n	80098be <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800982a:	d107      	bne.n	800983c <UART_Start_Receive_IT+0x11c>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4a4b      	ldr	r2, [pc, #300]	; (8009964 <UART_Start_Receive_IT+0x244>)
 8009838:	671a      	str	r2, [r3, #112]	; 0x70
 800983a:	e002      	b.n	8009842 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4a4a      	ldr	r2, [pc, #296]	; (8009968 <UART_Start_Receive_IT+0x248>)
 8009840:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01a      	beq.n	8009888 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800985a:	e853 3f00 	ldrex	r3, [r3]
 800985e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009876:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800987a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e4      	bne.n	8009852 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800989e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3308      	adds	r3, #8
 80098a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80098aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80098b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e5      	bne.n	8009888 <UART_Start_Receive_IT+0x168>
 80098bc:	e04a      	b.n	8009954 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c6:	d107      	bne.n	80098d8 <UART_Start_Receive_IT+0x1b8>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d103      	bne.n	80098d8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a26      	ldr	r2, [pc, #152]	; (800996c <UART_Start_Receive_IT+0x24c>)
 80098d4:	671a      	str	r2, [r3, #112]	; 0x70
 80098d6:	e002      	b.n	80098de <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a25      	ldr	r2, [pc, #148]	; (8009970 <UART_Start_Receive_IT+0x250>)
 80098dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d019      	beq.n	8009922 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	e853 3f00 	ldrex	r3, [r3]
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009902:	677b      	str	r3, [r7, #116]	; 0x74
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800990c:	637b      	str	r3, [r7, #52]	; 0x34
 800990e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e6      	bne.n	80098ee <UART_Start_Receive_IT+0x1ce>
 8009920:	e018      	b.n	8009954 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	613b      	str	r3, [r7, #16]
   return(result);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f043 0320 	orr.w	r3, r3, #32
 8009936:	67bb      	str	r3, [r7, #120]	; 0x78
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009940:	623b      	str	r3, [r7, #32]
 8009942:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	69f9      	ldr	r1, [r7, #28]
 8009946:	6a3a      	ldr	r2, [r7, #32]
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	61bb      	str	r3, [r7, #24]
   return(result);
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e6      	bne.n	8009922 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	378c      	adds	r7, #140	; 0x8c
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	0800a07d 	.word	0x0800a07d
 8009968:	08009d85 	.word	0x08009d85
 800996c:	08009c23 	.word	0x08009c23
 8009970:	08009ac3 	.word	0x08009ac3

08009974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b095      	sub	sp, #84	; 0x54
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800999a:	643b      	str	r3, [r7, #64]	; 0x40
 800999c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e6      	bne.n	800997c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <UART_EndRxTransfer+0xc8>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3308      	adds	r3, #8
 80099cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e5      	bne.n	80099ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d118      	bne.n	8009a1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f023 0310 	bic.w	r3, r3, #16
 80099fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	6979      	ldr	r1, [r7, #20]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	613b      	str	r3, [r7, #16]
   return(result);
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e6      	bne.n	80099ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009a30:	bf00      	nop
 8009a32:	3754      	adds	r7, #84	; 0x54
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	effffffe 	.word	0xeffffffe

08009a40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7fe fe26 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a64:	bf00      	nop
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6979      	ldr	r1, [r7, #20]
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e6      	bne.n	8009a74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7fe fdf1 	bl	800869c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aba:	bf00      	nop
 8009abc:	3720      	adds	r7, #32
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b096      	sub	sp, #88	; 0x58
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ad0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ada:	2b22      	cmp	r3, #34	; 0x22
 8009adc:	f040 8095 	bne.w	8009c0a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009aea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009aee:	b2d9      	uxtb	r1, r3
 8009af0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afa:	400a      	ands	r2, r1
 8009afc:	b2d2      	uxtb	r2, r2
 8009afe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d178      	bne.n	8009c1a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b3c:	653b      	str	r3, [r7, #80]	; 0x50
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b46:	647b      	str	r3, [r7, #68]	; 0x44
 8009b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b4e:	e841 2300 	strex	r3, r2, [r1]
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1e6      	bne.n	8009b28 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3308      	adds	r3, #8
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	623b      	str	r3, [r7, #32]
   return(result);
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	f023 0301 	bic.w	r3, r3, #1
 8009b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3308      	adds	r3, #8
 8009b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e5      	bne.n	8009b5a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d12e      	bne.n	8009c02 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f023 0310 	bic.w	r3, r3, #16
 8009bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bc8:	61fb      	str	r3, [r7, #28]
 8009bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	69b9      	ldr	r1, [r7, #24]
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e6      	bne.n	8009baa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f003 0310 	and.w	r3, r3, #16
 8009be6:	2b10      	cmp	r3, #16
 8009be8:	d103      	bne.n	8009bf2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2210      	movs	r2, #16
 8009bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7fe fd62 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c00:	e00b      	b.n	8009c1a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7f7 fb18 	bl	8001238 <HAL_UART_RxCpltCallback>
}
 8009c08:	e007      	b.n	8009c1a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699a      	ldr	r2, [r3, #24]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f042 0208 	orr.w	r2, r2, #8
 8009c18:	619a      	str	r2, [r3, #24]
}
 8009c1a:	bf00      	nop
 8009c1c:	3758      	adds	r7, #88	; 0x58
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b096      	sub	sp, #88	; 0x58
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3a:	2b22      	cmp	r3, #34	; 0x22
 8009c3c:	f040 8095 	bne.w	8009d6a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c50:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009c54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c58:	4013      	ands	r3, r2
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	1c9a      	adds	r2, r3, #2
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d178      	bne.n	8009d7a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e6      	bne.n	8009c88 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e5      	bne.n	8009cba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d12e      	bne.n	8009d62 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e853 3f00 	ldrex	r3, [r3]
 8009d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f023 0310 	bic.w	r3, r3, #16
 8009d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d28:	61bb      	str	r3, [r7, #24]
 8009d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2c:	6979      	ldr	r1, [r7, #20]
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	e841 2300 	strex	r3, r2, [r1]
 8009d34:	613b      	str	r3, [r7, #16]
   return(result);
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e6      	bne.n	8009d0a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d103      	bne.n	8009d52 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2210      	movs	r2, #16
 8009d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fe fcb2 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d60:	e00b      	b.n	8009d7a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7f7 fa68 	bl	8001238 <HAL_UART_RxCpltCallback>
}
 8009d68:	e007      	b.n	8009d7a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	699a      	ldr	r2, [r3, #24]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f042 0208 	orr.w	r2, r2, #8
 8009d78:	619a      	str	r2, [r3, #24]
}
 8009d7a:	bf00      	nop
 8009d7c:	3758      	adds	r7, #88	; 0x58
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b0a6      	sub	sp, #152	; 0x98
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dba:	2b22      	cmp	r3, #34	; 0x22
 8009dbc:	f040 814d 	bne.w	800a05a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009dc6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dca:	e0f4      	b.n	8009fb6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dd6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009dda:	b2d9      	uxtb	r1, r3
 8009ddc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de6:	400a      	ands	r2, r1
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d053      	beq.n	8009ec6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8009e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00b      	beq.n	8009e4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e44:	f043 0201 	orr.w	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d011      	beq.n	8009e7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e74:	f043 0204 	orr.w	r2, r3, #4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2204      	movs	r2, #4
 8009e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea4:	f043 0202 	orr.w	r2, r3, #2
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fe fbf9 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d171      	bne.n	8009fb6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ef6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009efa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e4      	bne.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f1a:	4b56      	ldr	r3, [pc, #344]	; (800a074 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3308      	adds	r3, #8
 8009f26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f28:	657a      	str	r2, [r7, #84]	; 0x54
 8009f2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e5      	bne.n	8009f08 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d12e      	bne.n	8009fb0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	f023 0310 	bic.w	r3, r3, #16
 8009f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f76:	643b      	str	r3, [r7, #64]	; 0x40
 8009f78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e6      	bne.n	8009f58 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	2b10      	cmp	r3, #16
 8009f96:	d103      	bne.n	8009fa0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2210      	movs	r2, #16
 8009f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7fe fb8b 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
 8009fae:	e002      	b.n	8009fb6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7f7 f941 	bl	8001238 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d006      	beq.n	8009fcc <UART_RxISR_8BIT_FIFOEN+0x248>
 8009fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f47f af00 	bne.w	8009dcc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fd6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d045      	beq.n	800a06a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fe4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d23e      	bcs.n	800a06a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	e853 3f00 	ldrex	r3, [r3]
 8009ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a002:	673b      	str	r3, [r7, #112]	; 0x70
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3308      	adds	r3, #8
 800a00a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a00c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a014:	e841 2300 	strex	r3, r2, [r1]
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1e5      	bne.n	8009fec <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a15      	ldr	r2, [pc, #84]	; (800a078 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a024:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	60bb      	str	r3, [r7, #8]
   return(result);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f043 0320 	orr.w	r3, r3, #32
 800a03a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6979      	ldr	r1, [r7, #20]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	613b      	str	r3, [r7, #16]
   return(result);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e6      	bne.n	800a026 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a058:	e007      	b.n	800a06a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	699a      	ldr	r2, [r3, #24]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f042 0208 	orr.w	r2, r2, #8
 800a068:	619a      	str	r2, [r3, #24]
}
 800a06a:	bf00      	nop
 800a06c:	3798      	adds	r7, #152	; 0x98
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	effffffe 	.word	0xeffffffe
 800a078:	08009ac3 	.word	0x08009ac3

0800a07c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b0a8      	sub	sp, #160	; 0xa0
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a08a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b2:	2b22      	cmp	r3, #34	; 0x22
 800a0b4:	f040 8151 	bne.w	800a35a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0c2:	e0f8      	b.n	800a2b6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a0da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a0de:	4013      	ands	r3, r2
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ec:	1c9a      	adds	r2, r3, #2
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a10e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	2b00      	cmp	r3, #0
 800a118:	d053      	beq.n	800a1c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a11a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d011      	beq.n	800a14a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00b      	beq.n	800a14a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2201      	movs	r2, #1
 800a138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a140:	f043 0201 	orr.w	r2, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a14a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d011      	beq.n	800a17a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2202      	movs	r2, #2
 800a168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a170:	f043 0204 	orr.w	r2, r3, #4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a17a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a17e:	f003 0304 	and.w	r3, r3, #4
 800a182:	2b00      	cmp	r3, #0
 800a184:	d011      	beq.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00b      	beq.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2204      	movs	r2, #4
 800a198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1a0:	f043 0202 	orr.w	r2, r3, #2
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d006      	beq.n	800a1c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7fe fa7b 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d173      	bne.n	800a2b6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d6:	e853 3f00 	ldrex	r3, [r3]
 800a1da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e4      	bne.n	800a1ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3308      	adds	r3, #8
 800a20a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a216:	4b57      	ldr	r3, [pc, #348]	; (800a374 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a218:	4013      	ands	r3, r2
 800a21a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3308      	adds	r3, #8
 800a224:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a228:	65ba      	str	r2, [r7, #88]	; 0x58
 800a22a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a22e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e3      	bne.n	800a204 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2220      	movs	r2, #32
 800a240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d12e      	bne.n	800a2b0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a268:	f023 0310 	bic.w	r3, r3, #16
 800a26c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a276:	647b      	str	r3, [r7, #68]	; 0x44
 800a278:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a27c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e6      	bne.n	800a258 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	f003 0310 	and.w	r3, r3, #16
 800a294:	2b10      	cmp	r3, #16
 800a296:	d103      	bne.n	800a2a0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2210      	movs	r2, #16
 800a29e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7fe fa0b 	bl	80086c4 <HAL_UARTEx_RxEventCallback>
 800a2ae:	e002      	b.n	800a2b6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7f6 ffc1 	bl	8001238 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <UART_RxISR_16BIT_FIFOEN+0x250>
 800a2be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f47f aefc 	bne.w	800a0c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2d2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d045      	beq.n	800a36a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a2e4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d23e      	bcs.n	800a36a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a302:	677b      	str	r3, [r7, #116]	; 0x74
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a30c:	633a      	str	r2, [r7, #48]	; 0x30
 800a30e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e5      	bne.n	800a2ec <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a15      	ldr	r2, [pc, #84]	; (800a378 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a324:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	e853 3f00 	ldrex	r3, [r3]
 800a332:	60fb      	str	r3, [r7, #12]
   return(result);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f043 0320 	orr.w	r3, r3, #32
 800a33a:	673b      	str	r3, [r7, #112]	; 0x70
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a344:	61fb      	str	r3, [r7, #28]
 800a346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	69b9      	ldr	r1, [r7, #24]
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	e841 2300 	strex	r3, r2, [r1]
 800a350:	617b      	str	r3, [r7, #20]
   return(result);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e6      	bne.n	800a326 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a358:	e007      	b.n	800a36a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	699a      	ldr	r2, [r3, #24]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0208 	orr.w	r2, r2, #8
 800a368:	619a      	str	r2, [r3, #24]
}
 800a36a:	bf00      	nop
 800a36c:	37a0      	adds	r7, #160	; 0xa0
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	effffffe 	.word	0xeffffffe
 800a378:	08009c23 	.word	0x08009c23

0800a37c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d101      	bne.n	800a3ce <HAL_UARTEx_DisableFifoMode+0x16>
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	e027      	b.n	800a41e <HAL_UARTEx_DisableFifoMode+0x66>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2224      	movs	r2, #36	; 0x24
 800a3da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0201 	bic.w	r2, r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2220      	movs	r2, #32
 800a410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a43e:	2302      	movs	r3, #2
 800a440:	e02d      	b.n	800a49e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2224      	movs	r2, #36	; 0x24
 800a44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f850 	bl	800a524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	e02d      	b.n	800a51a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2224      	movs	r2, #36	; 0x24
 800a4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 0201 	bic.w	r2, r2, #1
 800a4e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f812 	bl	800a524 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a530:	2b00      	cmp	r3, #0
 800a532:	d108      	bne.n	800a546 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a544:	e031      	b.n	800a5aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a546:	2310      	movs	r3, #16
 800a548:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a54a:	2310      	movs	r3, #16
 800a54c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	0e5b      	lsrs	r3, r3, #25
 800a556:	b2db      	uxtb	r3, r3
 800a558:	f003 0307 	and.w	r3, r3, #7
 800a55c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	0f5b      	lsrs	r3, r3, #29
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0307 	and.w	r3, r3, #7
 800a56c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	7b3a      	ldrb	r2, [r7, #12]
 800a572:	4911      	ldr	r1, [pc, #68]	; (800a5b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a574:	5c8a      	ldrb	r2, [r1, r2]
 800a576:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a57a:	7b3a      	ldrb	r2, [r7, #12]
 800a57c:	490f      	ldr	r1, [pc, #60]	; (800a5bc <UARTEx_SetNbDataToProcess+0x98>)
 800a57e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a580:	fb93 f3f2 	sdiv	r3, r3, r2
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	7b7a      	ldrb	r2, [r7, #13]
 800a590:	4909      	ldr	r1, [pc, #36]	; (800a5b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a592:	5c8a      	ldrb	r2, [r1, r2]
 800a594:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a598:	7b7a      	ldrb	r2, [r7, #13]
 800a59a:	4908      	ldr	r1, [pc, #32]	; (800a5bc <UARTEx_SetNbDataToProcess+0x98>)
 800a59c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a59e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	0800d350 	.word	0x0800d350
 800a5bc:	0800d358 	.word	0x0800d358

0800a5c0 <atof>:
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	f000 be03 	b.w	800b1cc <strtod>
	...

0800a5c8 <__errno>:
 800a5c8:	4b01      	ldr	r3, [pc, #4]	; (800a5d0 <__errno+0x8>)
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	24000014 	.word	0x24000014

0800a5d4 <__libc_init_array>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	4d0d      	ldr	r5, [pc, #52]	; (800a60c <__libc_init_array+0x38>)
 800a5d8:	4c0d      	ldr	r4, [pc, #52]	; (800a610 <__libc_init_array+0x3c>)
 800a5da:	1b64      	subs	r4, r4, r5
 800a5dc:	10a4      	asrs	r4, r4, #2
 800a5de:	2600      	movs	r6, #0
 800a5e0:	42a6      	cmp	r6, r4
 800a5e2:	d109      	bne.n	800a5f8 <__libc_init_array+0x24>
 800a5e4:	4d0b      	ldr	r5, [pc, #44]	; (800a614 <__libc_init_array+0x40>)
 800a5e6:	4c0c      	ldr	r4, [pc, #48]	; (800a618 <__libc_init_array+0x44>)
 800a5e8:	f002 fe86 	bl	800d2f8 <_init>
 800a5ec:	1b64      	subs	r4, r4, r5
 800a5ee:	10a4      	asrs	r4, r4, #2
 800a5f0:	2600      	movs	r6, #0
 800a5f2:	42a6      	cmp	r6, r4
 800a5f4:	d105      	bne.n	800a602 <__libc_init_array+0x2e>
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5fc:	4798      	blx	r3
 800a5fe:	3601      	adds	r6, #1
 800a600:	e7ee      	b.n	800a5e0 <__libc_init_array+0xc>
 800a602:	f855 3b04 	ldr.w	r3, [r5], #4
 800a606:	4798      	blx	r3
 800a608:	3601      	adds	r6, #1
 800a60a:	e7f2      	b.n	800a5f2 <__libc_init_array+0x1e>
 800a60c:	0800d794 	.word	0x0800d794
 800a610:	0800d794 	.word	0x0800d794
 800a614:	0800d794 	.word	0x0800d794
 800a618:	0800d798 	.word	0x0800d798

0800a61c <memset>:
 800a61c:	4402      	add	r2, r0
 800a61e:	4603      	mov	r3, r0
 800a620:	4293      	cmp	r3, r2
 800a622:	d100      	bne.n	800a626 <memset+0xa>
 800a624:	4770      	bx	lr
 800a626:	f803 1b01 	strb.w	r1, [r3], #1
 800a62a:	e7f9      	b.n	800a620 <memset+0x4>

0800a62c <sulp>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	4604      	mov	r4, r0
 800a630:	460d      	mov	r5, r1
 800a632:	4616      	mov	r6, r2
 800a634:	ec45 4b10 	vmov	d0, r4, r5
 800a638:	f001 fcd6 	bl	800bfe8 <__ulp>
 800a63c:	b17e      	cbz	r6, 800a65e <sulp+0x32>
 800a63e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a642:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a646:	2b00      	cmp	r3, #0
 800a648:	dd09      	ble.n	800a65e <sulp+0x32>
 800a64a:	051b      	lsls	r3, r3, #20
 800a64c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a650:	2000      	movs	r0, #0
 800a652:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a656:	ec41 0b17 	vmov	d7, r0, r1
 800a65a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a65e:	bd70      	pop	{r4, r5, r6, pc}

0800a660 <_strtod_l>:
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	ed2d 8b0e 	vpush	{d8-d14}
 800a668:	b097      	sub	sp, #92	; 0x5c
 800a66a:	461f      	mov	r7, r3
 800a66c:	2300      	movs	r3, #0
 800a66e:	9312      	str	r3, [sp, #72]	; 0x48
 800a670:	4ba1      	ldr	r3, [pc, #644]	; (800a8f8 <_strtod_l+0x298>)
 800a672:	920d      	str	r2, [sp, #52]	; 0x34
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	9307      	str	r3, [sp, #28]
 800a678:	4604      	mov	r4, r0
 800a67a:	4618      	mov	r0, r3
 800a67c:	468b      	mov	fp, r1
 800a67e:	f7f5 fe47 	bl	8000310 <strlen>
 800a682:	f04f 0800 	mov.w	r8, #0
 800a686:	4605      	mov	r5, r0
 800a688:	f04f 0900 	mov.w	r9, #0
 800a68c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a690:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a692:	7813      	ldrb	r3, [r2, #0]
 800a694:	2b2b      	cmp	r3, #43	; 0x2b
 800a696:	d04d      	beq.n	800a734 <_strtod_l+0xd4>
 800a698:	d83a      	bhi.n	800a710 <_strtod_l+0xb0>
 800a69a:	2b0d      	cmp	r3, #13
 800a69c:	d833      	bhi.n	800a706 <_strtod_l+0xa6>
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d833      	bhi.n	800a70a <_strtod_l+0xaa>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d03d      	beq.n	800a722 <_strtod_l+0xc2>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9308      	str	r3, [sp, #32]
 800a6aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a6ac:	7833      	ldrb	r3, [r6, #0]
 800a6ae:	2b30      	cmp	r3, #48	; 0x30
 800a6b0:	f040 80b0 	bne.w	800a814 <_strtod_l+0x1b4>
 800a6b4:	7873      	ldrb	r3, [r6, #1]
 800a6b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6ba:	2b58      	cmp	r3, #88	; 0x58
 800a6bc:	d167      	bne.n	800a78e <_strtod_l+0x12e>
 800a6be:	9b08      	ldr	r3, [sp, #32]
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	ab12      	add	r3, sp, #72	; 0x48
 800a6c4:	9702      	str	r7, [sp, #8]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	4a8c      	ldr	r2, [pc, #560]	; (800a8fc <_strtod_l+0x29c>)
 800a6ca:	ab13      	add	r3, sp, #76	; 0x4c
 800a6cc:	a911      	add	r1, sp, #68	; 0x44
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 fdf0 	bl	800b2b4 <__gethex>
 800a6d4:	f010 0507 	ands.w	r5, r0, #7
 800a6d8:	4607      	mov	r7, r0
 800a6da:	d005      	beq.n	800a6e8 <_strtod_l+0x88>
 800a6dc:	2d06      	cmp	r5, #6
 800a6de:	d12b      	bne.n	800a738 <_strtod_l+0xd8>
 800a6e0:	3601      	adds	r6, #1
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9611      	str	r6, [sp, #68]	; 0x44
 800a6e6:	9308      	str	r3, [sp, #32]
 800a6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f040 854e 	bne.w	800b18c <_strtod_l+0xb2c>
 800a6f0:	9b08      	ldr	r3, [sp, #32]
 800a6f2:	b1e3      	cbz	r3, 800a72e <_strtod_l+0xce>
 800a6f4:	ec49 8b17 	vmov	d7, r8, r9
 800a6f8:	eeb1 0b47 	vneg.f64	d0, d7
 800a6fc:	b017      	add	sp, #92	; 0x5c
 800a6fe:	ecbd 8b0e 	vpop	{d8-d14}
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	2b20      	cmp	r3, #32
 800a708:	d1cd      	bne.n	800a6a6 <_strtod_l+0x46>
 800a70a:	3201      	adds	r2, #1
 800a70c:	9211      	str	r2, [sp, #68]	; 0x44
 800a70e:	e7bf      	b.n	800a690 <_strtod_l+0x30>
 800a710:	2b2d      	cmp	r3, #45	; 0x2d
 800a712:	d1c8      	bne.n	800a6a6 <_strtod_l+0x46>
 800a714:	2301      	movs	r3, #1
 800a716:	9308      	str	r3, [sp, #32]
 800a718:	1c53      	adds	r3, r2, #1
 800a71a:	9311      	str	r3, [sp, #68]	; 0x44
 800a71c:	7853      	ldrb	r3, [r2, #1]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1c3      	bne.n	800a6aa <_strtod_l+0x4a>
 800a722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a724:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f040 852d 	bne.w	800b188 <_strtod_l+0xb28>
 800a72e:	ec49 8b10 	vmov	d0, r8, r9
 800a732:	e7e3      	b.n	800a6fc <_strtod_l+0x9c>
 800a734:	2300      	movs	r3, #0
 800a736:	e7ee      	b.n	800a716 <_strtod_l+0xb6>
 800a738:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a73a:	b13a      	cbz	r2, 800a74c <_strtod_l+0xec>
 800a73c:	2135      	movs	r1, #53	; 0x35
 800a73e:	a814      	add	r0, sp, #80	; 0x50
 800a740:	f001 fd5a 	bl	800c1f8 <__copybits>
 800a744:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a746:	4620      	mov	r0, r4
 800a748:	f001 f91c 	bl	800b984 <_Bfree>
 800a74c:	3d01      	subs	r5, #1
 800a74e:	2d04      	cmp	r5, #4
 800a750:	d806      	bhi.n	800a760 <_strtod_l+0x100>
 800a752:	e8df f005 	tbb	[pc, r5]
 800a756:	030a      	.short	0x030a
 800a758:	1714      	.short	0x1714
 800a75a:	0a          	.byte	0x0a
 800a75b:	00          	.byte	0x00
 800a75c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a760:	073f      	lsls	r7, r7, #28
 800a762:	d5c1      	bpl.n	800a6e8 <_strtod_l+0x88>
 800a764:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a768:	e7be      	b.n	800a6e8 <_strtod_l+0x88>
 800a76a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a76e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a770:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a774:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a778:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a77c:	e7f0      	b.n	800a760 <_strtod_l+0x100>
 800a77e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800a900 <_strtod_l+0x2a0>
 800a782:	e7ed      	b.n	800a760 <_strtod_l+0x100>
 800a784:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a788:	f04f 38ff 	mov.w	r8, #4294967295
 800a78c:	e7e8      	b.n	800a760 <_strtod_l+0x100>
 800a78e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	9211      	str	r2, [sp, #68]	; 0x44
 800a794:	785b      	ldrb	r3, [r3, #1]
 800a796:	2b30      	cmp	r3, #48	; 0x30
 800a798:	d0f9      	beq.n	800a78e <_strtod_l+0x12e>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0a4      	beq.n	800a6e8 <_strtod_l+0x88>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	f04f 0a00 	mov.w	sl, #0
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a7ae:	f8cd a018 	str.w	sl, [sp, #24]
 800a7b2:	220a      	movs	r2, #10
 800a7b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a7b6:	7807      	ldrb	r7, [r0, #0]
 800a7b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a7bc:	b2d9      	uxtb	r1, r3
 800a7be:	2909      	cmp	r1, #9
 800a7c0:	d92a      	bls.n	800a818 <_strtod_l+0x1b8>
 800a7c2:	9907      	ldr	r1, [sp, #28]
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	f001 fe1f 	bl	800c408 <strncmp>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d033      	beq.n	800a836 <_strtod_l+0x1d6>
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	463a      	mov	r2, r7
 800a7d4:	4601      	mov	r1, r0
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	2a65      	cmp	r2, #101	; 0x65
 800a7da:	d001      	beq.n	800a7e0 <_strtod_l+0x180>
 800a7dc:	2a45      	cmp	r2, #69	; 0x45
 800a7de:	d117      	bne.n	800a810 <_strtod_l+0x1b0>
 800a7e0:	b91b      	cbnz	r3, 800a7ea <_strtod_l+0x18a>
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	4303      	orrs	r3, r0
 800a7e6:	d09c      	beq.n	800a722 <_strtod_l+0xc2>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a7ee:	f10b 0201 	add.w	r2, fp, #1
 800a7f2:	9211      	str	r2, [sp, #68]	; 0x44
 800a7f4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a7f8:	2a2b      	cmp	r2, #43	; 0x2b
 800a7fa:	d071      	beq.n	800a8e0 <_strtod_l+0x280>
 800a7fc:	2a2d      	cmp	r2, #45	; 0x2d
 800a7fe:	d077      	beq.n	800a8f0 <_strtod_l+0x290>
 800a800:	f04f 0e00 	mov.w	lr, #0
 800a804:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a808:	2d09      	cmp	r5, #9
 800a80a:	d97f      	bls.n	800a90c <_strtod_l+0x2ac>
 800a80c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a810:	2500      	movs	r5, #0
 800a812:	e09b      	b.n	800a94c <_strtod_l+0x2ec>
 800a814:	2300      	movs	r3, #0
 800a816:	e7c3      	b.n	800a7a0 <_strtod_l+0x140>
 800a818:	9906      	ldr	r1, [sp, #24]
 800a81a:	2908      	cmp	r1, #8
 800a81c:	bfdd      	ittte	le
 800a81e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a820:	fb02 3301 	mlale	r3, r2, r1, r3
 800a824:	9309      	strle	r3, [sp, #36]	; 0x24
 800a826:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a82a:	9b06      	ldr	r3, [sp, #24]
 800a82c:	3001      	adds	r0, #1
 800a82e:	3301      	adds	r3, #1
 800a830:	9306      	str	r3, [sp, #24]
 800a832:	9011      	str	r0, [sp, #68]	; 0x44
 800a834:	e7be      	b.n	800a7b4 <_strtod_l+0x154>
 800a836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a838:	195a      	adds	r2, r3, r5
 800a83a:	9211      	str	r2, [sp, #68]	; 0x44
 800a83c:	5d5a      	ldrb	r2, [r3, r5]
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	b3a3      	cbz	r3, 800a8ac <_strtod_l+0x24c>
 800a842:	4607      	mov	r7, r0
 800a844:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a848:	2909      	cmp	r1, #9
 800a84a:	d912      	bls.n	800a872 <_strtod_l+0x212>
 800a84c:	2101      	movs	r1, #1
 800a84e:	e7c3      	b.n	800a7d8 <_strtod_l+0x178>
 800a850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	9211      	str	r2, [sp, #68]	; 0x44
 800a856:	785a      	ldrb	r2, [r3, #1]
 800a858:	3001      	adds	r0, #1
 800a85a:	2a30      	cmp	r2, #48	; 0x30
 800a85c:	d0f8      	beq.n	800a850 <_strtod_l+0x1f0>
 800a85e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a862:	2b08      	cmp	r3, #8
 800a864:	f200 8497 	bhi.w	800b196 <_strtod_l+0xb36>
 800a868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a86a:	930a      	str	r3, [sp, #40]	; 0x28
 800a86c:	4607      	mov	r7, r0
 800a86e:	2000      	movs	r0, #0
 800a870:	4603      	mov	r3, r0
 800a872:	3a30      	subs	r2, #48	; 0x30
 800a874:	f100 0101 	add.w	r1, r0, #1
 800a878:	d012      	beq.n	800a8a0 <_strtod_l+0x240>
 800a87a:	440f      	add	r7, r1
 800a87c:	eb00 0c03 	add.w	ip, r0, r3
 800a880:	4619      	mov	r1, r3
 800a882:	250a      	movs	r5, #10
 800a884:	4561      	cmp	r1, ip
 800a886:	d113      	bne.n	800a8b0 <_strtod_l+0x250>
 800a888:	1819      	adds	r1, r3, r0
 800a88a:	2908      	cmp	r1, #8
 800a88c:	f103 0301 	add.w	r3, r3, #1
 800a890:	4403      	add	r3, r0
 800a892:	dc1c      	bgt.n	800a8ce <_strtod_l+0x26e>
 800a894:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a896:	210a      	movs	r1, #10
 800a898:	fb01 2200 	mla	r2, r1, r0, r2
 800a89c:	9209      	str	r2, [sp, #36]	; 0x24
 800a89e:	2100      	movs	r1, #0
 800a8a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8a2:	1c50      	adds	r0, r2, #1
 800a8a4:	9011      	str	r0, [sp, #68]	; 0x44
 800a8a6:	7852      	ldrb	r2, [r2, #1]
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	e7cb      	b.n	800a844 <_strtod_l+0x1e4>
 800a8ac:	9806      	ldr	r0, [sp, #24]
 800a8ae:	e7d4      	b.n	800a85a <_strtod_l+0x1fa>
 800a8b0:	2908      	cmp	r1, #8
 800a8b2:	dc04      	bgt.n	800a8be <_strtod_l+0x25e>
 800a8b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8b6:	436e      	muls	r6, r5
 800a8b8:	9609      	str	r6, [sp, #36]	; 0x24
 800a8ba:	3101      	adds	r1, #1
 800a8bc:	e7e2      	b.n	800a884 <_strtod_l+0x224>
 800a8be:	f101 0e01 	add.w	lr, r1, #1
 800a8c2:	f1be 0f10 	cmp.w	lr, #16
 800a8c6:	bfd8      	it	le
 800a8c8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800a8cc:	e7f5      	b.n	800a8ba <_strtod_l+0x25a>
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	bfdc      	itt	le
 800a8d2:	210a      	movle	r1, #10
 800a8d4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800a8d8:	e7e1      	b.n	800a89e <_strtod_l+0x23e>
 800a8da:	2700      	movs	r7, #0
 800a8dc:	2101      	movs	r1, #1
 800a8de:	e780      	b.n	800a7e2 <_strtod_l+0x182>
 800a8e0:	f04f 0e00 	mov.w	lr, #0
 800a8e4:	f10b 0202 	add.w	r2, fp, #2
 800a8e8:	9211      	str	r2, [sp, #68]	; 0x44
 800a8ea:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a8ee:	e789      	b.n	800a804 <_strtod_l+0x1a4>
 800a8f0:	f04f 0e01 	mov.w	lr, #1
 800a8f4:	e7f6      	b.n	800a8e4 <_strtod_l+0x284>
 800a8f6:	bf00      	nop
 800a8f8:	0800d438 	.word	0x0800d438
 800a8fc:	0800d370 	.word	0x0800d370
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a906:	1c55      	adds	r5, r2, #1
 800a908:	9511      	str	r5, [sp, #68]	; 0x44
 800a90a:	7852      	ldrb	r2, [r2, #1]
 800a90c:	2a30      	cmp	r2, #48	; 0x30
 800a90e:	d0f9      	beq.n	800a904 <_strtod_l+0x2a4>
 800a910:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a914:	2d08      	cmp	r5, #8
 800a916:	f63f af7b 	bhi.w	800a810 <_strtod_l+0x1b0>
 800a91a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a91e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a920:	9207      	str	r2, [sp, #28]
 800a922:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a924:	1c55      	adds	r5, r2, #1
 800a926:	9511      	str	r5, [sp, #68]	; 0x44
 800a928:	7852      	ldrb	r2, [r2, #1]
 800a92a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a92e:	2e09      	cmp	r6, #9
 800a930:	d937      	bls.n	800a9a2 <_strtod_l+0x342>
 800a932:	9e07      	ldr	r6, [sp, #28]
 800a934:	1bad      	subs	r5, r5, r6
 800a936:	2d08      	cmp	r5, #8
 800a938:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a93c:	dc02      	bgt.n	800a944 <_strtod_l+0x2e4>
 800a93e:	4565      	cmp	r5, ip
 800a940:	bfa8      	it	ge
 800a942:	4665      	movge	r5, ip
 800a944:	f1be 0f00 	cmp.w	lr, #0
 800a948:	d000      	beq.n	800a94c <_strtod_l+0x2ec>
 800a94a:	426d      	negs	r5, r5
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d14d      	bne.n	800a9ec <_strtod_l+0x38c>
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	4303      	orrs	r3, r0
 800a954:	f47f aec8 	bne.w	800a6e8 <_strtod_l+0x88>
 800a958:	2900      	cmp	r1, #0
 800a95a:	f47f aee2 	bne.w	800a722 <_strtod_l+0xc2>
 800a95e:	2a69      	cmp	r2, #105	; 0x69
 800a960:	d027      	beq.n	800a9b2 <_strtod_l+0x352>
 800a962:	dc24      	bgt.n	800a9ae <_strtod_l+0x34e>
 800a964:	2a49      	cmp	r2, #73	; 0x49
 800a966:	d024      	beq.n	800a9b2 <_strtod_l+0x352>
 800a968:	2a4e      	cmp	r2, #78	; 0x4e
 800a96a:	f47f aeda 	bne.w	800a722 <_strtod_l+0xc2>
 800a96e:	4996      	ldr	r1, [pc, #600]	; (800abc8 <_strtod_l+0x568>)
 800a970:	a811      	add	r0, sp, #68	; 0x44
 800a972:	f000 fef7 	bl	800b764 <__match>
 800a976:	2800      	cmp	r0, #0
 800a978:	f43f aed3 	beq.w	800a722 <_strtod_l+0xc2>
 800a97c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2b28      	cmp	r3, #40	; 0x28
 800a982:	d12d      	bne.n	800a9e0 <_strtod_l+0x380>
 800a984:	4991      	ldr	r1, [pc, #580]	; (800abcc <_strtod_l+0x56c>)
 800a986:	aa14      	add	r2, sp, #80	; 0x50
 800a988:	a811      	add	r0, sp, #68	; 0x44
 800a98a:	f000 feff 	bl	800b78c <__hexnan>
 800a98e:	2805      	cmp	r0, #5
 800a990:	d126      	bne.n	800a9e0 <_strtod_l+0x380>
 800a992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a994:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a998:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a99c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a9a0:	e6a2      	b.n	800a6e8 <_strtod_l+0x88>
 800a9a2:	250a      	movs	r5, #10
 800a9a4:	fb05 250c 	mla	r5, r5, ip, r2
 800a9a8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800a9ac:	e7b9      	b.n	800a922 <_strtod_l+0x2c2>
 800a9ae:	2a6e      	cmp	r2, #110	; 0x6e
 800a9b0:	e7db      	b.n	800a96a <_strtod_l+0x30a>
 800a9b2:	4987      	ldr	r1, [pc, #540]	; (800abd0 <_strtod_l+0x570>)
 800a9b4:	a811      	add	r0, sp, #68	; 0x44
 800a9b6:	f000 fed5 	bl	800b764 <__match>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	f43f aeb1 	beq.w	800a722 <_strtod_l+0xc2>
 800a9c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9c2:	4984      	ldr	r1, [pc, #528]	; (800abd4 <_strtod_l+0x574>)
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	a811      	add	r0, sp, #68	; 0x44
 800a9c8:	9311      	str	r3, [sp, #68]	; 0x44
 800a9ca:	f000 fecb 	bl	800b764 <__match>
 800a9ce:	b910      	cbnz	r0, 800a9d6 <_strtod_l+0x376>
 800a9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	9311      	str	r3, [sp, #68]	; 0x44
 800a9d6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800abe8 <_strtod_l+0x588>
 800a9da:	f04f 0800 	mov.w	r8, #0
 800a9de:	e683      	b.n	800a6e8 <_strtod_l+0x88>
 800a9e0:	487d      	ldr	r0, [pc, #500]	; (800abd8 <_strtod_l+0x578>)
 800a9e2:	f001 fcf9 	bl	800c3d8 <nan>
 800a9e6:	ec59 8b10 	vmov	r8, r9, d0
 800a9ea:	e67d      	b.n	800a6e8 <_strtod_l+0x88>
 800a9ec:	1bea      	subs	r2, r5, r7
 800a9ee:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800a9f2:	9207      	str	r2, [sp, #28]
 800a9f4:	9a06      	ldr	r2, [sp, #24]
 800a9f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a9fa:	2a00      	cmp	r2, #0
 800a9fc:	bf08      	it	eq
 800a9fe:	461a      	moveq	r2, r3
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	9206      	str	r2, [sp, #24]
 800aa04:	461a      	mov	r2, r3
 800aa06:	bfa8      	it	ge
 800aa08:	2210      	movge	r2, #16
 800aa0a:	2b09      	cmp	r3, #9
 800aa0c:	ec59 8b17 	vmov	r8, r9, d7
 800aa10:	dd0c      	ble.n	800aa2c <_strtod_l+0x3cc>
 800aa12:	4972      	ldr	r1, [pc, #456]	; (800abdc <_strtod_l+0x57c>)
 800aa14:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aa18:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800aa1c:	ee06 aa90 	vmov	s13, sl
 800aa20:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800aa24:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa28:	ec59 8b16 	vmov	r8, r9, d6
 800aa2c:	2b0f      	cmp	r3, #15
 800aa2e:	dc36      	bgt.n	800aa9e <_strtod_l+0x43e>
 800aa30:	9907      	ldr	r1, [sp, #28]
 800aa32:	2900      	cmp	r1, #0
 800aa34:	f43f ae58 	beq.w	800a6e8 <_strtod_l+0x88>
 800aa38:	dd23      	ble.n	800aa82 <_strtod_l+0x422>
 800aa3a:	2916      	cmp	r1, #22
 800aa3c:	dc0b      	bgt.n	800aa56 <_strtod_l+0x3f6>
 800aa3e:	4b67      	ldr	r3, [pc, #412]	; (800abdc <_strtod_l+0x57c>)
 800aa40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800aa44:	ed93 7b00 	vldr	d7, [r3]
 800aa48:	ec49 8b16 	vmov	d6, r8, r9
 800aa4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa50:	ec59 8b17 	vmov	r8, r9, d7
 800aa54:	e648      	b.n	800a6e8 <_strtod_l+0x88>
 800aa56:	9807      	ldr	r0, [sp, #28]
 800aa58:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800aa5c:	4281      	cmp	r1, r0
 800aa5e:	db1e      	blt.n	800aa9e <_strtod_l+0x43e>
 800aa60:	4a5e      	ldr	r2, [pc, #376]	; (800abdc <_strtod_l+0x57c>)
 800aa62:	f1c3 030f 	rsb	r3, r3, #15
 800aa66:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800aa6a:	ed91 7b00 	vldr	d7, [r1]
 800aa6e:	ec49 8b16 	vmov	d6, r8, r9
 800aa72:	1ac3      	subs	r3, r0, r3
 800aa74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800aa78:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa7c:	ed92 6b00 	vldr	d6, [r2]
 800aa80:	e7e4      	b.n	800aa4c <_strtod_l+0x3ec>
 800aa82:	9907      	ldr	r1, [sp, #28]
 800aa84:	3116      	adds	r1, #22
 800aa86:	db0a      	blt.n	800aa9e <_strtod_l+0x43e>
 800aa88:	4b54      	ldr	r3, [pc, #336]	; (800abdc <_strtod_l+0x57c>)
 800aa8a:	1b7d      	subs	r5, r7, r5
 800aa8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aa90:	ed95 7b00 	vldr	d7, [r5]
 800aa94:	ec49 8b16 	vmov	d6, r8, r9
 800aa98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aa9c:	e7d8      	b.n	800aa50 <_strtod_l+0x3f0>
 800aa9e:	9907      	ldr	r1, [sp, #28]
 800aaa0:	1a9a      	subs	r2, r3, r2
 800aaa2:	440a      	add	r2, r1
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	dd6f      	ble.n	800ab88 <_strtod_l+0x528>
 800aaa8:	f012 000f 	ands.w	r0, r2, #15
 800aaac:	d00a      	beq.n	800aac4 <_strtod_l+0x464>
 800aaae:	494b      	ldr	r1, [pc, #300]	; (800abdc <_strtod_l+0x57c>)
 800aab0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aab4:	ed91 7b00 	vldr	d7, [r1]
 800aab8:	ec49 8b16 	vmov	d6, r8, r9
 800aabc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aac0:	ec59 8b17 	vmov	r8, r9, d7
 800aac4:	f032 020f 	bics.w	r2, r2, #15
 800aac8:	d04f      	beq.n	800ab6a <_strtod_l+0x50a>
 800aaca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800aace:	dd22      	ble.n	800ab16 <_strtod_l+0x4b6>
 800aad0:	2500      	movs	r5, #0
 800aad2:	462e      	mov	r6, r5
 800aad4:	9506      	str	r5, [sp, #24]
 800aad6:	462f      	mov	r7, r5
 800aad8:	2322      	movs	r3, #34	; 0x22
 800aada:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800abe8 <_strtod_l+0x588>
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	f04f 0800 	mov.w	r8, #0
 800aae4:	9b06      	ldr	r3, [sp, #24]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f43f adfe 	beq.w	800a6e8 <_strtod_l+0x88>
 800aaec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 ff48 	bl	800b984 <_Bfree>
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 ff44 	bl	800b984 <_Bfree>
 800aafc:	4631      	mov	r1, r6
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 ff40 	bl	800b984 <_Bfree>
 800ab04:	9906      	ldr	r1, [sp, #24]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 ff3c 	bl	800b984 <_Bfree>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 ff38 	bl	800b984 <_Bfree>
 800ab14:	e5e8      	b.n	800a6e8 <_strtod_l+0x88>
 800ab16:	2000      	movs	r0, #0
 800ab18:	ec49 8b17 	vmov	d7, r8, r9
 800ab1c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800abe0 <_strtod_l+0x580>
 800ab20:	1112      	asrs	r2, r2, #4
 800ab22:	4601      	mov	r1, r0
 800ab24:	2a01      	cmp	r2, #1
 800ab26:	dc23      	bgt.n	800ab70 <_strtod_l+0x510>
 800ab28:	b108      	cbz	r0, 800ab2e <_strtod_l+0x4ce>
 800ab2a:	ec59 8b17 	vmov	r8, r9, d7
 800ab2e:	4a2c      	ldr	r2, [pc, #176]	; (800abe0 <_strtod_l+0x580>)
 800ab30:	482c      	ldr	r0, [pc, #176]	; (800abe4 <_strtod_l+0x584>)
 800ab32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab36:	ed92 7b00 	vldr	d7, [r2]
 800ab3a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ab3e:	ec49 8b16 	vmov	d6, r8, r9
 800ab42:	4a29      	ldr	r2, [pc, #164]	; (800abe8 <_strtod_l+0x588>)
 800ab44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab48:	ee17 1a90 	vmov	r1, s15
 800ab4c:	400a      	ands	r2, r1
 800ab4e:	4282      	cmp	r2, r0
 800ab50:	ec59 8b17 	vmov	r8, r9, d7
 800ab54:	d8bc      	bhi.n	800aad0 <_strtod_l+0x470>
 800ab56:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ab5a:	4282      	cmp	r2, r0
 800ab5c:	bf86      	itte	hi
 800ab5e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800abec <_strtod_l+0x58c>
 800ab62:	f04f 38ff 	movhi.w	r8, #4294967295
 800ab66:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	9204      	str	r2, [sp, #16]
 800ab6e:	e078      	b.n	800ac62 <_strtod_l+0x602>
 800ab70:	07d6      	lsls	r6, r2, #31
 800ab72:	d504      	bpl.n	800ab7e <_strtod_l+0x51e>
 800ab74:	ed9c 6b00 	vldr	d6, [ip]
 800ab78:	2001      	movs	r0, #1
 800ab7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab7e:	3101      	adds	r1, #1
 800ab80:	1052      	asrs	r2, r2, #1
 800ab82:	f10c 0c08 	add.w	ip, ip, #8
 800ab86:	e7cd      	b.n	800ab24 <_strtod_l+0x4c4>
 800ab88:	d0ef      	beq.n	800ab6a <_strtod_l+0x50a>
 800ab8a:	4252      	negs	r2, r2
 800ab8c:	f012 000f 	ands.w	r0, r2, #15
 800ab90:	d00a      	beq.n	800aba8 <_strtod_l+0x548>
 800ab92:	4912      	ldr	r1, [pc, #72]	; (800abdc <_strtod_l+0x57c>)
 800ab94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ab98:	ed91 7b00 	vldr	d7, [r1]
 800ab9c:	ec49 8b16 	vmov	d6, r8, r9
 800aba0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aba4:	ec59 8b17 	vmov	r8, r9, d7
 800aba8:	1112      	asrs	r2, r2, #4
 800abaa:	d0de      	beq.n	800ab6a <_strtod_l+0x50a>
 800abac:	2a1f      	cmp	r2, #31
 800abae:	dd1f      	ble.n	800abf0 <_strtod_l+0x590>
 800abb0:	2500      	movs	r5, #0
 800abb2:	462e      	mov	r6, r5
 800abb4:	9506      	str	r5, [sp, #24]
 800abb6:	462f      	mov	r7, r5
 800abb8:	2322      	movs	r3, #34	; 0x22
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	f04f 0900 	mov.w	r9, #0
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	e78e      	b.n	800aae4 <_strtod_l+0x484>
 800abc6:	bf00      	nop
 800abc8:	0800d36d 	.word	0x0800d36d
 800abcc:	0800d384 	.word	0x0800d384
 800abd0:	0800d364 	.word	0x0800d364
 800abd4:	0800d367 	.word	0x0800d367
 800abd8:	0800d5f7 	.word	0x0800d5f7
 800abdc:	0800d4e8 	.word	0x0800d4e8
 800abe0:	0800d4c0 	.word	0x0800d4c0
 800abe4:	7ca00000 	.word	0x7ca00000
 800abe8:	7ff00000 	.word	0x7ff00000
 800abec:	7fefffff 	.word	0x7fefffff
 800abf0:	f012 0110 	ands.w	r1, r2, #16
 800abf4:	bf18      	it	ne
 800abf6:	216a      	movne	r1, #106	; 0x6a
 800abf8:	9104      	str	r1, [sp, #16]
 800abfa:	ec49 8b17 	vmov	d7, r8, r9
 800abfe:	49be      	ldr	r1, [pc, #760]	; (800aef8 <_strtod_l+0x898>)
 800ac00:	2000      	movs	r0, #0
 800ac02:	07d6      	lsls	r6, r2, #31
 800ac04:	d504      	bpl.n	800ac10 <_strtod_l+0x5b0>
 800ac06:	ed91 6b00 	vldr	d6, [r1]
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac10:	1052      	asrs	r2, r2, #1
 800ac12:	f101 0108 	add.w	r1, r1, #8
 800ac16:	d1f4      	bne.n	800ac02 <_strtod_l+0x5a2>
 800ac18:	b108      	cbz	r0, 800ac1e <_strtod_l+0x5be>
 800ac1a:	ec59 8b17 	vmov	r8, r9, d7
 800ac1e:	9a04      	ldr	r2, [sp, #16]
 800ac20:	b1c2      	cbz	r2, 800ac54 <_strtod_l+0x5f4>
 800ac22:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ac26:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	dd11      	ble.n	800ac54 <_strtod_l+0x5f4>
 800ac30:	2a1f      	cmp	r2, #31
 800ac32:	f340 812e 	ble.w	800ae92 <_strtod_l+0x832>
 800ac36:	2a34      	cmp	r2, #52	; 0x34
 800ac38:	bfde      	ittt	le
 800ac3a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ac3e:	f04f 32ff 	movle.w	r2, #4294967295
 800ac42:	fa02 f101 	lslle.w	r1, r2, r1
 800ac46:	f04f 0800 	mov.w	r8, #0
 800ac4a:	bfcc      	ite	gt
 800ac4c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ac50:	ea01 0900 	andle.w	r9, r1, r0
 800ac54:	ec49 8b17 	vmov	d7, r8, r9
 800ac58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac60:	d0a6      	beq.n	800abb0 <_strtod_l+0x550>
 800ac62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac64:	9200      	str	r2, [sp, #0]
 800ac66:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac68:	9a06      	ldr	r2, [sp, #24]
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f000 fef2 	bl	800ba54 <__s2b>
 800ac70:	9006      	str	r0, [sp, #24]
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f43f af2c 	beq.w	800aad0 <_strtod_l+0x470>
 800ac78:	9b07      	ldr	r3, [sp, #28]
 800ac7a:	1b7d      	subs	r5, r7, r5
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	bfb4      	ite	lt
 800ac80:	462b      	movlt	r3, r5
 800ac82:	2300      	movge	r3, #0
 800ac84:	9309      	str	r3, [sp, #36]	; 0x24
 800ac86:	9b07      	ldr	r3, [sp, #28]
 800ac88:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800aed8 <_strtod_l+0x878>
 800ac8c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800aee0 <_strtod_l+0x880>
 800ac90:	ed9f bb95 	vldr	d11, [pc, #596]	; 800aee8 <_strtod_l+0x888>
 800ac94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac98:	2500      	movs	r5, #0
 800ac9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ac9c:	462e      	mov	r6, r5
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	4620      	mov	r0, r4
 800aca2:	6859      	ldr	r1, [r3, #4]
 800aca4:	f000 fe2e 	bl	800b904 <_Balloc>
 800aca8:	4607      	mov	r7, r0
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f af14 	beq.w	800aad8 <_strtod_l+0x478>
 800acb0:	9b06      	ldr	r3, [sp, #24]
 800acb2:	691a      	ldr	r2, [r3, #16]
 800acb4:	3202      	adds	r2, #2
 800acb6:	f103 010c 	add.w	r1, r3, #12
 800acba:	0092      	lsls	r2, r2, #2
 800acbc:	300c      	adds	r0, #12
 800acbe:	f000 fe13 	bl	800b8e8 <memcpy>
 800acc2:	ec49 8b10 	vmov	d0, r8, r9
 800acc6:	aa14      	add	r2, sp, #80	; 0x50
 800acc8:	a913      	add	r1, sp, #76	; 0x4c
 800acca:	4620      	mov	r0, r4
 800accc:	f001 fa08 	bl	800c0e0 <__d2b>
 800acd0:	ec49 8b18 	vmov	d8, r8, r9
 800acd4:	9012      	str	r0, [sp, #72]	; 0x48
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f43f aefe 	beq.w	800aad8 <_strtod_l+0x478>
 800acdc:	2101      	movs	r1, #1
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 ff52 	bl	800bb88 <__i2b>
 800ace4:	4606      	mov	r6, r0
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f aef6 	beq.w	800aad8 <_strtod_l+0x478>
 800acec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acee:	9914      	ldr	r1, [sp, #80]	; 0x50
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	bfab      	itete	ge
 800acf4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800acf6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800acf8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800acfc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ad00:	bfac      	ite	ge
 800ad02:	eb03 0b02 	addge.w	fp, r3, r2
 800ad06:	eba2 0a03 	sublt.w	sl, r2, r3
 800ad0a:	9a04      	ldr	r2, [sp, #16]
 800ad0c:	1a9b      	subs	r3, r3, r2
 800ad0e:	440b      	add	r3, r1
 800ad10:	4a7a      	ldr	r2, [pc, #488]	; (800aefc <_strtod_l+0x89c>)
 800ad12:	3b01      	subs	r3, #1
 800ad14:	4293      	cmp	r3, r2
 800ad16:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ad1a:	f280 80cd 	bge.w	800aeb8 <_strtod_l+0x858>
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	2a1f      	cmp	r2, #31
 800ad22:	eba1 0102 	sub.w	r1, r1, r2
 800ad26:	f04f 0001 	mov.w	r0, #1
 800ad2a:	f300 80b9 	bgt.w	800aea0 <_strtod_l+0x840>
 800ad2e:	fa00 f302 	lsl.w	r3, r0, r2
 800ad32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad34:	2300      	movs	r3, #0
 800ad36:	930a      	str	r3, [sp, #40]	; 0x28
 800ad38:	eb0b 0301 	add.w	r3, fp, r1
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	459b      	cmp	fp, r3
 800ad40:	448a      	add	sl, r1
 800ad42:	4492      	add	sl, r2
 800ad44:	465a      	mov	r2, fp
 800ad46:	bfa8      	it	ge
 800ad48:	461a      	movge	r2, r3
 800ad4a:	4552      	cmp	r2, sl
 800ad4c:	bfa8      	it	ge
 800ad4e:	4652      	movge	r2, sl
 800ad50:	2a00      	cmp	r2, #0
 800ad52:	bfc2      	ittt	gt
 800ad54:	1a9b      	subgt	r3, r3, r2
 800ad56:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ad5a:	ebab 0b02 	subgt.w	fp, fp, r2
 800ad5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad60:	2a00      	cmp	r2, #0
 800ad62:	dd18      	ble.n	800ad96 <_strtod_l+0x736>
 800ad64:	4631      	mov	r1, r6
 800ad66:	4620      	mov	r0, r4
 800ad68:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad6a:	f000 ffcd 	bl	800bd08 <__pow5mult>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f43f aeb1 	beq.w	800aad8 <_strtod_l+0x478>
 800ad76:	4601      	mov	r1, r0
 800ad78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 ff1a 	bl	800bbb4 <__multiply>
 800ad80:	900e      	str	r0, [sp, #56]	; 0x38
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f43f aea8 	beq.w	800aad8 <_strtod_l+0x478>
 800ad88:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 fdfa 	bl	800b984 <_Bfree>
 800ad90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad94:	9212      	str	r2, [sp, #72]	; 0x48
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f300 8093 	bgt.w	800aec2 <_strtod_l+0x862>
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dd08      	ble.n	800adb4 <_strtod_l+0x754>
 800ada2:	4639      	mov	r1, r7
 800ada4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 ffae 	bl	800bd08 <__pow5mult>
 800adac:	4607      	mov	r7, r0
 800adae:	2800      	cmp	r0, #0
 800adb0:	f43f ae92 	beq.w	800aad8 <_strtod_l+0x478>
 800adb4:	f1ba 0f00 	cmp.w	sl, #0
 800adb8:	dd08      	ble.n	800adcc <_strtod_l+0x76c>
 800adba:	4639      	mov	r1, r7
 800adbc:	4652      	mov	r2, sl
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fffc 	bl	800bdbc <__lshift>
 800adc4:	4607      	mov	r7, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f43f ae86 	beq.w	800aad8 <_strtod_l+0x478>
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	dd08      	ble.n	800ade4 <_strtod_l+0x784>
 800add2:	4631      	mov	r1, r6
 800add4:	465a      	mov	r2, fp
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fff0 	bl	800bdbc <__lshift>
 800addc:	4606      	mov	r6, r0
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f ae7a 	beq.w	800aad8 <_strtod_l+0x478>
 800ade4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ade6:	463a      	mov	r2, r7
 800ade8:	4620      	mov	r0, r4
 800adea:	f001 f873 	bl	800bed4 <__mdiff>
 800adee:	4605      	mov	r5, r0
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f43f ae71 	beq.w	800aad8 <_strtod_l+0x478>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800adfc:	60c3      	str	r3, [r0, #12]
 800adfe:	4631      	mov	r1, r6
 800ae00:	f001 f84c 	bl	800be9c <__mcmp>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	da7d      	bge.n	800af04 <_strtod_l+0x8a4>
 800ae08:	ea5a 0308 	orrs.w	r3, sl, r8
 800ae0c:	f040 80a3 	bne.w	800af56 <_strtod_l+0x8f6>
 800ae10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f040 809e 	bne.w	800af56 <_strtod_l+0x8f6>
 800ae1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae1e:	0d1b      	lsrs	r3, r3, #20
 800ae20:	051b      	lsls	r3, r3, #20
 800ae22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae26:	f240 8096 	bls.w	800af56 <_strtod_l+0x8f6>
 800ae2a:	696b      	ldr	r3, [r5, #20]
 800ae2c:	b91b      	cbnz	r3, 800ae36 <_strtod_l+0x7d6>
 800ae2e:	692b      	ldr	r3, [r5, #16]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	f340 8090 	ble.w	800af56 <_strtod_l+0x8f6>
 800ae36:	4629      	mov	r1, r5
 800ae38:	2201      	movs	r2, #1
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 ffbe 	bl	800bdbc <__lshift>
 800ae40:	4631      	mov	r1, r6
 800ae42:	4605      	mov	r5, r0
 800ae44:	f001 f82a 	bl	800be9c <__mcmp>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	f340 8084 	ble.w	800af56 <_strtod_l+0x8f6>
 800ae4e:	9904      	ldr	r1, [sp, #16]
 800ae50:	4a2b      	ldr	r2, [pc, #172]	; (800af00 <_strtod_l+0x8a0>)
 800ae52:	464b      	mov	r3, r9
 800ae54:	2900      	cmp	r1, #0
 800ae56:	f000 809d 	beq.w	800af94 <_strtod_l+0x934>
 800ae5a:	ea02 0109 	and.w	r1, r2, r9
 800ae5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae62:	f300 8097 	bgt.w	800af94 <_strtod_l+0x934>
 800ae66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae6a:	f77f aea5 	ble.w	800abb8 <_strtod_l+0x558>
 800ae6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800aef0 <_strtod_l+0x890>
 800ae72:	ec49 8b16 	vmov	d6, r8, r9
 800ae76:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ae7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae7e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	bf08      	it	eq
 800ae86:	2322      	moveq	r3, #34	; 0x22
 800ae88:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ae8c:	bf08      	it	eq
 800ae8e:	6023      	streq	r3, [r4, #0]
 800ae90:	e62c      	b.n	800aaec <_strtod_l+0x48c>
 800ae92:	f04f 31ff 	mov.w	r1, #4294967295
 800ae96:	fa01 f202 	lsl.w	r2, r1, r2
 800ae9a:	ea02 0808 	and.w	r8, r2, r8
 800ae9e:	e6d9      	b.n	800ac54 <_strtod_l+0x5f4>
 800aea0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800aea4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800aea8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800aeac:	33e2      	adds	r3, #226	; 0xe2
 800aeae:	fa00 f303 	lsl.w	r3, r0, r3
 800aeb2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800aeb6:	e73f      	b.n	800ad38 <_strtod_l+0x6d8>
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2301      	movs	r3, #1
 800aebc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aec0:	e73a      	b.n	800ad38 <_strtod_l+0x6d8>
 800aec2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aec4:	461a      	mov	r2, r3
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 ff78 	bl	800bdbc <__lshift>
 800aecc:	9012      	str	r0, [sp, #72]	; 0x48
 800aece:	2800      	cmp	r0, #0
 800aed0:	f47f af64 	bne.w	800ad9c <_strtod_l+0x73c>
 800aed4:	e600      	b.n	800aad8 <_strtod_l+0x478>
 800aed6:	bf00      	nop
 800aed8:	94a03595 	.word	0x94a03595
 800aedc:	3fcfffff 	.word	0x3fcfffff
 800aee0:	94a03595 	.word	0x94a03595
 800aee4:	3fdfffff 	.word	0x3fdfffff
 800aee8:	35afe535 	.word	0x35afe535
 800aeec:	3fe00000 	.word	0x3fe00000
 800aef0:	00000000 	.word	0x00000000
 800aef4:	39500000 	.word	0x39500000
 800aef8:	0800d398 	.word	0x0800d398
 800aefc:	fffffc02 	.word	0xfffffc02
 800af00:	7ff00000 	.word	0x7ff00000
 800af04:	46cb      	mov	fp, r9
 800af06:	d15f      	bne.n	800afc8 <_strtod_l+0x968>
 800af08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af0c:	f1ba 0f00 	cmp.w	sl, #0
 800af10:	d02a      	beq.n	800af68 <_strtod_l+0x908>
 800af12:	4aa7      	ldr	r2, [pc, #668]	; (800b1b0 <_strtod_l+0xb50>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d12b      	bne.n	800af70 <_strtod_l+0x910>
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	4642      	mov	r2, r8
 800af1c:	b1fb      	cbz	r3, 800af5e <_strtod_l+0x8fe>
 800af1e:	4ba5      	ldr	r3, [pc, #660]	; (800b1b4 <_strtod_l+0xb54>)
 800af20:	ea09 0303 	and.w	r3, r9, r3
 800af24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af28:	f04f 31ff 	mov.w	r1, #4294967295
 800af2c:	d81a      	bhi.n	800af64 <_strtod_l+0x904>
 800af2e:	0d1b      	lsrs	r3, r3, #20
 800af30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af34:	fa01 f303 	lsl.w	r3, r1, r3
 800af38:	429a      	cmp	r2, r3
 800af3a:	d119      	bne.n	800af70 <_strtod_l+0x910>
 800af3c:	4b9e      	ldr	r3, [pc, #632]	; (800b1b8 <_strtod_l+0xb58>)
 800af3e:	459b      	cmp	fp, r3
 800af40:	d102      	bne.n	800af48 <_strtod_l+0x8e8>
 800af42:	3201      	adds	r2, #1
 800af44:	f43f adc8 	beq.w	800aad8 <_strtod_l+0x478>
 800af48:	4b9a      	ldr	r3, [pc, #616]	; (800b1b4 <_strtod_l+0xb54>)
 800af4a:	ea0b 0303 	and.w	r3, fp, r3
 800af4e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af52:	f04f 0800 	mov.w	r8, #0
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d188      	bne.n	800ae6e <_strtod_l+0x80e>
 800af5c:	e5c6      	b.n	800aaec <_strtod_l+0x48c>
 800af5e:	f04f 33ff 	mov.w	r3, #4294967295
 800af62:	e7e9      	b.n	800af38 <_strtod_l+0x8d8>
 800af64:	460b      	mov	r3, r1
 800af66:	e7e7      	b.n	800af38 <_strtod_l+0x8d8>
 800af68:	ea53 0308 	orrs.w	r3, r3, r8
 800af6c:	f43f af6f 	beq.w	800ae4e <_strtod_l+0x7ee>
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	b1cb      	cbz	r3, 800afa8 <_strtod_l+0x948>
 800af74:	ea13 0f0b 	tst.w	r3, fp
 800af78:	d0ed      	beq.n	800af56 <_strtod_l+0x8f6>
 800af7a:	9a04      	ldr	r2, [sp, #16]
 800af7c:	4640      	mov	r0, r8
 800af7e:	4649      	mov	r1, r9
 800af80:	f1ba 0f00 	cmp.w	sl, #0
 800af84:	d014      	beq.n	800afb0 <_strtod_l+0x950>
 800af86:	f7ff fb51 	bl	800a62c <sulp>
 800af8a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800af8e:	ec59 8b17 	vmov	r8, r9, d7
 800af92:	e7e0      	b.n	800af56 <_strtod_l+0x8f6>
 800af94:	4013      	ands	r3, r2
 800af96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af9a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800af9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800afa2:	f04f 38ff 	mov.w	r8, #4294967295
 800afa6:	e7d6      	b.n	800af56 <_strtod_l+0x8f6>
 800afa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afaa:	ea13 0f08 	tst.w	r3, r8
 800afae:	e7e3      	b.n	800af78 <_strtod_l+0x918>
 800afb0:	f7ff fb3c 	bl	800a62c <sulp>
 800afb4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800afb8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc0:	ec59 8b10 	vmov	r8, r9, d0
 800afc4:	d1c7      	bne.n	800af56 <_strtod_l+0x8f6>
 800afc6:	e5f7      	b.n	800abb8 <_strtod_l+0x558>
 800afc8:	4631      	mov	r1, r6
 800afca:	4628      	mov	r0, r5
 800afcc:	f001 f8e4 	bl	800c198 <__ratio>
 800afd0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800afd4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afdc:	d865      	bhi.n	800b0aa <_strtod_l+0xa4a>
 800afde:	f1ba 0f00 	cmp.w	sl, #0
 800afe2:	d042      	beq.n	800b06a <_strtod_l+0xa0a>
 800afe4:	4b75      	ldr	r3, [pc, #468]	; (800b1bc <_strtod_l+0xb5c>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800afec:	4871      	ldr	r0, [pc, #452]	; (800b1b4 <_strtod_l+0xb54>)
 800afee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b1c8 <_strtod_l+0xb68>
 800aff2:	ea0b 0100 	and.w	r1, fp, r0
 800aff6:	4561      	cmp	r1, ip
 800aff8:	f040 808e 	bne.w	800b118 <_strtod_l+0xab8>
 800affc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b000:	ec49 8b10 	vmov	d0, r8, r9
 800b004:	ec43 2b1c 	vmov	d12, r2, r3
 800b008:	910a      	str	r1, [sp, #40]	; 0x28
 800b00a:	f000 ffed 	bl	800bfe8 <__ulp>
 800b00e:	ec49 8b1e 	vmov	d14, r8, r9
 800b012:	4868      	ldr	r0, [pc, #416]	; (800b1b4 <_strtod_l+0xb54>)
 800b014:	eeac eb00 	vfma.f64	d14, d12, d0
 800b018:	ee1e 3a90 	vmov	r3, s29
 800b01c:	4a68      	ldr	r2, [pc, #416]	; (800b1c0 <_strtod_l+0xb60>)
 800b01e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b020:	4018      	ands	r0, r3
 800b022:	4290      	cmp	r0, r2
 800b024:	ec59 8b1e 	vmov	r8, r9, d14
 800b028:	d94e      	bls.n	800b0c8 <_strtod_l+0xa68>
 800b02a:	ee18 3a90 	vmov	r3, s17
 800b02e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b032:	4293      	cmp	r3, r2
 800b034:	d104      	bne.n	800b040 <_strtod_l+0x9e0>
 800b036:	ee18 3a10 	vmov	r3, s16
 800b03a:	3301      	adds	r3, #1
 800b03c:	f43f ad4c 	beq.w	800aad8 <_strtod_l+0x478>
 800b040:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b1b8 <_strtod_l+0xb58>
 800b044:	f04f 38ff 	mov.w	r8, #4294967295
 800b048:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 fc9a 	bl	800b984 <_Bfree>
 800b050:	4639      	mov	r1, r7
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fc96 	bl	800b984 <_Bfree>
 800b058:	4631      	mov	r1, r6
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fc92 	bl	800b984 <_Bfree>
 800b060:	4629      	mov	r1, r5
 800b062:	4620      	mov	r0, r4
 800b064:	f000 fc8e 	bl	800b984 <_Bfree>
 800b068:	e619      	b.n	800ac9e <_strtod_l+0x63e>
 800b06a:	f1b8 0f00 	cmp.w	r8, #0
 800b06e:	d112      	bne.n	800b096 <_strtod_l+0xa36>
 800b070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b074:	b9b3      	cbnz	r3, 800b0a4 <_strtod_l+0xa44>
 800b076:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b07a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b082:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b086:	bf58      	it	pl
 800b088:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b08c:	eeb1 7b4d 	vneg.f64	d7, d13
 800b090:	ec53 2b17 	vmov	r2, r3, d7
 800b094:	e7aa      	b.n	800afec <_strtod_l+0x98c>
 800b096:	f1b8 0f01 	cmp.w	r8, #1
 800b09a:	d103      	bne.n	800b0a4 <_strtod_l+0xa44>
 800b09c:	f1b9 0f00 	cmp.w	r9, #0
 800b0a0:	f43f ad8a 	beq.w	800abb8 <_strtod_l+0x558>
 800b0a4:	4b47      	ldr	r3, [pc, #284]	; (800b1c4 <_strtod_l+0xb64>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	e79e      	b.n	800afe8 <_strtod_l+0x988>
 800b0aa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b0ae:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b0b2:	f1ba 0f00 	cmp.w	sl, #0
 800b0b6:	d104      	bne.n	800b0c2 <_strtod_l+0xa62>
 800b0b8:	eeb1 7b4d 	vneg.f64	d7, d13
 800b0bc:	ec53 2b17 	vmov	r2, r3, d7
 800b0c0:	e794      	b.n	800afec <_strtod_l+0x98c>
 800b0c2:	eeb0 7b4d 	vmov.f64	d7, d13
 800b0c6:	e7f9      	b.n	800b0bc <_strtod_l+0xa5c>
 800b0c8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b0cc:	9b04      	ldr	r3, [sp, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1ba      	bne.n	800b048 <_strtod_l+0x9e8>
 800b0d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0d6:	0d1b      	lsrs	r3, r3, #20
 800b0d8:	051b      	lsls	r3, r3, #20
 800b0da:	4299      	cmp	r1, r3
 800b0dc:	d1b4      	bne.n	800b048 <_strtod_l+0x9e8>
 800b0de:	ec51 0b1d 	vmov	r0, r1, d13
 800b0e2:	f7f5 fb41 	bl	8000768 <__aeabi_d2lz>
 800b0e6:	f7f5 faf9 	bl	80006dc <__aeabi_l2d>
 800b0ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0ee:	ec41 0b17 	vmov	d7, r0, r1
 800b0f2:	ea43 0308 	orr.w	r3, r3, r8
 800b0f6:	ea53 030a 	orrs.w	r3, r3, sl
 800b0fa:	ee3d db47 	vsub.f64	d13, d13, d7
 800b0fe:	d03c      	beq.n	800b17a <_strtod_l+0xb1a>
 800b100:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b108:	f53f acf0 	bmi.w	800aaec <_strtod_l+0x48c>
 800b10c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	dd98      	ble.n	800b048 <_strtod_l+0x9e8>
 800b116:	e4e9      	b.n	800aaec <_strtod_l+0x48c>
 800b118:	9804      	ldr	r0, [sp, #16]
 800b11a:	b1f0      	cbz	r0, 800b15a <_strtod_l+0xafa>
 800b11c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b120:	d81b      	bhi.n	800b15a <_strtod_l+0xafa>
 800b122:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b1a8 <_strtod_l+0xb48>
 800b126:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12e:	d811      	bhi.n	800b154 <_strtod_l+0xaf4>
 800b130:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b134:	ee1d 3a10 	vmov	r3, s26
 800b138:	2b01      	cmp	r3, #1
 800b13a:	bf38      	it	cc
 800b13c:	2301      	movcc	r3, #1
 800b13e:	ee0d 3a10 	vmov	s26, r3
 800b142:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b146:	f1ba 0f00 	cmp.w	sl, #0
 800b14a:	d113      	bne.n	800b174 <_strtod_l+0xb14>
 800b14c:	eeb1 7b4d 	vneg.f64	d7, d13
 800b150:	ec53 2b17 	vmov	r2, r3, d7
 800b154:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b158:	1a43      	subs	r3, r0, r1
 800b15a:	eeb0 0b48 	vmov.f64	d0, d8
 800b15e:	ec43 2b1c 	vmov	d12, r2, r3
 800b162:	910a      	str	r1, [sp, #40]	; 0x28
 800b164:	f000 ff40 	bl	800bfe8 <__ulp>
 800b168:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b16a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b16e:	ec59 8b18 	vmov	r8, r9, d8
 800b172:	e7ab      	b.n	800b0cc <_strtod_l+0xa6c>
 800b174:	eeb0 7b4d 	vmov.f64	d7, d13
 800b178:	e7ea      	b.n	800b150 <_strtod_l+0xaf0>
 800b17a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b182:	f57f af61 	bpl.w	800b048 <_strtod_l+0x9e8>
 800b186:	e4b1      	b.n	800aaec <_strtod_l+0x48c>
 800b188:	2300      	movs	r3, #0
 800b18a:	9308      	str	r3, [sp, #32]
 800b18c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b18e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	f7ff baad 	b.w	800a6f0 <_strtod_l+0x90>
 800b196:	2a65      	cmp	r2, #101	; 0x65
 800b198:	f43f ab9f 	beq.w	800a8da <_strtod_l+0x27a>
 800b19c:	2a45      	cmp	r2, #69	; 0x45
 800b19e:	f43f ab9c 	beq.w	800a8da <_strtod_l+0x27a>
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	f7ff bbd4 	b.w	800a950 <_strtod_l+0x2f0>
 800b1a8:	ffc00000 	.word	0xffc00000
 800b1ac:	41dfffff 	.word	0x41dfffff
 800b1b0:	000fffff 	.word	0x000fffff
 800b1b4:	7ff00000 	.word	0x7ff00000
 800b1b8:	7fefffff 	.word	0x7fefffff
 800b1bc:	3ff00000 	.word	0x3ff00000
 800b1c0:	7c9fffff 	.word	0x7c9fffff
 800b1c4:	bff00000 	.word	0xbff00000
 800b1c8:	7fe00000 	.word	0x7fe00000

0800b1cc <strtod>:
 800b1cc:	460a      	mov	r2, r1
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4802      	ldr	r0, [pc, #8]	; (800b1dc <strtod+0x10>)
 800b1d2:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <strtod+0x14>)
 800b1d4:	6800      	ldr	r0, [r0, #0]
 800b1d6:	f7ff ba43 	b.w	800a660 <_strtod_l>
 800b1da:	bf00      	nop
 800b1dc:	24000014 	.word	0x24000014
 800b1e0:	2400007c 	.word	0x2400007c

0800b1e4 <rshift>:
 800b1e4:	6903      	ldr	r3, [r0, #16]
 800b1e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1f2:	f100 0414 	add.w	r4, r0, #20
 800b1f6:	dd45      	ble.n	800b284 <rshift+0xa0>
 800b1f8:	f011 011f 	ands.w	r1, r1, #31
 800b1fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b200:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b204:	d10c      	bne.n	800b220 <rshift+0x3c>
 800b206:	f100 0710 	add.w	r7, r0, #16
 800b20a:	4629      	mov	r1, r5
 800b20c:	42b1      	cmp	r1, r6
 800b20e:	d334      	bcc.n	800b27a <rshift+0x96>
 800b210:	1a9b      	subs	r3, r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	1eea      	subs	r2, r5, #3
 800b216:	4296      	cmp	r6, r2
 800b218:	bf38      	it	cc
 800b21a:	2300      	movcc	r3, #0
 800b21c:	4423      	add	r3, r4
 800b21e:	e015      	b.n	800b24c <rshift+0x68>
 800b220:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b224:	f1c1 0820 	rsb	r8, r1, #32
 800b228:	40cf      	lsrs	r7, r1
 800b22a:	f105 0e04 	add.w	lr, r5, #4
 800b22e:	46a1      	mov	r9, r4
 800b230:	4576      	cmp	r6, lr
 800b232:	46f4      	mov	ip, lr
 800b234:	d815      	bhi.n	800b262 <rshift+0x7e>
 800b236:	1a9a      	subs	r2, r3, r2
 800b238:	0092      	lsls	r2, r2, #2
 800b23a:	3a04      	subs	r2, #4
 800b23c:	3501      	adds	r5, #1
 800b23e:	42ae      	cmp	r6, r5
 800b240:	bf38      	it	cc
 800b242:	2200      	movcc	r2, #0
 800b244:	18a3      	adds	r3, r4, r2
 800b246:	50a7      	str	r7, [r4, r2]
 800b248:	b107      	cbz	r7, 800b24c <rshift+0x68>
 800b24a:	3304      	adds	r3, #4
 800b24c:	1b1a      	subs	r2, r3, r4
 800b24e:	42a3      	cmp	r3, r4
 800b250:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b254:	bf08      	it	eq
 800b256:	2300      	moveq	r3, #0
 800b258:	6102      	str	r2, [r0, #16]
 800b25a:	bf08      	it	eq
 800b25c:	6143      	streq	r3, [r0, #20]
 800b25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b262:	f8dc c000 	ldr.w	ip, [ip]
 800b266:	fa0c fc08 	lsl.w	ip, ip, r8
 800b26a:	ea4c 0707 	orr.w	r7, ip, r7
 800b26e:	f849 7b04 	str.w	r7, [r9], #4
 800b272:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b276:	40cf      	lsrs	r7, r1
 800b278:	e7da      	b.n	800b230 <rshift+0x4c>
 800b27a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b27e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b282:	e7c3      	b.n	800b20c <rshift+0x28>
 800b284:	4623      	mov	r3, r4
 800b286:	e7e1      	b.n	800b24c <rshift+0x68>

0800b288 <__hexdig_fun>:
 800b288:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b28c:	2b09      	cmp	r3, #9
 800b28e:	d802      	bhi.n	800b296 <__hexdig_fun+0xe>
 800b290:	3820      	subs	r0, #32
 800b292:	b2c0      	uxtb	r0, r0
 800b294:	4770      	bx	lr
 800b296:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	d801      	bhi.n	800b2a2 <__hexdig_fun+0x1a>
 800b29e:	3847      	subs	r0, #71	; 0x47
 800b2a0:	e7f7      	b.n	800b292 <__hexdig_fun+0xa>
 800b2a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d801      	bhi.n	800b2ae <__hexdig_fun+0x26>
 800b2aa:	3827      	subs	r0, #39	; 0x27
 800b2ac:	e7f1      	b.n	800b292 <__hexdig_fun+0xa>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <__gethex>:
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	ed2d 8b02 	vpush	{d8}
 800b2bc:	b089      	sub	sp, #36	; 0x24
 800b2be:	ee08 0a10 	vmov	s16, r0
 800b2c2:	9304      	str	r3, [sp, #16]
 800b2c4:	4bb4      	ldr	r3, [pc, #720]	; (800b598 <__gethex+0x2e4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	4690      	mov	r8, r2
 800b2d0:	f7f5 f81e 	bl	8000310 <strlen>
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	f8db 2000 	ldr.w	r2, [fp]
 800b2da:	4403      	add	r3, r0
 800b2dc:	4682      	mov	sl, r0
 800b2de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	1c93      	adds	r3, r2, #2
 800b2e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2ee:	32fe      	adds	r2, #254	; 0xfe
 800b2f0:	18d1      	adds	r1, r2, r3
 800b2f2:	461f      	mov	r7, r3
 800b2f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2f8:	9100      	str	r1, [sp, #0]
 800b2fa:	2830      	cmp	r0, #48	; 0x30
 800b2fc:	d0f8      	beq.n	800b2f0 <__gethex+0x3c>
 800b2fe:	f7ff ffc3 	bl	800b288 <__hexdig_fun>
 800b302:	4604      	mov	r4, r0
 800b304:	2800      	cmp	r0, #0
 800b306:	d13a      	bne.n	800b37e <__gethex+0xca>
 800b308:	9901      	ldr	r1, [sp, #4]
 800b30a:	4652      	mov	r2, sl
 800b30c:	4638      	mov	r0, r7
 800b30e:	f001 f87b 	bl	800c408 <strncmp>
 800b312:	4605      	mov	r5, r0
 800b314:	2800      	cmp	r0, #0
 800b316:	d168      	bne.n	800b3ea <__gethex+0x136>
 800b318:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b31c:	eb07 060a 	add.w	r6, r7, sl
 800b320:	f7ff ffb2 	bl	800b288 <__hexdig_fun>
 800b324:	2800      	cmp	r0, #0
 800b326:	d062      	beq.n	800b3ee <__gethex+0x13a>
 800b328:	4633      	mov	r3, r6
 800b32a:	7818      	ldrb	r0, [r3, #0]
 800b32c:	2830      	cmp	r0, #48	; 0x30
 800b32e:	461f      	mov	r7, r3
 800b330:	f103 0301 	add.w	r3, r3, #1
 800b334:	d0f9      	beq.n	800b32a <__gethex+0x76>
 800b336:	f7ff ffa7 	bl	800b288 <__hexdig_fun>
 800b33a:	2301      	movs	r3, #1
 800b33c:	fab0 f480 	clz	r4, r0
 800b340:	0964      	lsrs	r4, r4, #5
 800b342:	4635      	mov	r5, r6
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	463a      	mov	r2, r7
 800b348:	4616      	mov	r6, r2
 800b34a:	3201      	adds	r2, #1
 800b34c:	7830      	ldrb	r0, [r6, #0]
 800b34e:	f7ff ff9b 	bl	800b288 <__hexdig_fun>
 800b352:	2800      	cmp	r0, #0
 800b354:	d1f8      	bne.n	800b348 <__gethex+0x94>
 800b356:	9901      	ldr	r1, [sp, #4]
 800b358:	4652      	mov	r2, sl
 800b35a:	4630      	mov	r0, r6
 800b35c:	f001 f854 	bl	800c408 <strncmp>
 800b360:	b980      	cbnz	r0, 800b384 <__gethex+0xd0>
 800b362:	b94d      	cbnz	r5, 800b378 <__gethex+0xc4>
 800b364:	eb06 050a 	add.w	r5, r6, sl
 800b368:	462a      	mov	r2, r5
 800b36a:	4616      	mov	r6, r2
 800b36c:	3201      	adds	r2, #1
 800b36e:	7830      	ldrb	r0, [r6, #0]
 800b370:	f7ff ff8a 	bl	800b288 <__hexdig_fun>
 800b374:	2800      	cmp	r0, #0
 800b376:	d1f8      	bne.n	800b36a <__gethex+0xb6>
 800b378:	1bad      	subs	r5, r5, r6
 800b37a:	00ad      	lsls	r5, r5, #2
 800b37c:	e004      	b.n	800b388 <__gethex+0xd4>
 800b37e:	2400      	movs	r4, #0
 800b380:	4625      	mov	r5, r4
 800b382:	e7e0      	b.n	800b346 <__gethex+0x92>
 800b384:	2d00      	cmp	r5, #0
 800b386:	d1f7      	bne.n	800b378 <__gethex+0xc4>
 800b388:	7833      	ldrb	r3, [r6, #0]
 800b38a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b38e:	2b50      	cmp	r3, #80	; 0x50
 800b390:	d13b      	bne.n	800b40a <__gethex+0x156>
 800b392:	7873      	ldrb	r3, [r6, #1]
 800b394:	2b2b      	cmp	r3, #43	; 0x2b
 800b396:	d02c      	beq.n	800b3f2 <__gethex+0x13e>
 800b398:	2b2d      	cmp	r3, #45	; 0x2d
 800b39a:	d02e      	beq.n	800b3fa <__gethex+0x146>
 800b39c:	1c71      	adds	r1, r6, #1
 800b39e:	f04f 0900 	mov.w	r9, #0
 800b3a2:	7808      	ldrb	r0, [r1, #0]
 800b3a4:	f7ff ff70 	bl	800b288 <__hexdig_fun>
 800b3a8:	1e43      	subs	r3, r0, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b18      	cmp	r3, #24
 800b3ae:	d82c      	bhi.n	800b40a <__gethex+0x156>
 800b3b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b3b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3b8:	f7ff ff66 	bl	800b288 <__hexdig_fun>
 800b3bc:	1e43      	subs	r3, r0, #1
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b18      	cmp	r3, #24
 800b3c2:	d91d      	bls.n	800b400 <__gethex+0x14c>
 800b3c4:	f1b9 0f00 	cmp.w	r9, #0
 800b3c8:	d000      	beq.n	800b3cc <__gethex+0x118>
 800b3ca:	4252      	negs	r2, r2
 800b3cc:	4415      	add	r5, r2
 800b3ce:	f8cb 1000 	str.w	r1, [fp]
 800b3d2:	b1e4      	cbz	r4, 800b40e <__gethex+0x15a>
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bf14      	ite	ne
 800b3da:	2700      	movne	r7, #0
 800b3dc:	2706      	moveq	r7, #6
 800b3de:	4638      	mov	r0, r7
 800b3e0:	b009      	add	sp, #36	; 0x24
 800b3e2:	ecbd 8b02 	vpop	{d8}
 800b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ea:	463e      	mov	r6, r7
 800b3ec:	4625      	mov	r5, r4
 800b3ee:	2401      	movs	r4, #1
 800b3f0:	e7ca      	b.n	800b388 <__gethex+0xd4>
 800b3f2:	f04f 0900 	mov.w	r9, #0
 800b3f6:	1cb1      	adds	r1, r6, #2
 800b3f8:	e7d3      	b.n	800b3a2 <__gethex+0xee>
 800b3fa:	f04f 0901 	mov.w	r9, #1
 800b3fe:	e7fa      	b.n	800b3f6 <__gethex+0x142>
 800b400:	230a      	movs	r3, #10
 800b402:	fb03 0202 	mla	r2, r3, r2, r0
 800b406:	3a10      	subs	r2, #16
 800b408:	e7d4      	b.n	800b3b4 <__gethex+0x100>
 800b40a:	4631      	mov	r1, r6
 800b40c:	e7df      	b.n	800b3ce <__gethex+0x11a>
 800b40e:	1bf3      	subs	r3, r6, r7
 800b410:	3b01      	subs	r3, #1
 800b412:	4621      	mov	r1, r4
 800b414:	2b07      	cmp	r3, #7
 800b416:	dc0b      	bgt.n	800b430 <__gethex+0x17c>
 800b418:	ee18 0a10 	vmov	r0, s16
 800b41c:	f000 fa72 	bl	800b904 <_Balloc>
 800b420:	4604      	mov	r4, r0
 800b422:	b940      	cbnz	r0, 800b436 <__gethex+0x182>
 800b424:	4b5d      	ldr	r3, [pc, #372]	; (800b59c <__gethex+0x2e8>)
 800b426:	4602      	mov	r2, r0
 800b428:	21de      	movs	r1, #222	; 0xde
 800b42a:	485d      	ldr	r0, [pc, #372]	; (800b5a0 <__gethex+0x2ec>)
 800b42c:	f001 f80e 	bl	800c44c <__assert_func>
 800b430:	3101      	adds	r1, #1
 800b432:	105b      	asrs	r3, r3, #1
 800b434:	e7ee      	b.n	800b414 <__gethex+0x160>
 800b436:	f100 0914 	add.w	r9, r0, #20
 800b43a:	f04f 0b00 	mov.w	fp, #0
 800b43e:	f1ca 0301 	rsb	r3, sl, #1
 800b442:	f8cd 9008 	str.w	r9, [sp, #8]
 800b446:	f8cd b000 	str.w	fp, [sp]
 800b44a:	9306      	str	r3, [sp, #24]
 800b44c:	42b7      	cmp	r7, r6
 800b44e:	d340      	bcc.n	800b4d2 <__gethex+0x21e>
 800b450:	9802      	ldr	r0, [sp, #8]
 800b452:	9b00      	ldr	r3, [sp, #0]
 800b454:	f840 3b04 	str.w	r3, [r0], #4
 800b458:	eba0 0009 	sub.w	r0, r0, r9
 800b45c:	1080      	asrs	r0, r0, #2
 800b45e:	0146      	lsls	r6, r0, #5
 800b460:	6120      	str	r0, [r4, #16]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fb40 	bl	800bae8 <__hi0bits>
 800b468:	1a30      	subs	r0, r6, r0
 800b46a:	f8d8 6000 	ldr.w	r6, [r8]
 800b46e:	42b0      	cmp	r0, r6
 800b470:	dd63      	ble.n	800b53a <__gethex+0x286>
 800b472:	1b87      	subs	r7, r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fee1 	bl	800c23e <__any_on>
 800b47c:	4682      	mov	sl, r0
 800b47e:	b1a8      	cbz	r0, 800b4ac <__gethex+0x1f8>
 800b480:	1e7b      	subs	r3, r7, #1
 800b482:	1159      	asrs	r1, r3, #5
 800b484:	f003 021f 	and.w	r2, r3, #31
 800b488:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b48c:	f04f 0a01 	mov.w	sl, #1
 800b490:	fa0a f202 	lsl.w	r2, sl, r2
 800b494:	420a      	tst	r2, r1
 800b496:	d009      	beq.n	800b4ac <__gethex+0x1f8>
 800b498:	4553      	cmp	r3, sl
 800b49a:	dd05      	ble.n	800b4a8 <__gethex+0x1f4>
 800b49c:	1eb9      	subs	r1, r7, #2
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fecd 	bl	800c23e <__any_on>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d145      	bne.n	800b534 <__gethex+0x280>
 800b4a8:	f04f 0a02 	mov.w	sl, #2
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff fe98 	bl	800b1e4 <rshift>
 800b4b4:	443d      	add	r5, r7
 800b4b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4ba:	42ab      	cmp	r3, r5
 800b4bc:	da4c      	bge.n	800b558 <__gethex+0x2a4>
 800b4be:	ee18 0a10 	vmov	r0, s16
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	f000 fa5e 	bl	800b984 <_Bfree>
 800b4c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	27a3      	movs	r7, #163	; 0xa3
 800b4d0:	e785      	b.n	800b3de <__gethex+0x12a>
 800b4d2:	1e73      	subs	r3, r6, #1
 800b4d4:	9a05      	ldr	r2, [sp, #20]
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d019      	beq.n	800b514 <__gethex+0x260>
 800b4e0:	f1bb 0f20 	cmp.w	fp, #32
 800b4e4:	d107      	bne.n	800b4f6 <__gethex+0x242>
 800b4e6:	9b02      	ldr	r3, [sp, #8]
 800b4e8:	9a00      	ldr	r2, [sp, #0]
 800b4ea:	f843 2b04 	str.w	r2, [r3], #4
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	469b      	mov	fp, r3
 800b4f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4fa:	f7ff fec5 	bl	800b288 <__hexdig_fun>
 800b4fe:	9b00      	ldr	r3, [sp, #0]
 800b500:	f000 000f 	and.w	r0, r0, #15
 800b504:	fa00 f00b 	lsl.w	r0, r0, fp
 800b508:	4303      	orrs	r3, r0
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	f10b 0b04 	add.w	fp, fp, #4
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	e00d      	b.n	800b530 <__gethex+0x27c>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	9a06      	ldr	r2, [sp, #24]
 800b518:	4413      	add	r3, r2
 800b51a:	42bb      	cmp	r3, r7
 800b51c:	d3e0      	bcc.n	800b4e0 <__gethex+0x22c>
 800b51e:	4618      	mov	r0, r3
 800b520:	9901      	ldr	r1, [sp, #4]
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	4652      	mov	r2, sl
 800b526:	f000 ff6f 	bl	800c408 <strncmp>
 800b52a:	9b07      	ldr	r3, [sp, #28]
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d1d7      	bne.n	800b4e0 <__gethex+0x22c>
 800b530:	461e      	mov	r6, r3
 800b532:	e78b      	b.n	800b44c <__gethex+0x198>
 800b534:	f04f 0a03 	mov.w	sl, #3
 800b538:	e7b8      	b.n	800b4ac <__gethex+0x1f8>
 800b53a:	da0a      	bge.n	800b552 <__gethex+0x29e>
 800b53c:	1a37      	subs	r7, r6, r0
 800b53e:	4621      	mov	r1, r4
 800b540:	ee18 0a10 	vmov	r0, s16
 800b544:	463a      	mov	r2, r7
 800b546:	f000 fc39 	bl	800bdbc <__lshift>
 800b54a:	1bed      	subs	r5, r5, r7
 800b54c:	4604      	mov	r4, r0
 800b54e:	f100 0914 	add.w	r9, r0, #20
 800b552:	f04f 0a00 	mov.w	sl, #0
 800b556:	e7ae      	b.n	800b4b6 <__gethex+0x202>
 800b558:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b55c:	42a8      	cmp	r0, r5
 800b55e:	dd72      	ble.n	800b646 <__gethex+0x392>
 800b560:	1b45      	subs	r5, r0, r5
 800b562:	42ae      	cmp	r6, r5
 800b564:	dc36      	bgt.n	800b5d4 <__gethex+0x320>
 800b566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d02a      	beq.n	800b5c4 <__gethex+0x310>
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d02c      	beq.n	800b5cc <__gethex+0x318>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d11c      	bne.n	800b5b0 <__gethex+0x2fc>
 800b576:	42ae      	cmp	r6, r5
 800b578:	d11a      	bne.n	800b5b0 <__gethex+0x2fc>
 800b57a:	2e01      	cmp	r6, #1
 800b57c:	d112      	bne.n	800b5a4 <__gethex+0x2f0>
 800b57e:	9a04      	ldr	r2, [sp, #16]
 800b580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	2301      	movs	r3, #1
 800b588:	6123      	str	r3, [r4, #16]
 800b58a:	f8c9 3000 	str.w	r3, [r9]
 800b58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b590:	2762      	movs	r7, #98	; 0x62
 800b592:	601c      	str	r4, [r3, #0]
 800b594:	e723      	b.n	800b3de <__gethex+0x12a>
 800b596:	bf00      	nop
 800b598:	0800d438 	.word	0x0800d438
 800b59c:	0800d3c0 	.word	0x0800d3c0
 800b5a0:	0800d3d1 	.word	0x0800d3d1
 800b5a4:	1e71      	subs	r1, r6, #1
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 fe49 	bl	800c23e <__any_on>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d1e6      	bne.n	800b57e <__gethex+0x2ca>
 800b5b0:	ee18 0a10 	vmov	r0, s16
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	f000 f9e5 	bl	800b984 <_Bfree>
 800b5ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5bc:	2300      	movs	r3, #0
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	2750      	movs	r7, #80	; 0x50
 800b5c2:	e70c      	b.n	800b3de <__gethex+0x12a>
 800b5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1f2      	bne.n	800b5b0 <__gethex+0x2fc>
 800b5ca:	e7d8      	b.n	800b57e <__gethex+0x2ca>
 800b5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1d5      	bne.n	800b57e <__gethex+0x2ca>
 800b5d2:	e7ed      	b.n	800b5b0 <__gethex+0x2fc>
 800b5d4:	1e6f      	subs	r7, r5, #1
 800b5d6:	f1ba 0f00 	cmp.w	sl, #0
 800b5da:	d131      	bne.n	800b640 <__gethex+0x38c>
 800b5dc:	b127      	cbz	r7, 800b5e8 <__gethex+0x334>
 800b5de:	4639      	mov	r1, r7
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fe2c 	bl	800c23e <__any_on>
 800b5e6:	4682      	mov	sl, r0
 800b5e8:	117b      	asrs	r3, r7, #5
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5f0:	f007 071f 	and.w	r7, r7, #31
 800b5f4:	fa01 f707 	lsl.w	r7, r1, r7
 800b5f8:	421f      	tst	r7, r3
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bf18      	it	ne
 800b600:	f04a 0a02 	orrne.w	sl, sl, #2
 800b604:	1b76      	subs	r6, r6, r5
 800b606:	f7ff fded 	bl	800b1e4 <rshift>
 800b60a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b60e:	2702      	movs	r7, #2
 800b610:	f1ba 0f00 	cmp.w	sl, #0
 800b614:	d048      	beq.n	800b6a8 <__gethex+0x3f4>
 800b616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d015      	beq.n	800b64a <__gethex+0x396>
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d017      	beq.n	800b652 <__gethex+0x39e>
 800b622:	2b01      	cmp	r3, #1
 800b624:	d109      	bne.n	800b63a <__gethex+0x386>
 800b626:	f01a 0f02 	tst.w	sl, #2
 800b62a:	d006      	beq.n	800b63a <__gethex+0x386>
 800b62c:	f8d9 0000 	ldr.w	r0, [r9]
 800b630:	ea4a 0a00 	orr.w	sl, sl, r0
 800b634:	f01a 0f01 	tst.w	sl, #1
 800b638:	d10e      	bne.n	800b658 <__gethex+0x3a4>
 800b63a:	f047 0710 	orr.w	r7, r7, #16
 800b63e:	e033      	b.n	800b6a8 <__gethex+0x3f4>
 800b640:	f04f 0a01 	mov.w	sl, #1
 800b644:	e7d0      	b.n	800b5e8 <__gethex+0x334>
 800b646:	2701      	movs	r7, #1
 800b648:	e7e2      	b.n	800b610 <__gethex+0x35c>
 800b64a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b64c:	f1c3 0301 	rsb	r3, r3, #1
 800b650:	9315      	str	r3, [sp, #84]	; 0x54
 800b652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0f0      	beq.n	800b63a <__gethex+0x386>
 800b658:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b65c:	f104 0314 	add.w	r3, r4, #20
 800b660:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b664:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b668:	f04f 0c00 	mov.w	ip, #0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b672:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b676:	d01c      	beq.n	800b6b2 <__gethex+0x3fe>
 800b678:	3201      	adds	r2, #1
 800b67a:	6002      	str	r2, [r0, #0]
 800b67c:	2f02      	cmp	r7, #2
 800b67e:	f104 0314 	add.w	r3, r4, #20
 800b682:	d13f      	bne.n	800b704 <__gethex+0x450>
 800b684:	f8d8 2000 	ldr.w	r2, [r8]
 800b688:	3a01      	subs	r2, #1
 800b68a:	42b2      	cmp	r2, r6
 800b68c:	d10a      	bne.n	800b6a4 <__gethex+0x3f0>
 800b68e:	1171      	asrs	r1, r6, #5
 800b690:	2201      	movs	r2, #1
 800b692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b696:	f006 061f 	and.w	r6, r6, #31
 800b69a:	fa02 f606 	lsl.w	r6, r2, r6
 800b69e:	421e      	tst	r6, r3
 800b6a0:	bf18      	it	ne
 800b6a2:	4617      	movne	r7, r2
 800b6a4:	f047 0720 	orr.w	r7, r7, #32
 800b6a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6aa:	601c      	str	r4, [r3, #0]
 800b6ac:	9b04      	ldr	r3, [sp, #16]
 800b6ae:	601d      	str	r5, [r3, #0]
 800b6b0:	e695      	b.n	800b3de <__gethex+0x12a>
 800b6b2:	4299      	cmp	r1, r3
 800b6b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6b8:	d8d8      	bhi.n	800b66c <__gethex+0x3b8>
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	459b      	cmp	fp, r3
 800b6be:	db19      	blt.n	800b6f4 <__gethex+0x440>
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	ee18 0a10 	vmov	r0, s16
 800b6c6:	3101      	adds	r1, #1
 800b6c8:	f000 f91c 	bl	800b904 <_Balloc>
 800b6cc:	4681      	mov	r9, r0
 800b6ce:	b918      	cbnz	r0, 800b6d8 <__gethex+0x424>
 800b6d0:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <__gethex+0x488>)
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	2184      	movs	r1, #132	; 0x84
 800b6d6:	e6a8      	b.n	800b42a <__gethex+0x176>
 800b6d8:	6922      	ldr	r2, [r4, #16]
 800b6da:	3202      	adds	r2, #2
 800b6dc:	f104 010c 	add.w	r1, r4, #12
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	300c      	adds	r0, #12
 800b6e4:	f000 f900 	bl	800b8e8 <memcpy>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	ee18 0a10 	vmov	r0, s16
 800b6ee:	f000 f949 	bl	800b984 <_Bfree>
 800b6f2:	464c      	mov	r4, r9
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6fc:	6122      	str	r2, [r4, #16]
 800b6fe:	2201      	movs	r2, #1
 800b700:	615a      	str	r2, [r3, #20]
 800b702:	e7bb      	b.n	800b67c <__gethex+0x3c8>
 800b704:	6922      	ldr	r2, [r4, #16]
 800b706:	455a      	cmp	r2, fp
 800b708:	dd0b      	ble.n	800b722 <__gethex+0x46e>
 800b70a:	2101      	movs	r1, #1
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff fd69 	bl	800b1e4 <rshift>
 800b712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b716:	3501      	adds	r5, #1
 800b718:	42ab      	cmp	r3, r5
 800b71a:	f6ff aed0 	blt.w	800b4be <__gethex+0x20a>
 800b71e:	2701      	movs	r7, #1
 800b720:	e7c0      	b.n	800b6a4 <__gethex+0x3f0>
 800b722:	f016 061f 	ands.w	r6, r6, #31
 800b726:	d0fa      	beq.n	800b71e <__gethex+0x46a>
 800b728:	4453      	add	r3, sl
 800b72a:	f1c6 0620 	rsb	r6, r6, #32
 800b72e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b732:	f000 f9d9 	bl	800bae8 <__hi0bits>
 800b736:	42b0      	cmp	r0, r6
 800b738:	dbe7      	blt.n	800b70a <__gethex+0x456>
 800b73a:	e7f0      	b.n	800b71e <__gethex+0x46a>
 800b73c:	0800d3c0 	.word	0x0800d3c0

0800b740 <L_shift>:
 800b740:	f1c2 0208 	rsb	r2, r2, #8
 800b744:	0092      	lsls	r2, r2, #2
 800b746:	b570      	push	{r4, r5, r6, lr}
 800b748:	f1c2 0620 	rsb	r6, r2, #32
 800b74c:	6843      	ldr	r3, [r0, #4]
 800b74e:	6804      	ldr	r4, [r0, #0]
 800b750:	fa03 f506 	lsl.w	r5, r3, r6
 800b754:	432c      	orrs	r4, r5
 800b756:	40d3      	lsrs	r3, r2
 800b758:	6004      	str	r4, [r0, #0]
 800b75a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b75e:	4288      	cmp	r0, r1
 800b760:	d3f4      	bcc.n	800b74c <L_shift+0xc>
 800b762:	bd70      	pop	{r4, r5, r6, pc}

0800b764 <__match>:
 800b764:	b530      	push	{r4, r5, lr}
 800b766:	6803      	ldr	r3, [r0, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b76e:	b914      	cbnz	r4, 800b776 <__match+0x12>
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	2001      	movs	r0, #1
 800b774:	bd30      	pop	{r4, r5, pc}
 800b776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b77e:	2d19      	cmp	r5, #25
 800b780:	bf98      	it	ls
 800b782:	3220      	addls	r2, #32
 800b784:	42a2      	cmp	r2, r4
 800b786:	d0f0      	beq.n	800b76a <__match+0x6>
 800b788:	2000      	movs	r0, #0
 800b78a:	e7f3      	b.n	800b774 <__match+0x10>

0800b78c <__hexnan>:
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	680b      	ldr	r3, [r1, #0]
 800b792:	115e      	asrs	r6, r3, #5
 800b794:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b798:	f013 031f 	ands.w	r3, r3, #31
 800b79c:	b087      	sub	sp, #28
 800b79e:	bf18      	it	ne
 800b7a0:	3604      	addne	r6, #4
 800b7a2:	2500      	movs	r5, #0
 800b7a4:	1f37      	subs	r7, r6, #4
 800b7a6:	4690      	mov	r8, r2
 800b7a8:	6802      	ldr	r2, [r0, #0]
 800b7aa:	9301      	str	r3, [sp, #4]
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7b2:	46b9      	mov	r9, r7
 800b7b4:	463c      	mov	r4, r7
 800b7b6:	9502      	str	r5, [sp, #8]
 800b7b8:	46ab      	mov	fp, r5
 800b7ba:	7851      	ldrb	r1, [r2, #1]
 800b7bc:	1c53      	adds	r3, r2, #1
 800b7be:	9303      	str	r3, [sp, #12]
 800b7c0:	b341      	cbz	r1, 800b814 <__hexnan+0x88>
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	9205      	str	r2, [sp, #20]
 800b7c6:	9104      	str	r1, [sp, #16]
 800b7c8:	f7ff fd5e 	bl	800b288 <__hexdig_fun>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d14f      	bne.n	800b870 <__hexnan+0xe4>
 800b7d0:	9904      	ldr	r1, [sp, #16]
 800b7d2:	9a05      	ldr	r2, [sp, #20]
 800b7d4:	2920      	cmp	r1, #32
 800b7d6:	d818      	bhi.n	800b80a <__hexnan+0x7e>
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	459b      	cmp	fp, r3
 800b7dc:	dd13      	ble.n	800b806 <__hexnan+0x7a>
 800b7de:	454c      	cmp	r4, r9
 800b7e0:	d206      	bcs.n	800b7f0 <__hexnan+0x64>
 800b7e2:	2d07      	cmp	r5, #7
 800b7e4:	dc04      	bgt.n	800b7f0 <__hexnan+0x64>
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7ff ffa8 	bl	800b740 <L_shift>
 800b7f0:	4544      	cmp	r4, r8
 800b7f2:	d950      	bls.n	800b896 <__hexnan+0x10a>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b7fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b802:	464c      	mov	r4, r9
 800b804:	461d      	mov	r5, r3
 800b806:	9a03      	ldr	r2, [sp, #12]
 800b808:	e7d7      	b.n	800b7ba <__hexnan+0x2e>
 800b80a:	2929      	cmp	r1, #41	; 0x29
 800b80c:	d156      	bne.n	800b8bc <__hexnan+0x130>
 800b80e:	3202      	adds	r2, #2
 800b810:	f8ca 2000 	str.w	r2, [sl]
 800b814:	f1bb 0f00 	cmp.w	fp, #0
 800b818:	d050      	beq.n	800b8bc <__hexnan+0x130>
 800b81a:	454c      	cmp	r4, r9
 800b81c:	d206      	bcs.n	800b82c <__hexnan+0xa0>
 800b81e:	2d07      	cmp	r5, #7
 800b820:	dc04      	bgt.n	800b82c <__hexnan+0xa0>
 800b822:	462a      	mov	r2, r5
 800b824:	4649      	mov	r1, r9
 800b826:	4620      	mov	r0, r4
 800b828:	f7ff ff8a 	bl	800b740 <L_shift>
 800b82c:	4544      	cmp	r4, r8
 800b82e:	d934      	bls.n	800b89a <__hexnan+0x10e>
 800b830:	f1a8 0204 	sub.w	r2, r8, #4
 800b834:	4623      	mov	r3, r4
 800b836:	f853 1b04 	ldr.w	r1, [r3], #4
 800b83a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b83e:	429f      	cmp	r7, r3
 800b840:	d2f9      	bcs.n	800b836 <__hexnan+0xaa>
 800b842:	1b3b      	subs	r3, r7, r4
 800b844:	f023 0303 	bic.w	r3, r3, #3
 800b848:	3304      	adds	r3, #4
 800b84a:	3401      	adds	r4, #1
 800b84c:	3e03      	subs	r6, #3
 800b84e:	42b4      	cmp	r4, r6
 800b850:	bf88      	it	hi
 800b852:	2304      	movhi	r3, #4
 800b854:	4443      	add	r3, r8
 800b856:	2200      	movs	r2, #0
 800b858:	f843 2b04 	str.w	r2, [r3], #4
 800b85c:	429f      	cmp	r7, r3
 800b85e:	d2fb      	bcs.n	800b858 <__hexnan+0xcc>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	b91b      	cbnz	r3, 800b86c <__hexnan+0xe0>
 800b864:	4547      	cmp	r7, r8
 800b866:	d127      	bne.n	800b8b8 <__hexnan+0x12c>
 800b868:	2301      	movs	r3, #1
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	2005      	movs	r0, #5
 800b86e:	e026      	b.n	800b8be <__hexnan+0x132>
 800b870:	3501      	adds	r5, #1
 800b872:	2d08      	cmp	r5, #8
 800b874:	f10b 0b01 	add.w	fp, fp, #1
 800b878:	dd06      	ble.n	800b888 <__hexnan+0xfc>
 800b87a:	4544      	cmp	r4, r8
 800b87c:	d9c3      	bls.n	800b806 <__hexnan+0x7a>
 800b87e:	2300      	movs	r3, #0
 800b880:	f844 3c04 	str.w	r3, [r4, #-4]
 800b884:	2501      	movs	r5, #1
 800b886:	3c04      	subs	r4, #4
 800b888:	6822      	ldr	r2, [r4, #0]
 800b88a:	f000 000f 	and.w	r0, r0, #15
 800b88e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	e7b7      	b.n	800b806 <__hexnan+0x7a>
 800b896:	2508      	movs	r5, #8
 800b898:	e7b5      	b.n	800b806 <__hexnan+0x7a>
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0df      	beq.n	800b860 <__hexnan+0xd4>
 800b8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a4:	f1c3 0320 	rsb	r3, r3, #32
 800b8a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b8b0:	401a      	ands	r2, r3
 800b8b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b8b6:	e7d3      	b.n	800b860 <__hexnan+0xd4>
 800b8b8:	3f04      	subs	r7, #4
 800b8ba:	e7d1      	b.n	800b860 <__hexnan+0xd4>
 800b8bc:	2004      	movs	r0, #4
 800b8be:	b007      	add	sp, #28
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8c4 <__ascii_mbtowc>:
 800b8c4:	b082      	sub	sp, #8
 800b8c6:	b901      	cbnz	r1, 800b8ca <__ascii_mbtowc+0x6>
 800b8c8:	a901      	add	r1, sp, #4
 800b8ca:	b142      	cbz	r2, 800b8de <__ascii_mbtowc+0x1a>
 800b8cc:	b14b      	cbz	r3, 800b8e2 <__ascii_mbtowc+0x1e>
 800b8ce:	7813      	ldrb	r3, [r2, #0]
 800b8d0:	600b      	str	r3, [r1, #0]
 800b8d2:	7812      	ldrb	r2, [r2, #0]
 800b8d4:	1e10      	subs	r0, r2, #0
 800b8d6:	bf18      	it	ne
 800b8d8:	2001      	movne	r0, #1
 800b8da:	b002      	add	sp, #8
 800b8dc:	4770      	bx	lr
 800b8de:	4610      	mov	r0, r2
 800b8e0:	e7fb      	b.n	800b8da <__ascii_mbtowc+0x16>
 800b8e2:	f06f 0001 	mvn.w	r0, #1
 800b8e6:	e7f8      	b.n	800b8da <__ascii_mbtowc+0x16>

0800b8e8 <memcpy>:
 800b8e8:	440a      	add	r2, r1
 800b8ea:	4291      	cmp	r1, r2
 800b8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8f0:	d100      	bne.n	800b8f4 <memcpy+0xc>
 800b8f2:	4770      	bx	lr
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8fe:	4291      	cmp	r1, r2
 800b900:	d1f9      	bne.n	800b8f6 <memcpy+0xe>
 800b902:	bd10      	pop	{r4, pc}

0800b904 <_Balloc>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b908:	4604      	mov	r4, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	b976      	cbnz	r6, 800b92c <_Balloc+0x28>
 800b90e:	2010      	movs	r0, #16
 800b910:	f000 fdcc 	bl	800c4ac <malloc>
 800b914:	4602      	mov	r2, r0
 800b916:	6260      	str	r0, [r4, #36]	; 0x24
 800b918:	b920      	cbnz	r0, 800b924 <_Balloc+0x20>
 800b91a:	4b18      	ldr	r3, [pc, #96]	; (800b97c <_Balloc+0x78>)
 800b91c:	4818      	ldr	r0, [pc, #96]	; (800b980 <_Balloc+0x7c>)
 800b91e:	2166      	movs	r1, #102	; 0x66
 800b920:	f000 fd94 	bl	800c44c <__assert_func>
 800b924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b928:	6006      	str	r6, [r0, #0]
 800b92a:	60c6      	str	r6, [r0, #12]
 800b92c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b92e:	68f3      	ldr	r3, [r6, #12]
 800b930:	b183      	cbz	r3, 800b954 <_Balloc+0x50>
 800b932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b93a:	b9b8      	cbnz	r0, 800b96c <_Balloc+0x68>
 800b93c:	2101      	movs	r1, #1
 800b93e:	fa01 f605 	lsl.w	r6, r1, r5
 800b942:	1d72      	adds	r2, r6, #5
 800b944:	0092      	lsls	r2, r2, #2
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fc9a 	bl	800c280 <_calloc_r>
 800b94c:	b160      	cbz	r0, 800b968 <_Balloc+0x64>
 800b94e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b952:	e00e      	b.n	800b972 <_Balloc+0x6e>
 800b954:	2221      	movs	r2, #33	; 0x21
 800b956:	2104      	movs	r1, #4
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fc91 	bl	800c280 <_calloc_r>
 800b95e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b960:	60f0      	str	r0, [r6, #12]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e4      	bne.n	800b932 <_Balloc+0x2e>
 800b968:	2000      	movs	r0, #0
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	6802      	ldr	r2, [r0, #0]
 800b96e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b972:	2300      	movs	r3, #0
 800b974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b978:	e7f7      	b.n	800b96a <_Balloc+0x66>
 800b97a:	bf00      	nop
 800b97c:	0800d44c 	.word	0x0800d44c
 800b980:	0800d463 	.word	0x0800d463

0800b984 <_Bfree>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b976      	cbnz	r6, 800b9ac <_Bfree+0x28>
 800b98e:	2010      	movs	r0, #16
 800b990:	f000 fd8c 	bl	800c4ac <malloc>
 800b994:	4602      	mov	r2, r0
 800b996:	6268      	str	r0, [r5, #36]	; 0x24
 800b998:	b920      	cbnz	r0, 800b9a4 <_Bfree+0x20>
 800b99a:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <_Bfree+0x3c>)
 800b99c:	4809      	ldr	r0, [pc, #36]	; (800b9c4 <_Bfree+0x40>)
 800b99e:	218a      	movs	r1, #138	; 0x8a
 800b9a0:	f000 fd54 	bl	800c44c <__assert_func>
 800b9a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9a8:	6006      	str	r6, [r0, #0]
 800b9aa:	60c6      	str	r6, [r0, #12]
 800b9ac:	b13c      	cbz	r4, 800b9be <_Bfree+0x3a>
 800b9ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9b0:	6862      	ldr	r2, [r4, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9b8:	6021      	str	r1, [r4, #0]
 800b9ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	0800d44c 	.word	0x0800d44c
 800b9c4:	0800d463 	.word	0x0800d463

0800b9c8 <__multadd>:
 800b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	690d      	ldr	r5, [r1, #16]
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	461e      	mov	r6, r3
 800b9d4:	f101 0c14 	add.w	ip, r1, #20
 800b9d8:	2000      	movs	r0, #0
 800b9da:	f8dc 3000 	ldr.w	r3, [ip]
 800b9de:	b299      	uxth	r1, r3
 800b9e0:	fb02 6101 	mla	r1, r2, r1, r6
 800b9e4:	0c1e      	lsrs	r6, r3, #16
 800b9e6:	0c0b      	lsrs	r3, r1, #16
 800b9e8:	fb02 3306 	mla	r3, r2, r6, r3
 800b9ec:	b289      	uxth	r1, r1
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9f4:	4285      	cmp	r5, r0
 800b9f6:	f84c 1b04 	str.w	r1, [ip], #4
 800b9fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9fe:	dcec      	bgt.n	800b9da <__multadd+0x12>
 800ba00:	b30e      	cbz	r6, 800ba46 <__multadd+0x7e>
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	42ab      	cmp	r3, r5
 800ba06:	dc19      	bgt.n	800ba3c <__multadd+0x74>
 800ba08:	6861      	ldr	r1, [r4, #4]
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	f7ff ff79 	bl	800b904 <_Balloc>
 800ba12:	4680      	mov	r8, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <__multadd+0x5a>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <__multadd+0x84>)
 800ba1a:	480d      	ldr	r0, [pc, #52]	; (800ba50 <__multadd+0x88>)
 800ba1c:	21b5      	movs	r1, #181	; 0xb5
 800ba1e:	f000 fd15 	bl	800c44c <__assert_func>
 800ba22:	6922      	ldr	r2, [r4, #16]
 800ba24:	3202      	adds	r2, #2
 800ba26:	f104 010c 	add.w	r1, r4, #12
 800ba2a:	0092      	lsls	r2, r2, #2
 800ba2c:	300c      	adds	r0, #12
 800ba2e:	f7ff ff5b 	bl	800b8e8 <memcpy>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4638      	mov	r0, r7
 800ba36:	f7ff ffa5 	bl	800b984 <_Bfree>
 800ba3a:	4644      	mov	r4, r8
 800ba3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba40:	3501      	adds	r5, #1
 800ba42:	615e      	str	r6, [r3, #20]
 800ba44:	6125      	str	r5, [r4, #16]
 800ba46:	4620      	mov	r0, r4
 800ba48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba4c:	0800d3c0 	.word	0x0800d3c0
 800ba50:	0800d463 	.word	0x0800d463

0800ba54 <__s2b>:
 800ba54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	460c      	mov	r4, r1
 800ba5a:	4615      	mov	r5, r2
 800ba5c:	461f      	mov	r7, r3
 800ba5e:	2209      	movs	r2, #9
 800ba60:	3308      	adds	r3, #8
 800ba62:	4606      	mov	r6, r0
 800ba64:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba68:	2100      	movs	r1, #0
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	db09      	blt.n	800ba84 <__s2b+0x30>
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff ff47 	bl	800b904 <_Balloc>
 800ba76:	b940      	cbnz	r0, 800ba8a <__s2b+0x36>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <__s2b+0x8c>)
 800ba7c:	4819      	ldr	r0, [pc, #100]	; (800bae4 <__s2b+0x90>)
 800ba7e:	21ce      	movs	r1, #206	; 0xce
 800ba80:	f000 fce4 	bl	800c44c <__assert_func>
 800ba84:	0052      	lsls	r2, r2, #1
 800ba86:	3101      	adds	r1, #1
 800ba88:	e7f0      	b.n	800ba6c <__s2b+0x18>
 800ba8a:	9b08      	ldr	r3, [sp, #32]
 800ba8c:	6143      	str	r3, [r0, #20]
 800ba8e:	2d09      	cmp	r5, #9
 800ba90:	f04f 0301 	mov.w	r3, #1
 800ba94:	6103      	str	r3, [r0, #16]
 800ba96:	dd16      	ble.n	800bac6 <__s2b+0x72>
 800ba98:	f104 0909 	add.w	r9, r4, #9
 800ba9c:	46c8      	mov	r8, r9
 800ba9e:	442c      	add	r4, r5
 800baa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800baa4:	4601      	mov	r1, r0
 800baa6:	3b30      	subs	r3, #48	; 0x30
 800baa8:	220a      	movs	r2, #10
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff ff8c 	bl	800b9c8 <__multadd>
 800bab0:	45a0      	cmp	r8, r4
 800bab2:	d1f5      	bne.n	800baa0 <__s2b+0x4c>
 800bab4:	f1a5 0408 	sub.w	r4, r5, #8
 800bab8:	444c      	add	r4, r9
 800baba:	1b2d      	subs	r5, r5, r4
 800babc:	1963      	adds	r3, r4, r5
 800babe:	42bb      	cmp	r3, r7
 800bac0:	db04      	blt.n	800bacc <__s2b+0x78>
 800bac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac6:	340a      	adds	r4, #10
 800bac8:	2509      	movs	r5, #9
 800baca:	e7f6      	b.n	800baba <__s2b+0x66>
 800bacc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bad0:	4601      	mov	r1, r0
 800bad2:	3b30      	subs	r3, #48	; 0x30
 800bad4:	220a      	movs	r2, #10
 800bad6:	4630      	mov	r0, r6
 800bad8:	f7ff ff76 	bl	800b9c8 <__multadd>
 800badc:	e7ee      	b.n	800babc <__s2b+0x68>
 800bade:	bf00      	nop
 800bae0:	0800d3c0 	.word	0x0800d3c0
 800bae4:	0800d463 	.word	0x0800d463

0800bae8 <__hi0bits>:
 800bae8:	0c03      	lsrs	r3, r0, #16
 800baea:	041b      	lsls	r3, r3, #16
 800baec:	b9d3      	cbnz	r3, 800bb24 <__hi0bits+0x3c>
 800baee:	0400      	lsls	r0, r0, #16
 800baf0:	2310      	movs	r3, #16
 800baf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baf6:	bf04      	itt	eq
 800baf8:	0200      	lsleq	r0, r0, #8
 800bafa:	3308      	addeq	r3, #8
 800bafc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb00:	bf04      	itt	eq
 800bb02:	0100      	lsleq	r0, r0, #4
 800bb04:	3304      	addeq	r3, #4
 800bb06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb0a:	bf04      	itt	eq
 800bb0c:	0080      	lsleq	r0, r0, #2
 800bb0e:	3302      	addeq	r3, #2
 800bb10:	2800      	cmp	r0, #0
 800bb12:	db05      	blt.n	800bb20 <__hi0bits+0x38>
 800bb14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb18:	f103 0301 	add.w	r3, r3, #1
 800bb1c:	bf08      	it	eq
 800bb1e:	2320      	moveq	r3, #32
 800bb20:	4618      	mov	r0, r3
 800bb22:	4770      	bx	lr
 800bb24:	2300      	movs	r3, #0
 800bb26:	e7e4      	b.n	800baf2 <__hi0bits+0xa>

0800bb28 <__lo0bits>:
 800bb28:	6803      	ldr	r3, [r0, #0]
 800bb2a:	f013 0207 	ands.w	r2, r3, #7
 800bb2e:	4601      	mov	r1, r0
 800bb30:	d00b      	beq.n	800bb4a <__lo0bits+0x22>
 800bb32:	07da      	lsls	r2, r3, #31
 800bb34:	d423      	bmi.n	800bb7e <__lo0bits+0x56>
 800bb36:	0798      	lsls	r0, r3, #30
 800bb38:	bf49      	itett	mi
 800bb3a:	085b      	lsrmi	r3, r3, #1
 800bb3c:	089b      	lsrpl	r3, r3, #2
 800bb3e:	2001      	movmi	r0, #1
 800bb40:	600b      	strmi	r3, [r1, #0]
 800bb42:	bf5c      	itt	pl
 800bb44:	600b      	strpl	r3, [r1, #0]
 800bb46:	2002      	movpl	r0, #2
 800bb48:	4770      	bx	lr
 800bb4a:	b298      	uxth	r0, r3
 800bb4c:	b9a8      	cbnz	r0, 800bb7a <__lo0bits+0x52>
 800bb4e:	0c1b      	lsrs	r3, r3, #16
 800bb50:	2010      	movs	r0, #16
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	b90a      	cbnz	r2, 800bb5a <__lo0bits+0x32>
 800bb56:	3008      	adds	r0, #8
 800bb58:	0a1b      	lsrs	r3, r3, #8
 800bb5a:	071a      	lsls	r2, r3, #28
 800bb5c:	bf04      	itt	eq
 800bb5e:	091b      	lsreq	r3, r3, #4
 800bb60:	3004      	addeq	r0, #4
 800bb62:	079a      	lsls	r2, r3, #30
 800bb64:	bf04      	itt	eq
 800bb66:	089b      	lsreq	r3, r3, #2
 800bb68:	3002      	addeq	r0, #2
 800bb6a:	07da      	lsls	r2, r3, #31
 800bb6c:	d403      	bmi.n	800bb76 <__lo0bits+0x4e>
 800bb6e:	085b      	lsrs	r3, r3, #1
 800bb70:	f100 0001 	add.w	r0, r0, #1
 800bb74:	d005      	beq.n	800bb82 <__lo0bits+0x5a>
 800bb76:	600b      	str	r3, [r1, #0]
 800bb78:	4770      	bx	lr
 800bb7a:	4610      	mov	r0, r2
 800bb7c:	e7e9      	b.n	800bb52 <__lo0bits+0x2a>
 800bb7e:	2000      	movs	r0, #0
 800bb80:	4770      	bx	lr
 800bb82:	2020      	movs	r0, #32
 800bb84:	4770      	bx	lr
	...

0800bb88 <__i2b>:
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	f7ff feb9 	bl	800b904 <_Balloc>
 800bb92:	4602      	mov	r2, r0
 800bb94:	b928      	cbnz	r0, 800bba2 <__i2b+0x1a>
 800bb96:	4b05      	ldr	r3, [pc, #20]	; (800bbac <__i2b+0x24>)
 800bb98:	4805      	ldr	r0, [pc, #20]	; (800bbb0 <__i2b+0x28>)
 800bb9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb9e:	f000 fc55 	bl	800c44c <__assert_func>
 800bba2:	2301      	movs	r3, #1
 800bba4:	6144      	str	r4, [r0, #20]
 800bba6:	6103      	str	r3, [r0, #16]
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800d3c0 	.word	0x0800d3c0
 800bbb0:	0800d463 	.word	0x0800d463

0800bbb4 <__multiply>:
 800bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb8:	4691      	mov	r9, r2
 800bbba:	690a      	ldr	r2, [r1, #16]
 800bbbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	bfb8      	it	lt
 800bbc4:	460b      	movlt	r3, r1
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	bfbc      	itt	lt
 800bbca:	464c      	movlt	r4, r9
 800bbcc:	4699      	movlt	r9, r3
 800bbce:	6927      	ldr	r7, [r4, #16]
 800bbd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbd4:	68a3      	ldr	r3, [r4, #8]
 800bbd6:	6861      	ldr	r1, [r4, #4]
 800bbd8:	eb07 060a 	add.w	r6, r7, sl
 800bbdc:	42b3      	cmp	r3, r6
 800bbde:	b085      	sub	sp, #20
 800bbe0:	bfb8      	it	lt
 800bbe2:	3101      	addlt	r1, #1
 800bbe4:	f7ff fe8e 	bl	800b904 <_Balloc>
 800bbe8:	b930      	cbnz	r0, 800bbf8 <__multiply+0x44>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b44      	ldr	r3, [pc, #272]	; (800bd00 <__multiply+0x14c>)
 800bbee:	4845      	ldr	r0, [pc, #276]	; (800bd04 <__multiply+0x150>)
 800bbf0:	f240 115d 	movw	r1, #349	; 0x15d
 800bbf4:	f000 fc2a 	bl	800c44c <__assert_func>
 800bbf8:	f100 0514 	add.w	r5, r0, #20
 800bbfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc00:	462b      	mov	r3, r5
 800bc02:	2200      	movs	r2, #0
 800bc04:	4543      	cmp	r3, r8
 800bc06:	d321      	bcc.n	800bc4c <__multiply+0x98>
 800bc08:	f104 0314 	add.w	r3, r4, #20
 800bc0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc10:	f109 0314 	add.w	r3, r9, #20
 800bc14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc18:	9202      	str	r2, [sp, #8]
 800bc1a:	1b3a      	subs	r2, r7, r4
 800bc1c:	3a15      	subs	r2, #21
 800bc1e:	f022 0203 	bic.w	r2, r2, #3
 800bc22:	3204      	adds	r2, #4
 800bc24:	f104 0115 	add.w	r1, r4, #21
 800bc28:	428f      	cmp	r7, r1
 800bc2a:	bf38      	it	cc
 800bc2c:	2204      	movcc	r2, #4
 800bc2e:	9201      	str	r2, [sp, #4]
 800bc30:	9a02      	ldr	r2, [sp, #8]
 800bc32:	9303      	str	r3, [sp, #12]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d80c      	bhi.n	800bc52 <__multiply+0x9e>
 800bc38:	2e00      	cmp	r6, #0
 800bc3a:	dd03      	ble.n	800bc44 <__multiply+0x90>
 800bc3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d05a      	beq.n	800bcfa <__multiply+0x146>
 800bc44:	6106      	str	r6, [r0, #16]
 800bc46:	b005      	add	sp, #20
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	f843 2b04 	str.w	r2, [r3], #4
 800bc50:	e7d8      	b.n	800bc04 <__multiply+0x50>
 800bc52:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc56:	f1ba 0f00 	cmp.w	sl, #0
 800bc5a:	d024      	beq.n	800bca6 <__multiply+0xf2>
 800bc5c:	f104 0e14 	add.w	lr, r4, #20
 800bc60:	46a9      	mov	r9, r5
 800bc62:	f04f 0c00 	mov.w	ip, #0
 800bc66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc6a:	f8d9 1000 	ldr.w	r1, [r9]
 800bc6e:	fa1f fb82 	uxth.w	fp, r2
 800bc72:	b289      	uxth	r1, r1
 800bc74:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc7c:	f8d9 2000 	ldr.w	r2, [r9]
 800bc80:	4461      	add	r1, ip
 800bc82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc86:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc8e:	b289      	uxth	r1, r1
 800bc90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc94:	4577      	cmp	r7, lr
 800bc96:	f849 1b04 	str.w	r1, [r9], #4
 800bc9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc9e:	d8e2      	bhi.n	800bc66 <__multiply+0xb2>
 800bca0:	9a01      	ldr	r2, [sp, #4]
 800bca2:	f845 c002 	str.w	ip, [r5, r2]
 800bca6:	9a03      	ldr	r2, [sp, #12]
 800bca8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bcac:	3304      	adds	r3, #4
 800bcae:	f1b9 0f00 	cmp.w	r9, #0
 800bcb2:	d020      	beq.n	800bcf6 <__multiply+0x142>
 800bcb4:	6829      	ldr	r1, [r5, #0]
 800bcb6:	f104 0c14 	add.w	ip, r4, #20
 800bcba:	46ae      	mov	lr, r5
 800bcbc:	f04f 0a00 	mov.w	sl, #0
 800bcc0:	f8bc b000 	ldrh.w	fp, [ip]
 800bcc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcc8:	fb09 220b 	mla	r2, r9, fp, r2
 800bccc:	4492      	add	sl, r2
 800bcce:	b289      	uxth	r1, r1
 800bcd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bcd4:	f84e 1b04 	str.w	r1, [lr], #4
 800bcd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcdc:	f8be 1000 	ldrh.w	r1, [lr]
 800bce0:	0c12      	lsrs	r2, r2, #16
 800bce2:	fb09 1102 	mla	r1, r9, r2, r1
 800bce6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcea:	4567      	cmp	r7, ip
 800bcec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcf0:	d8e6      	bhi.n	800bcc0 <__multiply+0x10c>
 800bcf2:	9a01      	ldr	r2, [sp, #4]
 800bcf4:	50a9      	str	r1, [r5, r2]
 800bcf6:	3504      	adds	r5, #4
 800bcf8:	e79a      	b.n	800bc30 <__multiply+0x7c>
 800bcfa:	3e01      	subs	r6, #1
 800bcfc:	e79c      	b.n	800bc38 <__multiply+0x84>
 800bcfe:	bf00      	nop
 800bd00:	0800d3c0 	.word	0x0800d3c0
 800bd04:	0800d463 	.word	0x0800d463

0800bd08 <__pow5mult>:
 800bd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd0c:	4615      	mov	r5, r2
 800bd0e:	f012 0203 	ands.w	r2, r2, #3
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	d007      	beq.n	800bd28 <__pow5mult+0x20>
 800bd18:	4c25      	ldr	r4, [pc, #148]	; (800bdb0 <__pow5mult+0xa8>)
 800bd1a:	3a01      	subs	r2, #1
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd22:	f7ff fe51 	bl	800b9c8 <__multadd>
 800bd26:	4607      	mov	r7, r0
 800bd28:	10ad      	asrs	r5, r5, #2
 800bd2a:	d03d      	beq.n	800bda8 <__pow5mult+0xa0>
 800bd2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd2e:	b97c      	cbnz	r4, 800bd50 <__pow5mult+0x48>
 800bd30:	2010      	movs	r0, #16
 800bd32:	f000 fbbb 	bl	800c4ac <malloc>
 800bd36:	4602      	mov	r2, r0
 800bd38:	6270      	str	r0, [r6, #36]	; 0x24
 800bd3a:	b928      	cbnz	r0, 800bd48 <__pow5mult+0x40>
 800bd3c:	4b1d      	ldr	r3, [pc, #116]	; (800bdb4 <__pow5mult+0xac>)
 800bd3e:	481e      	ldr	r0, [pc, #120]	; (800bdb8 <__pow5mult+0xb0>)
 800bd40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd44:	f000 fb82 	bl	800c44c <__assert_func>
 800bd48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd4c:	6004      	str	r4, [r0, #0]
 800bd4e:	60c4      	str	r4, [r0, #12]
 800bd50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd58:	b94c      	cbnz	r4, 800bd6e <__pow5mult+0x66>
 800bd5a:	f240 2171 	movw	r1, #625	; 0x271
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ff12 	bl	800bb88 <__i2b>
 800bd64:	2300      	movs	r3, #0
 800bd66:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	6003      	str	r3, [r0, #0]
 800bd6e:	f04f 0900 	mov.w	r9, #0
 800bd72:	07eb      	lsls	r3, r5, #31
 800bd74:	d50a      	bpl.n	800bd8c <__pow5mult+0x84>
 800bd76:	4639      	mov	r1, r7
 800bd78:	4622      	mov	r2, r4
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7ff ff1a 	bl	800bbb4 <__multiply>
 800bd80:	4639      	mov	r1, r7
 800bd82:	4680      	mov	r8, r0
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7ff fdfd 	bl	800b984 <_Bfree>
 800bd8a:	4647      	mov	r7, r8
 800bd8c:	106d      	asrs	r5, r5, #1
 800bd8e:	d00b      	beq.n	800bda8 <__pow5mult+0xa0>
 800bd90:	6820      	ldr	r0, [r4, #0]
 800bd92:	b938      	cbnz	r0, 800bda4 <__pow5mult+0x9c>
 800bd94:	4622      	mov	r2, r4
 800bd96:	4621      	mov	r1, r4
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7ff ff0b 	bl	800bbb4 <__multiply>
 800bd9e:	6020      	str	r0, [r4, #0]
 800bda0:	f8c0 9000 	str.w	r9, [r0]
 800bda4:	4604      	mov	r4, r0
 800bda6:	e7e4      	b.n	800bd72 <__pow5mult+0x6a>
 800bda8:	4638      	mov	r0, r7
 800bdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdae:	bf00      	nop
 800bdb0:	0800d5b0 	.word	0x0800d5b0
 800bdb4:	0800d44c 	.word	0x0800d44c
 800bdb8:	0800d463 	.word	0x0800d463

0800bdbc <__lshift>:
 800bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	6849      	ldr	r1, [r1, #4]
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	4607      	mov	r7, r0
 800bdce:	4691      	mov	r9, r2
 800bdd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdd4:	f108 0601 	add.w	r6, r8, #1
 800bdd8:	42b3      	cmp	r3, r6
 800bdda:	db0b      	blt.n	800bdf4 <__lshift+0x38>
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7ff fd91 	bl	800b904 <_Balloc>
 800bde2:	4605      	mov	r5, r0
 800bde4:	b948      	cbnz	r0, 800bdfa <__lshift+0x3e>
 800bde6:	4602      	mov	r2, r0
 800bde8:	4b2a      	ldr	r3, [pc, #168]	; (800be94 <__lshift+0xd8>)
 800bdea:	482b      	ldr	r0, [pc, #172]	; (800be98 <__lshift+0xdc>)
 800bdec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdf0:	f000 fb2c 	bl	800c44c <__assert_func>
 800bdf4:	3101      	adds	r1, #1
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	e7ee      	b.n	800bdd8 <__lshift+0x1c>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f100 0114 	add.w	r1, r0, #20
 800be00:	f100 0210 	add.w	r2, r0, #16
 800be04:	4618      	mov	r0, r3
 800be06:	4553      	cmp	r3, sl
 800be08:	db37      	blt.n	800be7a <__lshift+0xbe>
 800be0a:	6920      	ldr	r0, [r4, #16]
 800be0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be10:	f104 0314 	add.w	r3, r4, #20
 800be14:	f019 091f 	ands.w	r9, r9, #31
 800be18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800be20:	d02f      	beq.n	800be82 <__lshift+0xc6>
 800be22:	f1c9 0e20 	rsb	lr, r9, #32
 800be26:	468a      	mov	sl, r1
 800be28:	f04f 0c00 	mov.w	ip, #0
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	fa02 f209 	lsl.w	r2, r2, r9
 800be32:	ea42 020c 	orr.w	r2, r2, ip
 800be36:	f84a 2b04 	str.w	r2, [sl], #4
 800be3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be3e:	4298      	cmp	r0, r3
 800be40:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be44:	d8f2      	bhi.n	800be2c <__lshift+0x70>
 800be46:	1b03      	subs	r3, r0, r4
 800be48:	3b15      	subs	r3, #21
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	3304      	adds	r3, #4
 800be50:	f104 0215 	add.w	r2, r4, #21
 800be54:	4290      	cmp	r0, r2
 800be56:	bf38      	it	cc
 800be58:	2304      	movcc	r3, #4
 800be5a:	f841 c003 	str.w	ip, [r1, r3]
 800be5e:	f1bc 0f00 	cmp.w	ip, #0
 800be62:	d001      	beq.n	800be68 <__lshift+0xac>
 800be64:	f108 0602 	add.w	r6, r8, #2
 800be68:	3e01      	subs	r6, #1
 800be6a:	4638      	mov	r0, r7
 800be6c:	612e      	str	r6, [r5, #16]
 800be6e:	4621      	mov	r1, r4
 800be70:	f7ff fd88 	bl	800b984 <_Bfree>
 800be74:	4628      	mov	r0, r5
 800be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be7e:	3301      	adds	r3, #1
 800be80:	e7c1      	b.n	800be06 <__lshift+0x4a>
 800be82:	3904      	subs	r1, #4
 800be84:	f853 2b04 	ldr.w	r2, [r3], #4
 800be88:	f841 2f04 	str.w	r2, [r1, #4]!
 800be8c:	4298      	cmp	r0, r3
 800be8e:	d8f9      	bhi.n	800be84 <__lshift+0xc8>
 800be90:	e7ea      	b.n	800be68 <__lshift+0xac>
 800be92:	bf00      	nop
 800be94:	0800d3c0 	.word	0x0800d3c0
 800be98:	0800d463 	.word	0x0800d463

0800be9c <__mcmp>:
 800be9c:	b530      	push	{r4, r5, lr}
 800be9e:	6902      	ldr	r2, [r0, #16]
 800bea0:	690c      	ldr	r4, [r1, #16]
 800bea2:	1b12      	subs	r2, r2, r4
 800bea4:	d10e      	bne.n	800bec4 <__mcmp+0x28>
 800bea6:	f100 0314 	add.w	r3, r0, #20
 800beaa:	3114      	adds	r1, #20
 800beac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800beb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800beb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800beb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bebc:	42a5      	cmp	r5, r4
 800bebe:	d003      	beq.n	800bec8 <__mcmp+0x2c>
 800bec0:	d305      	bcc.n	800bece <__mcmp+0x32>
 800bec2:	2201      	movs	r2, #1
 800bec4:	4610      	mov	r0, r2
 800bec6:	bd30      	pop	{r4, r5, pc}
 800bec8:	4283      	cmp	r3, r0
 800beca:	d3f3      	bcc.n	800beb4 <__mcmp+0x18>
 800becc:	e7fa      	b.n	800bec4 <__mcmp+0x28>
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	e7f7      	b.n	800bec4 <__mcmp+0x28>

0800bed4 <__mdiff>:
 800bed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	460c      	mov	r4, r1
 800beda:	4606      	mov	r6, r0
 800bedc:	4611      	mov	r1, r2
 800bede:	4620      	mov	r0, r4
 800bee0:	4690      	mov	r8, r2
 800bee2:	f7ff ffdb 	bl	800be9c <__mcmp>
 800bee6:	1e05      	subs	r5, r0, #0
 800bee8:	d110      	bne.n	800bf0c <__mdiff+0x38>
 800beea:	4629      	mov	r1, r5
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff fd09 	bl	800b904 <_Balloc>
 800bef2:	b930      	cbnz	r0, 800bf02 <__mdiff+0x2e>
 800bef4:	4b3a      	ldr	r3, [pc, #232]	; (800bfe0 <__mdiff+0x10c>)
 800bef6:	4602      	mov	r2, r0
 800bef8:	f240 2132 	movw	r1, #562	; 0x232
 800befc:	4839      	ldr	r0, [pc, #228]	; (800bfe4 <__mdiff+0x110>)
 800befe:	f000 faa5 	bl	800c44c <__assert_func>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0c:	bfa4      	itt	ge
 800bf0e:	4643      	movge	r3, r8
 800bf10:	46a0      	movge	r8, r4
 800bf12:	4630      	mov	r0, r6
 800bf14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf18:	bfa6      	itte	ge
 800bf1a:	461c      	movge	r4, r3
 800bf1c:	2500      	movge	r5, #0
 800bf1e:	2501      	movlt	r5, #1
 800bf20:	f7ff fcf0 	bl	800b904 <_Balloc>
 800bf24:	b920      	cbnz	r0, 800bf30 <__mdiff+0x5c>
 800bf26:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <__mdiff+0x10c>)
 800bf28:	4602      	mov	r2, r0
 800bf2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf2e:	e7e5      	b.n	800befc <__mdiff+0x28>
 800bf30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf34:	6926      	ldr	r6, [r4, #16]
 800bf36:	60c5      	str	r5, [r0, #12]
 800bf38:	f104 0914 	add.w	r9, r4, #20
 800bf3c:	f108 0514 	add.w	r5, r8, #20
 800bf40:	f100 0e14 	add.w	lr, r0, #20
 800bf44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf4c:	f108 0210 	add.w	r2, r8, #16
 800bf50:	46f2      	mov	sl, lr
 800bf52:	2100      	movs	r1, #0
 800bf54:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf5c:	fa1f f883 	uxth.w	r8, r3
 800bf60:	fa11 f18b 	uxtah	r1, r1, fp
 800bf64:	0c1b      	lsrs	r3, r3, #16
 800bf66:	eba1 0808 	sub.w	r8, r1, r8
 800bf6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf72:	fa1f f888 	uxth.w	r8, r8
 800bf76:	1419      	asrs	r1, r3, #16
 800bf78:	454e      	cmp	r6, r9
 800bf7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf7e:	f84a 3b04 	str.w	r3, [sl], #4
 800bf82:	d8e7      	bhi.n	800bf54 <__mdiff+0x80>
 800bf84:	1b33      	subs	r3, r6, r4
 800bf86:	3b15      	subs	r3, #21
 800bf88:	f023 0303 	bic.w	r3, r3, #3
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	3415      	adds	r4, #21
 800bf90:	42a6      	cmp	r6, r4
 800bf92:	bf38      	it	cc
 800bf94:	2304      	movcc	r3, #4
 800bf96:	441d      	add	r5, r3
 800bf98:	4473      	add	r3, lr
 800bf9a:	469e      	mov	lr, r3
 800bf9c:	462e      	mov	r6, r5
 800bf9e:	4566      	cmp	r6, ip
 800bfa0:	d30e      	bcc.n	800bfc0 <__mdiff+0xec>
 800bfa2:	f10c 0203 	add.w	r2, ip, #3
 800bfa6:	1b52      	subs	r2, r2, r5
 800bfa8:	f022 0203 	bic.w	r2, r2, #3
 800bfac:	3d03      	subs	r5, #3
 800bfae:	45ac      	cmp	ip, r5
 800bfb0:	bf38      	it	cc
 800bfb2:	2200      	movcc	r2, #0
 800bfb4:	441a      	add	r2, r3
 800bfb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bfba:	b17b      	cbz	r3, 800bfdc <__mdiff+0x108>
 800bfbc:	6107      	str	r7, [r0, #16]
 800bfbe:	e7a3      	b.n	800bf08 <__mdiff+0x34>
 800bfc0:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfc4:	fa11 f288 	uxtah	r2, r1, r8
 800bfc8:	1414      	asrs	r4, r2, #16
 800bfca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfce:	b292      	uxth	r2, r2
 800bfd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfd4:	f84e 2b04 	str.w	r2, [lr], #4
 800bfd8:	1421      	asrs	r1, r4, #16
 800bfda:	e7e0      	b.n	800bf9e <__mdiff+0xca>
 800bfdc:	3f01      	subs	r7, #1
 800bfde:	e7ea      	b.n	800bfb6 <__mdiff+0xe2>
 800bfe0:	0800d3c0 	.word	0x0800d3c0
 800bfe4:	0800d463 	.word	0x0800d463

0800bfe8 <__ulp>:
 800bfe8:	b082      	sub	sp, #8
 800bfea:	ed8d 0b00 	vstr	d0, [sp]
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	4912      	ldr	r1, [pc, #72]	; (800c03c <__ulp+0x54>)
 800bff2:	4019      	ands	r1, r3
 800bff4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bff8:	2900      	cmp	r1, #0
 800bffa:	dd05      	ble.n	800c008 <__ulp+0x20>
 800bffc:	2200      	movs	r2, #0
 800bffe:	460b      	mov	r3, r1
 800c000:	ec43 2b10 	vmov	d0, r2, r3
 800c004:	b002      	add	sp, #8
 800c006:	4770      	bx	lr
 800c008:	4249      	negs	r1, r1
 800c00a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c00e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c012:	f04f 0200 	mov.w	r2, #0
 800c016:	f04f 0300 	mov.w	r3, #0
 800c01a:	da04      	bge.n	800c026 <__ulp+0x3e>
 800c01c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c020:	fa41 f300 	asr.w	r3, r1, r0
 800c024:	e7ec      	b.n	800c000 <__ulp+0x18>
 800c026:	f1a0 0114 	sub.w	r1, r0, #20
 800c02a:	291e      	cmp	r1, #30
 800c02c:	bfda      	itte	le
 800c02e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c032:	fa20 f101 	lsrle.w	r1, r0, r1
 800c036:	2101      	movgt	r1, #1
 800c038:	460a      	mov	r2, r1
 800c03a:	e7e1      	b.n	800c000 <__ulp+0x18>
 800c03c:	7ff00000 	.word	0x7ff00000

0800c040 <__b2d>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	6905      	ldr	r5, [r0, #16]
 800c044:	f100 0714 	add.w	r7, r0, #20
 800c048:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c04c:	1f2e      	subs	r6, r5, #4
 800c04e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c052:	4620      	mov	r0, r4
 800c054:	f7ff fd48 	bl	800bae8 <__hi0bits>
 800c058:	f1c0 0320 	rsb	r3, r0, #32
 800c05c:	280a      	cmp	r0, #10
 800c05e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0dc <__b2d+0x9c>
 800c062:	600b      	str	r3, [r1, #0]
 800c064:	dc14      	bgt.n	800c090 <__b2d+0x50>
 800c066:	f1c0 0e0b 	rsb	lr, r0, #11
 800c06a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c06e:	42b7      	cmp	r7, r6
 800c070:	ea41 030c 	orr.w	r3, r1, ip
 800c074:	bf34      	ite	cc
 800c076:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c07a:	2100      	movcs	r1, #0
 800c07c:	3015      	adds	r0, #21
 800c07e:	fa04 f000 	lsl.w	r0, r4, r0
 800c082:	fa21 f10e 	lsr.w	r1, r1, lr
 800c086:	ea40 0201 	orr.w	r2, r0, r1
 800c08a:	ec43 2b10 	vmov	d0, r2, r3
 800c08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c090:	42b7      	cmp	r7, r6
 800c092:	bf3a      	itte	cc
 800c094:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c098:	f1a5 0608 	subcc.w	r6, r5, #8
 800c09c:	2100      	movcs	r1, #0
 800c09e:	380b      	subs	r0, #11
 800c0a0:	d017      	beq.n	800c0d2 <__b2d+0x92>
 800c0a2:	f1c0 0c20 	rsb	ip, r0, #32
 800c0a6:	fa04 f500 	lsl.w	r5, r4, r0
 800c0aa:	42be      	cmp	r6, r7
 800c0ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800c0b0:	ea45 0504 	orr.w	r5, r5, r4
 800c0b4:	bf8c      	ite	hi
 800c0b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c0ba:	2400      	movls	r4, #0
 800c0bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c0c0:	fa01 f000 	lsl.w	r0, r1, r0
 800c0c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c0c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0cc:	ea40 0204 	orr.w	r2, r0, r4
 800c0d0:	e7db      	b.n	800c08a <__b2d+0x4a>
 800c0d2:	ea44 030c 	orr.w	r3, r4, ip
 800c0d6:	460a      	mov	r2, r1
 800c0d8:	e7d7      	b.n	800c08a <__b2d+0x4a>
 800c0da:	bf00      	nop
 800c0dc:	3ff00000 	.word	0x3ff00000

0800c0e0 <__d2b>:
 800c0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0e4:	4689      	mov	r9, r1
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	ec57 6b10 	vmov	r6, r7, d0
 800c0ec:	4690      	mov	r8, r2
 800c0ee:	f7ff fc09 	bl	800b904 <_Balloc>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	b930      	cbnz	r0, 800c104 <__d2b+0x24>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	4b25      	ldr	r3, [pc, #148]	; (800c190 <__d2b+0xb0>)
 800c0fa:	4826      	ldr	r0, [pc, #152]	; (800c194 <__d2b+0xb4>)
 800c0fc:	f240 310a 	movw	r1, #778	; 0x30a
 800c100:	f000 f9a4 	bl	800c44c <__assert_func>
 800c104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c10c:	bb35      	cbnz	r5, 800c15c <__d2b+0x7c>
 800c10e:	2e00      	cmp	r6, #0
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	d028      	beq.n	800c166 <__d2b+0x86>
 800c114:	4668      	mov	r0, sp
 800c116:	9600      	str	r6, [sp, #0]
 800c118:	f7ff fd06 	bl	800bb28 <__lo0bits>
 800c11c:	9900      	ldr	r1, [sp, #0]
 800c11e:	b300      	cbz	r0, 800c162 <__d2b+0x82>
 800c120:	9a01      	ldr	r2, [sp, #4]
 800c122:	f1c0 0320 	rsb	r3, r0, #32
 800c126:	fa02 f303 	lsl.w	r3, r2, r3
 800c12a:	430b      	orrs	r3, r1
 800c12c:	40c2      	lsrs	r2, r0
 800c12e:	6163      	str	r3, [r4, #20]
 800c130:	9201      	str	r2, [sp, #4]
 800c132:	9b01      	ldr	r3, [sp, #4]
 800c134:	61a3      	str	r3, [r4, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bf14      	ite	ne
 800c13a:	2202      	movne	r2, #2
 800c13c:	2201      	moveq	r2, #1
 800c13e:	6122      	str	r2, [r4, #16]
 800c140:	b1d5      	cbz	r5, 800c178 <__d2b+0x98>
 800c142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c146:	4405      	add	r5, r0
 800c148:	f8c9 5000 	str.w	r5, [r9]
 800c14c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c150:	f8c8 0000 	str.w	r0, [r8]
 800c154:	4620      	mov	r0, r4
 800c156:	b003      	add	sp, #12
 800c158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c160:	e7d5      	b.n	800c10e <__d2b+0x2e>
 800c162:	6161      	str	r1, [r4, #20]
 800c164:	e7e5      	b.n	800c132 <__d2b+0x52>
 800c166:	a801      	add	r0, sp, #4
 800c168:	f7ff fcde 	bl	800bb28 <__lo0bits>
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	6163      	str	r3, [r4, #20]
 800c170:	2201      	movs	r2, #1
 800c172:	6122      	str	r2, [r4, #16]
 800c174:	3020      	adds	r0, #32
 800c176:	e7e3      	b.n	800c140 <__d2b+0x60>
 800c178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c17c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c180:	f8c9 0000 	str.w	r0, [r9]
 800c184:	6918      	ldr	r0, [r3, #16]
 800c186:	f7ff fcaf 	bl	800bae8 <__hi0bits>
 800c18a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c18e:	e7df      	b.n	800c150 <__d2b+0x70>
 800c190:	0800d3c0 	.word	0x0800d3c0
 800c194:	0800d463 	.word	0x0800d463

0800c198 <__ratio>:
 800c198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4688      	mov	r8, r1
 800c19e:	4669      	mov	r1, sp
 800c1a0:	4681      	mov	r9, r0
 800c1a2:	f7ff ff4d 	bl	800c040 <__b2d>
 800c1a6:	a901      	add	r1, sp, #4
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	ec55 4b10 	vmov	r4, r5, d0
 800c1ae:	ee10 aa10 	vmov	sl, s0
 800c1b2:	f7ff ff45 	bl	800c040 <__b2d>
 800c1b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c1be:	1a59      	subs	r1, r3, r1
 800c1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c1ca:	ec57 6b10 	vmov	r6, r7, d0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bfd6      	itet	le
 800c1d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1d6:	462a      	movgt	r2, r5
 800c1d8:	463a      	movle	r2, r7
 800c1da:	46ab      	mov	fp, r5
 800c1dc:	bfd6      	itet	le
 800c1de:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c1e2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c1e6:	ee00 3a90 	vmovle	s1, r3
 800c1ea:	ec4b ab17 	vmov	d7, sl, fp
 800c1ee:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c1f2:	b003      	add	sp, #12
 800c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1f8 <__copybits>:
 800c1f8:	3901      	subs	r1, #1
 800c1fa:	b570      	push	{r4, r5, r6, lr}
 800c1fc:	1149      	asrs	r1, r1, #5
 800c1fe:	6914      	ldr	r4, [r2, #16]
 800c200:	3101      	adds	r1, #1
 800c202:	f102 0314 	add.w	r3, r2, #20
 800c206:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c20a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c20e:	1f05      	subs	r5, r0, #4
 800c210:	42a3      	cmp	r3, r4
 800c212:	d30c      	bcc.n	800c22e <__copybits+0x36>
 800c214:	1aa3      	subs	r3, r4, r2
 800c216:	3b11      	subs	r3, #17
 800c218:	f023 0303 	bic.w	r3, r3, #3
 800c21c:	3211      	adds	r2, #17
 800c21e:	42a2      	cmp	r2, r4
 800c220:	bf88      	it	hi
 800c222:	2300      	movhi	r3, #0
 800c224:	4418      	add	r0, r3
 800c226:	2300      	movs	r3, #0
 800c228:	4288      	cmp	r0, r1
 800c22a:	d305      	bcc.n	800c238 <__copybits+0x40>
 800c22c:	bd70      	pop	{r4, r5, r6, pc}
 800c22e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c232:	f845 6f04 	str.w	r6, [r5, #4]!
 800c236:	e7eb      	b.n	800c210 <__copybits+0x18>
 800c238:	f840 3b04 	str.w	r3, [r0], #4
 800c23c:	e7f4      	b.n	800c228 <__copybits+0x30>

0800c23e <__any_on>:
 800c23e:	f100 0214 	add.w	r2, r0, #20
 800c242:	6900      	ldr	r0, [r0, #16]
 800c244:	114b      	asrs	r3, r1, #5
 800c246:	4298      	cmp	r0, r3
 800c248:	b510      	push	{r4, lr}
 800c24a:	db11      	blt.n	800c270 <__any_on+0x32>
 800c24c:	dd0a      	ble.n	800c264 <__any_on+0x26>
 800c24e:	f011 011f 	ands.w	r1, r1, #31
 800c252:	d007      	beq.n	800c264 <__any_on+0x26>
 800c254:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c258:	fa24 f001 	lsr.w	r0, r4, r1
 800c25c:	fa00 f101 	lsl.w	r1, r0, r1
 800c260:	428c      	cmp	r4, r1
 800c262:	d10b      	bne.n	800c27c <__any_on+0x3e>
 800c264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c268:	4293      	cmp	r3, r2
 800c26a:	d803      	bhi.n	800c274 <__any_on+0x36>
 800c26c:	2000      	movs	r0, #0
 800c26e:	bd10      	pop	{r4, pc}
 800c270:	4603      	mov	r3, r0
 800c272:	e7f7      	b.n	800c264 <__any_on+0x26>
 800c274:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c278:	2900      	cmp	r1, #0
 800c27a:	d0f5      	beq.n	800c268 <__any_on+0x2a>
 800c27c:	2001      	movs	r0, #1
 800c27e:	e7f6      	b.n	800c26e <__any_on+0x30>

0800c280 <_calloc_r>:
 800c280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c282:	fba1 2402 	umull	r2, r4, r1, r2
 800c286:	b94c      	cbnz	r4, 800c29c <_calloc_r+0x1c>
 800c288:	4611      	mov	r1, r2
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	f000 f82e 	bl	800c2ec <_malloc_r>
 800c290:	9a01      	ldr	r2, [sp, #4]
 800c292:	4605      	mov	r5, r0
 800c294:	b930      	cbnz	r0, 800c2a4 <_calloc_r+0x24>
 800c296:	4628      	mov	r0, r5
 800c298:	b003      	add	sp, #12
 800c29a:	bd30      	pop	{r4, r5, pc}
 800c29c:	220c      	movs	r2, #12
 800c29e:	6002      	str	r2, [r0, #0]
 800c2a0:	2500      	movs	r5, #0
 800c2a2:	e7f8      	b.n	800c296 <_calloc_r+0x16>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f7fe f9b9 	bl	800a61c <memset>
 800c2aa:	e7f4      	b.n	800c296 <_calloc_r+0x16>

0800c2ac <sbrk_aligned>:
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	4e0e      	ldr	r6, [pc, #56]	; (800c2e8 <sbrk_aligned+0x3c>)
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6831      	ldr	r1, [r6, #0]
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	b911      	cbnz	r1, 800c2be <sbrk_aligned+0x12>
 800c2b8:	f000 f896 	bl	800c3e8 <_sbrk_r>
 800c2bc:	6030      	str	r0, [r6, #0]
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f000 f891 	bl	800c3e8 <_sbrk_r>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d00a      	beq.n	800c2e0 <sbrk_aligned+0x34>
 800c2ca:	1cc4      	adds	r4, r0, #3
 800c2cc:	f024 0403 	bic.w	r4, r4, #3
 800c2d0:	42a0      	cmp	r0, r4
 800c2d2:	d007      	beq.n	800c2e4 <sbrk_aligned+0x38>
 800c2d4:	1a21      	subs	r1, r4, r0
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f000 f886 	bl	800c3e8 <_sbrk_r>
 800c2dc:	3001      	adds	r0, #1
 800c2de:	d101      	bne.n	800c2e4 <sbrk_aligned+0x38>
 800c2e0:	f04f 34ff 	mov.w	r4, #4294967295
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	bd70      	pop	{r4, r5, r6, pc}
 800c2e8:	2400057c 	.word	0x2400057c

0800c2ec <_malloc_r>:
 800c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f0:	1ccd      	adds	r5, r1, #3
 800c2f2:	f025 0503 	bic.w	r5, r5, #3
 800c2f6:	3508      	adds	r5, #8
 800c2f8:	2d0c      	cmp	r5, #12
 800c2fa:	bf38      	it	cc
 800c2fc:	250c      	movcc	r5, #12
 800c2fe:	2d00      	cmp	r5, #0
 800c300:	4607      	mov	r7, r0
 800c302:	db01      	blt.n	800c308 <_malloc_r+0x1c>
 800c304:	42a9      	cmp	r1, r5
 800c306:	d905      	bls.n	800c314 <_malloc_r+0x28>
 800c308:	230c      	movs	r3, #12
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	2600      	movs	r6, #0
 800c30e:	4630      	mov	r0, r6
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	4e2e      	ldr	r6, [pc, #184]	; (800c3d0 <_malloc_r+0xe4>)
 800c316:	f000 f8d1 	bl	800c4bc <__malloc_lock>
 800c31a:	6833      	ldr	r3, [r6, #0]
 800c31c:	461c      	mov	r4, r3
 800c31e:	bb34      	cbnz	r4, 800c36e <_malloc_r+0x82>
 800c320:	4629      	mov	r1, r5
 800c322:	4638      	mov	r0, r7
 800c324:	f7ff ffc2 	bl	800c2ac <sbrk_aligned>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	4604      	mov	r4, r0
 800c32c:	d14d      	bne.n	800c3ca <_malloc_r+0xde>
 800c32e:	6834      	ldr	r4, [r6, #0]
 800c330:	4626      	mov	r6, r4
 800c332:	2e00      	cmp	r6, #0
 800c334:	d140      	bne.n	800c3b8 <_malloc_r+0xcc>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	4631      	mov	r1, r6
 800c33a:	4638      	mov	r0, r7
 800c33c:	eb04 0803 	add.w	r8, r4, r3
 800c340:	f000 f852 	bl	800c3e8 <_sbrk_r>
 800c344:	4580      	cmp	r8, r0
 800c346:	d13a      	bne.n	800c3be <_malloc_r+0xd2>
 800c348:	6821      	ldr	r1, [r4, #0]
 800c34a:	3503      	adds	r5, #3
 800c34c:	1a6d      	subs	r5, r5, r1
 800c34e:	f025 0503 	bic.w	r5, r5, #3
 800c352:	3508      	adds	r5, #8
 800c354:	2d0c      	cmp	r5, #12
 800c356:	bf38      	it	cc
 800c358:	250c      	movcc	r5, #12
 800c35a:	4629      	mov	r1, r5
 800c35c:	4638      	mov	r0, r7
 800c35e:	f7ff ffa5 	bl	800c2ac <sbrk_aligned>
 800c362:	3001      	adds	r0, #1
 800c364:	d02b      	beq.n	800c3be <_malloc_r+0xd2>
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	442b      	add	r3, r5
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	e00e      	b.n	800c38c <_malloc_r+0xa0>
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	1b52      	subs	r2, r2, r5
 800c372:	d41e      	bmi.n	800c3b2 <_malloc_r+0xc6>
 800c374:	2a0b      	cmp	r2, #11
 800c376:	d916      	bls.n	800c3a6 <_malloc_r+0xba>
 800c378:	1961      	adds	r1, r4, r5
 800c37a:	42a3      	cmp	r3, r4
 800c37c:	6025      	str	r5, [r4, #0]
 800c37e:	bf18      	it	ne
 800c380:	6059      	strne	r1, [r3, #4]
 800c382:	6863      	ldr	r3, [r4, #4]
 800c384:	bf08      	it	eq
 800c386:	6031      	streq	r1, [r6, #0]
 800c388:	5162      	str	r2, [r4, r5]
 800c38a:	604b      	str	r3, [r1, #4]
 800c38c:	4638      	mov	r0, r7
 800c38e:	f104 060b 	add.w	r6, r4, #11
 800c392:	f000 f899 	bl	800c4c8 <__malloc_unlock>
 800c396:	f026 0607 	bic.w	r6, r6, #7
 800c39a:	1d23      	adds	r3, r4, #4
 800c39c:	1af2      	subs	r2, r6, r3
 800c39e:	d0b6      	beq.n	800c30e <_malloc_r+0x22>
 800c3a0:	1b9b      	subs	r3, r3, r6
 800c3a2:	50a3      	str	r3, [r4, r2]
 800c3a4:	e7b3      	b.n	800c30e <_malloc_r+0x22>
 800c3a6:	6862      	ldr	r2, [r4, #4]
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	bf0c      	ite	eq
 800c3ac:	6032      	streq	r2, [r6, #0]
 800c3ae:	605a      	strne	r2, [r3, #4]
 800c3b0:	e7ec      	b.n	800c38c <_malloc_r+0xa0>
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	6864      	ldr	r4, [r4, #4]
 800c3b6:	e7b2      	b.n	800c31e <_malloc_r+0x32>
 800c3b8:	4634      	mov	r4, r6
 800c3ba:	6876      	ldr	r6, [r6, #4]
 800c3bc:	e7b9      	b.n	800c332 <_malloc_r+0x46>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	603b      	str	r3, [r7, #0]
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	f000 f880 	bl	800c4c8 <__malloc_unlock>
 800c3c8:	e7a1      	b.n	800c30e <_malloc_r+0x22>
 800c3ca:	6025      	str	r5, [r4, #0]
 800c3cc:	e7de      	b.n	800c38c <_malloc_r+0xa0>
 800c3ce:	bf00      	nop
 800c3d0:	24000578 	.word	0x24000578
 800c3d4:	00000000 	.word	0x00000000

0800c3d8 <nan>:
 800c3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3e0 <nan+0x8>
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	7ff80000 	.word	0x7ff80000

0800c3e8 <_sbrk_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d06      	ldr	r5, [pc, #24]	; (800c404 <_sbrk_r+0x1c>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f5 fc7a 	bl	8001cec <_sbrk>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_sbrk_r+0x1a>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_sbrk_r+0x1a>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	24000580 	.word	0x24000580

0800c408 <strncmp>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	b17a      	cbz	r2, 800c42c <strncmp+0x24>
 800c40c:	4603      	mov	r3, r0
 800c40e:	3901      	subs	r1, #1
 800c410:	1884      	adds	r4, r0, r2
 800c412:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c416:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c41a:	4290      	cmp	r0, r2
 800c41c:	d101      	bne.n	800c422 <strncmp+0x1a>
 800c41e:	42a3      	cmp	r3, r4
 800c420:	d101      	bne.n	800c426 <strncmp+0x1e>
 800c422:	1a80      	subs	r0, r0, r2
 800c424:	bd10      	pop	{r4, pc}
 800c426:	2800      	cmp	r0, #0
 800c428:	d1f3      	bne.n	800c412 <strncmp+0xa>
 800c42a:	e7fa      	b.n	800c422 <strncmp+0x1a>
 800c42c:	4610      	mov	r0, r2
 800c42e:	e7f9      	b.n	800c424 <strncmp+0x1c>

0800c430 <__ascii_wctomb>:
 800c430:	b149      	cbz	r1, 800c446 <__ascii_wctomb+0x16>
 800c432:	2aff      	cmp	r2, #255	; 0xff
 800c434:	bf85      	ittet	hi
 800c436:	238a      	movhi	r3, #138	; 0x8a
 800c438:	6003      	strhi	r3, [r0, #0]
 800c43a:	700a      	strbls	r2, [r1, #0]
 800c43c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c440:	bf98      	it	ls
 800c442:	2001      	movls	r0, #1
 800c444:	4770      	bx	lr
 800c446:	4608      	mov	r0, r1
 800c448:	4770      	bx	lr
	...

0800c44c <__assert_func>:
 800c44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c44e:	4614      	mov	r4, r2
 800c450:	461a      	mov	r2, r3
 800c452:	4b09      	ldr	r3, [pc, #36]	; (800c478 <__assert_func+0x2c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4605      	mov	r5, r0
 800c458:	68d8      	ldr	r0, [r3, #12]
 800c45a:	b14c      	cbz	r4, 800c470 <__assert_func+0x24>
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <__assert_func+0x30>)
 800c45e:	9100      	str	r1, [sp, #0]
 800c460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c464:	4906      	ldr	r1, [pc, #24]	; (800c480 <__assert_func+0x34>)
 800c466:	462b      	mov	r3, r5
 800c468:	f000 f80e 	bl	800c488 <fiprintf>
 800c46c:	f000 fc2c 	bl	800ccc8 <abort>
 800c470:	4b04      	ldr	r3, [pc, #16]	; (800c484 <__assert_func+0x38>)
 800c472:	461c      	mov	r4, r3
 800c474:	e7f3      	b.n	800c45e <__assert_func+0x12>
 800c476:	bf00      	nop
 800c478:	24000014 	.word	0x24000014
 800c47c:	0800d5bc 	.word	0x0800d5bc
 800c480:	0800d5c9 	.word	0x0800d5c9
 800c484:	0800d5f7 	.word	0x0800d5f7

0800c488 <fiprintf>:
 800c488:	b40e      	push	{r1, r2, r3}
 800c48a:	b503      	push	{r0, r1, lr}
 800c48c:	4601      	mov	r1, r0
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	4805      	ldr	r0, [pc, #20]	; (800c4a8 <fiprintf+0x20>)
 800c492:	f853 2b04 	ldr.w	r2, [r3], #4
 800c496:	6800      	ldr	r0, [r0, #0]
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	f000 f891 	bl	800c5c0 <_vfiprintf_r>
 800c49e:	b002      	add	sp, #8
 800c4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4a4:	b003      	add	sp, #12
 800c4a6:	4770      	bx	lr
 800c4a8:	24000014 	.word	0x24000014

0800c4ac <malloc>:
 800c4ac:	4b02      	ldr	r3, [pc, #8]	; (800c4b8 <malloc+0xc>)
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	f7ff bf1b 	b.w	800c2ec <_malloc_r>
 800c4b6:	bf00      	nop
 800c4b8:	24000014 	.word	0x24000014

0800c4bc <__malloc_lock>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <__malloc_lock+0x8>)
 800c4be:	f000 bdc3 	b.w	800d048 <__retarget_lock_acquire_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	24000584 	.word	0x24000584

0800c4c8 <__malloc_unlock>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	; (800c4d0 <__malloc_unlock+0x8>)
 800c4ca:	f000 bdbe 	b.w	800d04a <__retarget_lock_release_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	24000584 	.word	0x24000584

0800c4d4 <_free_r>:
 800c4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4d6:	2900      	cmp	r1, #0
 800c4d8:	d044      	beq.n	800c564 <_free_r+0x90>
 800c4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4de:	9001      	str	r0, [sp, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4e6:	bfb8      	it	lt
 800c4e8:	18e4      	addlt	r4, r4, r3
 800c4ea:	f7ff ffe7 	bl	800c4bc <__malloc_lock>
 800c4ee:	4a1e      	ldr	r2, [pc, #120]	; (800c568 <_free_r+0x94>)
 800c4f0:	9801      	ldr	r0, [sp, #4]
 800c4f2:	6813      	ldr	r3, [r2, #0]
 800c4f4:	b933      	cbnz	r3, 800c504 <_free_r+0x30>
 800c4f6:	6063      	str	r3, [r4, #4]
 800c4f8:	6014      	str	r4, [r2, #0]
 800c4fa:	b003      	add	sp, #12
 800c4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c500:	f7ff bfe2 	b.w	800c4c8 <__malloc_unlock>
 800c504:	42a3      	cmp	r3, r4
 800c506:	d908      	bls.n	800c51a <_free_r+0x46>
 800c508:	6825      	ldr	r5, [r4, #0]
 800c50a:	1961      	adds	r1, r4, r5
 800c50c:	428b      	cmp	r3, r1
 800c50e:	bf01      	itttt	eq
 800c510:	6819      	ldreq	r1, [r3, #0]
 800c512:	685b      	ldreq	r3, [r3, #4]
 800c514:	1949      	addeq	r1, r1, r5
 800c516:	6021      	streq	r1, [r4, #0]
 800c518:	e7ed      	b.n	800c4f6 <_free_r+0x22>
 800c51a:	461a      	mov	r2, r3
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	b10b      	cbz	r3, 800c524 <_free_r+0x50>
 800c520:	42a3      	cmp	r3, r4
 800c522:	d9fa      	bls.n	800c51a <_free_r+0x46>
 800c524:	6811      	ldr	r1, [r2, #0]
 800c526:	1855      	adds	r5, r2, r1
 800c528:	42a5      	cmp	r5, r4
 800c52a:	d10b      	bne.n	800c544 <_free_r+0x70>
 800c52c:	6824      	ldr	r4, [r4, #0]
 800c52e:	4421      	add	r1, r4
 800c530:	1854      	adds	r4, r2, r1
 800c532:	42a3      	cmp	r3, r4
 800c534:	6011      	str	r1, [r2, #0]
 800c536:	d1e0      	bne.n	800c4fa <_free_r+0x26>
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	6053      	str	r3, [r2, #4]
 800c53e:	4421      	add	r1, r4
 800c540:	6011      	str	r1, [r2, #0]
 800c542:	e7da      	b.n	800c4fa <_free_r+0x26>
 800c544:	d902      	bls.n	800c54c <_free_r+0x78>
 800c546:	230c      	movs	r3, #12
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	e7d6      	b.n	800c4fa <_free_r+0x26>
 800c54c:	6825      	ldr	r5, [r4, #0]
 800c54e:	1961      	adds	r1, r4, r5
 800c550:	428b      	cmp	r3, r1
 800c552:	bf04      	itt	eq
 800c554:	6819      	ldreq	r1, [r3, #0]
 800c556:	685b      	ldreq	r3, [r3, #4]
 800c558:	6063      	str	r3, [r4, #4]
 800c55a:	bf04      	itt	eq
 800c55c:	1949      	addeq	r1, r1, r5
 800c55e:	6021      	streq	r1, [r4, #0]
 800c560:	6054      	str	r4, [r2, #4]
 800c562:	e7ca      	b.n	800c4fa <_free_r+0x26>
 800c564:	b003      	add	sp, #12
 800c566:	bd30      	pop	{r4, r5, pc}
 800c568:	24000578 	.word	0x24000578

0800c56c <__sfputc_r>:
 800c56c:	6893      	ldr	r3, [r2, #8]
 800c56e:	3b01      	subs	r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	b410      	push	{r4}
 800c574:	6093      	str	r3, [r2, #8]
 800c576:	da08      	bge.n	800c58a <__sfputc_r+0x1e>
 800c578:	6994      	ldr	r4, [r2, #24]
 800c57a:	42a3      	cmp	r3, r4
 800c57c:	db01      	blt.n	800c582 <__sfputc_r+0x16>
 800c57e:	290a      	cmp	r1, #10
 800c580:	d103      	bne.n	800c58a <__sfputc_r+0x1e>
 800c582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c586:	f000 badf 	b.w	800cb48 <__swbuf_r>
 800c58a:	6813      	ldr	r3, [r2, #0]
 800c58c:	1c58      	adds	r0, r3, #1
 800c58e:	6010      	str	r0, [r2, #0]
 800c590:	7019      	strb	r1, [r3, #0]
 800c592:	4608      	mov	r0, r1
 800c594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <__sfputs_r>:
 800c59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59c:	4606      	mov	r6, r0
 800c59e:	460f      	mov	r7, r1
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	18d5      	adds	r5, r2, r3
 800c5a4:	42ac      	cmp	r4, r5
 800c5a6:	d101      	bne.n	800c5ac <__sfputs_r+0x12>
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e007      	b.n	800c5bc <__sfputs_r+0x22>
 800c5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b0:	463a      	mov	r2, r7
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7ff ffda 	bl	800c56c <__sfputc_r>
 800c5b8:	1c43      	adds	r3, r0, #1
 800c5ba:	d1f3      	bne.n	800c5a4 <__sfputs_r+0xa>
 800c5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5c0 <_vfiprintf_r>:
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	460d      	mov	r5, r1
 800c5c6:	b09d      	sub	sp, #116	; 0x74
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	4698      	mov	r8, r3
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	b118      	cbz	r0, 800c5d8 <_vfiprintf_r+0x18>
 800c5d0:	6983      	ldr	r3, [r0, #24]
 800c5d2:	b90b      	cbnz	r3, 800c5d8 <_vfiprintf_r+0x18>
 800c5d4:	f000 fc9a 	bl	800cf0c <__sinit>
 800c5d8:	4b89      	ldr	r3, [pc, #548]	; (800c800 <_vfiprintf_r+0x240>)
 800c5da:	429d      	cmp	r5, r3
 800c5dc:	d11b      	bne.n	800c616 <_vfiprintf_r+0x56>
 800c5de:	6875      	ldr	r5, [r6, #4]
 800c5e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5e2:	07d9      	lsls	r1, r3, #31
 800c5e4:	d405      	bmi.n	800c5f2 <_vfiprintf_r+0x32>
 800c5e6:	89ab      	ldrh	r3, [r5, #12]
 800c5e8:	059a      	lsls	r2, r3, #22
 800c5ea:	d402      	bmi.n	800c5f2 <_vfiprintf_r+0x32>
 800c5ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ee:	f000 fd2b 	bl	800d048 <__retarget_lock_acquire_recursive>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	071b      	lsls	r3, r3, #28
 800c5f6:	d501      	bpl.n	800c5fc <_vfiprintf_r+0x3c>
 800c5f8:	692b      	ldr	r3, [r5, #16]
 800c5fa:	b9eb      	cbnz	r3, 800c638 <_vfiprintf_r+0x78>
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	4630      	mov	r0, r6
 800c600:	f000 faf4 	bl	800cbec <__swsetup_r>
 800c604:	b1c0      	cbz	r0, 800c638 <_vfiprintf_r+0x78>
 800c606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c608:	07dc      	lsls	r4, r3, #31
 800c60a:	d50e      	bpl.n	800c62a <_vfiprintf_r+0x6a>
 800c60c:	f04f 30ff 	mov.w	r0, #4294967295
 800c610:	b01d      	add	sp, #116	; 0x74
 800c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c616:	4b7b      	ldr	r3, [pc, #492]	; (800c804 <_vfiprintf_r+0x244>)
 800c618:	429d      	cmp	r5, r3
 800c61a:	d101      	bne.n	800c620 <_vfiprintf_r+0x60>
 800c61c:	68b5      	ldr	r5, [r6, #8]
 800c61e:	e7df      	b.n	800c5e0 <_vfiprintf_r+0x20>
 800c620:	4b79      	ldr	r3, [pc, #484]	; (800c808 <_vfiprintf_r+0x248>)
 800c622:	429d      	cmp	r5, r3
 800c624:	bf08      	it	eq
 800c626:	68f5      	ldreq	r5, [r6, #12]
 800c628:	e7da      	b.n	800c5e0 <_vfiprintf_r+0x20>
 800c62a:	89ab      	ldrh	r3, [r5, #12]
 800c62c:	0598      	lsls	r0, r3, #22
 800c62e:	d4ed      	bmi.n	800c60c <_vfiprintf_r+0x4c>
 800c630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c632:	f000 fd0a 	bl	800d04a <__retarget_lock_release_recursive>
 800c636:	e7e9      	b.n	800c60c <_vfiprintf_r+0x4c>
 800c638:	2300      	movs	r3, #0
 800c63a:	9309      	str	r3, [sp, #36]	; 0x24
 800c63c:	2320      	movs	r3, #32
 800c63e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c642:	f8cd 800c 	str.w	r8, [sp, #12]
 800c646:	2330      	movs	r3, #48	; 0x30
 800c648:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c80c <_vfiprintf_r+0x24c>
 800c64c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c650:	f04f 0901 	mov.w	r9, #1
 800c654:	4623      	mov	r3, r4
 800c656:	469a      	mov	sl, r3
 800c658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c65c:	b10a      	cbz	r2, 800c662 <_vfiprintf_r+0xa2>
 800c65e:	2a25      	cmp	r2, #37	; 0x25
 800c660:	d1f9      	bne.n	800c656 <_vfiprintf_r+0x96>
 800c662:	ebba 0b04 	subs.w	fp, sl, r4
 800c666:	d00b      	beq.n	800c680 <_vfiprintf_r+0xc0>
 800c668:	465b      	mov	r3, fp
 800c66a:	4622      	mov	r2, r4
 800c66c:	4629      	mov	r1, r5
 800c66e:	4630      	mov	r0, r6
 800c670:	f7ff ff93 	bl	800c59a <__sfputs_r>
 800c674:	3001      	adds	r0, #1
 800c676:	f000 80aa 	beq.w	800c7ce <_vfiprintf_r+0x20e>
 800c67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c67c:	445a      	add	r2, fp
 800c67e:	9209      	str	r2, [sp, #36]	; 0x24
 800c680:	f89a 3000 	ldrb.w	r3, [sl]
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 80a2 	beq.w	800c7ce <_vfiprintf_r+0x20e>
 800c68a:	2300      	movs	r3, #0
 800c68c:	f04f 32ff 	mov.w	r2, #4294967295
 800c690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c694:	f10a 0a01 	add.w	sl, sl, #1
 800c698:	9304      	str	r3, [sp, #16]
 800c69a:	9307      	str	r3, [sp, #28]
 800c69c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6a0:	931a      	str	r3, [sp, #104]	; 0x68
 800c6a2:	4654      	mov	r4, sl
 800c6a4:	2205      	movs	r2, #5
 800c6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6aa:	4858      	ldr	r0, [pc, #352]	; (800c80c <_vfiprintf_r+0x24c>)
 800c6ac:	f7f3 fe38 	bl	8000320 <memchr>
 800c6b0:	9a04      	ldr	r2, [sp, #16]
 800c6b2:	b9d8      	cbnz	r0, 800c6ec <_vfiprintf_r+0x12c>
 800c6b4:	06d1      	lsls	r1, r2, #27
 800c6b6:	bf44      	itt	mi
 800c6b8:	2320      	movmi	r3, #32
 800c6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6be:	0713      	lsls	r3, r2, #28
 800c6c0:	bf44      	itt	mi
 800c6c2:	232b      	movmi	r3, #43	; 0x2b
 800c6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ce:	d015      	beq.n	800c6fc <_vfiprintf_r+0x13c>
 800c6d0:	9a07      	ldr	r2, [sp, #28]
 800c6d2:	4654      	mov	r4, sl
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f04f 0c0a 	mov.w	ip, #10
 800c6da:	4621      	mov	r1, r4
 800c6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6e0:	3b30      	subs	r3, #48	; 0x30
 800c6e2:	2b09      	cmp	r3, #9
 800c6e4:	d94e      	bls.n	800c784 <_vfiprintf_r+0x1c4>
 800c6e6:	b1b0      	cbz	r0, 800c716 <_vfiprintf_r+0x156>
 800c6e8:	9207      	str	r2, [sp, #28]
 800c6ea:	e014      	b.n	800c716 <_vfiprintf_r+0x156>
 800c6ec:	eba0 0308 	sub.w	r3, r0, r8
 800c6f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	46a2      	mov	sl, r4
 800c6fa:	e7d2      	b.n	800c6a2 <_vfiprintf_r+0xe2>
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	1d19      	adds	r1, r3, #4
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	9103      	str	r1, [sp, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	bfbb      	ittet	lt
 800c708:	425b      	neglt	r3, r3
 800c70a:	f042 0202 	orrlt.w	r2, r2, #2
 800c70e:	9307      	strge	r3, [sp, #28]
 800c710:	9307      	strlt	r3, [sp, #28]
 800c712:	bfb8      	it	lt
 800c714:	9204      	strlt	r2, [sp, #16]
 800c716:	7823      	ldrb	r3, [r4, #0]
 800c718:	2b2e      	cmp	r3, #46	; 0x2e
 800c71a:	d10c      	bne.n	800c736 <_vfiprintf_r+0x176>
 800c71c:	7863      	ldrb	r3, [r4, #1]
 800c71e:	2b2a      	cmp	r3, #42	; 0x2a
 800c720:	d135      	bne.n	800c78e <_vfiprintf_r+0x1ce>
 800c722:	9b03      	ldr	r3, [sp, #12]
 800c724:	1d1a      	adds	r2, r3, #4
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	9203      	str	r2, [sp, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	bfb8      	it	lt
 800c72e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c732:	3402      	adds	r4, #2
 800c734:	9305      	str	r3, [sp, #20]
 800c736:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c81c <_vfiprintf_r+0x25c>
 800c73a:	7821      	ldrb	r1, [r4, #0]
 800c73c:	2203      	movs	r2, #3
 800c73e:	4650      	mov	r0, sl
 800c740:	f7f3 fdee 	bl	8000320 <memchr>
 800c744:	b140      	cbz	r0, 800c758 <_vfiprintf_r+0x198>
 800c746:	2340      	movs	r3, #64	; 0x40
 800c748:	eba0 000a 	sub.w	r0, r0, sl
 800c74c:	fa03 f000 	lsl.w	r0, r3, r0
 800c750:	9b04      	ldr	r3, [sp, #16]
 800c752:	4303      	orrs	r3, r0
 800c754:	3401      	adds	r4, #1
 800c756:	9304      	str	r3, [sp, #16]
 800c758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75c:	482c      	ldr	r0, [pc, #176]	; (800c810 <_vfiprintf_r+0x250>)
 800c75e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c762:	2206      	movs	r2, #6
 800c764:	f7f3 fddc 	bl	8000320 <memchr>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d03f      	beq.n	800c7ec <_vfiprintf_r+0x22c>
 800c76c:	4b29      	ldr	r3, [pc, #164]	; (800c814 <_vfiprintf_r+0x254>)
 800c76e:	bb1b      	cbnz	r3, 800c7b8 <_vfiprintf_r+0x1f8>
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	3307      	adds	r3, #7
 800c774:	f023 0307 	bic.w	r3, r3, #7
 800c778:	3308      	adds	r3, #8
 800c77a:	9303      	str	r3, [sp, #12]
 800c77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c77e:	443b      	add	r3, r7
 800c780:	9309      	str	r3, [sp, #36]	; 0x24
 800c782:	e767      	b.n	800c654 <_vfiprintf_r+0x94>
 800c784:	fb0c 3202 	mla	r2, ip, r2, r3
 800c788:	460c      	mov	r4, r1
 800c78a:	2001      	movs	r0, #1
 800c78c:	e7a5      	b.n	800c6da <_vfiprintf_r+0x11a>
 800c78e:	2300      	movs	r3, #0
 800c790:	3401      	adds	r4, #1
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	4619      	mov	r1, r3
 800c796:	f04f 0c0a 	mov.w	ip, #10
 800c79a:	4620      	mov	r0, r4
 800c79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a0:	3a30      	subs	r2, #48	; 0x30
 800c7a2:	2a09      	cmp	r2, #9
 800c7a4:	d903      	bls.n	800c7ae <_vfiprintf_r+0x1ee>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0c5      	beq.n	800c736 <_vfiprintf_r+0x176>
 800c7aa:	9105      	str	r1, [sp, #20]
 800c7ac:	e7c3      	b.n	800c736 <_vfiprintf_r+0x176>
 800c7ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e7f0      	b.n	800c79a <_vfiprintf_r+0x1da>
 800c7b8:	ab03      	add	r3, sp, #12
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	462a      	mov	r2, r5
 800c7be:	4b16      	ldr	r3, [pc, #88]	; (800c818 <_vfiprintf_r+0x258>)
 800c7c0:	a904      	add	r1, sp, #16
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f3af 8000 	nop.w
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	1c78      	adds	r0, r7, #1
 800c7cc:	d1d6      	bne.n	800c77c <_vfiprintf_r+0x1bc>
 800c7ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d0:	07d9      	lsls	r1, r3, #31
 800c7d2:	d405      	bmi.n	800c7e0 <_vfiprintf_r+0x220>
 800c7d4:	89ab      	ldrh	r3, [r5, #12]
 800c7d6:	059a      	lsls	r2, r3, #22
 800c7d8:	d402      	bmi.n	800c7e0 <_vfiprintf_r+0x220>
 800c7da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7dc:	f000 fc35 	bl	800d04a <__retarget_lock_release_recursive>
 800c7e0:	89ab      	ldrh	r3, [r5, #12]
 800c7e2:	065b      	lsls	r3, r3, #25
 800c7e4:	f53f af12 	bmi.w	800c60c <_vfiprintf_r+0x4c>
 800c7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ea:	e711      	b.n	800c610 <_vfiprintf_r+0x50>
 800c7ec:	ab03      	add	r3, sp, #12
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	4b09      	ldr	r3, [pc, #36]	; (800c818 <_vfiprintf_r+0x258>)
 800c7f4:	a904      	add	r1, sp, #16
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f000 f880 	bl	800c8fc <_printf_i>
 800c7fc:	e7e4      	b.n	800c7c8 <_vfiprintf_r+0x208>
 800c7fe:	bf00      	nop
 800c800:	0800d74c 	.word	0x0800d74c
 800c804:	0800d76c 	.word	0x0800d76c
 800c808:	0800d72c 	.word	0x0800d72c
 800c80c:	0800d6f9 	.word	0x0800d6f9
 800c810:	0800d703 	.word	0x0800d703
 800c814:	00000000 	.word	0x00000000
 800c818:	0800c59b 	.word	0x0800c59b
 800c81c:	0800d6ff 	.word	0x0800d6ff

0800c820 <_printf_common>:
 800c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c824:	4616      	mov	r6, r2
 800c826:	4699      	mov	r9, r3
 800c828:	688a      	ldr	r2, [r1, #8]
 800c82a:	690b      	ldr	r3, [r1, #16]
 800c82c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c830:	4293      	cmp	r3, r2
 800c832:	bfb8      	it	lt
 800c834:	4613      	movlt	r3, r2
 800c836:	6033      	str	r3, [r6, #0]
 800c838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c83c:	4607      	mov	r7, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	b10a      	cbz	r2, 800c846 <_printf_common+0x26>
 800c842:	3301      	adds	r3, #1
 800c844:	6033      	str	r3, [r6, #0]
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	0699      	lsls	r1, r3, #26
 800c84a:	bf42      	ittt	mi
 800c84c:	6833      	ldrmi	r3, [r6, #0]
 800c84e:	3302      	addmi	r3, #2
 800c850:	6033      	strmi	r3, [r6, #0]
 800c852:	6825      	ldr	r5, [r4, #0]
 800c854:	f015 0506 	ands.w	r5, r5, #6
 800c858:	d106      	bne.n	800c868 <_printf_common+0x48>
 800c85a:	f104 0a19 	add.w	sl, r4, #25
 800c85e:	68e3      	ldr	r3, [r4, #12]
 800c860:	6832      	ldr	r2, [r6, #0]
 800c862:	1a9b      	subs	r3, r3, r2
 800c864:	42ab      	cmp	r3, r5
 800c866:	dc26      	bgt.n	800c8b6 <_printf_common+0x96>
 800c868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c86c:	1e13      	subs	r3, r2, #0
 800c86e:	6822      	ldr	r2, [r4, #0]
 800c870:	bf18      	it	ne
 800c872:	2301      	movne	r3, #1
 800c874:	0692      	lsls	r2, r2, #26
 800c876:	d42b      	bmi.n	800c8d0 <_printf_common+0xb0>
 800c878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c87c:	4649      	mov	r1, r9
 800c87e:	4638      	mov	r0, r7
 800c880:	47c0      	blx	r8
 800c882:	3001      	adds	r0, #1
 800c884:	d01e      	beq.n	800c8c4 <_printf_common+0xa4>
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	68e5      	ldr	r5, [r4, #12]
 800c88a:	6832      	ldr	r2, [r6, #0]
 800c88c:	f003 0306 	and.w	r3, r3, #6
 800c890:	2b04      	cmp	r3, #4
 800c892:	bf08      	it	eq
 800c894:	1aad      	subeq	r5, r5, r2
 800c896:	68a3      	ldr	r3, [r4, #8]
 800c898:	6922      	ldr	r2, [r4, #16]
 800c89a:	bf0c      	ite	eq
 800c89c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8a0:	2500      	movne	r5, #0
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	bfc4      	itt	gt
 800c8a6:	1a9b      	subgt	r3, r3, r2
 800c8a8:	18ed      	addgt	r5, r5, r3
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	341a      	adds	r4, #26
 800c8ae:	42b5      	cmp	r5, r6
 800c8b0:	d11a      	bne.n	800c8e8 <_printf_common+0xc8>
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	e008      	b.n	800c8c8 <_printf_common+0xa8>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	4652      	mov	r2, sl
 800c8ba:	4649      	mov	r1, r9
 800c8bc:	4638      	mov	r0, r7
 800c8be:	47c0      	blx	r8
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d103      	bne.n	800c8cc <_printf_common+0xac>
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	e7c6      	b.n	800c85e <_printf_common+0x3e>
 800c8d0:	18e1      	adds	r1, r4, r3
 800c8d2:	1c5a      	adds	r2, r3, #1
 800c8d4:	2030      	movs	r0, #48	; 0x30
 800c8d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8da:	4422      	add	r2, r4
 800c8dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8e4:	3302      	adds	r3, #2
 800c8e6:	e7c7      	b.n	800c878 <_printf_common+0x58>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	47c0      	blx	r8
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	d0e6      	beq.n	800c8c4 <_printf_common+0xa4>
 800c8f6:	3601      	adds	r6, #1
 800c8f8:	e7d9      	b.n	800c8ae <_printf_common+0x8e>
	...

0800c8fc <_printf_i>:
 800c8fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c900:	7e0f      	ldrb	r7, [r1, #24]
 800c902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c904:	2f78      	cmp	r7, #120	; 0x78
 800c906:	4691      	mov	r9, r2
 800c908:	4680      	mov	r8, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	469a      	mov	sl, r3
 800c90e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c912:	d807      	bhi.n	800c924 <_printf_i+0x28>
 800c914:	2f62      	cmp	r7, #98	; 0x62
 800c916:	d80a      	bhi.n	800c92e <_printf_i+0x32>
 800c918:	2f00      	cmp	r7, #0
 800c91a:	f000 80d8 	beq.w	800cace <_printf_i+0x1d2>
 800c91e:	2f58      	cmp	r7, #88	; 0x58
 800c920:	f000 80a3 	beq.w	800ca6a <_printf_i+0x16e>
 800c924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c92c:	e03a      	b.n	800c9a4 <_printf_i+0xa8>
 800c92e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c932:	2b15      	cmp	r3, #21
 800c934:	d8f6      	bhi.n	800c924 <_printf_i+0x28>
 800c936:	a101      	add	r1, pc, #4	; (adr r1, 800c93c <_printf_i+0x40>)
 800c938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c93c:	0800c995 	.word	0x0800c995
 800c940:	0800c9a9 	.word	0x0800c9a9
 800c944:	0800c925 	.word	0x0800c925
 800c948:	0800c925 	.word	0x0800c925
 800c94c:	0800c925 	.word	0x0800c925
 800c950:	0800c925 	.word	0x0800c925
 800c954:	0800c9a9 	.word	0x0800c9a9
 800c958:	0800c925 	.word	0x0800c925
 800c95c:	0800c925 	.word	0x0800c925
 800c960:	0800c925 	.word	0x0800c925
 800c964:	0800c925 	.word	0x0800c925
 800c968:	0800cab5 	.word	0x0800cab5
 800c96c:	0800c9d9 	.word	0x0800c9d9
 800c970:	0800ca97 	.word	0x0800ca97
 800c974:	0800c925 	.word	0x0800c925
 800c978:	0800c925 	.word	0x0800c925
 800c97c:	0800cad7 	.word	0x0800cad7
 800c980:	0800c925 	.word	0x0800c925
 800c984:	0800c9d9 	.word	0x0800c9d9
 800c988:	0800c925 	.word	0x0800c925
 800c98c:	0800c925 	.word	0x0800c925
 800c990:	0800ca9f 	.word	0x0800ca9f
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	1d1a      	adds	r2, r3, #4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	602a      	str	r2, [r5, #0]
 800c99c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e0a3      	b.n	800caf0 <_printf_i+0x1f4>
 800c9a8:	6820      	ldr	r0, [r4, #0]
 800c9aa:	6829      	ldr	r1, [r5, #0]
 800c9ac:	0606      	lsls	r6, r0, #24
 800c9ae:	f101 0304 	add.w	r3, r1, #4
 800c9b2:	d50a      	bpl.n	800c9ca <_printf_i+0xce>
 800c9b4:	680e      	ldr	r6, [r1, #0]
 800c9b6:	602b      	str	r3, [r5, #0]
 800c9b8:	2e00      	cmp	r6, #0
 800c9ba:	da03      	bge.n	800c9c4 <_printf_i+0xc8>
 800c9bc:	232d      	movs	r3, #45	; 0x2d
 800c9be:	4276      	negs	r6, r6
 800c9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9c4:	485e      	ldr	r0, [pc, #376]	; (800cb40 <_printf_i+0x244>)
 800c9c6:	230a      	movs	r3, #10
 800c9c8:	e019      	b.n	800c9fe <_printf_i+0x102>
 800c9ca:	680e      	ldr	r6, [r1, #0]
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9d2:	bf18      	it	ne
 800c9d4:	b236      	sxthne	r6, r6
 800c9d6:	e7ef      	b.n	800c9b8 <_printf_i+0xbc>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	6820      	ldr	r0, [r4, #0]
 800c9dc:	1d19      	adds	r1, r3, #4
 800c9de:	6029      	str	r1, [r5, #0]
 800c9e0:	0601      	lsls	r1, r0, #24
 800c9e2:	d501      	bpl.n	800c9e8 <_printf_i+0xec>
 800c9e4:	681e      	ldr	r6, [r3, #0]
 800c9e6:	e002      	b.n	800c9ee <_printf_i+0xf2>
 800c9e8:	0646      	lsls	r6, r0, #25
 800c9ea:	d5fb      	bpl.n	800c9e4 <_printf_i+0xe8>
 800c9ec:	881e      	ldrh	r6, [r3, #0]
 800c9ee:	4854      	ldr	r0, [pc, #336]	; (800cb40 <_printf_i+0x244>)
 800c9f0:	2f6f      	cmp	r7, #111	; 0x6f
 800c9f2:	bf0c      	ite	eq
 800c9f4:	2308      	moveq	r3, #8
 800c9f6:	230a      	movne	r3, #10
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9fe:	6865      	ldr	r5, [r4, #4]
 800ca00:	60a5      	str	r5, [r4, #8]
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	bfa2      	ittt	ge
 800ca06:	6821      	ldrge	r1, [r4, #0]
 800ca08:	f021 0104 	bicge.w	r1, r1, #4
 800ca0c:	6021      	strge	r1, [r4, #0]
 800ca0e:	b90e      	cbnz	r6, 800ca14 <_printf_i+0x118>
 800ca10:	2d00      	cmp	r5, #0
 800ca12:	d04d      	beq.n	800cab0 <_printf_i+0x1b4>
 800ca14:	4615      	mov	r5, r2
 800ca16:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca1a:	fb03 6711 	mls	r7, r3, r1, r6
 800ca1e:	5dc7      	ldrb	r7, [r0, r7]
 800ca20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca24:	4637      	mov	r7, r6
 800ca26:	42bb      	cmp	r3, r7
 800ca28:	460e      	mov	r6, r1
 800ca2a:	d9f4      	bls.n	800ca16 <_printf_i+0x11a>
 800ca2c:	2b08      	cmp	r3, #8
 800ca2e:	d10b      	bne.n	800ca48 <_printf_i+0x14c>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	07de      	lsls	r6, r3, #31
 800ca34:	d508      	bpl.n	800ca48 <_printf_i+0x14c>
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	6861      	ldr	r1, [r4, #4]
 800ca3a:	4299      	cmp	r1, r3
 800ca3c:	bfde      	ittt	le
 800ca3e:	2330      	movle	r3, #48	; 0x30
 800ca40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca48:	1b52      	subs	r2, r2, r5
 800ca4a:	6122      	str	r2, [r4, #16]
 800ca4c:	f8cd a000 	str.w	sl, [sp]
 800ca50:	464b      	mov	r3, r9
 800ca52:	aa03      	add	r2, sp, #12
 800ca54:	4621      	mov	r1, r4
 800ca56:	4640      	mov	r0, r8
 800ca58:	f7ff fee2 	bl	800c820 <_printf_common>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d14c      	bne.n	800cafa <_printf_i+0x1fe>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	b004      	add	sp, #16
 800ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6a:	4835      	ldr	r0, [pc, #212]	; (800cb40 <_printf_i+0x244>)
 800ca6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca70:	6829      	ldr	r1, [r5, #0]
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca78:	6029      	str	r1, [r5, #0]
 800ca7a:	061d      	lsls	r5, r3, #24
 800ca7c:	d514      	bpl.n	800caa8 <_printf_i+0x1ac>
 800ca7e:	07df      	lsls	r7, r3, #31
 800ca80:	bf44      	itt	mi
 800ca82:	f043 0320 	orrmi.w	r3, r3, #32
 800ca86:	6023      	strmi	r3, [r4, #0]
 800ca88:	b91e      	cbnz	r6, 800ca92 <_printf_i+0x196>
 800ca8a:	6823      	ldr	r3, [r4, #0]
 800ca8c:	f023 0320 	bic.w	r3, r3, #32
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	2310      	movs	r3, #16
 800ca94:	e7b0      	b.n	800c9f8 <_printf_i+0xfc>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	f043 0320 	orr.w	r3, r3, #32
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	2378      	movs	r3, #120	; 0x78
 800caa0:	4828      	ldr	r0, [pc, #160]	; (800cb44 <_printf_i+0x248>)
 800caa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800caa6:	e7e3      	b.n	800ca70 <_printf_i+0x174>
 800caa8:	0659      	lsls	r1, r3, #25
 800caaa:	bf48      	it	mi
 800caac:	b2b6      	uxthmi	r6, r6
 800caae:	e7e6      	b.n	800ca7e <_printf_i+0x182>
 800cab0:	4615      	mov	r5, r2
 800cab2:	e7bb      	b.n	800ca2c <_printf_i+0x130>
 800cab4:	682b      	ldr	r3, [r5, #0]
 800cab6:	6826      	ldr	r6, [r4, #0]
 800cab8:	6961      	ldr	r1, [r4, #20]
 800caba:	1d18      	adds	r0, r3, #4
 800cabc:	6028      	str	r0, [r5, #0]
 800cabe:	0635      	lsls	r5, r6, #24
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	d501      	bpl.n	800cac8 <_printf_i+0x1cc>
 800cac4:	6019      	str	r1, [r3, #0]
 800cac6:	e002      	b.n	800cace <_printf_i+0x1d2>
 800cac8:	0670      	lsls	r0, r6, #25
 800caca:	d5fb      	bpl.n	800cac4 <_printf_i+0x1c8>
 800cacc:	8019      	strh	r1, [r3, #0]
 800cace:	2300      	movs	r3, #0
 800cad0:	6123      	str	r3, [r4, #16]
 800cad2:	4615      	mov	r5, r2
 800cad4:	e7ba      	b.n	800ca4c <_printf_i+0x150>
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	1d1a      	adds	r2, r3, #4
 800cada:	602a      	str	r2, [r5, #0]
 800cadc:	681d      	ldr	r5, [r3, #0]
 800cade:	6862      	ldr	r2, [r4, #4]
 800cae0:	2100      	movs	r1, #0
 800cae2:	4628      	mov	r0, r5
 800cae4:	f7f3 fc1c 	bl	8000320 <memchr>
 800cae8:	b108      	cbz	r0, 800caee <_printf_i+0x1f2>
 800caea:	1b40      	subs	r0, r0, r5
 800caec:	6060      	str	r0, [r4, #4]
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	2300      	movs	r3, #0
 800caf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf8:	e7a8      	b.n	800ca4c <_printf_i+0x150>
 800cafa:	6923      	ldr	r3, [r4, #16]
 800cafc:	462a      	mov	r2, r5
 800cafe:	4649      	mov	r1, r9
 800cb00:	4640      	mov	r0, r8
 800cb02:	47d0      	blx	sl
 800cb04:	3001      	adds	r0, #1
 800cb06:	d0ab      	beq.n	800ca60 <_printf_i+0x164>
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	079b      	lsls	r3, r3, #30
 800cb0c:	d413      	bmi.n	800cb36 <_printf_i+0x23a>
 800cb0e:	68e0      	ldr	r0, [r4, #12]
 800cb10:	9b03      	ldr	r3, [sp, #12]
 800cb12:	4298      	cmp	r0, r3
 800cb14:	bfb8      	it	lt
 800cb16:	4618      	movlt	r0, r3
 800cb18:	e7a4      	b.n	800ca64 <_printf_i+0x168>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	4649      	mov	r1, r9
 800cb20:	4640      	mov	r0, r8
 800cb22:	47d0      	blx	sl
 800cb24:	3001      	adds	r0, #1
 800cb26:	d09b      	beq.n	800ca60 <_printf_i+0x164>
 800cb28:	3501      	adds	r5, #1
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	9903      	ldr	r1, [sp, #12]
 800cb2e:	1a5b      	subs	r3, r3, r1
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dcf2      	bgt.n	800cb1a <_printf_i+0x21e>
 800cb34:	e7eb      	b.n	800cb0e <_printf_i+0x212>
 800cb36:	2500      	movs	r5, #0
 800cb38:	f104 0619 	add.w	r6, r4, #25
 800cb3c:	e7f5      	b.n	800cb2a <_printf_i+0x22e>
 800cb3e:	bf00      	nop
 800cb40:	0800d70a 	.word	0x0800d70a
 800cb44:	0800d71b 	.word	0x0800d71b

0800cb48 <__swbuf_r>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	460e      	mov	r6, r1
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	4605      	mov	r5, r0
 800cb50:	b118      	cbz	r0, 800cb5a <__swbuf_r+0x12>
 800cb52:	6983      	ldr	r3, [r0, #24]
 800cb54:	b90b      	cbnz	r3, 800cb5a <__swbuf_r+0x12>
 800cb56:	f000 f9d9 	bl	800cf0c <__sinit>
 800cb5a:	4b21      	ldr	r3, [pc, #132]	; (800cbe0 <__swbuf_r+0x98>)
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	d12b      	bne.n	800cbb8 <__swbuf_r+0x70>
 800cb60:	686c      	ldr	r4, [r5, #4]
 800cb62:	69a3      	ldr	r3, [r4, #24]
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	071a      	lsls	r2, r3, #28
 800cb6a:	d52f      	bpl.n	800cbcc <__swbuf_r+0x84>
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b36b      	cbz	r3, 800cbcc <__swbuf_r+0x84>
 800cb70:	6923      	ldr	r3, [r4, #16]
 800cb72:	6820      	ldr	r0, [r4, #0]
 800cb74:	1ac0      	subs	r0, r0, r3
 800cb76:	6963      	ldr	r3, [r4, #20]
 800cb78:	b2f6      	uxtb	r6, r6
 800cb7a:	4283      	cmp	r3, r0
 800cb7c:	4637      	mov	r7, r6
 800cb7e:	dc04      	bgt.n	800cb8a <__swbuf_r+0x42>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	f000 f92e 	bl	800cde4 <_fflush_r>
 800cb88:	bb30      	cbnz	r0, 800cbd8 <__swbuf_r+0x90>
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	6022      	str	r2, [r4, #0]
 800cb96:	701e      	strb	r6, [r3, #0]
 800cb98:	6963      	ldr	r3, [r4, #20]
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	4283      	cmp	r3, r0
 800cb9e:	d004      	beq.n	800cbaa <__swbuf_r+0x62>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	07db      	lsls	r3, r3, #31
 800cba4:	d506      	bpl.n	800cbb4 <__swbuf_r+0x6c>
 800cba6:	2e0a      	cmp	r6, #10
 800cba8:	d104      	bne.n	800cbb4 <__swbuf_r+0x6c>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 f919 	bl	800cde4 <_fflush_r>
 800cbb2:	b988      	cbnz	r0, 800cbd8 <__swbuf_r+0x90>
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	; (800cbe4 <__swbuf_r+0x9c>)
 800cbba:	429c      	cmp	r4, r3
 800cbbc:	d101      	bne.n	800cbc2 <__swbuf_r+0x7a>
 800cbbe:	68ac      	ldr	r4, [r5, #8]
 800cbc0:	e7cf      	b.n	800cb62 <__swbuf_r+0x1a>
 800cbc2:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <__swbuf_r+0xa0>)
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	bf08      	it	eq
 800cbc8:	68ec      	ldreq	r4, [r5, #12]
 800cbca:	e7ca      	b.n	800cb62 <__swbuf_r+0x1a>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 f80c 	bl	800cbec <__swsetup_r>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d0cb      	beq.n	800cb70 <__swbuf_r+0x28>
 800cbd8:	f04f 37ff 	mov.w	r7, #4294967295
 800cbdc:	e7ea      	b.n	800cbb4 <__swbuf_r+0x6c>
 800cbde:	bf00      	nop
 800cbe0:	0800d74c 	.word	0x0800d74c
 800cbe4:	0800d76c 	.word	0x0800d76c
 800cbe8:	0800d72c 	.word	0x0800d72c

0800cbec <__swsetup_r>:
 800cbec:	4b32      	ldr	r3, [pc, #200]	; (800ccb8 <__swsetup_r+0xcc>)
 800cbee:	b570      	push	{r4, r5, r6, lr}
 800cbf0:	681d      	ldr	r5, [r3, #0]
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	b125      	cbz	r5, 800cc02 <__swsetup_r+0x16>
 800cbf8:	69ab      	ldr	r3, [r5, #24]
 800cbfa:	b913      	cbnz	r3, 800cc02 <__swsetup_r+0x16>
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f000 f985 	bl	800cf0c <__sinit>
 800cc02:	4b2e      	ldr	r3, [pc, #184]	; (800ccbc <__swsetup_r+0xd0>)
 800cc04:	429c      	cmp	r4, r3
 800cc06:	d10f      	bne.n	800cc28 <__swsetup_r+0x3c>
 800cc08:	686c      	ldr	r4, [r5, #4]
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc10:	0719      	lsls	r1, r3, #28
 800cc12:	d42c      	bmi.n	800cc6e <__swsetup_r+0x82>
 800cc14:	06dd      	lsls	r5, r3, #27
 800cc16:	d411      	bmi.n	800cc3c <__swsetup_r+0x50>
 800cc18:	2309      	movs	r3, #9
 800cc1a:	6033      	str	r3, [r6, #0]
 800cc1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc20:	81a3      	strh	r3, [r4, #12]
 800cc22:	f04f 30ff 	mov.w	r0, #4294967295
 800cc26:	e03e      	b.n	800cca6 <__swsetup_r+0xba>
 800cc28:	4b25      	ldr	r3, [pc, #148]	; (800ccc0 <__swsetup_r+0xd4>)
 800cc2a:	429c      	cmp	r4, r3
 800cc2c:	d101      	bne.n	800cc32 <__swsetup_r+0x46>
 800cc2e:	68ac      	ldr	r4, [r5, #8]
 800cc30:	e7eb      	b.n	800cc0a <__swsetup_r+0x1e>
 800cc32:	4b24      	ldr	r3, [pc, #144]	; (800ccc4 <__swsetup_r+0xd8>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	bf08      	it	eq
 800cc38:	68ec      	ldreq	r4, [r5, #12]
 800cc3a:	e7e6      	b.n	800cc0a <__swsetup_r+0x1e>
 800cc3c:	0758      	lsls	r0, r3, #29
 800cc3e:	d512      	bpl.n	800cc66 <__swsetup_r+0x7a>
 800cc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc42:	b141      	cbz	r1, 800cc56 <__swsetup_r+0x6a>
 800cc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc48:	4299      	cmp	r1, r3
 800cc4a:	d002      	beq.n	800cc52 <__swsetup_r+0x66>
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	f7ff fc41 	bl	800c4d4 <_free_r>
 800cc52:	2300      	movs	r3, #0
 800cc54:	6363      	str	r3, [r4, #52]	; 0x34
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	6063      	str	r3, [r4, #4]
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	f043 0308 	orr.w	r3, r3, #8
 800cc6c:	81a3      	strh	r3, [r4, #12]
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	b94b      	cbnz	r3, 800cc86 <__swsetup_r+0x9a>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc7c:	d003      	beq.n	800cc86 <__swsetup_r+0x9a>
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4630      	mov	r0, r6
 800cc82:	f000 fa09 	bl	800d098 <__smakebuf_r>
 800cc86:	89a0      	ldrh	r0, [r4, #12]
 800cc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc8c:	f010 0301 	ands.w	r3, r0, #1
 800cc90:	d00a      	beq.n	800cca8 <__swsetup_r+0xbc>
 800cc92:	2300      	movs	r3, #0
 800cc94:	60a3      	str	r3, [r4, #8]
 800cc96:	6963      	ldr	r3, [r4, #20]
 800cc98:	425b      	negs	r3, r3
 800cc9a:	61a3      	str	r3, [r4, #24]
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	b943      	cbnz	r3, 800ccb2 <__swsetup_r+0xc6>
 800cca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cca4:	d1ba      	bne.n	800cc1c <__swsetup_r+0x30>
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	0781      	lsls	r1, r0, #30
 800ccaa:	bf58      	it	pl
 800ccac:	6963      	ldrpl	r3, [r4, #20]
 800ccae:	60a3      	str	r3, [r4, #8]
 800ccb0:	e7f4      	b.n	800cc9c <__swsetup_r+0xb0>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	e7f7      	b.n	800cca6 <__swsetup_r+0xba>
 800ccb6:	bf00      	nop
 800ccb8:	24000014 	.word	0x24000014
 800ccbc:	0800d74c 	.word	0x0800d74c
 800ccc0:	0800d76c 	.word	0x0800d76c
 800ccc4:	0800d72c 	.word	0x0800d72c

0800ccc8 <abort>:
 800ccc8:	b508      	push	{r3, lr}
 800ccca:	2006      	movs	r0, #6
 800cccc:	f000 fa4c 	bl	800d168 <raise>
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	f7f4 ff93 	bl	8001bfc <_exit>
	...

0800ccd8 <__sflush_r>:
 800ccd8:	898a      	ldrh	r2, [r1, #12]
 800ccda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccde:	4605      	mov	r5, r0
 800cce0:	0710      	lsls	r0, r2, #28
 800cce2:	460c      	mov	r4, r1
 800cce4:	d458      	bmi.n	800cd98 <__sflush_r+0xc0>
 800cce6:	684b      	ldr	r3, [r1, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dc05      	bgt.n	800ccf8 <__sflush_r+0x20>
 800ccec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	dc02      	bgt.n	800ccf8 <__sflush_r+0x20>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	d0f9      	beq.n	800ccf2 <__sflush_r+0x1a>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd04:	682f      	ldr	r7, [r5, #0]
 800cd06:	602b      	str	r3, [r5, #0]
 800cd08:	d032      	beq.n	800cd70 <__sflush_r+0x98>
 800cd0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd0c:	89a3      	ldrh	r3, [r4, #12]
 800cd0e:	075a      	lsls	r2, r3, #29
 800cd10:	d505      	bpl.n	800cd1e <__sflush_r+0x46>
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	1ac0      	subs	r0, r0, r3
 800cd16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd18:	b10b      	cbz	r3, 800cd1e <__sflush_r+0x46>
 800cd1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd1c:	1ac0      	subs	r0, r0, r3
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4602      	mov	r2, r0
 800cd22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd24:	6a21      	ldr	r1, [r4, #32]
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b0      	blx	r6
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	d106      	bne.n	800cd3e <__sflush_r+0x66>
 800cd30:	6829      	ldr	r1, [r5, #0]
 800cd32:	291d      	cmp	r1, #29
 800cd34:	d82c      	bhi.n	800cd90 <__sflush_r+0xb8>
 800cd36:	4a2a      	ldr	r2, [pc, #168]	; (800cde0 <__sflush_r+0x108>)
 800cd38:	40ca      	lsrs	r2, r1
 800cd3a:	07d6      	lsls	r6, r2, #31
 800cd3c:	d528      	bpl.n	800cd90 <__sflush_r+0xb8>
 800cd3e:	2200      	movs	r2, #0
 800cd40:	6062      	str	r2, [r4, #4]
 800cd42:	04d9      	lsls	r1, r3, #19
 800cd44:	6922      	ldr	r2, [r4, #16]
 800cd46:	6022      	str	r2, [r4, #0]
 800cd48:	d504      	bpl.n	800cd54 <__sflush_r+0x7c>
 800cd4a:	1c42      	adds	r2, r0, #1
 800cd4c:	d101      	bne.n	800cd52 <__sflush_r+0x7a>
 800cd4e:	682b      	ldr	r3, [r5, #0]
 800cd50:	b903      	cbnz	r3, 800cd54 <__sflush_r+0x7c>
 800cd52:	6560      	str	r0, [r4, #84]	; 0x54
 800cd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd56:	602f      	str	r7, [r5, #0]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d0ca      	beq.n	800ccf2 <__sflush_r+0x1a>
 800cd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd60:	4299      	cmp	r1, r3
 800cd62:	d002      	beq.n	800cd6a <__sflush_r+0x92>
 800cd64:	4628      	mov	r0, r5
 800cd66:	f7ff fbb5 	bl	800c4d4 <_free_r>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd6e:	e7c1      	b.n	800ccf4 <__sflush_r+0x1c>
 800cd70:	6a21      	ldr	r1, [r4, #32]
 800cd72:	2301      	movs	r3, #1
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b0      	blx	r6
 800cd78:	1c41      	adds	r1, r0, #1
 800cd7a:	d1c7      	bne.n	800cd0c <__sflush_r+0x34>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0c4      	beq.n	800cd0c <__sflush_r+0x34>
 800cd82:	2b1d      	cmp	r3, #29
 800cd84:	d001      	beq.n	800cd8a <__sflush_r+0xb2>
 800cd86:	2b16      	cmp	r3, #22
 800cd88:	d101      	bne.n	800cd8e <__sflush_r+0xb6>
 800cd8a:	602f      	str	r7, [r5, #0]
 800cd8c:	e7b1      	b.n	800ccf2 <__sflush_r+0x1a>
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	e7ad      	b.n	800ccf4 <__sflush_r+0x1c>
 800cd98:	690f      	ldr	r7, [r1, #16]
 800cd9a:	2f00      	cmp	r7, #0
 800cd9c:	d0a9      	beq.n	800ccf2 <__sflush_r+0x1a>
 800cd9e:	0793      	lsls	r3, r2, #30
 800cda0:	680e      	ldr	r6, [r1, #0]
 800cda2:	bf08      	it	eq
 800cda4:	694b      	ldreq	r3, [r1, #20]
 800cda6:	600f      	str	r7, [r1, #0]
 800cda8:	bf18      	it	ne
 800cdaa:	2300      	movne	r3, #0
 800cdac:	eba6 0807 	sub.w	r8, r6, r7
 800cdb0:	608b      	str	r3, [r1, #8]
 800cdb2:	f1b8 0f00 	cmp.w	r8, #0
 800cdb6:	dd9c      	ble.n	800ccf2 <__sflush_r+0x1a>
 800cdb8:	6a21      	ldr	r1, [r4, #32]
 800cdba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdbc:	4643      	mov	r3, r8
 800cdbe:	463a      	mov	r2, r7
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b0      	blx	r6
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	dc06      	bgt.n	800cdd6 <__sflush_r+0xfe>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd4:	e78e      	b.n	800ccf4 <__sflush_r+0x1c>
 800cdd6:	4407      	add	r7, r0
 800cdd8:	eba8 0800 	sub.w	r8, r8, r0
 800cddc:	e7e9      	b.n	800cdb2 <__sflush_r+0xda>
 800cdde:	bf00      	nop
 800cde0:	20400001 	.word	0x20400001

0800cde4 <_fflush_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	690b      	ldr	r3, [r1, #16]
 800cde8:	4605      	mov	r5, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	b913      	cbnz	r3, 800cdf4 <_fflush_r+0x10>
 800cdee:	2500      	movs	r5, #0
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	b118      	cbz	r0, 800cdfe <_fflush_r+0x1a>
 800cdf6:	6983      	ldr	r3, [r0, #24]
 800cdf8:	b90b      	cbnz	r3, 800cdfe <_fflush_r+0x1a>
 800cdfa:	f000 f887 	bl	800cf0c <__sinit>
 800cdfe:	4b14      	ldr	r3, [pc, #80]	; (800ce50 <_fflush_r+0x6c>)
 800ce00:	429c      	cmp	r4, r3
 800ce02:	d11b      	bne.n	800ce3c <_fflush_r+0x58>
 800ce04:	686c      	ldr	r4, [r5, #4]
 800ce06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0ef      	beq.n	800cdee <_fflush_r+0xa>
 800ce0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce10:	07d0      	lsls	r0, r2, #31
 800ce12:	d404      	bmi.n	800ce1e <_fflush_r+0x3a>
 800ce14:	0599      	lsls	r1, r3, #22
 800ce16:	d402      	bmi.n	800ce1e <_fflush_r+0x3a>
 800ce18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce1a:	f000 f915 	bl	800d048 <__retarget_lock_acquire_recursive>
 800ce1e:	4628      	mov	r0, r5
 800ce20:	4621      	mov	r1, r4
 800ce22:	f7ff ff59 	bl	800ccd8 <__sflush_r>
 800ce26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce28:	07da      	lsls	r2, r3, #31
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	d4e0      	bmi.n	800cdf0 <_fflush_r+0xc>
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	059b      	lsls	r3, r3, #22
 800ce32:	d4dd      	bmi.n	800cdf0 <_fflush_r+0xc>
 800ce34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce36:	f000 f908 	bl	800d04a <__retarget_lock_release_recursive>
 800ce3a:	e7d9      	b.n	800cdf0 <_fflush_r+0xc>
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <_fflush_r+0x70>)
 800ce3e:	429c      	cmp	r4, r3
 800ce40:	d101      	bne.n	800ce46 <_fflush_r+0x62>
 800ce42:	68ac      	ldr	r4, [r5, #8]
 800ce44:	e7df      	b.n	800ce06 <_fflush_r+0x22>
 800ce46:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <_fflush_r+0x74>)
 800ce48:	429c      	cmp	r4, r3
 800ce4a:	bf08      	it	eq
 800ce4c:	68ec      	ldreq	r4, [r5, #12]
 800ce4e:	e7da      	b.n	800ce06 <_fflush_r+0x22>
 800ce50:	0800d74c 	.word	0x0800d74c
 800ce54:	0800d76c 	.word	0x0800d76c
 800ce58:	0800d72c 	.word	0x0800d72c

0800ce5c <std>:
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	b510      	push	{r4, lr}
 800ce60:	4604      	mov	r4, r0
 800ce62:	e9c0 3300 	strd	r3, r3, [r0]
 800ce66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce6a:	6083      	str	r3, [r0, #8]
 800ce6c:	8181      	strh	r1, [r0, #12]
 800ce6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce70:	81c2      	strh	r2, [r0, #14]
 800ce72:	6183      	str	r3, [r0, #24]
 800ce74:	4619      	mov	r1, r3
 800ce76:	2208      	movs	r2, #8
 800ce78:	305c      	adds	r0, #92	; 0x5c
 800ce7a:	f7fd fbcf 	bl	800a61c <memset>
 800ce7e:	4b05      	ldr	r3, [pc, #20]	; (800ce94 <std+0x38>)
 800ce80:	6263      	str	r3, [r4, #36]	; 0x24
 800ce82:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <std+0x3c>)
 800ce84:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce86:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <std+0x40>)
 800ce88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <std+0x44>)
 800ce8c:	6224      	str	r4, [r4, #32]
 800ce8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce90:	bd10      	pop	{r4, pc}
 800ce92:	bf00      	nop
 800ce94:	0800d1a1 	.word	0x0800d1a1
 800ce98:	0800d1c3 	.word	0x0800d1c3
 800ce9c:	0800d1fb 	.word	0x0800d1fb
 800cea0:	0800d21f 	.word	0x0800d21f

0800cea4 <_cleanup_r>:
 800cea4:	4901      	ldr	r1, [pc, #4]	; (800ceac <_cleanup_r+0x8>)
 800cea6:	f000 b8af 	b.w	800d008 <_fwalk_reent>
 800ceaa:	bf00      	nop
 800ceac:	0800cde5 	.word	0x0800cde5

0800ceb0 <__sfmoreglue>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	2268      	movs	r2, #104	; 0x68
 800ceb4:	1e4d      	subs	r5, r1, #1
 800ceb6:	4355      	muls	r5, r2
 800ceb8:	460e      	mov	r6, r1
 800ceba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cebe:	f7ff fa15 	bl	800c2ec <_malloc_r>
 800cec2:	4604      	mov	r4, r0
 800cec4:	b140      	cbz	r0, 800ced8 <__sfmoreglue+0x28>
 800cec6:	2100      	movs	r1, #0
 800cec8:	e9c0 1600 	strd	r1, r6, [r0]
 800cecc:	300c      	adds	r0, #12
 800cece:	60a0      	str	r0, [r4, #8]
 800ced0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ced4:	f7fd fba2 	bl	800a61c <memset>
 800ced8:	4620      	mov	r0, r4
 800ceda:	bd70      	pop	{r4, r5, r6, pc}

0800cedc <__sfp_lock_acquire>:
 800cedc:	4801      	ldr	r0, [pc, #4]	; (800cee4 <__sfp_lock_acquire+0x8>)
 800cede:	f000 b8b3 	b.w	800d048 <__retarget_lock_acquire_recursive>
 800cee2:	bf00      	nop
 800cee4:	24000585 	.word	0x24000585

0800cee8 <__sfp_lock_release>:
 800cee8:	4801      	ldr	r0, [pc, #4]	; (800cef0 <__sfp_lock_release+0x8>)
 800ceea:	f000 b8ae 	b.w	800d04a <__retarget_lock_release_recursive>
 800ceee:	bf00      	nop
 800cef0:	24000585 	.word	0x24000585

0800cef4 <__sinit_lock_acquire>:
 800cef4:	4801      	ldr	r0, [pc, #4]	; (800cefc <__sinit_lock_acquire+0x8>)
 800cef6:	f000 b8a7 	b.w	800d048 <__retarget_lock_acquire_recursive>
 800cefa:	bf00      	nop
 800cefc:	24000586 	.word	0x24000586

0800cf00 <__sinit_lock_release>:
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <__sinit_lock_release+0x8>)
 800cf02:	f000 b8a2 	b.w	800d04a <__retarget_lock_release_recursive>
 800cf06:	bf00      	nop
 800cf08:	24000586 	.word	0x24000586

0800cf0c <__sinit>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	4604      	mov	r4, r0
 800cf10:	f7ff fff0 	bl	800cef4 <__sinit_lock_acquire>
 800cf14:	69a3      	ldr	r3, [r4, #24]
 800cf16:	b11b      	cbz	r3, 800cf20 <__sinit+0x14>
 800cf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf1c:	f7ff bff0 	b.w	800cf00 <__sinit_lock_release>
 800cf20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf24:	6523      	str	r3, [r4, #80]	; 0x50
 800cf26:	4b13      	ldr	r3, [pc, #76]	; (800cf74 <__sinit+0x68>)
 800cf28:	4a13      	ldr	r2, [pc, #76]	; (800cf78 <__sinit+0x6c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	bf04      	itt	eq
 800cf32:	2301      	moveq	r3, #1
 800cf34:	61a3      	streq	r3, [r4, #24]
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 f820 	bl	800cf7c <__sfp>
 800cf3c:	6060      	str	r0, [r4, #4]
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 f81c 	bl	800cf7c <__sfp>
 800cf44:	60a0      	str	r0, [r4, #8]
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 f818 	bl	800cf7c <__sfp>
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	60e0      	str	r0, [r4, #12]
 800cf50:	2104      	movs	r1, #4
 800cf52:	6860      	ldr	r0, [r4, #4]
 800cf54:	f7ff ff82 	bl	800ce5c <std>
 800cf58:	68a0      	ldr	r0, [r4, #8]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	2109      	movs	r1, #9
 800cf5e:	f7ff ff7d 	bl	800ce5c <std>
 800cf62:	68e0      	ldr	r0, [r4, #12]
 800cf64:	2202      	movs	r2, #2
 800cf66:	2112      	movs	r1, #18
 800cf68:	f7ff ff78 	bl	800ce5c <std>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	61a3      	str	r3, [r4, #24]
 800cf70:	e7d2      	b.n	800cf18 <__sinit+0xc>
 800cf72:	bf00      	nop
 800cf74:	0800d360 	.word	0x0800d360
 800cf78:	0800cea5 	.word	0x0800cea5

0800cf7c <__sfp>:
 800cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7e:	4607      	mov	r7, r0
 800cf80:	f7ff ffac 	bl	800cedc <__sfp_lock_acquire>
 800cf84:	4b1e      	ldr	r3, [pc, #120]	; (800d000 <__sfp+0x84>)
 800cf86:	681e      	ldr	r6, [r3, #0]
 800cf88:	69b3      	ldr	r3, [r6, #24]
 800cf8a:	b913      	cbnz	r3, 800cf92 <__sfp+0x16>
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f7ff ffbd 	bl	800cf0c <__sinit>
 800cf92:	3648      	adds	r6, #72	; 0x48
 800cf94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	d503      	bpl.n	800cfa4 <__sfp+0x28>
 800cf9c:	6833      	ldr	r3, [r6, #0]
 800cf9e:	b30b      	cbz	r3, 800cfe4 <__sfp+0x68>
 800cfa0:	6836      	ldr	r6, [r6, #0]
 800cfa2:	e7f7      	b.n	800cf94 <__sfp+0x18>
 800cfa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfa8:	b9d5      	cbnz	r5, 800cfe0 <__sfp+0x64>
 800cfaa:	4b16      	ldr	r3, [pc, #88]	; (800d004 <__sfp+0x88>)
 800cfac:	60e3      	str	r3, [r4, #12]
 800cfae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfb2:	6665      	str	r5, [r4, #100]	; 0x64
 800cfb4:	f000 f847 	bl	800d046 <__retarget_lock_init_recursive>
 800cfb8:	f7ff ff96 	bl	800cee8 <__sfp_lock_release>
 800cfbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cfc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cfc4:	6025      	str	r5, [r4, #0]
 800cfc6:	61a5      	str	r5, [r4, #24]
 800cfc8:	2208      	movs	r2, #8
 800cfca:	4629      	mov	r1, r5
 800cfcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cfd0:	f7fd fb24 	bl	800a61c <memset>
 800cfd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cfd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cfdc:	4620      	mov	r0, r4
 800cfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfe0:	3468      	adds	r4, #104	; 0x68
 800cfe2:	e7d9      	b.n	800cf98 <__sfp+0x1c>
 800cfe4:	2104      	movs	r1, #4
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	f7ff ff62 	bl	800ceb0 <__sfmoreglue>
 800cfec:	4604      	mov	r4, r0
 800cfee:	6030      	str	r0, [r6, #0]
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1d5      	bne.n	800cfa0 <__sfp+0x24>
 800cff4:	f7ff ff78 	bl	800cee8 <__sfp_lock_release>
 800cff8:	230c      	movs	r3, #12
 800cffa:	603b      	str	r3, [r7, #0]
 800cffc:	e7ee      	b.n	800cfdc <__sfp+0x60>
 800cffe:	bf00      	nop
 800d000:	0800d360 	.word	0x0800d360
 800d004:	ffff0001 	.word	0xffff0001

0800d008 <_fwalk_reent>:
 800d008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d00c:	4606      	mov	r6, r0
 800d00e:	4688      	mov	r8, r1
 800d010:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d014:	2700      	movs	r7, #0
 800d016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d01a:	f1b9 0901 	subs.w	r9, r9, #1
 800d01e:	d505      	bpl.n	800d02c <_fwalk_reent+0x24>
 800d020:	6824      	ldr	r4, [r4, #0]
 800d022:	2c00      	cmp	r4, #0
 800d024:	d1f7      	bne.n	800d016 <_fwalk_reent+0xe>
 800d026:	4638      	mov	r0, r7
 800d028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02c:	89ab      	ldrh	r3, [r5, #12]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d907      	bls.n	800d042 <_fwalk_reent+0x3a>
 800d032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d036:	3301      	adds	r3, #1
 800d038:	d003      	beq.n	800d042 <_fwalk_reent+0x3a>
 800d03a:	4629      	mov	r1, r5
 800d03c:	4630      	mov	r0, r6
 800d03e:	47c0      	blx	r8
 800d040:	4307      	orrs	r7, r0
 800d042:	3568      	adds	r5, #104	; 0x68
 800d044:	e7e9      	b.n	800d01a <_fwalk_reent+0x12>

0800d046 <__retarget_lock_init_recursive>:
 800d046:	4770      	bx	lr

0800d048 <__retarget_lock_acquire_recursive>:
 800d048:	4770      	bx	lr

0800d04a <__retarget_lock_release_recursive>:
 800d04a:	4770      	bx	lr

0800d04c <__swhatbuf_r>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	460e      	mov	r6, r1
 800d050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d054:	2900      	cmp	r1, #0
 800d056:	b096      	sub	sp, #88	; 0x58
 800d058:	4614      	mov	r4, r2
 800d05a:	461d      	mov	r5, r3
 800d05c:	da08      	bge.n	800d070 <__swhatbuf_r+0x24>
 800d05e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d062:	2200      	movs	r2, #0
 800d064:	602a      	str	r2, [r5, #0]
 800d066:	061a      	lsls	r2, r3, #24
 800d068:	d410      	bmi.n	800d08c <__swhatbuf_r+0x40>
 800d06a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d06e:	e00e      	b.n	800d08e <__swhatbuf_r+0x42>
 800d070:	466a      	mov	r2, sp
 800d072:	f000 f8fb 	bl	800d26c <_fstat_r>
 800d076:	2800      	cmp	r0, #0
 800d078:	dbf1      	blt.n	800d05e <__swhatbuf_r+0x12>
 800d07a:	9a01      	ldr	r2, [sp, #4]
 800d07c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d080:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d084:	425a      	negs	r2, r3
 800d086:	415a      	adcs	r2, r3
 800d088:	602a      	str	r2, [r5, #0]
 800d08a:	e7ee      	b.n	800d06a <__swhatbuf_r+0x1e>
 800d08c:	2340      	movs	r3, #64	; 0x40
 800d08e:	2000      	movs	r0, #0
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	b016      	add	sp, #88	; 0x58
 800d094:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d098 <__smakebuf_r>:
 800d098:	898b      	ldrh	r3, [r1, #12]
 800d09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d09c:	079d      	lsls	r5, r3, #30
 800d09e:	4606      	mov	r6, r0
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	d507      	bpl.n	800d0b4 <__smakebuf_r+0x1c>
 800d0a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	6123      	str	r3, [r4, #16]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	6163      	str	r3, [r4, #20]
 800d0b0:	b002      	add	sp, #8
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	ab01      	add	r3, sp, #4
 800d0b6:	466a      	mov	r2, sp
 800d0b8:	f7ff ffc8 	bl	800d04c <__swhatbuf_r>
 800d0bc:	9900      	ldr	r1, [sp, #0]
 800d0be:	4605      	mov	r5, r0
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff f913 	bl	800c2ec <_malloc_r>
 800d0c6:	b948      	cbnz	r0, 800d0dc <__smakebuf_r+0x44>
 800d0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0cc:	059a      	lsls	r2, r3, #22
 800d0ce:	d4ef      	bmi.n	800d0b0 <__smakebuf_r+0x18>
 800d0d0:	f023 0303 	bic.w	r3, r3, #3
 800d0d4:	f043 0302 	orr.w	r3, r3, #2
 800d0d8:	81a3      	strh	r3, [r4, #12]
 800d0da:	e7e3      	b.n	800d0a4 <__smakebuf_r+0xc>
 800d0dc:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <__smakebuf_r+0x7c>)
 800d0de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	6020      	str	r0, [r4, #0]
 800d0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e8:	81a3      	strh	r3, [r4, #12]
 800d0ea:	9b00      	ldr	r3, [sp, #0]
 800d0ec:	6163      	str	r3, [r4, #20]
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	6120      	str	r0, [r4, #16]
 800d0f2:	b15b      	cbz	r3, 800d10c <__smakebuf_r+0x74>
 800d0f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	f000 f8c9 	bl	800d290 <_isatty_r>
 800d0fe:	b128      	cbz	r0, 800d10c <__smakebuf_r+0x74>
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	81a3      	strh	r3, [r4, #12]
 800d10c:	89a0      	ldrh	r0, [r4, #12]
 800d10e:	4305      	orrs	r5, r0
 800d110:	81a5      	strh	r5, [r4, #12]
 800d112:	e7cd      	b.n	800d0b0 <__smakebuf_r+0x18>
 800d114:	0800cea5 	.word	0x0800cea5

0800d118 <_raise_r>:
 800d118:	291f      	cmp	r1, #31
 800d11a:	b538      	push	{r3, r4, r5, lr}
 800d11c:	4604      	mov	r4, r0
 800d11e:	460d      	mov	r5, r1
 800d120:	d904      	bls.n	800d12c <_raise_r+0x14>
 800d122:	2316      	movs	r3, #22
 800d124:	6003      	str	r3, [r0, #0]
 800d126:	f04f 30ff 	mov.w	r0, #4294967295
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d12e:	b112      	cbz	r2, 800d136 <_raise_r+0x1e>
 800d130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d134:	b94b      	cbnz	r3, 800d14a <_raise_r+0x32>
 800d136:	4620      	mov	r0, r4
 800d138:	f000 f830 	bl	800d19c <_getpid_r>
 800d13c:	462a      	mov	r2, r5
 800d13e:	4601      	mov	r1, r0
 800d140:	4620      	mov	r0, r4
 800d142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d146:	f000 b817 	b.w	800d178 <_kill_r>
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d00a      	beq.n	800d164 <_raise_r+0x4c>
 800d14e:	1c59      	adds	r1, r3, #1
 800d150:	d103      	bne.n	800d15a <_raise_r+0x42>
 800d152:	2316      	movs	r3, #22
 800d154:	6003      	str	r3, [r0, #0]
 800d156:	2001      	movs	r0, #1
 800d158:	e7e7      	b.n	800d12a <_raise_r+0x12>
 800d15a:	2400      	movs	r4, #0
 800d15c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d160:	4628      	mov	r0, r5
 800d162:	4798      	blx	r3
 800d164:	2000      	movs	r0, #0
 800d166:	e7e0      	b.n	800d12a <_raise_r+0x12>

0800d168 <raise>:
 800d168:	4b02      	ldr	r3, [pc, #8]	; (800d174 <raise+0xc>)
 800d16a:	4601      	mov	r1, r0
 800d16c:	6818      	ldr	r0, [r3, #0]
 800d16e:	f7ff bfd3 	b.w	800d118 <_raise_r>
 800d172:	bf00      	nop
 800d174:	24000014 	.word	0x24000014

0800d178 <_kill_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d07      	ldr	r5, [pc, #28]	; (800d198 <_kill_r+0x20>)
 800d17c:	2300      	movs	r3, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	4608      	mov	r0, r1
 800d182:	4611      	mov	r1, r2
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	f7f4 fd29 	bl	8001bdc <_kill>
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	d102      	bne.n	800d194 <_kill_r+0x1c>
 800d18e:	682b      	ldr	r3, [r5, #0]
 800d190:	b103      	cbz	r3, 800d194 <_kill_r+0x1c>
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	bd38      	pop	{r3, r4, r5, pc}
 800d196:	bf00      	nop
 800d198:	24000580 	.word	0x24000580

0800d19c <_getpid_r>:
 800d19c:	f7f4 bd16 	b.w	8001bcc <_getpid>

0800d1a0 <__sread>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a8:	f000 f894 	bl	800d2d4 <_read_r>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	bfab      	itete	ge
 800d1b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d1b4:	181b      	addge	r3, r3, r0
 800d1b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1ba:	bfac      	ite	ge
 800d1bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1be:	81a3      	strhlt	r3, [r4, #12]
 800d1c0:	bd10      	pop	{r4, pc}

0800d1c2 <__swrite>:
 800d1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c6:	461f      	mov	r7, r3
 800d1c8:	898b      	ldrh	r3, [r1, #12]
 800d1ca:	05db      	lsls	r3, r3, #23
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	d505      	bpl.n	800d1e0 <__swrite+0x1e>
 800d1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d8:	2302      	movs	r3, #2
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f000 f868 	bl	800d2b0 <_lseek_r>
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f6:	f000 b817 	b.w	800d228 <_write_r>

0800d1fa <__sseek>:
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d202:	f000 f855 	bl	800d2b0 <_lseek_r>
 800d206:	1c43      	adds	r3, r0, #1
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	bf15      	itete	ne
 800d20c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d20e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d216:	81a3      	strheq	r3, [r4, #12]
 800d218:	bf18      	it	ne
 800d21a:	81a3      	strhne	r3, [r4, #12]
 800d21c:	bd10      	pop	{r4, pc}

0800d21e <__sclose>:
 800d21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d222:	f000 b813 	b.w	800d24c <_close_r>
	...

0800d228 <_write_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	; (800d248 <_write_r+0x20>)
 800d22c:	4604      	mov	r4, r0
 800d22e:	4608      	mov	r0, r1
 800d230:	4611      	mov	r1, r2
 800d232:	2200      	movs	r2, #0
 800d234:	602a      	str	r2, [r5, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	f7f4 fd07 	bl	8001c4a <_write>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_write_r+0x1e>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_write_r+0x1e>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	24000580 	.word	0x24000580

0800d24c <_close_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	; (800d268 <_close_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f4 fd13 	bl	8001c82 <_close>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_close_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_close_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	24000580 	.word	0x24000580

0800d26c <_fstat_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d07      	ldr	r5, [pc, #28]	; (800d28c <_fstat_r+0x20>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	4611      	mov	r1, r2
 800d278:	602b      	str	r3, [r5, #0]
 800d27a:	f7f4 fd0e 	bl	8001c9a <_fstat>
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	d102      	bne.n	800d288 <_fstat_r+0x1c>
 800d282:	682b      	ldr	r3, [r5, #0]
 800d284:	b103      	cbz	r3, 800d288 <_fstat_r+0x1c>
 800d286:	6023      	str	r3, [r4, #0]
 800d288:	bd38      	pop	{r3, r4, r5, pc}
 800d28a:	bf00      	nop
 800d28c:	24000580 	.word	0x24000580

0800d290 <_isatty_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d06      	ldr	r5, [pc, #24]	; (800d2ac <_isatty_r+0x1c>)
 800d294:	2300      	movs	r3, #0
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	602b      	str	r3, [r5, #0]
 800d29c:	f7f4 fd0d 	bl	8001cba <_isatty>
 800d2a0:	1c43      	adds	r3, r0, #1
 800d2a2:	d102      	bne.n	800d2aa <_isatty_r+0x1a>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	b103      	cbz	r3, 800d2aa <_isatty_r+0x1a>
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	24000580 	.word	0x24000580

0800d2b0 <_lseek_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4d07      	ldr	r5, [pc, #28]	; (800d2d0 <_lseek_r+0x20>)
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	602a      	str	r2, [r5, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f7f4 fd06 	bl	8001cd0 <_lseek>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_lseek_r+0x1e>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_lseek_r+0x1e>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	24000580 	.word	0x24000580

0800d2d4 <_read_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d07      	ldr	r5, [pc, #28]	; (800d2f4 <_read_r+0x20>)
 800d2d8:	4604      	mov	r4, r0
 800d2da:	4608      	mov	r0, r1
 800d2dc:	4611      	mov	r1, r2
 800d2de:	2200      	movs	r2, #0
 800d2e0:	602a      	str	r2, [r5, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f7f4 fc94 	bl	8001c10 <_read>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_read_r+0x1e>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_read_r+0x1e>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	24000580 	.word	0x24000580

0800d2f8 <_init>:
 800d2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fa:	bf00      	nop
 800d2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2fe:	bc08      	pop	{r3}
 800d300:	469e      	mov	lr, r3
 800d302:	4770      	bx	lr

0800d304 <_fini>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	bf00      	nop
 800d308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30a:	bc08      	pop	{r3}
 800d30c:	469e      	mov	lr, r3
 800d30e:	4770      	bx	lr
